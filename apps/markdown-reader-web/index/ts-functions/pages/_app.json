[{"id":"FKTMQdgYaUftXrRL","commentsInside":[],"name":"MyApp","slug":"my-app","relativePathFromProjectRoot":"/bundles/markdown-reader/markdown-reader-web/src/pages/_app.tsx","srcFileId":"/pages/_app","operationFolderName":"markdown-reader-web","relativeFilePathFromSrc":"/pages/_app.tsx","relativeOperationBasePathFromProjectRoot":"/bundles/markdown-reader/markdown-reader-web","operationName":"markdown-reader-web","description":"","parameters":[],"returnType":{"rawType":"JSX.Element","typeDefinition":{"optional":false,"$ref":"#/definitions/JSX.Element"},"typeCoverage":0,"isArray":false,"isEnum":false,"isObject":true,"isPrimitive":false,"isEnumLiteral":false},"size":{"characters":756,"lines":26,"bytes":756,"bytesPerCharacter":1,"charactersPerfLine":29.076923076923077,"linesPerFile":26,"numberOfFiles":1},"rawText":"\n\n// Only holds serverRuntimeConfig and publicRuntimeConfig\n\nfunction MyApp({ Component, pageProps }: AppProps) {\n  const router = useRouter();\n  const path = router.route.slice(1);\n  const pageKey = (path === \"\" ? \"index\" : path) as keyof typeof pagesObject;\n  const page = pages.find((x) => x.key === pageKey);\n  const siteName = \"Docs\";\n  const title = page ? `${getPageTitle(page)} - ${siteName}` : siteName;\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <Head>\n        <title>{title}</title>\n\n        <link\n          rel=\"stylesheet\"\n          href=\"https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.6.0/build/styles/default.min.css\"\n        />\n      </Head>\n      <Component {...pageProps} />\n    </QueryClientProvider>\n  );\n}","maxIndentationDepth":5}]