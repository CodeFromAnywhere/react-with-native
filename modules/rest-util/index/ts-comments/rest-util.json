[{"id":"RJCRAsDkqXLrEyCx","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/tools/parsing/rest-util/src/rest-util.ts","srcFileId":"/rest-util","operationFolderName":"rest-util","relativeFilePathFromSrc":"/rest-util.ts","relativeOperationBasePathFromProjectRoot":"/tools/parsing/rest-util","operationName":"rest-util","comment":"","rawStatement":"import { makeArray } from \"js-util\";","parameters":{},"types":[],"firstLine":1,"lastLine":4},{"id":"RJCRAsDkqXLrEyCx","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/tools/parsing/rest-util/src/rest-util.ts","srcFileId":"/rest-util","operationFolderName":"rest-util","relativeFilePathFromSrc":"/rest-util.ts","relativeOperationBasePathFromProjectRoot":"/tools/parsing/rest-util","operationName":"rest-util","comment":"converts a query string into an object that can be used as a body","rawStatement":"export const bodyFromQueryString = (\n  /**\n   * NB: everything AFTER The \"?\", so this should be the format: x=x&y=y&z=z&z=z2\n   */\n  query?: string\n): QueryableObject | undefined => {\n  if (!query) return;\n\n  const keyValueObjectArray = query.split(\"&\")?.map((x) => {\n    const [key, value] = x.split(\"=\");\n    return { key, value };\n  });\n\n  const all = keyValueObjectArray?.reduce((object, keyValue) => {\n    // NB: if that key already exists, let's make it an array and add this new value\n    if (object[keyValue.key]) {\n      object[keyValue.key] = [\n        ...makeArray(object[keyValue.key]),\n        keyValue.value,\n      ];\n      return object;\n    }\n    // Otherwise, just add the new key/value to the object.\n    return { ...object, [keyValue.key]: keyValue.value };\n  }, {} as QueryableObject);\n\n  return all;\n};","parameters":{},"types":[],"firstLine":9,"lastLine":11},{"id":"RJCRAsDkqXLrEyCx","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/tools/parsing/rest-util/src/rest-util.ts","srcFileId":"/rest-util","operationFolderName":"rest-util","relativeFilePathFromSrc":"/rest-util.ts","relativeOperationBasePathFromProjectRoot":"/tools/parsing/rest-util","operationName":"rest-util","comment":"NB: doesn't work in node.","rawStatement":"export const getFirstQueryStrings = (query: QueryableObject) => {\n  const queryStrings = Object.keys(query).map((key) => {\n    const value = query[key];\n    return Array.isArray(value) ? value[0] : value;\n  });\n\n  return queryStrings;\n};","parameters":{},"types":["nb"],"firstLine":58,"lastLine":58},{"id":"RJCRAsDkqXLrEyCx","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/tools/parsing/rest-util/src/rest-util.ts","srcFileId":"/rest-util","operationFolderName":"rest-util","relativeFilePathFromSrc":"/rest-util.ts","relativeOperationBasePathFromProjectRoot":"/tools/parsing/rest-util","operationName":"rest-util","comment":"Query keys can be string or string[] or undefined.\n\nThis function takes only the first string if it's an array...","rawStatement":"export const getFirstQueryStrings = (query: QueryableObject) => {\n  const queryStrings = Object.keys(query).map((key) => {\n    const value = query[key];\n    return Array.isArray(value) ? value[0] : value;\n  });\n\n  return queryStrings;\n};","parameters":{},"types":[],"firstLine":60,"lastLine":64}]