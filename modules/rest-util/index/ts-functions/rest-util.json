[{"id":"BGatEloaHvniESYq","commentsInside":[],"rawText":" (\n  /**\n   * NB: everything AFTER The \"?\", so this should be the format: x=x&y=y&z=z&z=z2\n   */\n  query?: string\n): QueryableObject | undefined => {\n  if (!query) return;\n\n  const keyValueObjectArray = query.split(\"&\")?.map((x) => {\n    const [key, value] = x.split(\"=\");\n    return { key, value };\n  });\n\n  const all = keyValueObjectArray?.reduce((object, keyValue) => {\n    // NB: if that key already exists, let's make it an array and add this new value\n    if (object[keyValue.key]) {\n      object[keyValue.key] = [\n        ...makeArray(object[keyValue.key]),\n        keyValue.value,\n      ];\n      return object;\n    }\n    // Otherwise, just add the new key/value to the object.\n    return { ...object, [keyValue.key]: keyValue.value };\n  }, {} as QueryableObject);\n\n  return all;\n}","name":"bodyFromQueryString","slug":"body-from-query-string","parameters":[],"description":"converts a query string into an object that can be used as a body","returnType":{"rawType":"QueryableObject | undefined","typeDefinition":{"type":"object","properties":{},"optional":true},"typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":false,"isEnumLiteral":false,"simplifiedSchema":{"properties":[],"type":"object"}},"maxIndentationDepth":4,"relativePathFromProjectRoot":"/tools/parsing/rest-util/src/rest-util.ts","srcFileId":"/rest-util","operationFolderName":"rest-util","relativeFilePathFromSrc":"/rest-util.ts","relativeOperationBasePathFromProjectRoot":"/tools/parsing/rest-util","operationName":"rest-util","size":{"characters":853,"lines":28,"bytes":853,"bytesPerCharacter":1,"charactersPerfLine":30.464285714285715,"linesPerFile":28,"numberOfFiles":1}},{"id":"MoqyYahPCyTPPkcf","commentsInside":[],"rawText":" ([_, value]: [key: string, value: any]) =>\n  value !== undefined && value !== \"\" && value !== null","name":"isValidEntry","slug":"is-valid-entry","parameters":[],"description":"","returnType":{"rawType":"{}","typeDefinition":{"optional":false,"type":"boolean"},"typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":true,"isEnumLiteral":false,"simplifiedSchema":{"type":"boolean"}},"maxIndentationDepth":1,"relativePathFromProjectRoot":"/tools/parsing/rest-util/src/rest-util.ts","srcFileId":"/rest-util","operationFolderName":"rest-util","relativeFilePathFromSrc":"/rest-util.ts","relativeOperationBasePathFromProjectRoot":"/tools/parsing/rest-util","operationName":"rest-util","size":{"characters":99,"lines":2,"bytes":99,"bytesPerCharacter":1,"charactersPerfLine":49.5,"linesPerFile":2,"numberOfFiles":1}},{"id":"hyqzMcXIYRBrrJKt","commentsInside":[],"rawText":" (query?: any) => {\n  const hasQuery =\n    query && Object.entries(query)?.filter(isValidEntry).length > 0;\n  return hasQuery\n    ? \"?\" +\n        Object.entries(query)\n          .filter(isValidEntry)\n          .map(([key, value]) => {\n            const encodedValue = encodeURIComponent(String(value));\n            return `${key}=${encodedValue}`;\n          })\n          .join(\"&\")\n    : \"\";\n}","name":"toQueryString","slug":"to-query-string","parameters":[],"description":"","returnType":{"rawType":"String","typeDefinition":{"optional":false,"type":"string","allOf":[{"transform":["trim"]},{"minLength":1}]},"typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":true,"isEnumLiteral":false,"simplifiedSchema":{"type":"string"}},"maxIndentationDepth":6,"relativePathFromProjectRoot":"/tools/parsing/rest-util/src/rest-util.ts","srcFileId":"/rest-util","operationFolderName":"rest-util","relativeFilePathFromSrc":"/rest-util.ts","relativeOperationBasePathFromProjectRoot":"/tools/parsing/rest-util","operationName":"rest-util","size":{"characters":393,"lines":14,"bytes":393,"bytesPerCharacter":1,"charactersPerfLine":28.071428571428573,"linesPerFile":14,"numberOfFiles":1}},{"id":"ZHsvrcppFHLRCJFL","commentsInside":[],"rawText":" (query: QueryableObject) => {\n  const queryStrings = Object.keys(query).map((key) => {\n    const value = query[key];\n    return Array.isArray(value) ? value[0] : value;\n  });\n\n  return queryStrings;\n}","name":"getFirstQueryStrings","slug":"get-first-query-strings","parameters":[],"description":"NB: doesn't work in node.\n\nQuery keys can be string or string[] or undefined.\n\nThis function takes only the first string if it's an array...","returnType":{"rawType":"any","typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":false,"isEnumLiteral":false},"maxIndentationDepth":2,"relativePathFromProjectRoot":"/tools/parsing/rest-util/src/rest-util.ts","srcFileId":"/rest-util","operationFolderName":"rest-util","relativeFilePathFromSrc":"/rest-util.ts","relativeOperationBasePathFromProjectRoot":"/tools/parsing/rest-util","operationName":"rest-util","size":{"characters":341,"lines":12,"bytes":341,"bytesPerCharacter":1,"charactersPerfLine":28.416666666666668,"linesPerFile":12,"numberOfFiles":1}}]