{
  "createdAt": 1669384205228,
  "updatedAt": 1669384205228,
  "deletedAt": 0,
  "createdFirstAt": 1669384205228,
  "isApiExposed": true,
  "isExported": true,
  "groupAuthorization": {},
  "operationRelativeTypescriptFilePath": "src/findAllProjectMedia.ts",
  "commentsInside": [],
  "rawText": " async (\n  searchQuery?: string,\n  /**\n   * defaults to absolute\n   */\n  returnType?: \"projectRelative\" | \"absolute\"\n): Promise<string[]> => {\n  const projectRoot = getProjectRoot();\n\n  if (!projectRoot) return [];\n\n  const dbPath = path.join(projectRoot, databaseFolderName);\n\n  const operationBasePaths = Object.values(operations).map(\n    (projectRelativePath) => path.join(projectRoot, projectRelativePath)\n  );\n\n  const databaseFolderPaths = operationBasePaths\n    .map((absoluteOperationPath) =>\n      path.join(absoluteOperationPath, databaseFolderName)\n    )\n    .concat(dbPath)\n    .filter(fs.existsSync);\n\n  const dbResults = await explore({\n    basePath: databaseFolderPaths,\n    extension: mediaExtensions,\n    search: searchQuery,\n  });\n\n  const operationResults = await explore({\n    basePath: operationBasePaths,\n    extension: mediaExtensions,\n    ignore: [...generatedFolders, databaseFolderName, sourceFolderName],\n    search: searchQuery,\n  });\n\n  const anywhereResults = await explore({\n    cancelRecursionOn: pathArrayIsOperation,\n    basePath: projectRoot,\n    extension: mediaExtensions,\n    ignore: [databaseFolderName, \"node_modules\", \".git\"],\n  });\n\n  const results = [dbResults, operationResults, anywhereResults]\n    .flat()\n    .map((x) => x.path);\n\n  return returnType === \"projectRelative\"\n    ? results.map((x) => makeRelative(x, projectRoot))\n    : results;\n}",
  "name": "findAllProjectMedia",
  "slug": "find-all-project-media",
  "parameters": [
    {
      "name": "searchQuery",
      "schema": {
        "type": "string"
      },
      "simplifiedSchema": {
        "type": "string"
      },
      "required": false
    },
    {
      "name": "returnType",
      "schema": {
        "type": "string",
        "enum": [
          "projectRelative",
          "absolute"
        ],
        "description": "defaults to absolute"
      },
      "simplifiedSchema": {
        "enum": [
          "projectRelative",
          "absolute"
        ],
        "fullComment": "defaults to absolute",
        "type": "string"
      },
      "required": false
    }
  ],
  "description": "Media:`.png`, `.mp4`, `.mp3`, `.zip`, `.pdf`\n\n- finds all media in all `db` folders. Can be anywhere, so an explore will probably be best.\n- finds all media in every operation in any folder except for `node_modules`, `db`, `src`, `build`, `.[anything]`. (so mostly in `todo`, `docs` and `assets`)\n- find all media in every other folder that is not an operation\n\nReturn all of this as project relative path array",
  "returnType": {
    "rawType": "Promise<string[]>",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 3,
  "size": {
    "characters": 1803,
    "lines": 58,
    "bytes": 1803,
    "bytesPerCharacter": 1,
    "charactersPerLine": 31,
    "linesPerFile": 58,
    "numberOfFiles": 1
  },
  "id": "ifcfknnpqckgjobxfaznyziy"
}