{
  "createdAt": 1669385321295,
  "updatedAt": 1669385321295,
  "deletedAt": 0,
  "createdFirstAt": 1669385321295,
  "isApiExposed": true,
  "isExported": true,
  "groupAuthorization": {},
  "operationRelativeTypescriptFilePath": "src/confirmAuthenticationMethod.ts",
  "commentsInside": [],
  "rawText": " async (\n  /** device id */\n  deviceId: string,\n  method: AuthenticationMethodMethod,\n  /** one time password */\n  otp: number\n) => {\n  /////\n\n  const device = (await db.get(\"Device\")).find((x) => x.id === deviceId);\n\n  if (!device) {\n    return { isSuccessful: false, message: \"Couldn't find device\" };\n  }\n\n  const authenticatedMethod = device.authenticationMethods.find(\n    (m) => m.method === method\n  );\n\n  if (authenticatedMethod?.isAuthenticated) {\n    return {\n      isSuccessful: false,\n      message:\n        \"You already authenticated with this method, please delete it first before you add another one.\",\n    };\n  }\n\n  if (!authenticatedMethod) {\n    return { isSuccessful: false, message: \"Can't find method\" };\n  }\n\n  if ([\"email\", \"phoneNumber\"].includes(method)) {\n    const isSuccessful = otp === authenticatedMethod.otp;\n\n    if (isSuccessful) {\n      // add isAuthenticated to device's authenticationMethods\n\n      const newAuthenticatedMethod: AuthenticationMethod = {\n        ...authenticatedMethod,\n        otp: undefined,\n        isAuthenticated: true,\n      };\n\n      const newauthenticationMethods = device.authenticationMethods.map((x) =>\n        x.method === method && x.otp === otp ? newAuthenticatedMethod : x\n      );\n\n      await db.update(\n        \"Device\",\n        (item) => item.id === deviceId,\n        (old) => ({ ...old, authenticationMethods: newauthenticationMethods })\n      );\n    }\n    return {\n      isSuccessful,\n      message: isSuccessful ? \"Successful\" : \"Incorrect code\",\n    };\n  }\n}",
  "name": "addDeviceAuthenticationMethodConfirm",
  "slug": "add-device-authentication-method-confirm",
  "parameters": [
    {
      "name": "deviceId",
      "schema": {
        "type": "string",
        "description": "device id"
      },
      "simplifiedSchema": {
        "fullComment": "device id",
        "type": "string"
      },
      "required": true
    },
    {
      "name": "method",
      "schema": {
        "$ref": "#/definitions/AuthenticationMethodMethod"
      },
      "simplifiedSchema": {
        "enum": [
          "usernamePassword",
          "phoneNumber",
          "email",
          "apple",
          "google",
          "facebook",
          "twitter",
          "linkedin",
          "github"
        ],
        "fullComment": "Username + password should be the default\n\nEmail OTP, phone number OTP (sms or call or whatsapp), should be optional 2FA methods\n\nAll others can also act as authentication methods, but the token shouldn't be stored",
        "type": "string"
      },
      "required": true
    },
    {
      "name": "otp",
      "schema": {
        "type": "number",
        "description": "one time password"
      },
      "simplifiedSchema": {
        "fullComment": "one time password",
        "type": "number"
      },
      "required": true
    }
  ],
  "description": "adds an `authenticatedMethod` to `Device` after the OTP is correct\n\nFor now, only handles methods `phoneNumber` and `email`\n\nTODO: extrahere the core into `addAuthenticationMethodConfirm` and use it in this one and make also `addPersonAuthenticationMethodConfirm`",
  "returnType": {
    "rawType": "unknown",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 4,
  "size": {
    "characters": 1796,
    "lines": 63,
    "bytes": 1796,
    "bytesPerCharacter": 1,
    "charactersPerLine": 29,
    "linesPerFile": 63,
    "numberOfFiles": 1
  },
  "id": "dkhzevrpkwrocxnurqlguwrx"
}