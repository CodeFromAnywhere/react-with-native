{
  "createdAt": 1669385345888,
  "updatedAt": 1669385345888,
  "deletedAt": 0,
  "createdFirstAt": 1669385345888,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "signupWithContext",
  "slug": "signup-with-context",
  "operationRelativeTypescriptFilePath": "src/signupWithContext.ts",
  "type": {
    "rawType": "(functionContext: import(\"/Users/king/King/operations/tools/user-interfaces/api/function-context-type/build/FunctionContext\").FunctionContext, personData: Pick<import(\"/Users/king/King/operations/tools/purpose/p2p/peer-types/build/Person\").Person, \"authorizations\" | \"credit\" | \"dataEntries\" | \"interestSlugs\" | \"media\" | \"name\" | \"slug\" | \"pictureImage\" | \"groupSlugs\" | \"requiredAuthenticationMethods\" | \"amountAuthenticationMethodsRequired\">) => Promise<{ isSuccessful: boolean; message: string; }>",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "async (\n  functionContext: FunctionContext,\n  /**\n   * Data required for creating a `Person`. Can be filled in by the user partly, but also partly automatically\n   */\n  personData: SignupPersonData\n): Promise<{ isSuccessful: boolean; message: string }> => {\n  const { device } = functionContext;\n\n  console.log(`Signup with context`);\n  if (\n    device.authenticationMethods.filter((x) => x.isAuthenticated).length === 0\n  ) {\n    return { isSuccessful: false, message: \"Please authenticate first\" };\n  }\n\n  const methodsAugmented = await Promise.all(\n    device.authenticationMethods.map(async (method) => {\n      const alreadyPerson = await findAuthenticatedPersonWithHandle(\n        method.method,\n        method.handle\n      );\n\n      return { ...method, alreadyPerson };\n    })\n  );\n\n  const unavailableMethod = methodsAugmented.find(\n    (method) => method.alreadyPerson\n  );\n\n  if (unavailableMethod) {\n    const methodString = englishMethod[unavailableMethod.method].toLowerCase();\n    return {\n      isSuccessful: false,\n      message: `There is already someone else with the ${methodString} ${unavailableMethod.handle}`,\n    };\n  }\n\n  // it seesms fine , lets' create a new person\n\n  const newPersonId = generateId();\n  const newPerson: Creation<Person> = {\n    id: newPersonId,\n    authenticationMethods: device.authenticationMethods,\n    ...personData,\n  };\n\n  //@ts-ignore\n  const upsertResult = await db.upsert(\"Person\", newPerson, {\n    onlyInsert: true,\n  });\n\n  const updateResult = await db.update(\n    \"Device\",\n    (item) => item.id === device.id,\n    (old) => {\n      console.log(`set new person id to ${newPersonId}`);\n      return {\n        ...old,\n        personIds: old.personIds\n          ? old.personIds.concat(newPersonId)\n          : [newPersonId],\n        currentPersonId: newPersonId,\n      };\n    }\n  );\n\n  const isSuccessful =\n    updateResult.amountUpdated === 1 &&\n    !!updateResult.isSuccesful &&\n    !!upsertResult.isSuccesful;\n\n  const nonSuccessfulMessage = !updateResult.isSuccesful\n    ? updateResult.message\n    : !upsertResult.isSuccesful\n    ? upsertResult.message\n    : undefined;\n  return {\n    isSuccessful,\n    message: isSuccessful\n      ? \"Signed up\"\n      : nonSuccessfulMessage ||\n        \"signupWithContext: Something went wrong with the queries\",\n  };\n}",
  "description": "Creates a new `Person` for a `Device`. Adds that person to the `Device`.\n\n- Can only be done with at least one authenticationMethod\n- Can only be done if authentication is not applied on an existing person already.\n- Function is wrappable",
  "id": "dpaawbaatwbgddstvdzbgkys"
}