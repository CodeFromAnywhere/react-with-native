{
  "createdAt": 1670528515156,
  "updatedAt": 1670528515156,
  "deletedAt": 0,
  "createdFirstAt": 1670528515156,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "signupWithPasswordWithContext",
  "slug": "signup-with-password-with-context",
  "operationRelativeTypescriptFilePath": "src/signupWithPasswordWithContext.ts",
  "type": {
    "rawType": "import(\"/Users/king/King/operations/tools/user-interfaces/api/function-server-types/build/ApiFunction\").ApiFunction",
    "typeDefinition": {
      "type": "object",
      "properties": {
        "isPublic": {
          "type": "boolean"
        },
        "allowedRoles": {
          "type": "array",
          "items": {
            "type": "string",
            "allOf": [
              {
                "transform": [
                  "trim"
                ]
              },
              {
                "minLength": 1
              }
            ]
          }
        }
      },
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [
        {
          "name": "isPublic",
          "required": false,
          "schema": {
            "type": "boolean"
          }
        },
        {
          "name": "allowedRoles",
          "required": false,
          "schema": {
            "items": [
              {
                "schema": {
                  "type": "string"
                },
                "name": null
              }
            ],
            "type": "array"
          }
        }
      ],
      "type": "object"
    }
  },
  "value": "async (\n  functionContext: FunctionContext,\n  fullName: string,\n  username: string,\n  pictureImage: BackendAsset | undefined,\n  password: string,\n  repeatPassword: string\n): Promise<{ isSuccessful: boolean; message: string }> => {\n  // processing is a oneliner for this type of functions!\n  pictureImage = await processAsset(pictureImage);\n\n  // only supported for now\n  const method: AuthenticationMethodMethod = \"usernamePassword\";\n\n  if (password !== repeatPassword) {\n    return { isSuccessful: false, message: \"Those passwords don't match\" };\n  }\n\n  const addDeviceAuthResult = await addDeviceAuthenticationMethodWithContext(\n    functionContext,\n    method,\n    username,\n    password\n  );\n\n  // console.log({ addDeviceAuthResult });\n  const {\n    functionContext: newFunctionContext,\n    authenticationMethod,\n    isSuccessful,\n    message,\n  } = addDeviceAuthResult;\n\n  if (!authenticationMethod?.isAuthenticated || !newFunctionContext) {\n    console.log(\"NOT AUTHENTICATED AFTER ADDING DEVICE\", {\n      authenticationMethod,\n      newFunctionContext,\n    });\n    return { isSuccessful: false, message: message || \"Strange\" };\n  }\n\n  const signupResult = await signupWithContext(newFunctionContext, {\n    name: fullName,\n    slug: slugify(fullName),\n    pictureImage,\n  });\n\n  return signupResult;\n}",
  "description": "For now only username/pass is supported due to direct verification\n\nThis function makes an authenticationmethod for the device and then signs up by creating a person for it and attaching it to the device.",
  "id": "tlfjbazratfwohwohxludwcz"
}