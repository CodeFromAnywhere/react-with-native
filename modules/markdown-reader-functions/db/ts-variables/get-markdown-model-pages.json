{
  "createdAt": 1667818208383,
  "updatedAt": 1667818208383,
  "deletedAt": 0,
  "createdFirstAt": 1667818208383,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "getMarkdownModelPages",
  "slug": "get-markdown-model-pages",
  "operationRelativeTypescriptFilePath": "src/getMarkdownModelPages.ts",
  "type": {
    "rawType": "(projectRoot: string) => Promise<import(\"/Users/king/King/operations/tools/markdown-reader/markdown-reader-types/build/MarkdownReaderPage\").MarkdownReaderPage[]>",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "async (\n  projectRoot: string\n): Promise<MarkdownReaderPage[]> => {\n  const markdownModelNames = getObjectKeysArray(modelQueryConfig).filter(\n    (modelName) => {\n      const config = modelQueryConfig[modelName] as QueryConfig;\n\n      const isMarkdownModelType = config.dbStorageMethod === \"markdown\";\n      const noSpecificPath = !config.operationRelativePath;\n      return isMarkdownModelType && noSpecificPath;\n    }\n  );\n\n  const basePaths = markdownModelNames\n    .map((modelName) =>\n      path.join(projectRoot, \"db\", pluralize(kebabCase(modelName)))\n    )\n    .filter((potentialBasePath) => fs.existsSync(potentialBasePath));\n\n  const markdownReaderPages = await getMarkdownReaderPages({\n    projectRoot,\n    basePaths,\n  });\n\n  return markdownReaderPages;\n}",
  "description": "Transforms all your markdown models into  markdown reader pages\n\nSteps:\n- Finds all markdown model types from the database config\n- Gets their basepaths according to `fs-orm` convention\n- Checks if they actually exist\n- Finds all markdown therein\n- Makess markdown reader pages out of them",
  "id": "ixqxirdiwqygjxtrknqnlxrq"
}