{
  "createdAt": 1667818216591,
  "updatedAt": 1667818216591,
  "deletedAt": 0,
  "createdFirstAt": 1667818216591,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "getPublicMarkdownFilePaths",
  "slug": "get-public-markdown-file-paths",
  "operationRelativeTypescriptFilePath": "src/getPublicMarkdownFilePaths.ts",
  "type": {
    "rawType": "(baseFolderPath: string, includeFoldersWithResults?: boolean | undefined) => unknown",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "async (\n  baseFolderPath: string,\n  includeFoldersWithResults?: boolean\n) => {\n  const publicMarkdownFilePaths: { path: string; isFolder: boolean }[] = (\n    await explore({\n      basePath: baseFolderPath,\n      extension: \"md\",\n      readmeOnTop: true,\n      includeFoldersWithResults,\n    })\n  )\n    .filter((x) => {\n      if (x.isFolder) return true;\n\n      // NB: we have a file\n      const markdownString = fs.readFileSync(x.path, \"utf8\");\n      const { parameters } = parseFrontmatterMarkdownString(markdownString);\n      if (!shouldExposeMarkdownFile(parameters)) {\n        return false;\n      }\n      return true;\n    })\n    .map(({ path, isFolder }) => ({ path, isFolder }));\n\n  return publicMarkdownFilePaths;\n}",
  "description": "Returns all absolute markdown file paths within a basePath which are not drafts and which are not marked private (through frontmatter)",
  "id": "yudvadlsksevtiapltlqjicr"
}