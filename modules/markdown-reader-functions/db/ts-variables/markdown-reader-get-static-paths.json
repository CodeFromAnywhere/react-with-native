{
  "createdAt": 1670063690659,
  "updatedAt": 1670063690659,
  "deletedAt": 0,
  "createdFirstAt": 1670063690659,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "markdownReaderGetStaticPaths",
  "slug": "markdown-reader-get-static-paths",
  "operationRelativeTypescriptFilePath": "src/markdownReaderGetStaticPaths.ts",
  "type": {
    "rawType": "import(\"/Users/king/King/operations/tools/purpose/codebase-introspection/reader/next-types/build/types\").GetStaticPaths<import(\"/Users/king/King/operations/tools/purpose/codebase-introspection/reader/next-types/build/types\").ParsedUrlQuery>",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "async (\n  context: GetStaticPathsContext\n) => {\n  const paths: string[] | undefined = await getMarkdownReaderQueryPaths();\n\n  // console.log({ paths });\n  if (!paths) {\n    return { paths: [], fallback: \"blocking\" };\n  }\n\n  const staticPaths = paths\n    .filter((x) => x !== \"\")\n    .map((p) => ({ params: { paths: p.split(\"/\") } }));\n\n  return {\n    paths: staticPaths,\n    fallback: \"blocking\",\n  };\n}",
  "description": "Function that tells Next.js what the pages are that need to be statically generated",
  "id": "vjjxasathzhmeblghnblbsuj"
}