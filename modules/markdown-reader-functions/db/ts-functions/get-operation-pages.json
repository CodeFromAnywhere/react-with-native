{
  "createdAt": 1670063683505,
  "updatedAt": 1670063683505,
  "deletedAt": 0,
  "createdFirstAt": 1670063683505,
  "isApiExposed": true,
  "isExported": true,
  "groupAuthorization": {},
  "operationRelativeTypescriptFilePath": "src/getOperationPages.ts",
  "commentsInside": [],
  "rawText": " async (\n  projectRoot: string,\n  bundleMarkdownReaderConfig?: BundleMarkdownReaderConfig\n): Promise<ReaderWebPage[]> => {\n  const operationBasePaths = getPathsWithOperations({\n    manualProjectRoot: projectRoot,\n  });\n\n  const operationPagesPerType: { [key: string]: ReaderWebPage[] } =\n    mergeObjectsArray(\n      await Promise.all(\n        operationBasePaths.map(async (absoluteBasePath) => {\n          const folders = (\n            await exploreOperationFolders({ basePath: absoluteBasePath })\n          ).map((result) => ({\n            projectRelativePath: makeRelative(result, projectRoot),\n          }));\n\n          const projectRelativeBasePath = makeRelative(\n            absoluteBasePath,\n            projectRoot\n          );\n\n          // console.log({ folders });\n\n          const pages: ReaderWebPage[] = folders.map((folder) => {\n            const folderName = getLastFolder(folder.projectRelativePath);\n\n            /**\n             * Sometimes the bundle states the menu items should not be shown. The pages still remain available though, otherwise it would cause lots of dead links!\n             */\n            const isMenuHidden =\n              projectRelativeBasePath === \"apps\" &&\n              bundleMarkdownReaderConfig?.omitAppsMenu\n                ? true\n                : projectRelativeBasePath === \"packages\" &&\n                  bundleMarkdownReaderConfig?.omitPackagesMenu\n                ? true\n                : projectRelativeBasePath === \"modules\" &&\n                  bundleMarkdownReaderConfig?.omitModulesMenu\n                ? true\n                : false;\n\n            // console.log({ isMenuItem, projectRelativeBasePath, folderName });\n\n            const readerWebPage: ReaderWebPage = {\n              queryPath: folder.projectRelativePath,\n              // operation filePath is README.md\n              pageData: {\n                projectRelativeFilePath: path.join(\n                  folder.projectRelativePath,\n                  \"README.md\"\n                ),\n                internalLinkWord: folderName,\n              },\n              isMenuHidden,\n            };\n\n            return readerWebPage;\n          });\n\n          return { [projectRelativeBasePath]: pages };\n        })\n      )\n    );\n\n  const operationsPages: ReaderWebPage[] =\n    bundleMarkdownReaderConfig?.customOperationNames\n      ?.map((operationName) => {\n        const projectRelativeOperationPath =\n          operations[operationName as keyof typeof operations];\n\n        if (!projectRelativeOperationPath) return;\n\n        const readerWebPage: ReaderWebPage = {\n          pageData: {\n            projectRelativeFilePath: path.join(\n              projectRelativeOperationPath,\n              \"README.md\"\n            ),\n          },\n          queryPath: projectRelativeOperationPath,\n          isMenuHidden: false,\n        };\n\n        return readerWebPage;\n      })\n      .filter(notEmpty) || [];\n\n  // NB: we need to get the right order, so it needs to be done separately\n  const operationPages: ReaderWebPage[] = isBundle(projectRoot)\n    ? [\n        ...operationsPages,\n        ...operationPagesPerType.packages,\n        ...operationPagesPerType.apps,\n        ...operationPagesPerType.modules,\n      ]\n    : [\n        ...operationsPages,\n        ...operationPagesPerType[\"operations/tools\"],\n        ...operationPagesPerType[\"operations/niches\"],\n      ];\n\n  return operationPages;\n}",
  "name": "getOperationPages",
  "slug": "get-operation-pages",
  "parameters": [
    {
      "name": "projectRoot",
      "schema": {
        "type": "string"
      },
      "simplifiedSchema": {
        "type": "string"
      },
      "required": true
    },
    {
      "name": "bundleMarkdownReaderConfig",
      "schema": {
        "$ref": "#/definitions/BundleMarkdownReaderConfig"
      },
      "simplifiedSchema": {
        "fullComment": "",
        "properties": [
          {
            "name": "docsInRoot",
            "required": false,
            "schema": {
              "fullComment": "When set to `true`, docs are not shown in docs folder but in the root menu of the site",
              "type": "boolean"
            }
          },
          {
            "name": "showTodos",
            "required": false,
            "schema": {
              "fullComment": "Show todo menu",
              "type": "boolean"
            }
          },
          {
            "name": "omitModulesMenu",
            "required": false,
            "schema": {
              "fullComment": "`modules` will be hidden from markdown reader menu",
              "type": "boolean"
            }
          },
          {
            "name": "omitAppsMenu",
            "required": false,
            "schema": {
              "fullComment": "`apps` will be hidden from markdown reader menui",
              "type": "boolean"
            }
          },
          {
            "name": "omitDictionaryMenu",
            "required": false,
            "schema": {
              "fullComment": "if true, dictionary is omitted from menu",
              "type": "boolean"
            }
          },
          {
            "name": "omitPackagesMenu",
            "required": false,
            "schema": {
              "fullComment": "`packages` will be hidden from markdown reader menu",
              "type": "boolean"
            }
          },
          {
            "name": "customOperationNames",
            "required": false,
            "schema": {
              "fullComment": "if given, the operations menu will show with these operations",
              "items": [
                {
                  "schema": {
                    "type": "string"
                  },
                  "name": null
                }
              ],
              "type": "array"
            }
          }
        ],
        "type": "object"
      },
      "required": false
    }
  ],
  "description": "",
  "returnType": {
    "rawType": "Promise<import(\"/Users/king/King/operations/tools/types/webpage-types/build/types\").FileWebPage[]>",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 9,
  "size": {
    "characters": 3401,
    "lines": 105,
    "bytes": 3401,
    "bytesPerCharacter": 1,
    "charactersPerLine": 32,
    "linesPerFile": 105,
    "numberOfFiles": 1
  },
  "id": "ktinzkbrvrvkfnbmkfmbzemf"
}