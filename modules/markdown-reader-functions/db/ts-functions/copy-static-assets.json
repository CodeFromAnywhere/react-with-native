{
  "createdAt": 1670063643475,
  "updatedAt": 1670063643475,
  "deletedAt": 0,
  "createdFirstAt": 1670063643475,
  "isApiExposed": true,
  "isExported": true,
  "groupAuthorization": {},
  "operationRelativeTypescriptFilePath": "src/copyStaticAssets.ts",
  "commentsInside": [],
  "rawText": " async (\n  readerWebPages: ReaderWebPage[],\n  config?: {\n    /**\n     * by default, uses `markdown-reader-web`\n     */\n    operationName?: string;\n  }\n): Promise<boolean | undefined> => {\n  const projectRoot = getProjectRoot();\n  if (!projectRoot) return;\n\n  const nextWebFolder = await getOperationPath(\n    config?.operationName || \"markdown-reader-web\"\n  );\n\n  if (!nextWebFolder) return;\n\n  const referencePathsPromises = readerWebPages.map(async (page) => {\n    if (!page.pageData.projectRelativeFilePath) return;\n    const absoluteMarkdownFilePath = path.join(\n      projectRoot,\n      page.pageData.projectRelativeFilePath\n    );\n    const markdownString = await fs.readFile(absoluteMarkdownFilePath, \"utf8\");\n    const referencePaths = getMarkdownReferencePaths(markdownString);\n    return referencePaths;\n  });\n\n  const absoluteReferencePaths = (await Promise.all(referencePathsPromises))\n    .filter(notEmpty)\n    .flat()\n    .filter(onlyUnique2());\n\n  const projectRelativeReferencePaths = absoluteReferencePaths.map((x) =>\n    makeRelative(x, projectRoot)\n  );\n\n  const publicAssetsFolder = path.join(nextWebFolder, \"public\");\n\n  const removed = await removeAllExcept(publicAssetsFolder);\n\n  const isSuccessful = await copyAllRelativeFiles(\n    projectRelativeReferencePaths,\n    projectRoot,\n    publicAssetsFolder\n  );\n\n  return isSuccessful;\n}",
  "name": "copyStaticAssets",
  "slug": "copy-static-assets",
  "parameters": [
    {
      "name": "readerWebPages",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/ReaderWebPage"
        }
      },
      "simplifiedSchema": {
        "items": [],
        "type": "array"
      },
      "required": true
    },
    {
      "name": "config",
      "schema": {
        "type": "object",
        "properties": {
          "operationName": {
            "type": "string",
            "description": "by default, uses `markdown-reader-web`"
          }
        },
        "additionalProperties": false
      },
      "simplifiedSchema": {
        "properties": [
          {
            "name": "operationName",
            "required": false,
            "schema": {
              "fullComment": "by default, uses `markdown-reader-web`",
              "type": "string"
            }
          }
        ],
        "type": "object"
      },
      "required": false
    }
  ],
  "description": "uses `getMarkdownReferencePaths` for all markdown files in the `markdown-reader-ui` and copies them into the `markdown-reader-web/public` folder, keeping the original folder structure.\n\nNB: Removes all files in the public folder first.\n\nTo get a file from public assets after running this function, you need to get it from the `projectRelativeFilePath`, not the file relative, so you need to render it differently.",
  "returnType": {
    "rawType": "Promise<boolean | undefined>",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 3,
  "size": {
    "characters": 1772,
    "lines": 54,
    "bytes": 1772,
    "bytesPerCharacter": 1,
    "charactersPerLine": 33,
    "linesPerFile": 54,
    "numberOfFiles": 1
  },
  "id": "hstqknnbjuwabvweuexvzmlq"
}