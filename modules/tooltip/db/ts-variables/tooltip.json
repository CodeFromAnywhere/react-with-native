{
  "createdAt": 1669885165069,
  "updatedAt": 1669885165069,
  "deletedAt": 0,
  "createdFirstAt": 1669885165069,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "Tooltip",
  "slug": "tooltip",
  "operationRelativeTypescriptFilePath": "src/Tooltip.tsx",
  "type": {
    "rawType": "(props: { tooltip: React.ReactElement<any, string | React.JSXElementConstructor<any>>; children: React.ReactNode; placement?: import(\"/Users/king/King/operations/node_modules/@popperjs/core/lib/enums\").Placement | undefined; }) => JSX.Element",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "(props: {\n  tooltip: React.ReactElement;\n  children: React.ReactNode;\n  placement?: Placement;\n}) => {\n  const [popoverShow, setPopoverShow] = React.useState(false);\n  const btnRef = React.createRef<HTMLAnchorElement>();\n  const popoverRef = React.createRef<HTMLSpanElement>();\n  const openTooltip = () => {\n    if (!btnRef.current || !popoverRef.current) return;\n    createPopper(btnRef.current, popoverRef.current, {\n      placement: props.placement || \"auto\",\n    });\n    setPopoverShow(true);\n  };\n  const closeTooltip = () => {\n    setPopoverShow(false);\n  };\n\n  return (\n    <span>\n      <span\n        className={`mb-8 dark:text-gray-100 text-black bg-slate-200 dark:bg-slate-800 p-2 z-30 text-sm max-w-xs break-words rounded-md${\n          popoverShow ? \" block\" : \" hidden\"\n        }`}\n        ref={popoverRef}\n      >\n        {props.tooltip}\n      </span>\n      <span onMouseEnter={openTooltip} onMouseLeave={closeTooltip} ref={btnRef}>\n        {props.children}\n      </span>\n    </span>\n  );\n}",
  "description": "",
  "id": "lckdktvfrxepjmzhhxhoeyri"
}