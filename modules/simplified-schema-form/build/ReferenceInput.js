"use strict";var __assign=this&&this.__assign||function(){return __assign=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},__assign.apply(this,arguments)};Object.defineProperty(exports,"__esModule",{value:!0}),exports.ReferenceInput=void 0;var jsx_runtime_1=require("react/jsx-runtime"),clickable_icon_1=require("clickable-icon"),react_with_native_1=require("react-with-native"),fancy_loader_1=require("fancy-loader"),react_with_native_form_inputs_1=require("react-with-native-form-inputs"),renderParameterTitle_1=require("./renderParameterTitle"),js_util_1=require("js-util"),ReferenceInput=function(e){var t,n,r,i,a=e.isDebug,o=e.parameter,l=e.parameterValue,u=e.onChangeParameter,_=e.defaultInputFields,c=e.referencedModelDataItem,s=c.isLoading,d=function(){return(0,jsx_runtime_1.jsx)(clickable_icon_1.ClickableIcon,{emoji:"➕",onClick:function(){void 0!==typeof window&&window.open("upsert?model=".concat(c.interfaceName),"_blank")}})};
// selectbox, if referencedModelData is available
if(c.isReferenceMultipleParameter){
// select multiple
var v=l||[],f=(null===(t=c.data)||void 0===t?void 0:t.map((function(e){var t=e.name||e.id,n=c.keyInModel?e[c.keyInModel]:void 0;if(n)return{value:n,label:t}})).filter(js_util_1.notEmpty))||[],p=v.map((function(e){return f.find((function(t){return t.value===e}))})).filter(js_util_1.notEmpty);return(0,jsx_runtime_1.jsxs)(react_with_native_1.Div,{children:[(0,renderParameterTitle_1.renderParameterTitle)(o,a,!1,d),s?(0,jsx_runtime_1.jsx)(fancy_loader_1.FancyLoader,{}):(0,jsx_runtime_1.jsx)(react_with_native_form_inputs_1.SelectMultipleInput,__assign({},_,{onChange:function(e){var t=0!==e.length||o.required?e.map((function(e){return e.value})):void 0;u(t)},value:p,extra:{options:f,autoSuggest:f.length>10},config:{}}))]})}
// select single
// If a referenced model contains the `categoryStackCalculated` parameter, this data should be used to group the selectbox. Without categoryStackCalculated parameter, simply use the name.
var m=l,j=(null===(n=c.data)||void 0===n?void 0:n.map((function(e){var t=e.categoryStackCalculated,n=c.keyInModel?e[c.keyInModel]:void 0;if(n){
/**
             * This must be something. Name is not always there, but ID should be!
             */
var r=e.name||e.id;return{value:n,label:t?t.concat(r).join(" › "):r}}})).filter(js_util_1.notEmpty))||[],g=m?{label:(null===(i=null===(r=c.data)||void 0===r?void 0:r.find((function(e){return!!c.keyInModel&&e[c.keyInModel]===m})))||void 0===i?void 0:i.name)||"Select an option",value:m}:null,h=[{label:"Select an option",value:""}].concat(j);return(0,jsx_runtime_1.jsxs)(react_with_native_1.Div,{children:[(0,renderParameterTitle_1.renderParameterTitle)(o,a,!1,d),s?(0,jsx_runtime_1.jsx)(fancy_loader_1.FancyLoader,{}):(0,jsx_runtime_1.jsx)(react_with_native_form_inputs_1.SelectInput,__assign({},_,{onChange:function(e){var t=e||o.required?null==e?void 0:e.value:void 0;u(t)},value:g,extra:{options:h,autoSuggest:h.length>10},config:{}}))]})};exports.ReferenceInput=ReferenceInput;
//# sourceMappingURL=ReferenceInput.js.map