{
  "createdAt": 1667634894815,
  "updatedAt": 1667634894815,
  "deletedAt": 0,
  "createdFirstAt": 1667634894815,
  "publicAuthorization": [
    "read-docs",
    "search"
  ],
  "isApiExposed": false,
  "isPostApi": false,
  "isGetApi": false,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/ArrayForm.tsx",
  "commentsInside": [],
  "rawText": " (props: {\n  itemNameOrId?: string;\n  parameterNameStack?: string[];\n  projectRelativeStorageFilePath?: string;\n  parameter: FunctionParameter;\n  /**\n   * In this case this must be an array or undefined\n   */\n  parameterValue: any[] | undefined;\n  onChangeParameter: (newValue: any) => void;\n  isDebug?: boolean;\n  referencableModelData?: ReferencableModelData;\n  id: string;\n}) => {\n  const {\n    itemNameOrId,\n    parameterNameStack,\n    projectRelativeStorageFilePath,\n    parameter,\n    isDebug,\n    id,\n    referencableModelData,\n    onChangeParameter,\n    parameterValue,\n  } = props;\n\n  if (!parameter.simplifiedSchema) {\n    return null;\n  }\n\n  // we can only render the array if it has items...\n  if (\n    !parameter.simplifiedSchema.items ||\n    parameter.simplifiedSchema.items.length === 0\n  ) {\n    console.log(\"Array without schema items\", { parameter });\n    return isDebug ? (\n      <P className=\"text-red-500\">\n        Array without schema items ({parameter.name}){\" \"}\n        {JSON.stringify(parameter.simplifiedSchema)}\n      </P>\n    ) : null;\n  }\n\n  // TODO: make these actions work!\n  const addItemAbove = (index: number) => {\n    // insert into array\n    if (!parameterValue) return;\n    const newArray = insertAt(parameterValue, undefined, index);\n    onChangeParameter(newArray);\n  };\n\n  const addItemBelow = (index: number) => {\n    // insert into array\n    if (!parameterValue) return;\n    const newArray = insertAt(parameterValue, undefined, index + 1);\n    onChangeParameter(newArray);\n  };\n\n  const removeItem = (index: number) => {\n    if (!parameterValue) return;\n    const newArray = removeIndexFromArray(parameterValue, index);\n    onChangeParameter(newArray);\n  };\n\n  const createArray = () => {\n    if (parameterValue && parameterValue.length > 0) return;\n    onChangeParameter([undefined]);\n  };\n  const shouldShowClear = parameter.required\n    ? parameterValue && parameterValue.length > 0\n    : parameterValue !== undefined;\n  const clearArray = () => {\n    // NB: clearing will set it to undefined, unless the array is required, then we should just set it to an empty array.\n    onChangeParameter(parameter.required ? [] : undefined);\n  };\n\n  const requiredText = parameter.required ? \"(Required)\" : \"(Optional)\";\n  const arrayLengthText = parameterValue\n    ? parameterValue.length > 0\n      ? `Array (${parameterValue.length})`\n      : `Empty array`\n    : `undefined`;\n  return (\n    <Div\n      className={\"ml-2 pl-2 my-4 border-l border-gray-900 dark:border-gray-100\"}\n    >\n      <Div className=\"flex flex-row justify-between\">\n        <P>\n          <Span className=\"font-bold\">{humanCase(parameter.name || \"\")} </Span>\n          {requiredText} {arrayLengthText}\n        </P>\n        <Div className=\"flex flex-row\">\n          {shouldShowClear ? (\n            <ClickableIcon onClick={clearArray} emoji=\"❌\" />\n          ) : null}\n          {parameterValue === undefined || parameterValue.length === 0 ? (\n            <ClickableIcon onClick={createArray} emoji=\"➕\" />\n          ) : null}\n        </Div>\n      </Div>\n\n      {isDebug ? (\n        <P className=\"italic text-gray-600\">\n          {parameter.simplifiedSchema.description}\n        </P>\n      ) : null}\n\n      {/* NB: we need a form for every item in the array */}\n      {parameterValue?.map((arrayItem, arrayIndex) => {\n        const simplifiedSchema: SimplifiedSchema | undefined =\n          parameter.simplifiedSchema?.items?.[0]?.schema;\n\n        const hasName = parameter.name ? parameter.name.length > 0 : false;\n        return (\n          <Div>\n            <SimplifiedSchemaForm\n              itemNameOrId={itemNameOrId}\n              projectRelativeStorageFilePath={projectRelativeStorageFilePath}\n              isDebug={isDebug}\n              parameterNameStack={\n                hasName\n                  ? parameterNameStack\n                    ? [...parameterNameStack, parameter.name]\n                    : [parameter.name]\n                  : parameterNameStack\n              }\n              parameters={[\n                {\n                  name: `${parameter.name} item ${arrayIndex + 1}`,\n                  required: true,\n                  simplifiedSchema,\n                  isDbModel: false,\n                  renderButtons: () => {\n                    return (\n                      <Div className=\"flex flex-row\">\n                        {arrayIndex === 0 ? (\n                          <ClickableIcon\n                            onClick={() => addItemAbove(arrayIndex)}\n                            emoji=\"↑\"\n                          />\n                        ) : null}\n                        <ClickableIcon\n                          onClick={() => addItemBelow(arrayIndex)}\n                          emoji=\"↓\"\n                        />\n                        <ClickableIcon\n                          onClick={() => removeItem(arrayIndex)}\n                          emoji=\"˟\"\n                        />\n                      </Div>\n                    );\n                  },\n                },\n              ]}\n              onChange={(newArrayValues) => {\n                const newArrayValue = newArrayValues[0];\n\n                // set this index of the array to the new value taken from the form\n                parameterValue[arrayIndex] = newArrayValue;\n                // only change the value that contains the array\n                onChangeParameter(parameterValue);\n              }}\n              values={[arrayItem]}\n              // just passing this\n              referencableModelData={referencableModelData}\n              id={`${id}.${arrayIndex}`}\n            />\n          </Div>\n        );\n      })}\n    </Div>\n  );\n}",
  "name": "ArrayForm",
  "slug": "array-form",
  "parameters": [],
  "description": "Component to render a parameter that holds an array\n\nThis is simply a wrapper around another `SimplifiedSchemaForm` where the `onChange` and `values` are slightly different\n\nThis component renders a `SimplifiedSchemaForm` for every item in the array, and adds buttons to insert/remove new items.",
  "returnType": {
    "rawType": "JSX.Element | null",
    "typeDefinition": {
      "optional": true,
      "$ref": "#/definitions/JSX.Element"
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 14,
  "size": {
    "characters": 5955,
    "lines": 178,
    "bytes": 5964,
    "bytesPerCharacter": 1.0015113350125944,
    "charactersPerLine": 33,
    "linesPerFile": 178,
    "numberOfFiles": 1
  },
  "id": "psdjgumzmhwsirpkqffwxjht"
}