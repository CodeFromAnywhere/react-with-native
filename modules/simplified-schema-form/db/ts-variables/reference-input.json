{
  "createdAt": 1667634899028,
  "updatedAt": 1667634899028,
  "deletedAt": 0,
  "createdFirstAt": 1667634899028,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "ReferenceInput",
  "slug": "reference-input",
  "operationRelativeTypescriptFilePath": "src/ReferenceInput.tsx",
  "type": {
    "rawType": "(props: { parameter: import(\"/Users/king/King/operations/tools/types/code-types/build/TsFunction\").FunctionParameter; parameterValue: any; onChangeParameter: (newValue: any) => void; referencedModelDataItem: import(\"/Users/king/King/operations/tools/interfaces/vui/simplified-schema-form/src/getReferencedModelDataItem\").ReferencedModelDataItem; defaultInputFields: { uniqueFieldId: string; fieldName: string; }; isDebug?: boolean | undefined; }) => JSX.Element",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "(props: {\n  parameter: FunctionParameter;\n  parameterValue: any;\n  onChangeParameter: (newValue: any) => void;\n  referencedModelDataItem: ReferencedModelDataItem;\n  defaultInputFields: {\n    uniqueFieldId: string;\n    fieldName: string;\n  };\n  isDebug?: boolean;\n}) => {\n  const {\n    isDebug,\n    parameter,\n    parameterValue,\n    onChangeParameter,\n    defaultInputFields,\n    referencedModelDataItem,\n  } = props;\n\n  const isLoading = referencedModelDataItem.isLoading;\n\n  const addModelItem = () => {\n    return (\n      <ClickableIcon\n        emoji=\"➕\"\n        onClick={() => {\n          if (typeof window === undefined) return;\n\n          window.open(\n            `upsert?model=${referencedModelDataItem.interfaceName}`,\n            \"_blank\"\n          );\n        }}\n      />\n    );\n  };\n\n  // selectbox, if referencedModelData is available\n  if (referencedModelDataItem.isReferenceMultipleParameter) {\n    // select multiple\n    const value = (parameterValue || []) as string[];\n\n    const onChangeMultiple = (selected: Item<string>[]) => {\n      const newValue =\n        selected.length === 0 && !parameter.required\n          ? undefined\n          : selected.map((x) => x.value);\n      onChangeParameter(newValue);\n    };\n\n    const options: Item<string>[] =\n      referencedModelDataItem.data\n        ?.map((x) => {\n          const label = x.name || x.id;\n          const value = referencedModelDataItem.keyInModel\n            ? (x[\n                referencedModelDataItem.keyInModel as keyof ReferenceItem\n              ] as string)\n            : undefined;\n          if (!value) return;\n\n          return {\n            value,\n            label,\n          };\n        })\n        .filter(notEmpty) || [];\n\n    const selectedValues = value\n      .map((v) => options.find((x) => x.value === v))\n      .filter(notEmpty);\n\n    return (\n      <Div>\n        {renderParameterTitle(parameter, isDebug, false, addModelItem)}\n        {isLoading ? (\n          <FancyLoader />\n        ) : (\n          <SelectMultipleInput\n            {...defaultInputFields}\n            onChange={onChangeMultiple}\n            value={selectedValues}\n            extra={{\n              options,\n              autoSuggest: options.length > 10,\n            }}\n            config={{}}\n          />\n        )}\n      </Div>\n    );\n  } else {\n    // select single\n\n    // If a referenced model contains the `categoryStackCalculated` parameter, this data should be used to group the selectbox. Without categoryStackCalculated parameter, simply use the name.\n\n    const value = parameterValue as string | undefined;\n\n    const onChangeSingle = (selected: Item<string> | null) => {\n      const newValue =\n        !selected && !parameter.required ? undefined : selected?.value;\n      onChangeParameter(newValue);\n    };\n\n    const options: Item<string>[] =\n      referencedModelDataItem.data\n        ?.map((x) => {\n          const categoryStackCalculated = x.categoryStackCalculated;\n\n          const value = referencedModelDataItem.keyInModel\n            ? (x[\n                referencedModelDataItem.keyInModel as keyof ReferenceItem\n              ] as string)\n            : undefined;\n\n          if (!value) return;\n          /**\n           * This must be something. Name is not always there, but ID should be!\n           */\n          const identifier: string = x.name || x.id;\n          const label = categoryStackCalculated\n            ? categoryStackCalculated.concat(identifier).join(\" › \")\n            : identifier;\n\n          return {\n            value,\n            label,\n          };\n        })\n        .filter(notEmpty) || [];\n\n    const selectValue = value\n      ? {\n          label:\n            referencedModelDataItem.data?.find((x) =>\n              referencedModelDataItem.keyInModel\n                ? x[\n                    referencedModelDataItem.keyInModel as keyof ReferenceItem\n                  ] === value\n                : false\n            )?.name || \"Select an option\",\n          value,\n        }\n      : null;\n\n    const optionsAndFirst: Item<string>[] = [\n      { label: \"Select an option\", value: \"\" },\n    ].concat(options);\n\n    return (\n      <Div>\n        {renderParameterTitle(parameter, isDebug, false, addModelItem)}\n        {isLoading ? (\n          <FancyLoader />\n        ) : (\n          <SelectInput\n            {...defaultInputFields}\n            onChange={onChangeSingle}\n            value={selectValue}\n            extra={{\n              options: optionsAndFirst,\n              autoSuggest: optionsAndFirst.length > 10,\n            }}\n            config={{}}\n          />\n        )}\n      </Div>\n    );\n  }\n}",
  "description": "This component renders an input to select an item to reference from another model (or multiple)",
  "id": "rwtokstgmentsgirdkdvbbba"
}