"use strict";var __assign=this&&this.__assign||function(){return __assign=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var s in t=arguments[n])Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s]);return e},__assign.apply(this,arguments)},__awaiter=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(s,r){function l(e){try{a(o.next(e))}catch(e){r(e)}}function c(e){try{a(o.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(l,c)}a((o=o.apply(e,t||[])).next())}))},__generator=this&&this.__generator||function(e,t){var n,o,s,r,l={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return r={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function c(r){return function(c){return function(r){if(n)throw new TypeError("Generator is already executing.");for(;l;)try{if(n=1,o&&(s=2&r[0]?o.return:r[0]?o.throw||((s=o.return)&&s.call(o),0):o.next)&&!(s=s.call(o,r[1])).done)return s;switch(o=0,s&&(r=[2&r[0],s.value]),r[0]){case 0:case 1:s=r;break;case 4:return l.label++,{value:r[1],done:!1};case 5:l.label++,o=r[1],r=[0];continue;case 7:r=l.ops.pop(),l.trys.pop();continue;default:if(!(s=l.trys,(s=s.length>0&&s[s.length-1])||6!==r[0]&&2!==r[0])){l=0;continue}if(3===r[0]&&(!s||r[1]>s[0]&&r[1]<s[3])){l.label=r[1];break}if(6===r[0]&&l.label<s[1]){l.label=s[1],s=r;break}if(s&&l.label<s[2]){l.label=s[2],l.ops.push(r);break}s[2]&&l.ops.pop(),l.trys.pop();continue}r=t.call(e,l)}catch(e){r=[6,e],o=0}finally{n=s=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,c])}}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.runModelEndToEndTest=void 0;var test_db_1=require("./test-db"),runModelEndToEndTest=function(e,t){return __awaiter(void 0,void 0,void 0,(function(){var n,o,s,r,l,c,a,i,u,d;return __generator(this,(function(g){switch(g.label){case 0:return n=t(),o=n.id,console.log({firstId:o,firstInstance:n}),[4/*yield*/,test_db_1.testDb.set(e,[n])];case 1:return s=g.sent(),[4/*yield*/,test_db_1.testDb.get(e)];case 2:return 1!==(r=g.sent()).length?(console.log({setResult:s,getResult:r}),console.log("Invalid length"),process.exit(1)):console.log("".concat(e," Set test passed")),[4/*yield*/,test_db_1.testDb.push(e,t())];case 3:return l=g.sent(),[4/*yield*/,test_db_1.testDb.get(e)];case 4:return 2!==(c=g.sent()).length?(console.log({pushResult:l,getResult2:c}),console.log("Invalid length"),process.exit(1)):console.log("".concat(e," Push test passed")),[4/*yield*/,test_db_1.testDb.remove(e,(
// NB: we don't remove first Id
function(e){return e.id!==o}))];case 5:return 1!==(a=g.sent()).amountRemoved?(console.log({removeResult:a}),console.log("Invalid amount removed"),process.exit(1)):console.log("".concat(e," Remove test: correct amount removed")),[4/*yield*/,test_db_1.testDb.get(e)];case 6:return 1!==(i=g.sent()).length?(console.log({getResult3:i}),console.log("Invalid length"),process.exit(1)):console.log("".concat(e," Remove test passed")),[4/*yield*/,test_db_1.testDb.update(e,(function(e){return e.id===o}),(function(e){return __assign(__assign({},e),{id:"NEWIDDDD"})}))];case 7:return 1!==(u=g.sent()).amountUpdated?(console.log({updateResult:u}),console.log("Invalid rows updated",{firstId:o}),process.exit(1)):console.log("".concat(e," Update test: right amount of rows updated")),[4/*yield*/,test_db_1.testDb.get(e)];case 8:return"NEWIDDDD"!==(d=g.sent())[0].id?(console.log({firstItem:d[0]},"id != NEWIDDDD"),process.exit(1)):console.log("".concat(e," Update test passed")),1!==d.length&&(console.log({getResult4:d}),console.log("Invalid length"),process.exit(1)),console.log("Test Succeeded for ".concat(e)),[2/*return*/,!0]}}))}))};
/**
  NB: we can't do a maketest because this thing relies on logging and we don't want to auto-run it
   */exports.runModelEndToEndTest=runModelEndToEndTest;
//# sourceMappingURL=test-e2e.js.map