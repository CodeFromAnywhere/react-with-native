{
  "createdAt": 1666259855289,
  "updatedAt": 1666259855289,
  "deletedAt": 0,
  "createdFirstAt": 1666259855289,
  "publicAuthorization": [
    "read-docs",
    "search"
  ],
  "isApiExposed": false,
  "isPostApi": false,
  "isGetApi": false,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/db.ts",
  "commentsInside": [],
  "rawText": " (\n  modelName: keyof DbModels,\n  customQueryConfig?: CustomQueryConfig\n) => mergeConfigs<DbModels>(modelName, dbConfig, customQueryConfig)",
  "name": "getMergedQueryConfig",
  "slug": "get-merged-query-config",
  "parameters": [
    {
      "name": "modelName",
      "schema": {
        "type": "string",
        "enum": [
          "Todo",
          "Peer",
          "PeerMessage",
          "Platform",
          "Message",
          "MessageChannel",
          "MessagePreset",
          "Person",
          "PersonInformation",
          "PersonInformationValue",
          "Postable",
          "SocialMediaCredentail",
          "SocialMediaPost",
          "UserPersonPlatformConnection",
          "BundleConfig",
          "MarkdownFileConfig",
          "OperationConfig",
          "OperationIndex",
          "PackageJson",
          "SocialMediaCallToAction",
          "TsBuildError",
          "TsComment",
          "TsConfig",
          "TsExport",
          "TsFunction",
          "TsImport",
          "TsInterface",
          "TsLintWarning",
          "TsVariable",
          "WebsiteCallToAction",
          "Address",
          "Area",
          "City",
          "Country",
          "Location",
          "KvmdWord",
          "MarkdownWord",
          "NepaliEnglishTranslationMatrix",
          "Statement",
          "TokiPonaMatrix",
          "Translation",
          "Word",
          "WordCategory",
          "WordMatrix",
          "SlugModelType",
          "AppDeveloper",
          "Assignment",
          "Bag",
          "Calendar",
          "DataPoint",
          "Deliverable",
          "Diary",
          "Feeling",
          "FeelingLog",
          "Folder",
          "Host",
          "Inventory",
          "Item",
          "ItemCategory",
          "KvmdShortcut",
          "Label",
          "Light",
          "Listing",
          "LoginCredential",
          "Material",
          "ProgressReport",
          "Question",
          "Reservation",
          "Resource",
          "Shit",
          "ShitLog",
          "ShoppingList",
          "Shortcut",
          "Student",
          "Student2",
          "TaskError",
          "Thing",
          "TodoFile",
          "Trackable",
          "User",
          "UserCredential",
          "JeepType",
          "LocationType",
          "Activity",
          "CompanyRequirement",
          "CompanySize",
          "CompanyType",
          "Company",
          "ContactInformation",
          "Contribution",
          "EsgMetric",
          "ProductCategory",
          "Product",
          "ProofState",
          "Proof",
          "SustainabilityPlan",
          "ValueChainPhase"
        ]
      },
      "simplifiedSchema": {
        "enum": [
          "Todo",
          "Peer",
          "PeerMessage",
          "Platform",
          "Message",
          "MessageChannel",
          "MessagePreset",
          "Person",
          "PersonInformation",
          "PersonInformationValue",
          "Postable",
          "SocialMediaCredentail",
          "SocialMediaPost",
          "UserPersonPlatformConnection",
          "BundleConfig",
          "MarkdownFileConfig",
          "OperationConfig",
          "OperationIndex",
          "PackageJson",
          "SocialMediaCallToAction",
          "TsBuildError",
          "TsComment",
          "TsConfig",
          "TsExport",
          "TsFunction",
          "TsImport",
          "TsInterface",
          "TsLintWarning",
          "TsVariable",
          "WebsiteCallToAction",
          "Address",
          "Area",
          "City",
          "Country",
          "Location",
          "KvmdWord",
          "MarkdownWord",
          "NepaliEnglishTranslationMatrix",
          "Statement",
          "TokiPonaMatrix",
          "Translation",
          "Word",
          "WordCategory",
          "WordMatrix",
          "SlugModelType",
          "AppDeveloper",
          "Assignment",
          "Bag",
          "Calendar",
          "DataPoint",
          "Deliverable",
          "Diary",
          "Feeling",
          "FeelingLog",
          "Folder",
          "Host",
          "Inventory",
          "Item",
          "ItemCategory",
          "KvmdShortcut",
          "Label",
          "Light",
          "Listing",
          "LoginCredential",
          "Material",
          "ProgressReport",
          "Question",
          "Reservation",
          "Resource",
          "Shit",
          "ShitLog",
          "ShoppingList",
          "Shortcut",
          "Student",
          "Student2",
          "TaskError",
          "Thing",
          "TodoFile",
          "Trackable",
          "User",
          "UserCredential",
          "JeepType",
          "LocationType",
          "Activity",
          "CompanyRequirement",
          "CompanySize",
          "CompanyType",
          "Company",
          "ContactInformation",
          "Contribution",
          "EsgMetric",
          "ProductCategory",
          "Product",
          "ProofState",
          "Proof",
          "SustainabilityPlan",
          "ValueChainPhase"
        ],
        "type": "string"
      },
      "required": true
    },
    {
      "name": "customQueryConfig",
      "schema": {
        "$ref": "#/definitions/CustomQueryConfig"
      },
      "simplifiedSchema": {
        "fullComment": "NB: the dbStorageMethod cannot be specified here because this is a static configuration per db-model and cannot be specified on a per-query basis.\n\nAlso you can't specify projectRelativePath and operationRelativePath. It should not be needed, you should specify the db storage locations in the createDb config.",
        "nb": "the dbStorageMethod cannot be specified here because this is a static configuration per db-model and cannot be specified on a per-query basis.",
        "properties": [
          {
            "name": "manualProjectRoot",
            "required": false,
            "schema": {
              "fullComment": "if specified, this will be used as the root path to find your data in\n\nif not specified, uses the db folder in your project root and in any operation\n\nNB: If you set this, the model interfaces of your current project are applied on another project! Make sure they are the same there before you run such queries.",
              "nb": "If you set this, the model interfaces of your current project are applied on another project! Make sure they are the same there before you run such queries.",
              "type": "string"
            }
          },
          {
            "name": "operationName",
            "required": false,
            "schema": {
              "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
              "type": "string"
            }
          }
        ],
        "type": "object"
      },
      "required": false
    }
  ],
  "description": "",
  "returnType": {
    "rawType": "import(\"/Users/king/King/operations/tools/database/fs-orm/build/types\").QueryConfig & { dbStorageMethod: any; manualProjectRoot: string; }",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 1,
  "size": {
    "characters": 139,
    "lines": 4,
    "bytes": 139,
    "bytesPerCharacter": 1,
    "charactersPerLine": 35,
    "linesPerFile": 4,
    "numberOfFiles": 1
  },
  "id": "ysovtghcgiadkimixizlvtes"
}