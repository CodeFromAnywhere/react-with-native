{
  "createdAt": 1670218574976,
  "updatedAt": 1670218574976,
  "deletedAt": 0,
  "createdFirstAt": 1670218574976,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "upsertDbModel",
  "slug": "upsert-db-model",
  "operationRelativeTypescriptFilePath": "src/upsertDbModel.ts",
  "type": {
    "rawType": "<KInterfaceName extends keyof import(\"/Users/king/King/operations/tools/generated/sdk-db/build/sdk-db\").DbModels, KItem extends import(\"/Users/king/King/operations/tools/generated/sdk-db/build/sdk-db\").DbModels[KInterfaceName]>(interfaceName: KInterfaceName, data: KItem | KItem[], isNew?: boolean | undefined) => Promise<import(\"/Users/king/King/operations/tools/purpose/codebase-introspection/database/fs-orm/build/types\").DbQueryResult>",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "async <\n  KInterfaceName extends keyof DbModels,\n  KItem extends DbModels[KInterfaceName]\n>(\n  interfaceName: KInterfaceName,\n  data: KItem | KItem[],\n  /**\n   * NOT USED\n   */\n  isNew?: boolean\n): Promise<DbQueryResult> => {\n  if (!data || (Array.isArray(data) && data.length === 0)) {\n    return { isSuccesful: false, message: \"Please provide some data\" };\n  }\n\n  // use the first item to get the operationName, sometimes needed for storing in the right location\n  const item = Array.isArray(data) ? data[0] : data;\n  const { operationName } = item;\n\n  /**\n  \n  Assets need to be placed: \n\n  1) find all assets in data\n\n  2) for every parameter that adheres to asset naming convention, call `processAsset`\n\n  */\n\n  const config: CustomQueryConfig = { operationName };\n\n  const realData = (await Promise.all(\n    makeArray(data).map((item) => {\n      return processItemAssets(item, interfaceName, operationName, config);\n    })\n  )) as KItem[];\n\n  // console.dir({ realData }, { depth: 999 });\n  // return { message: \"test\" };\n  //@ts-ignore\n  const upsertResult = await db.upsert(interfaceName, realData, config);\n\n  return upsertResult;\n}",
  "description": "upserts an instance of an db data interface from the db in a typesafe way",
  "id": "copxjxjtkelusujabqnuafbl"
}