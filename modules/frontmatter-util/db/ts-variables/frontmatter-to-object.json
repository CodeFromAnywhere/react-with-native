{
  "createdAt": 1669384992063,
  "updatedAt": 1669384992063,
  "deletedAt": 0,
  "createdFirstAt": 1669384992063,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "frontmatterToObject",
  "slug": "frontmatter-to-object",
  "operationRelativeTypescriptFilePath": "src/frontmatterToObject.ts",
  "type": {
    "rawType": "(frontmatter: import(\"/Users/king/King/operations/tools/types/matter-types/build/Frontmatter\").Frontmatter, schema: import(\"/Users/king/King/operations/tools/types/code-types/build/SimplifiedSchema\").SimplifiedSchema) => import(\"/Users/king/King/operations/tools/types/matter-types/build/FrontmatterParse\").FrontmatterParse",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "(\n  frontmatter: Frontmatter,\n  schema: SimplifiedSchema\n): FrontmatterParse => {\n  if (!schema.properties || !schema.properties.length) {\n    return {};\n  }\n\n  const valueObjectArray: { [key: string]: any }[] = schema.properties\n    .map((property) => {\n      const value = frontmatter[property.name]\n        ? frontmatter[property.name].trim()\n        : undefined;\n\n      if (value === undefined) return;\n\n      const assetInputType = getAssetInputType(property.name);\n\n      if (\n        (property.schema.type === \"object\" ||\n          property.schema.type === \"array\") &&\n        assetInputType?.type\n      ) {\n        // it's a backendAsset\n\n        const backendAssets: BackendAsset[] = findEmbeds(value).map((x) => {\n          return { alt: x.alt, relativePath: x.src };\n        });\n\n        if (backendAssets.length === 0) return;\n\n        if (assetInputType.isMultiple) {\n          return { [property.name]: backendAssets };\n        }\n\n        return { [property.name]: backendAssets[0] };\n      }\n\n      if (property.schema.type === \"number\" && property.name.endsWith(\"At\")) {\n        const unixTimestamp = tryParseDate(value);\n\n        return { [property.name]: unixTimestamp };\n      }\n\n      if (property.schema.type === \"boolean\") {\n        if (value === \"true\") return { [property.name]: true };\n        if (value === \"false\") return { [property.name]: false };\n        return;\n      }\n\n      if (property.schema.type === \"number\") {\n        const number = Number(value);\n\n        if (isNaN(number)) return;\n\n        return { [property.name]: number };\n      }\n\n      if (property.schema.type === \"null\") {\n        if (value !== \"null\") {\n          return;\n        }\n\n        return { [property.name]: null };\n      }\n\n      if (property.schema.type === \"string\") {\n        return { [property.name]: parseFrontmatterString(value) };\n      }\n\n      if (property.schema.type === \"array\") {\n        // turn into comma separated\n        // Let's only support string[] for now!\n\n        const itemString = value\n          .split(\",\")\n          .map((x) => x.trim())\n          .map(parseFrontmatterString);\n\n        return { [property.name]: itemString };\n      }\n\n      if (property.schema.type === \"object\") {\n        // should not be supported\n        return;\n      }\n\n      return;\n    })\n    .filter(notEmpty);\n\n  const parse = mergeObjectsArray(valueObjectArray);\n\n  return parse;\n}",
  "description": "",
  "id": "ivtiilvbhctaegizpitmslru"
}