[
  {
    "createdAt": 1670215600352,
    "updatedAt": 1670215600352,
    "deletedAt": 0,
    "createdFirstAt": 1670215600352,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/useMultiAudio.tsx",
    "comment": "- Implement a component that preloads all audios for the `ShortMarkdown` and lets you play one with a callback (look at https://stackoverflow.com/questions/47686345/playing-sound-in-react-js)\n- If slide has audio belonging to it, find it and play it. Start at certain point, depending on which part you are at.\n- Select the correct audio for every slide, and get the API url for it. Load it in into an `<audio>` element once you go to the slide.",
    "rawStatement": "export const useMultiAudio = (urls: string[]) => {\n  const [sources, setSources] = useState<\n    { url: string; audio: HTMLAudioElement }[]\n  >([]);\n\n  const [players, setPlayers] = useState<{ url: string; playing: boolean }[]>(\n    []\n  );\n  useEffect(() => {\n    setSources(\n      urls.map((url) => {\n        return {\n          url,\n          audio: new Audio(url),\n        };\n      })\n    );\n\n    setPlayers(\n      urls.map((url) => {\n        return {\n          url,\n          playing: false,\n        };\n      })\n    );\n  }, [urls.length]);\n\n  const toggle = (targetIndex: number) => () => {\n    if (!players[targetIndex]) {\n      console.log(\"VAAG\");\n      return;\n    }\n    const newPlayers = [...players];\n    const currentIndex = players.findIndex((p) => p.playing === true);\n    if (currentIndex !== -1 && currentIndex !== targetIndex) {\n      newPlayers[currentIndex].playing = false;\n      newPlayers[targetIndex].playing = true;\n    } else if (currentIndex !== -1) {\n      newPlayers[targetIndex].playing = false;\n    } else {\n      newPlayers[targetIndex].playing = true;\n    }\n    setPlayers(newPlayers);\n  };\n\n  useEffect(() => {\n    sources.forEach((source, i) => {\n      players[i].playing ? source.audio.play() : source.audio.pause();\n    });\n  }, [sources, players]);\n\n  useEffect(() => {\n    sources.forEach((source, i) => {\n      source.audio.addEventListener(\"ended\", () => {\n        const newPlayers = [...players];\n        newPlayers[i].playing = false;\n        setPlayers(newPlayers);\n      });\n    });\n    return () => {\n      sources.forEach((source, i) => {\n        source.audio.removeEventListener(\"ended\", () => {\n          const newPlayers = [...players];\n          newPlayers[i].playing = false;\n          setPlayers(newPlayers);\n        });\n      });\n    };\n  }, []);\n\n  return { players, toggle };\n};",
    "parameters": {},
    "types": [],
    "firstLine": 3,
    "lastLine": 9,
    "id": "wmrgblzsyoylzjjlnxernlno"
  }
]