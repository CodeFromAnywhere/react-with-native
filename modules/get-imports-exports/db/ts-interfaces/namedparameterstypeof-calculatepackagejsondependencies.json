{
  "createdAt": 1668449024501,
  "updatedAt": 1668449024501,
  "deletedAt": 0,
  "createdFirstAt": 1668449024501,
  "id": "namedparameterstypeof-calculatepackagejsondependencies",
  "name": "NamedParameters<typeof calculatePackageJsonDependencies>",
  "slug": "namedparameterstypeof-calculatepackagejsondependencies",
  "operationRelativeTypescriptFilePath": "src/calculatePackageJsonDependencies.ts",
  "hasGeneric": false,
  "isExported": false,
  "isOperationIndex": false,
  "description": "",
  "isDbModel": false,
  "commentsInside": [],
  "type": {
    "typeDefinition": {
      "type": "object",
      "properties": {
        "dependencies": {
          "$ref": "#/definitions/PackageInfoObject",
          "description": "Current dependencies object in your operation"
        },
        "imports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Creation%3CTsImport%3E"
          },
          "description": "All imports found in your operation"
        },
        "operations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Operation"
          },
          "description": "All package-json's in your monorepo"
        },
        "operationName": {
          "type": "string"
        }
      },
      "required": [
        "imports",
        "operations",
        "operationName"
      ],
      "additionalProperties": false
    },
    "simplifiedSchema": {
      "properties": [
        {
          "name": "dependencies",
          "required": false,
          "schema": {
            "fullComment": "Current dependencies object in your operation\n\n",
            "properties": [],
            "type": "object"
          }
        },
        {
          "name": "imports",
          "required": true,
          "schema": {
            "fullComment": "All imports found in your operation",
            "items": [],
            "type": "array"
          }
        },
        {
          "name": "operations",
          "required": true,
          "schema": {
            "fullComment": "All package-json's in your monorepo",
            "items": [
              {
                "schema": {
                  "fullComment": "--- dbStorageMethod: jsonSingle operationRelativePath: package.json\n---\n\nModel for `typerepo` operations. Stored in `package.json` in every package (compatible with regular npm package.json data structure). An `Operation` is a NPM Package that applies the `typerepo` convention.\n\nTODO: add a validation to package.json files for the whole project, to ensure i can apply `fs-orm` convention",
                  "todo": "add a validation to package.json files for the whole project, to ensure i can apply `fs-orm` convention",
                  "properties": [
                    {
                      "name": "slug",
                      "required": true,
                      "schema": {
                        "fullComment": "kebab-case of the name, should be unique\n\nuse this for any identifier that's not an Id-type. Usually this is a kebab-case version of a written text, but it can also be a file path, for example.",
                        "type": "string"
                      }
                    },
                    {
                      "name": "name",
                      "required": true,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "language",
                      "required": true,
                      "schema": {
                        "enum": [
                          "english",
                          "dutch",
                          "nepali",
                          "portuguese",
                          "brazilian",
                          "german",
                          "french",
                          "spanish",
                          "italian",
                          "norwegian",
                          "swedish",
                          "danish",
                          "vietnamese",
                          "indonesian",
                          "southAfrican",
                          "tokiPona",
                          "hindi",
                          "mandarin",
                          "arabic",
                          "bengali",
                          "urdu",
                          "japanese",
                          "swahili"
                        ],
                        "fullComment": "all currently supported languages",
                        "type": "string"
                      }
                    },
                    {
                      "name": "createdAt",
                      "required": true,
                      "schema": {
                        "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                        "type": "number"
                      }
                    },
                    {
                      "name": "updatedAt",
                      "required": true,
                      "schema": {
                        "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                        "type": "number"
                      }
                    },
                    {
                      "name": "deletedAt",
                      "required": true,
                      "schema": {
                        "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                        "type": "number"
                      }
                    },
                    {
                      "name": "createdFirstAt",
                      "required": true,
                      "schema": {
                        "fullComment": "in some cases, data can be created before it was created in our system. In this case, use CreatedFirstAt if this information is important.\n\nTime\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                        "type": "number"
                      }
                    },
                    {
                      "name": "operationName",
                      "required": true,
                      "schema": {
                        "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
                        "type": "null"
                      }
                    },
                    {
                      "name": "projectRelativePath",
                      "required": true,
                      "schema": {
                        "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
                        "type": "string"
                      }
                    },
                    {
                      "name": "operationRelativePath",
                      "required": false,
                      "schema": {
                        "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
                        "type": "string"
                      }
                    },
                    {
                      "name": "id",
                      "required": true,
                      "schema": {
                        "fullComment": "Should be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
                        "type": "string"
                      }
                    },
                    {
                      "name": "categoryStackCalculated",
                      "required": false,
                      "schema": {
                        "fullComment": "In case of jsonSingle storageMethod, the categoryStack is generated by the location of the file in the db model folder in the db folder.\n\nNB: Changing this value when updating/upserting, changes where the item is located!\n\nTaken from the location in the folder of the db-model.\n\nNB: Changing this value when updating/upserting, changes where the item is located!",
                        "nb": "Changing this value when updating/upserting, changes where the item is located!",
                        "items": [
                          {
                            "schema": {
                              "type": "string"
                            },
                            "name": null
                          }
                        ],
                        "type": "array"
                      }
                    },
                    {
                      "name": "path",
                      "required": false,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "main",
                      "required": false,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "source",
                      "required": false,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "description",
                      "required": false,
                      "schema": {
                        "fullComment": "one-line description of the operation",
                        "type": "string"
                      }
                    },
                    {
                      "name": "version",
                      "required": false,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "private",
                      "required": false,
                      "schema": {
                        "type": "boolean"
                      }
                    },
                    {
                      "name": "author",
                      "required": false,
                      "schema": {
                        "properties": [],
                        "type": "object"
                      }
                    },
                    {
                      "name": "repository",
                      "required": false,
                      "schema": {
                        "properties": [],
                        "type": "object"
                      }
                    },
                    {
                      "name": "homepage",
                      "required": false,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "dependencies",
                      "required": false,
                      "schema": {
                        "fullComment": "",
                        "properties": [],
                        "type": "object"
                      }
                    },
                    {
                      "name": "devDependencies",
                      "required": false,
                      "schema": {
                        "fullComment": "",
                        "properties": [],
                        "type": "object"
                      }
                    },
                    {
                      "name": "peerDependencies",
                      "required": false,
                      "schema": {
                        "fullComment": "",
                        "properties": [],
                        "type": "object"
                      }
                    },
                    {
                      "name": "bin",
                      "required": false,
                      "schema": {
                        "properties": [],
                        "type": "object"
                      }
                    },
                    {
                      "name": "workspaces",
                      "required": false,
                      "schema": {
                        "items": [
                          {
                            "schema": {
                              "type": "string"
                            },
                            "name": null
                          }
                        ],
                        "type": "array"
                      }
                    },
                    {
                      "name": "scripts",
                      "required": false,
                      "schema": {
                        "properties": [],
                        "type": "object"
                      }
                    },
                    {
                      "name": "operation",
                      "required": false,
                      "schema": {
                        "fullComment": "custom keys, both indexed and generated",
                        "properties": [
                          {
                            "name": "codeOwner_personId",
                            "required": false,
                            "schema": {
                              "fullComment": "Who is responsible for this operation?\n\nShould be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
                              "type": "string"
                            }
                          },
                          {
                            "name": "isNodeServer",
                            "required": false,
                            "schema": {
                              "fullComment": "Set to true if this operations serves a server. Will be omitted from api.",
                              "type": "boolean"
                            }
                          },
                          {
                            "name": "isBundle",
                            "required": false,
                            "schema": {
                              "fullComment": "Set to true if this package.json is your bundle. This means almost all other config doesn't apply.\n\nreplaces `isSensibleProject`.\n\nTODO: Might be interesting to see what the differences between the two are, and if it is truly needed to create a convention for this. The bundle folder structure convention is is the more conventional way of structuring a monorepo, but I doubt the if it really benefits me, especially if I have to maintain two conventions for this, and do different things based on the type of applied convention.",
                              "todo": "Might be interesting to see what the differences between the two are, and if it is truly needed to create a convention for this. The bundle folder structure convention is is the more conventional way of structuring a monorepo, but I doubt the if it really benefits me, especially if I have to maintain two conventions for this, and do different things based on the type of applied convention.",
                              "type": "boolean"
                            }
                          },
                          {
                            "name": "markdown",
                            "required": false,
                            "schema": {
                              "fullComment": "Indexed from OPERATION.md, don't edit this if you already have an OPERATION.md! If you don't, you can use this property to change the long-form operation description.\n\nMotivation to have both: it's annoying to write markdown inside of JSON in VSCode...\n\na string that is known to contain markdown.",
                              "type": "string"
                            }
                          },
                          {
                            "name": "hasGeneratedDependenciesIndexed",
                            "required": false,
                            "schema": {
                              "fullComment": "If true, it means that this operation has dependency on one or more operations that have been generated at runtime. We need to know this because it can easily cause circular imports if we don't filter them out sometimes",
                              "type": "boolean"
                            }
                          },
                          {
                            "name": "buildResultIndexed",
                            "required": false,
                            "schema": {
                              "properties": [
                                {
                                  "name": "buildSucceeded",
                                  "required": false,
                                  "schema": {
                                    "type": "boolean"
                                  }
                                },
                                {
                                  "name": "dependenciesBuildsFailed",
                                  "required": false,
                                  "schema": {
                                    "type": "boolean"
                                  }
                                },
                                {
                                  "name": "indexImportExportError",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "lintProblems",
                                  "required": false,
                                  "schema": {
                                    "items": [
                                      {
                                        "schema": {
                                          "type": "string"
                                        },
                                        "name": null
                                      }
                                    ],
                                    "type": "array"
                                  }
                                },
                                {
                                  "name": "indexInteracesErrors",
                                  "required": false,
                                  "schema": {
                                    "items": [
                                      {
                                        "schema": {
                                          "type": "string"
                                        },
                                        "name": null
                                      }
                                    ],
                                    "type": "array"
                                  }
                                },
                                {
                                  "name": "indexErrors",
                                  "required": false,
                                  "schema": {
                                    "items": [
                                      {
                                        "schema": {
                                          "type": "string"
                                        },
                                        "name": null
                                      }
                                    ],
                                    "type": "array"
                                  }
                                }
                              ],
                              "type": "object"
                            }
                          },
                          {
                            "name": "lastPullTimeAtIndexed",
                            "required": false,
                            "schema": {
                              "type": "number"
                            }
                          },
                          {
                            "name": "lastRebuildAt",
                            "required": false,
                            "schema": {
                              "type": "number"
                            }
                          },
                          {
                            "name": "sizeIndexed",
                            "required": false,
                            "schema": {
                              "fullComment": "objective size measurements of all files in a folder\n\nsummary for a folder should contain file-summaries for different filetypes and an overal file summary",
                              "properties": [
                                {
                                  "name": "size",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "type interface that can be used to summarize multiple files",
                                    "properties": [
                                      {
                                        "name": "numberOfFiles",
                                        "required": false,
                                        "schema": {
                                          "fullComment": "if this is about multiple files, the number of files is specified here",
                                          "type": "number"
                                        }
                                      },
                                      {
                                        "name": "characters",
                                        "required": true,
                                        "schema": {
                                          "fullComment": "amount of characters",
                                          "type": "number"
                                        }
                                      },
                                      {
                                        "name": "lines",
                                        "required": true,
                                        "schema": {
                                          "fullComment": "amount of lines",
                                          "type": "number"
                                        }
                                      },
                                      {
                                        "name": "bytes",
                                        "required": true,
                                        "schema": {
                                          "fullComment": "amount of bytes",
                                          "type": "number"
                                        }
                                      },
                                      {
                                        "name": "linesPerFile",
                                        "required": true,
                                        "schema": {
                                          "fullComment": "rounded, amount of lines per file (averaged)",
                                          "type": "number"
                                        }
                                      },
                                      {
                                        "name": "charactersPerLine",
                                        "required": true,
                                        "schema": {
                                          "fullComment": "rounded, amount of characters per line (averaged)",
                                          "type": "number"
                                        }
                                      },
                                      {
                                        "name": "bytesPerCharacter",
                                        "required": true,
                                        "schema": {
                                          "fullComment": "rounded, amount of bytes per character",
                                          "type": "number"
                                        }
                                      }
                                    ],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "textSize",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "type interface that can be used to summarize multiple files",
                                    "properties": [
                                      {
                                        "name": "numberOfFiles",
                                        "required": false,
                                        "schema": {
                                          "fullComment": "if this is about multiple files, the number of files is specified here",
                                          "type": "number"
                                        }
                                      },
                                      {
                                        "name": "characters",
                                        "required": true,
                                        "schema": {
                                          "fullComment": "amount of characters",
                                          "type": "number"
                                        }
                                      },
                                      {
                                        "name": "lines",
                                        "required": true,
                                        "schema": {
                                          "fullComment": "amount of lines",
                                          "type": "number"
                                        }
                                      },
                                      {
                                        "name": "bytes",
                                        "required": true,
                                        "schema": {
                                          "fullComment": "amount of bytes",
                                          "type": "number"
                                        }
                                      },
                                      {
                                        "name": "linesPerFile",
                                        "required": true,
                                        "schema": {
                                          "fullComment": "rounded, amount of lines per file (averaged)",
                                          "type": "number"
                                        }
                                      },
                                      {
                                        "name": "charactersPerLine",
                                        "required": true,
                                        "schema": {
                                          "fullComment": "rounded, amount of characters per line (averaged)",
                                          "type": "number"
                                        }
                                      },
                                      {
                                        "name": "bytesPerCharacter",
                                        "required": true,
                                        "schema": {
                                          "fullComment": "rounded, amount of bytes per character",
                                          "type": "number"
                                        }
                                      }
                                    ],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "dataSize",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "type interface that can be used to summarize multiple files",
                                    "properties": [
                                      {
                                        "name": "numberOfFiles",
                                        "required": false,
                                        "schema": {
                                          "fullComment": "if this is about multiple files, the number of files is specified here",
                                          "type": "number"
                                        }
                                      },
                                      {
                                        "name": "characters",
                                        "required": true,
                                        "schema": {
                                          "fullComment": "amount of characters",
                                          "type": "number"
                                        }
                                      },
                                      {
                                        "name": "lines",
                                        "required": true,
                                        "schema": {
                                          "fullComment": "amount of lines",
                                          "type": "number"
                                        }
                                      },
                                      {
                                        "name": "bytes",
                                        "required": true,
                                        "schema": {
                                          "fullComment": "amount of bytes",
                                          "type": "number"
                                        }
                                      },
                                      {
                                        "name": "linesPerFile",
                                        "required": true,
                                        "schema": {
                                          "fullComment": "rounded, amount of lines per file (averaged)",
                                          "type": "number"
                                        }
                                      },
                                      {
                                        "name": "charactersPerLine",
                                        "required": true,
                                        "schema": {
                                          "fullComment": "rounded, amount of characters per line (averaged)",
                                          "type": "number"
                                        }
                                      },
                                      {
                                        "name": "bytesPerCharacter",
                                        "required": true,
                                        "schema": {
                                          "fullComment": "rounded, amount of bytes per character",
                                          "type": "number"
                                        }
                                      }
                                    ],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "codeSize",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "type interface that can be used to summarize multiple files",
                                    "properties": [
                                      {
                                        "name": "numberOfFiles",
                                        "required": false,
                                        "schema": {
                                          "fullComment": "if this is about multiple files, the number of files is specified here",
                                          "type": "number"
                                        }
                                      },
                                      {
                                        "name": "characters",
                                        "required": true,
                                        "schema": {
                                          "fullComment": "amount of characters",
                                          "type": "number"
                                        }
                                      },
                                      {
                                        "name": "lines",
                                        "required": true,
                                        "schema": {
                                          "fullComment": "amount of lines",
                                          "type": "number"
                                        }
                                      },
                                      {
                                        "name": "bytes",
                                        "required": true,
                                        "schema": {
                                          "fullComment": "amount of bytes",
                                          "type": "number"
                                        }
                                      },
                                      {
                                        "name": "linesPerFile",
                                        "required": true,
                                        "schema": {
                                          "fullComment": "rounded, amount of lines per file (averaged)",
                                          "type": "number"
                                        }
                                      },
                                      {
                                        "name": "charactersPerLine",
                                        "required": true,
                                        "schema": {
                                          "fullComment": "rounded, amount of characters per line (averaged)",
                                          "type": "number"
                                        }
                                      },
                                      {
                                        "name": "bytesPerCharacter",
                                        "required": true,
                                        "schema": {
                                          "fullComment": "rounded, amount of bytes per character",
                                          "type": "number"
                                        }
                                      }
                                    ],
                                    "type": "object"
                                  }
                                }
                              ],
                              "type": "object"
                            }
                          },
                          {
                            "name": "folderNameIndexed",
                            "required": false,
                            "schema": {
                              "fullComment": "name of the operation folder",
                              "type": "string"
                            }
                          },
                          {
                            "name": "relativeOperationLocationPathIndexed",
                            "required": false,
                            "schema": {
                              "fullComment": "relative path to the operation (does not include operation folder itself)\n\nrelative from project root",
                              "type": "string"
                            }
                          },
                          {
                            "name": "classificationIndexed",
                            "required": false,
                            "schema": {
                              "enum": [
                                "cjs",
                                "ts",
                                "esm",
                                "node-cjs",
                                "node-esm",
                                "node-ts",
                                "server-cjs",
                                "ui-web",
                                "ui-app",
                                "ui-ts",
                                "ui-cjs",
                                "ui-esm"
                              ],
                              "fullComment": "`OperationClassification` tells you to what kind of environment the operation can be exposed to. It tells you things about how it will be built. There are three categories: Full stack, frontend only, and backend only. The aim is to do as much as possible in the full stack realm so it can be reused anywhere. If that is not possible, `ui-esm` is preferred for the frontend, or `node-esm` for things that require backend.\n\nTODO: It would be great to learn more about this topic and see if I can make more cross-environment packages. A great use case would be to create a wrapper around the current `fs-orm` to enable using it at the frontend too.\n\n# Possible values\n\nFULL STACK\n\n- `cjs`: only js (no node) (well, ts of course, but it gets built into common js)\n\n- `ts`: non-built typescript code (needs to be transpiled, not recommended)\n\nTODO: `esm`: builds to ESM module resolved Javascript\n\nFRONTEND ONLY (cannot be used within backend-only operations)\n\n- `ui-web`: has next.config.js and thus exposes something on some port when it is ran. next.js + react-based...\n\n- `ui-app`: uses react-native and exposes something on some port when it is ran\n\n- `ui-ts`: uses react (with (native)), which main entry points to typescript es6 files (this ui package cannot be built, should be transpiled. Primarily used for big ui libraries tied to a `ui-web` and `ui-app` for convenience. For other things, it is highly discouraged, please use `ui-cjs` or `ui-esm`)\n\n- `ui-cjs`: ui which main entry points to javascript es5 files (this ui package can be built). don't import ESM packages in here, this may give problems.\n\n- `ui-esm`: ui which builds to ESM module resolved Javascript. All packages that use `ui-esm` packages, need to be `ui-esm`, `ui-es6`, `ui-web`, or `ui-app` in order to work properly. It seems to have difficulties using this in `ui-cjs`\n\nBACKEND ONLY (cannot be used within frontend-only operations)\n\n- `node-cjs`: includes other node packages, operations, core-imports, and globals.\n\nTODO: `node-esm`: Typescript package that is built to ESM Javascript which also includes all node packages, operations, core-imports and globals.\n\nTODO: `node-ts`: transpilable node package\n\n- `server-cjs`: exposes something on some port when it is ran and uses node code\n\n# Indexation\n\nOperations will be classified automatically. It is good to remember that:\n\n- It will be classified as UI if `isUiOperation` resolves to true\n- It will be classified as Node if `Operation` has a (dev)dependency on `@types/node`.\n- Otherwise, it will be classified as base typescript (full stack)\n- It will be classified to an ESM operation if `tsconfigCompilesEsm` resolves to true.\n- It will be classified to a TS operation if `packageCompilesTs` resolves to true\n- In order for it to be classified as a server, you must set `isNodeServer` to true in the `.operation` config object of `Operation`",
                              "todo": "It would be great to learn more about this topic and see if I can make more cross-environment packages. A great use case would be to create a wrapper around the current `fs-orm` to enable using it at the frontend too.",
                              "type": "string"
                            }
                          },
                          {
                            "name": "packageDependenciesIndexed",
                            "required": false,
                            "schema": {
                              "fullComment": "external package dependency names (non-operation)\n\nTODO: this are imported names, not the module names.... rename this and add them both under clear names",
                              "todo": "this are imported names, not the module names.... rename this and add them both under clear names",
                              "items": [
                                {
                                  "schema": {
                                    "type": "string"
                                  },
                                  "name": null
                                }
                              ],
                              "type": "array"
                            }
                          },
                          {
                            "name": "operationDependenciesIndexed",
                            "required": false,
                            "schema": {
                              "fullComment": "operation dependency names",
                              "items": [
                                {
                                  "schema": {
                                    "type": "string"
                                  },
                                  "name": null
                                }
                              ],
                              "type": "array"
                            }
                          },
                          {
                            "name": "coreDependenciesIndexed",
                            "required": false,
                            "schema": {
                              "fullComment": "core dependencies (e.g. `path` and `fs`)",
                              "items": [
                                {
                                  "schema": {
                                    "type": "string"
                                  },
                                  "name": null
                                }
                              ],
                              "type": "array"
                            }
                          },
                          {
                            "name": "indirectDependencies",
                            "required": false,
                            "schema": {
                              "fullComment": "Sometimes you are using function in a UI, which cannot be inferred with imports because they are used indirectly via an api. Here you can specify which operations on the backend are needed for an operation (ui mostly)\n\nThis array is simply a list of operation names needed for this operation that are not imported.\n\nNB: No need to specify things here that you also import in this operation, because these are already automatically detected.",
                              "nb": "No need to specify things here that you also import in this operation, because these are already automatically detected.",
                              "items": [
                                {
                                  "schema": {
                                    "type": "string"
                                  },
                                  "name": null
                                }
                              ],
                              "type": "array"
                            }
                          },
                          {
                            "name": "authors",
                            "required": false,
                            "schema": {
                              "fullComment": "A list of authors\n\nShould be used to create bundle AUTHORS.md",
                              "items": [
                                {
                                  "schema": {
                                    "type": "string"
                                  },
                                  "name": null
                                }
                              ],
                              "type": "array"
                            }
                          },
                          {
                            "name": "contributors",
                            "required": false,
                            "schema": {
                              "fullComment": "A list of contributors\n\nCan be used to create bundle CONTRIBUTORS.md",
                              "items": [
                                {
                                  "schema": {
                                    "type": "string"
                                  },
                                  "name": null
                                }
                              ],
                              "type": "array"
                            }
                          },
                          {
                            "name": "paymentPlanId",
                            "required": false,
                            "schema": {
                              "fullComment": "TODO:",
                              "todo": "",
                              "type": "string"
                            }
                          },
                          {
                            "name": "uiSupport",
                            "required": false,
                            "schema": {
                              "fullComment": "For ui-*, it should be noted which platforms are supported\n\nCan be used to generate nice component in the documentation",
                              "properties": [
                                {
                                  "name": "android",
                                  "required": false,
                                  "schema": {
                                    "type": "boolean"
                                  }
                                },
                                {
                                  "name": "ios",
                                  "required": false,
                                  "schema": {
                                    "type": "boolean"
                                  }
                                },
                                {
                                  "name": "web",
                                  "required": false,
                                  "schema": {
                                    "type": "boolean"
                                  }
                                },
                                {
                                  "name": "description",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "optionally, let others know why they are not supported yet or what good alternatives are in case they are not supported in certain platforms",
                                    "type": "string"
                                  }
                                }
                              ],
                              "type": "object"
                            }
                          },
                          {
                            "name": "skipMinify",
                            "required": false,
                            "schema": {
                              "fullComment": "put on to true if minify doesn't work, so it will be skipped by `rebuildOperation`",
                              "type": "boolean"
                            }
                          },
                          {
                            "name": "isNotSdkable",
                            "required": false,
                            "schema": {
                              "fullComment": "If set to true, this operation will not be included into the SDKs\n\nConfigurable",
                              "type": "boolean"
                            }
                          }
                        ],
                        "type": "object"
                      }
                    }
                  ],
                  "type": "object"
                },
                "name": "Operation"
              }
            ],
            "type": "array"
          }
        },
        {
          "name": "operationName",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "type": "object"
    },
    "typeCoverage": 0,
    "rawType": "NamedParameters<typeof calculatePackageJsonDependencies>",
    "isArray": false,
    "isEnum": false,
    "isEnumLiteral": false,
    "isObject": false,
    "isPrimitive": false
  }
}