{
  "createdAt": 1668331974099,
  "updatedAt": 1668331974099,
  "deletedAt": 0,
  "createdFirstAt": 1668331974099,
  "publicAuthorization": [
    "read",
    "search"
  ],
  "isApiExposed": false,
  "isPostApi": false,
  "isGetApi": false,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/general.ts",
  "commentsInside": [],
  "rawText": " async ({\n  jsonPath,\n  keyLocation,\n  value,\n  debug,\n}: {\n  jsonPath: string;\n  keyLocation: string;\n  value: string;\n  debug?: boolean;\n}) => {\n  const usage =\n    'usage: npx setjsonkey [json-file-path] key1.key2.[index/latest/push].key3 \"value\" (Check https://github.com/Code-From-Anywhere/setjsonkey for more info)';\n\n  // VALIDATION\n\n  if (!keyLocation || keyLocation.length === 0) {\n    console.log(usage);\n    process.exit(0);\n  }\n\n  const jsonPathWithExtension = jsonPath.endsWith(\".json\")\n    ? jsonPath\n    : jsonPath + \".json\";\n  const absolutePath = path.resolve(jsonPathWithExtension);\n  const fileExists = fs.existsSync(absolutePath);\n\n  if (!fileExists) {\n    const folder = getFolder(absolutePath);\n    console.log(\"creating folder because it didn't exist yet\", folder);\n    fs.mkdir(folder, { recursive: true });\n  }\n\n  let object: Object = {};\n\n  if (fileExists) {\n    try {\n      object = JSON.parse(await fs.readFile(absolutePath, \"utf8\"));\n    } catch (e) {\n      console.log(\n        \"No JSON found here, so we're overwriting it with our new JSON\"\n      );\n    }\n  }\n\n  if (typeof object !== \"object\") {\n    object = {};\n  }\n\n  const realValue =\n    value === \"true\" || value === \"false\"\n      ? Boolean(value)\n      : !isNaN(Number(value))\n      ? Number(value)\n      : value;\n\n  // UPDATE/SET JSON key\n  setKeyAtLocation(keyLocation, realValue, object);\n\n  const newObject = JSON.stringify(object, undefined, 2);\n  await fs.writeFile(absolutePath, newObject, { encoding: \"utf8\" });\n\n  if (debug) {\n    console.log({ absolutePath, fileExists, object, newObject });\n    console.log(\"succesfully changed your json!\");\n  }\n}",
  "name": "setJsonKey",
  "slug": "set-json-key",
  "parameters": [
    {
      "name": "{\n  jsonPath,\n  keyLocation,\n  value,\n  debug,\n}",
      "schema": {
        "type": "object",
        "properties": {
          "jsonPath": {
            "type": "string"
          },
          "keyLocation": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "debug": {
            "type": "boolean"
          }
        },
        "required": [
          "jsonPath",
          "keyLocation",
          "value"
        ],
        "additionalProperties": false
      },
      "simplifiedSchema": {
        "properties": [
          {
            "name": "jsonPath",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "keyLocation",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "debug",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "type": "object"
      },
      "required": true
    }
  ],
  "description": "npx setjsonkey [json-path] key1.key2.[index/latest/push].key3 \"value\"\n\n\ncollect arguments 1 2 and 3\nfind file (arg1) in path, import json (or start with empty object in a new file)\nreduce keys (arg2) to go deeper into the object and create keys as they don't exist\nmake sure it works with arrays too\nconvert value string (arg3) to number, boolean if they seem to be like that",
  "returnType": {
    "rawType": "any",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 4,
  "size": {
    "characters": 2021,
    "lines": 74,
    "bytes": 2021,
    "bytesPerCharacter": 1,
    "charactersPerLine": 27,
    "linesPerFile": 74,
    "numberOfFiles": 1
  },
  "id": "kykbyodthtnpwrtzeydwgzdi"
}