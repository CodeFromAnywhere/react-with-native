[{"id":"IbCMBUrbTmlpbcHt","commentsInside":[],"rawText":" <TModels extends { [key: string]: any }>(\n  defaultConfig: DefaultConfig<TModels> | undefined\n) => {\n  const get: DbGet<TModels> = async <TModelName extends Keys<TModels>>(\n    model: TModelName,\n    config?: GetConfig\n  ) => {\n    const defaultDbStorageMethod =\n      defaultConfig?.defaultDbStorageMethods[model];\n\n    const defaults: GetConfig | undefined = defaultConfig?.defaults?.[model];\n    const mergedConfig: Partial<GetConfig> = mergeObjectParameters(\n      config,\n      defaults\n    );\n    const dbFiles = await getDatabaseFiles(model, mergedConfig);\n\n    //The magic\n\n    const dbContentPromises = dbFiles.map(async (f) => {\n      const ext = path.parse(f).ext;\n\n      if (ext === \".json\") {\n        const jsonContent = readJsonFile<\n          TModels[TModelName][] | TModels[TModelName]\n        >(f);\n        return jsonContent;\n      }\n\n      if (ext === \".csv\") {\n        const csvContent = readCsvFile<TModels[TModelName]>(f);\n        return csvContent;\n      }\n\n      if (ext === \".md\") {\n        const mdParse = await readMarkdownFile(f);\n\n        if (!mdParse) return null;\n        const frontmatter = mdParse?.parameters;\n        if (defaultDbStorageMethod === \"markdown\") {\n          const markdownContent = {\n            ...frontmatter,\n            markdown: mdParse.raw,\n          } as TModels[TModelName];\n\n          return markdownContent;\n        }\n\n        const keyValueMarkdownParse = kvMdStringToJson(mdParse.raw);\n\n        const keyValueMarkdown =\n          keyValueMarkdownParse.data as TModels[TModelName][];\n\n        return keyValueMarkdown;\n      }\n\n      // NB: should never happen\n      return null;\n    });\n\n    const dbContent = (await Promise.all(dbContentPromises))\n      .filter(notEmpty)\n      .map((x) => makeArray(x))\n      .flat();\n\n    return dbContent;\n  };\n\n  return get;\n}","name":"makeGet","slug":"make-get","parameters":[],"description":"","returnType":{"rawType":"import(\"/Users/king/King/tools/control-fs/fs-orm/src/types\").DbGet<TModels>","typeDefinition":{"type":"object","properties":{},"optional":false},"typeCoverage":0,"isArray":false,"isEnum":false,"isObject":true,"isPrimitive":false,"isEnumLiteral":false,"simplifiedSchema":{"properties":[],"type":"object"}},"maxIndentationDepth":6,"relativePathFromProjectRoot":"/tools/control-fs/fs-orm/src/makeGet.ts","srcFileId":"/makeGet","operationFolderName":"fs-orm","relativeFilePathFromSrc":"/makeGet.ts","relativeOperationBasePathFromProjectRoot":"/tools/control-fs/fs-orm","operationName":"fs-orm","size":{"characters":1825,"lines":70,"bytes":1825,"bytesPerCharacter":1,"charactersPerfLine":26.071428571428573,"linesPerFile":70,"numberOfFiles":1}}]