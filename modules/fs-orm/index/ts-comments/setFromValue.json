[{"id":"ZuTjPUWZguVULclU","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/tools/control-fs/fs-orm/src/setFromValue.ts","srcFileId":"/setFromValue","operationFolderName":"fs-orm","relativeFilePathFromSrc":"/setFromValue.ts","relativeOperationBasePathFromProjectRoot":"/tools/control-fs/fs-orm","operationName":"fs-orm","comment":"monorepo","rawStatement":"import { kebabCase } from \"convert-case\";","parameters":{},"types":[],"firstLine":1,"lastLine":1},{"id":"ZuTjPUWZguVULclU","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/tools/control-fs/fs-orm/src/setFromValue.ts","srcFileId":"/setFromValue","operationFolderName":"fs-orm","relativeFilePathFromSrc":"/setFromValue.ts","relativeOperationBasePathFromProjectRoot":"/tools/control-fs/fs-orm","operationName":"fs-orm","comment":"used for set and push\n\nused by update, remove, upsert indirectly (through 'set')","rawStatement":"export const setFromValue = async <\n  TModels extends { [key: string]: any },\n  TModelName extends string\n>({\n  informationPath,\n  model,\n  getJson,\n  defaultDbStorageMethod,\n  id,\n}: {\n  defaultDbStorageMethod: DbStorageMethod | undefined;\n  getJson: (oldJson: any) => any;\n  informationPath: string;\n  model: TModelName;\n  id?: string;\n}) => {\n  const modelPathNameSingular = kebabCase(model);\n  const modelPathNamePlural = `${modelPathNameSingular}s`;\n\n  if (defaultDbStorageMethod === \"csv\") {\n    const modelFileName = `${modelPathNamePlural}.csv`;\n    const absolutePath = path.resolve(informationPath, modelFileName);\n    const oldJson =\n      (await readCsvFile<TModels[TModelName]>(absolutePath)) || [];\n\n    const json = getJson(oldJson);\n    const newDataString = csvItemToString(json);\n\n    await fs.writeFile(absolutePath, newDataString, \"utf8\");\n\n    return { success: true };\n  } else if (defaultDbStorageMethod === \"jsonSingle\") {\n    const modelFileName = `${modelPathNameSingular}-${id}.json`;\n    const absolutePath = path.resolve(\n      informationPath,\n      modelPathNamePlural,\n      modelFileName\n    );\n\n    const oldJson = await readJsonFile<TModels[TModelName]>(absolutePath);\n    const overwrite = !!oldJson;\n    const data = getJson(oldJson);\n    const newDataString = JSON.stringify(data, null, 2);\n\n    await fs.writeFile(absolutePath, newDataString, \"utf8\");\n\n    return { overwrite, success: true };\n  } else if (defaultDbStorageMethod === \"jsonMultiple\") {\n    const modelFileName = `${modelPathNamePlural}.json`;\n    const absolutePath = path.resolve(informationPath, modelFileName);\n\n    const oldJson =\n      (await readJsonFile<TModels[TModelName][]>(absolutePath)) || [];\n\n    // add new item to array\n    const json = getJson(oldJson);\n    const newDataString = JSON.stringify(json, null, 2);\n    await fs.writeFile(absolutePath, newDataString, \"utf8\");\n\n    return { success: true };\n  } else if (defaultDbStorageMethod === \"keyValueMarkdown\") {\n    const modelFileName = `${modelPathNamePlural}.md`;\n    const absolutePath = path.resolve(informationPath, modelFileName);\n\n    const kvmdParse: KeyValueMarkdownParse = (await readKvmdFile(\n      absolutePath\n    )) || { data: [], parameters: {} };\n\n    // add new item to array\n\n    const newData = getJson(kvmdParse.data);\n\n    kvmdParse.data = newData;\n\n    const newDataString = kvmdParseToMarkdownString(kvmdParse);\n\n    await fs.writeFile(absolutePath, newDataString, \"utf8\");\n\n    return { success: true };\n  } else if (defaultDbStorageMethod === \"markdown\") {\n    const modelFileName = `${modelPathNameSingular}-${id}.md`;\n\n    const absolutePath = path.join(\n      informationPath,\n      modelPathNamePlural,\n      modelFileName\n    );\n\n    const markdownParse = await readMarkdownFile(absolutePath);\n    const overwrite = !!markdownParse;\n\n    const oldJson = markdownParse\n      ? {\n          markdown: markdownParse.raw,\n          ...markdownParse.parameters,\n        }\n      : null;\n\n    const newJson = getJson(oldJson);\n\n    const { markdown, ...parameters } = newJson[0];\n\n    const newMarkdownParse: MarkdownParse = {\n      parameters,\n      raw: markdown,\n    };\n\n    // console.log({ newJson, newMarkdownParse });\n\n    const markdownString = markdownParseToMarkdownString(newMarkdownParse);\n\n    await fs.writeFile(absolutePath, markdownString, \"utf8\");\n\n    return { success: true, overwrite };\n  }\n};","parameters":{},"types":[],"firstLine":14,"lastLine":18}]