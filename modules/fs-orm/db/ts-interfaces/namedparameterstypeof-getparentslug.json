{
  "createdAt": 1669312123300,
  "updatedAt": 1669312123300,
  "deletedAt": 0,
  "createdFirstAt": 1669312123300,
  "id": "namedparameterstypeof-getparentslug",
  "name": "NamedParameters<typeof getParentSlug>",
  "slug": "namedparameterstypeof-getparentslug",
  "operationRelativeTypescriptFilePath": "src/convention/getParentSlug.ts",
  "hasGeneric": false,
  "isExported": false,
  "isOperationIndex": false,
  "description": "",
  "isDbModel": false,
  "commentsInside": [],
  "type": {
    "typeDefinition": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/Storing%3CKeyValueMarkdownModelType%3E"
        }
      },
      "required": [
        "item"
      ],
      "additionalProperties": false
    },
    "simplifiedSchema": {
      "properties": [
        {
          "name": "item",
          "required": true,
          "schema": {
            "fullComment": "Use this generic if you want to store models in a typesafe way\n\nRemoves the parameters that should not be stored",
            "properties": [
              {
                "name": "id",
                "required": true,
                "schema": {
                  "fullComment": "same as slug\n\nused for compatibility with some general purpose functions\n\nNB: uniqueness is hard to enforce!",
                  "nb": "uniqueness is hard to enforce!",
                  "type": "string"
                }
              },
              {
                "name": "categoryStackCalculated",
                "required": true,
                "schema": {
                  "fullComment": "calculated value that contains the slugs of all preceding categories to this item.\n\nWill be present when fetching from the the db with `fs-orm`\n\nTaken from the location in the folder of the db-model.\n\nNB: Changing this value when updating/upserting, changes where the item is located!",
                  "nb": "Changing this value when updating/upserting, changes where the item is located!",
                  "items": [
                    {
                      "schema": {
                        "type": "string"
                      },
                      "name": null
                    }
                  ],
                  "type": "array"
                }
              },
              {
                "name": "isHeaderCalculated",
                "required": true,
                "schema": {
                  "fullComment": "Calculated value indicating whether or not the item has children",
                  "type": "boolean"
                }
              },
              {
                "name": "name",
                "required": true,
                "schema": {
                  "fullComment": "key\n\nshould be english because it's kind of part of the codebase!",
                  "type": "string"
                }
              },
              {
                "name": "slug",
                "required": true,
                "schema": {
                  "fullComment": "calculated: slug for this key (kebab case form of the name)",
                  "type": "string"
                }
              },
              {
                "name": "value",
                "required": false,
                "schema": {
                  "fullComment": "value behind the semicolom (:). If not given, will be undefined.\n\nIf possible, will be parsed to a number, boolean, null or undefined... otherwise it's a string\n\ncan be any language that we can detect",
                  "type": "string"
                }
              },
              {
                "name": "comment",
                "required": true,
                "schema": {
                  "fullComment": "comment in html syntax. if not given, will be null",
                  "type": "string"
                }
              }
            ],
            "type": "object"
          }
        }
      ],
      "type": "object"
    },
    "typeCoverage": 0,
    "rawType": "NamedParameters<typeof getParentSlug>",
    "isArray": false,
    "isEnum": false,
    "isEnumLiteral": false,
    "isObject": false,
    "isPrimitive": false
  }
}