{
  "createdAt": 1664524636976,
  "updatedAt": 1664524636976,
  "deletedAt": 0,
  "createdFirstAt": 1664524636976,
  "id": "query-config",
  "name": "QueryConfig",
  "slug": "query-config",
  "operationRelativeTypescriptFilePath": "src/types.ts",
  "hasGeneric": false,
  "isExported": true,
  "rawText": "\n/**\n * QueryConfig is set on 4 levels, which have increasing priority\n *\n * - hardcoded in `fs-orm`\n * - when calling `createDb`, setting `defaultQueryConfig`\n * - when calling `createDb`, setting `modelQueryConfig`\n * - when running a query\n *\n * Not all options are available when running a query.\n */\nexport interface QueryConfig extends Partial<ModelLocation> {\n  /**\n   * When setting this, make sure your models are able to use this storage method, this is not always possible!\n   *\n   * defaults to jsonMultiple\n   */\n  dbStorageMethod?: DbStorageMethod;\n\n  /**\n   * if specified, this will be used as the root path to find your data in\n   *\n   * if not specified, uses the db folder in your project root and in any operation\n   *\n   * NB: If you set this, the model interfaces of your current project are applied on another project! Make sure they are the same there before you run such queries.\n   */\n  manualProjectRoot?: string;\n\n  /*\n  - if not specified *(undefined)*, all operations will be searched\n  - if an operation is specified, that operation will be searched\n  - if `null` is specified, operation `db` folders are not searched\n  */\n  operationName?: string | null;\n\n  /**\n   * if specified, only this location will be used (also need an `operationName`)\n   */\n  operationRelativePath?: string;\n  /**\n   * if specified, only this location will be used\n   */\n  projectRelativePath?: string;\n}",
  "extensions": [
    "Partial<ModelLocation>"
  ],
  "isOperationIndex": false,
  "description": "QueryConfig is set on 4 levels, which have increasing priority\n\n- hardcoded in `fs-orm`\n- when calling `createDb`, setting `defaultQueryConfig`\n- when calling `createDb`, setting `modelQueryConfig`\n- when running a query\n\nNot all options are available when running a query.",
  "isDbModel": false,
  "commentsInside": [],
  "type": {
    "typeDefinition": {
      "type": "object",
      "properties": {
        "operationName": {
          "type": [
            "string",
            "null"
          ],
          "description": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you"
        },
        "projectRelativePath": {
          "type": "string",
          "description": "if specified, only this location will be used"
        },
        "operationRelativePath": {
          "type": "string",
          "description": "if specified, only this location will be used (also need an `operationName`)"
        },
        "dbStorageMethod": {
          "$ref": "#/definitions/DbStorageMethod",
          "description": "When setting this, make sure your models are able to use this storage method, this is not always possible!\n\ndefaults to jsonMultiple"
        },
        "manualProjectRoot": {
          "type": "string",
          "description": "if specified, this will be used as the root path to find your data in\n\nif not specified, uses the db folder in your project root and in any operation\n\nNB: If you set this, the model interfaces of your current project are applied on another project! Make sure they are the same there before you run such queries."
        }
      },
      "additionalProperties": false,
      "description": "QueryConfig is set on 4 levels, which have increasing priority\n\n- hardcoded in `fs-orm`\n- when calling `createDb`, setting `defaultQueryConfig`\n- when calling `createDb`, setting `modelQueryConfig`\n- when running a query\n\nNot all options are available when running a query."
    },
    "simplifiedSchema": {
      "description": "QueryConfig is set on 4 levels, which have increasing priority\n\n- hardcoded in `fs-orm`\n- when calling `createDb`, setting `defaultQueryConfig`\n- when calling `createDb`, setting `modelQueryConfig`\n- when running a query\n\nNot all options are available when running a query.",
      "properties": [
        {
          "name": "operationName",
          "required": false,
          "schema": {
            "description": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
            "type": "string"
          }
        },
        {
          "name": "projectRelativePath",
          "required": false,
          "schema": {
            "description": "if specified, only this location will be used",
            "type": "string"
          }
        },
        {
          "name": "operationRelativePath",
          "required": false,
          "schema": {
            "description": "if specified, only this location will be used (also need an `operationName`)",
            "type": "string"
          }
        },
        {
          "name": "dbStorageMethod",
          "required": false,
          "schema": {
            "description": "The following strategies are available to store the data.\n\n- **jsonMultiple *(default)***: stores the data in a json file which is an array of this data structure. This file will be located in `db/[pluralized-kebab-case-model-name].json`\n\n- **jsonSingle**: stores the data in a json file which is of this data structure (single object) These files will be located in `db/[pluralized-kebab-case-model-name]/[instance-slug-or-id].json`\n\n- **markdown**: stores the data in a markdown file. Takes \"markdown\" parameter as the main markdown. The other parameters are stored as front-matter. This these files will be located in `db/[pluralized-kebab-case-model-name]/[instance-slug-or-id].md`\n\n- **keyValueMarkdown**: stores the data in key value markdown format. This file will be located in `db/[pluralized-kebab-case-model-name].md`\n\n- **csv**: stores the data in a csv file (only possible for flat object datastructures). This file will be located in `db/[pluralized-kebab-case-model-name].csv`\n\n## Definitions:\n\n- [pluralized-kebab-case-model-name]: e.g. `StudentUser` becomes `student-users`\n- [instance-slug-or-id]: For all models with a slug parameter, the filename will be that slug of that instance. Otherwise, `id` will be used",
            "enum": [
              "jsonMultiple",
              "jsonSingle",
              "markdown",
              "keyValueMarkdown",
              "csv"
            ],
            "type": "string"
          }
        },
        {
          "name": "manualProjectRoot",
          "required": false,
          "schema": {
            "description": "if specified, this will be used as the root path to find your data in\n\nif not specified, uses the db folder in your project root and in any operation\n\nNB: If you set this, the model interfaces of your current project are applied on another project! Make sure they are the same there before you run such queries.",
            "type": "string"
          }
        }
      ],
      "type": "object"
    },
    "typeCoverage": 0,
    "rawType": "QueryConfig",
    "isArray": false,
    "isEnum": false,
    "isEnumLiteral": false,
    "isObject": false,
    "isPrimitive": false
  }
}