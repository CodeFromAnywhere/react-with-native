{
  "createdAt": 1664524629233,
  "updatedAt": 1664524629233,
  "deletedAt": 0,
  "createdFirstAt": 1664524629233,
  "id": "named-parameters-<typeof-get-db-file-location->",
  "name": "NamedParameters<typeof getDbFileLocation>",
  "slug": "named-parameters-typeof-get-db-file-location",
  "operationRelativeTypescriptFilePath": "src/convention/getDbFileLocation.ts",
  "hasGeneric": false,
  "isExported": false,
  "isOperationIndex": false,
  "description": "",
  "isDbModel": false,
  "commentsInside": [],
  "type": {
    "typeDefinition": {
      "type": "object",
      "properties": {
        "storedItem": {
          "$ref": "#/definitions/Storing%3CAugmentedAnyModelType%3E",
          "description": "The ModelLocation properties in the item are completely ignored.\n\nOnly the ID, slug and categoryStackCalculated are used to determine the exact file the item should be stored in.\n\nNB: storedItem MUST have a slug or ID, but this should probably be generated before this funciton"
        },
        "itemModelLocation": {
          "$ref": "#/definitions/ModelLocation",
          "description": "Should be the modellocation of the actual item. If the operationName is present there, this will take priority over the merged query config."
        },
        "mergedConfig": {
          "$ref": "#/definitions/MergedQueryConfig"
        },
        "modelName": {
          "type": "string"
        }
      },
      "required": [
        "storedItem",
        "itemModelLocation",
        "mergedConfig",
        "modelName"
      ],
      "additionalProperties": false
    },
    "simplifiedSchema": {
      "properties": [
        {
          "name": "itemModelLocation",
          "required": true,
          "schema": {
            "description": "Parameters that tell you about the location an instance of a model. Models can be tied to an operation. They always have a `projectRelativePath`, and if they are tied to an operation, also an `operationRelativePath`.",
            "properties": [
              {
                "name": "operationName",
                "required": true,
                "schema": {
                  "description": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
                  "type": "null"
                }
              },
              {
                "name": "projectRelativePath",
                "required": true,
                "schema": {
                  "description": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
                  "type": "string"
                }
              },
              {
                "name": "operationRelativePath",
                "required": false,
                "schema": {
                  "description": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
                  "type": "string"
                }
              }
            ],
            "type": "object"
          }
        },
        {
          "name": "mergedConfig",
          "required": true,
          "schema": {
            "properties": [
              {
                "name": "dbStorageMethod",
                "required": true,
                "schema": {
                  "description": "The following strategies are available to store the data.\n\n- **jsonMultiple *(default)***: stores the data in a json file which is an array of this data structure. This file will be located in `db/[pluralized-kebab-case-model-name].json`\n\n- **jsonSingle**: stores the data in a json file which is of this data structure (single object) These files will be located in `db/[pluralized-kebab-case-model-name]/[instance-slug-or-id].json`\n\n- **markdown**: stores the data in a markdown file. Takes \"markdown\" parameter as the main markdown. The other parameters are stored as front-matter. This these files will be located in `db/[pluralized-kebab-case-model-name]/[instance-slug-or-id].md`\n\n- **keyValueMarkdown**: stores the data in key value markdown format. This file will be located in `db/[pluralized-kebab-case-model-name].md`\n\n- **csv**: stores the data in a csv file (only possible for flat object datastructures). This file will be located in `db/[pluralized-kebab-case-model-name].csv`\n\n## Definitions:\n\n- [pluralized-kebab-case-model-name]: e.g. `StudentUser` becomes `student-users`\n- [instance-slug-or-id]: For all models with a slug parameter, the filename will be that slug of that instance. Otherwise, `id` will be used",
                  "enum": [
                    "jsonMultiple",
                    "jsonSingle",
                    "markdown",
                    "keyValueMarkdown",
                    "csv"
                  ],
                  "type": "string"
                }
              },
              {
                "name": "manualProjectRoot",
                "required": true,
                "schema": {
                  "description": "if specified, this will be used as the root path to find your data in\n\nif not specified, uses the db folder in your project root and in any operation\n\nNB: If you set this, the model interfaces of your current project are applied on another project! Make sure they are the same there before you run such queries.",
                  "type": "string"
                }
              },
              {
                "name": "operationName",
                "required": false,
                "schema": {
                  "description": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
                  "type": "string"
                }
              },
              {
                "name": "projectRelativePath",
                "required": false,
                "schema": {
                  "description": "if specified, only this location will be used",
                  "type": "string"
                }
              },
              {
                "name": "operationRelativePath",
                "required": false,
                "schema": {
                  "description": "if specified, only this location will be used (also need an `operationName`)",
                  "type": "string"
                }
              }
            ],
            "type": "object"
          }
        },
        {
          "name": "modelName",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "type": "object"
    },
    "typeCoverage": 0,
    "rawType": "NamedParameters<typeof getDbFileLocation>",
    "isArray": false,
    "isEnum": false,
    "isEnumLiteral": false,
    "isObject": false,
    "isPrimitive": false
  }
}