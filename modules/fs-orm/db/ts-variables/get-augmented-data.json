{
  "createdAt": 1667634666273,
  "updatedAt": 1667634666273,
  "deletedAt": 0,
  "createdFirstAt": 1667634666273,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "getAugmentedData",
  "slug": "get-augmented-data",
  "operationRelativeTypescriptFilePath": "src/util/getAugmentedData.ts",
  "type": {
    "rawType": "<T>(dbFileLocation: import(\"/Users/king/King/operations/tools/types/model-types/build/any-model\").DbFileLocation, dbStorageMethod: any) => Promise<T[] | null>",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "async <T>(\n  dbFileLocation: DbFileLocation,\n  dbStorageMethod: DbStorageMethod\n): Promise<T[] | null> => {\n  const { absolutePath, modelName, ...modelLocation } = dbFileLocation;\n\n  const parsedPath = path.parse(absolutePath);\n\n  const isSingleMethod =\n    dbStorageMethod === \"markdown\" || dbStorageMethod === \"jsonSingle\";\n\n  const hasOperationRelativePath = !!modelLocation.operationRelativePath;\n  const shouldAddSingleInfo = isSingleMethod && !hasOperationRelativePath;\n\n  const slugifiedName = shouldAddSingleInfo\n    ? slugify(parsedPath.name)\n    : undefined;\n  const isNameValid = shouldAddSingleInfo\n    ? slugifiedName === parsedPath.name\n    : true;\n  if (!isNameValid) {\n    log(`${parsedPath.name} is not a valid (slugified) filename`, {\n      type: \"warning\",\n    });\n  }\n\n  const rootRelativePath =\n    modelLocation.operationRelativePath || modelLocation.projectRelativePath;\n  const dbModelFolderPath = `db/${pluralize(kebabCase(modelName))}`;\n\n  const dbModelFolderRelativePath = makeRelative(\n    trimSlashes(rootRelativePath),\n    dbModelFolderPath\n  );\n  const chunks = dbModelFolderRelativePath.split(\"/\");\n  // remove the name\n  chunks.pop();\n  // What's left is the folders, if any.\n  const categoryStackCalculated = chunks;\n\n  const singleInfo = shouldAddSingleInfo\n    ? { name: slugifiedName, slug: slugifiedName, categoryStackCalculated }\n    : undefined;\n  const ext = parsedPath.ext;\n\n  if (ext === \".json\") {\n    const jsonContent = await readJsonFile<any>(absolutePath);\n    const jsonContentArray = jsonContent ? makeArray(jsonContent) : null;\n    const augmented: T[] | null = jsonContentArray\n      ? (jsonContentArray.map((x) => ({\n          ...x,\n          ...modelLocation,\n          ...singleInfo,\n        })) as T[])\n      : null;\n\n    return augmented;\n  }\n\n  if (ext === \".csv\") {\n    const csvContent = await readCsvFile<any>(absolutePath);\n\n    if (!csvContent) return null;\n\n    const augmented: T[] = csvContent.map((x) => ({\n      ...x,\n      ...modelLocation,\n    }));\n    return augmented;\n  }\n\n  if (ext === \".md\") {\n    const mdParse = await readMarkdownFile(absolutePath);\n\n    if (!mdParse) return null;\n    const frontmatter = mdParse?.parameters;\n    if (dbStorageMethod === \"markdown\") {\n      const markdownContent = {\n        ...frontmatter,\n\n        markdown: mdParse.raw,\n        ...modelLocation,\n        ...singleInfo,\n        // NB: have to convert to unknown here first because of the specified markdown prop\n      } as unknown as T;\n\n      // console.log({ frontmatter, modelLocation, singleInfo });\n      return [markdownContent];\n    }\n\n    const keyValueMarkdownParse = markdownStringToKvmdParse(\n      mdParse.raw,\n      dbFileLocation\n    );\n\n    // NB: typing as unknown is required because it will only work for keyValueMarkdown models\n    const keyValueMarkdown = keyValueMarkdownParse.data as unknown as T[];\n\n    return keyValueMarkdown;\n  }\n\n  return null;\n}",
  "description": "Gets the stored data from any file with any storage method, and augments the modelLocation onto it...\n\nAlso augments the `name`, `slug` and `categoryStackCalculated` onto this if the `dbStorageMethod` is `markdown` or `jsonSingle` and if `operationRelativePath` is not set",
  "id": "nsszbijgluhfsydsurzlcgna"
}