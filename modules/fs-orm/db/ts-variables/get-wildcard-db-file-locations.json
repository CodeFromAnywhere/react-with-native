{
  "createdAt": 1667634655628,
  "updatedAt": 1667634655628,
  "deletedAt": 0,
  "createdFirstAt": 1667634655628,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "getWildcardDbFileLocations",
  "slug": "get-wildcard-db-file-locations",
  "operationRelativeTypescriptFilePath": "src/convention/getWildcardDbFileLocations.ts",
  "type": {
    "rawType": "(options: { modelName: string; parsedPath: import(\"path\").ParsedPath; operationName: string | null; projectRoot: string; rootFolder: import(\"/Users/king/King/operations/tools/database/fs-orm/src/types\").RootDbFolder; }) => Promise<import(\"/Users/king/King/operations/tools/types/model-types/build/any-model\").DbFileLocation[]>",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "async (options: {\n  modelName: string;\n  parsedPath: ParsedPath;\n  operationName: string | null;\n  projectRoot: string;\n  rootFolder: RootDbFolder;\n}): Promise<DbFileLocation[]> => {\n  const { modelName, operationName, parsedPath, projectRoot, rootFolder } =\n    options;\n\n  if (fs.existsSync(parsedPath.dir)) {\n    // if parsedPath ends with *, read everything in the folder\n\n    const exploreAbsolutePaths = (\n      await explore({\n        basePath: parsedPath.dir,\n        extension: getExtension(parsedPath.base),\n      })\n    ).map((x) => x.path);\n\n    const dbFileLocations: DbFileLocation[] = exploreAbsolutePaths.map(\n      (absolutePath) => {\n        const dbFileOperationName = rootFolder.operationName;\n\n        const projectRelativePath = absolutePath.substring(projectRoot.length);\n\n        const operationRelativePath = dbFileOperationName\n          ? absolutePath.substring(rootFolder.basePath.length)\n          : undefined;\n\n        const dbFileLocation: DbFileLocation = {\n          modelName,\n          absolutePath,\n          operationName: dbFileOperationName,\n          projectRelativePath,\n          operationRelativePath,\n        };\n\n        return dbFileLocation;\n      }\n    );\n\n    return dbFileLocations;\n  }\n\n  return [];\n}",
  "description": "",
  "id": "bgxmfyabqkfwncknjtkdpoix"
}