{
  "createdAt": 1667634667386,
  "updatedAt": 1667634667386,
  "deletedAt": 0,
  "createdFirstAt": 1667634667386,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "groupByFile",
  "slug": "group-by-file",
  "operationRelativeTypescriptFilePath": "src/util/groupByFile.ts",
  "type": {
    "rawType": "<T extends { [key: string]: any; }>(creationItems: any[], mergedConfig: import(\"/Users/king/King/operations/tools/database/fs-orm/src/types\").MergedQueryConfig, modelName: string) => Promise<import(\"/Users/king/King/operations/tools/database/fs-orm/src/util/groupByFile\").ItemPerFileObject<T>>",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "async <T extends { [key: string]: any }>(\n  creationItems: Creation<T>[],\n  mergedConfig: MergedQueryConfig,\n  modelName: string\n): Promise<ItemPerFileObject<T>> => {\n  const dataWithLocations = (\n    await Promise.all(\n      creationItems.map(async (item) => {\n        if (!item) {\n          console.log(\"WARN\");\n          return;\n        }\n\n        const fullItem = addDefaultValues(item);\n        const storingItem = makeStoringItem(fullItem) as Storing<T>;\n\n        const itemModelLocation = getItemModelLocation(fullItem);\n\n        const dbFileLocation = await getDbFileLocation(\n          storingItem,\n          itemModelLocation.operationName,\n          mergedConfig,\n          modelName\n        );\n\n        if (!dbFileLocation) return;\n\n        return { storingItem, dbFileLocation };\n      })\n    )\n  ).filter(notEmpty);\n\n  const dataPerStorageFile = dataWithLocations.reduce(\n    (fileObject, itemWithLocation) => {\n      const { absolutePath } = itemWithLocation.dbFileLocation;\n\n      const newItems = fileObject[absolutePath]\n        ? fileObject[absolutePath].items.concat(itemWithLocation.storingItem)\n        : [itemWithLocation.storingItem];\n\n      fileObject[absolutePath] = {\n        items: newItems,\n        dbFileLocation: itemWithLocation.dbFileLocation,\n      };\n\n      return fileObject;\n    },\n    {} as ItemPerFileObject<T>\n  );\n\n  return dataPerStorageFile;\n}",
  "description": "Used for `set` and `upsert`. Groups creation items into an object where keys are file paths and values are items that need to be stored",
  "id": "rpqrueqcbjarnpmsgvyvwwrz"
}