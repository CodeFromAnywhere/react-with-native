{
  "createdAt": 1669384297899,
  "updatedAt": 1669384297899,
  "deletedAt": 0,
  "createdFirstAt": 1669384297899,
  "isApiExposed": true,
  "isExported": true,
  "groupAuthorization": {},
  "operationRelativeTypescriptFilePath": "src/getFolderExplorationDetails.ts",
  "commentsInside": [],
  "rawText": " async (\n  config: {\n    /**relative project path*/\n    path: string;\n    type: FolderExploration[\"type\"];\n    name: string;\n    sort?: string;\n    /**\n     * null gives all of them, undefined gives none\n     */\n    typeIndexType?: keyof IndexModels | null;\n  } & IndexFilter\n): Promise<ExplorationDetails> => {\n  const {\n    name,\n    path,\n    type,\n    hasCommentTypes,\n    interfaceIsDbModel,\n    sort,\n    typeIndexType,\n  } = config;\n  const projectRoot = getProjectRoot();\n  if (!projectRoot) {\n    console.log(\"getFolderExplorationDetails: Projectroot not found\");\n    process.exit(1);\n  }\n  const absolutePath = nodePath.join(projectRoot, path);\n  const operationBasePath = findOperationBasePath(absolutePath);\n\n  const operationFolderName = operationBasePath\n    ? getLastFolder(operationBasePath)\n    : undefined;\n\n  const folderExplorationInterface = (\n    await db.get(\"TsInterface\", {\n      operationName: \"code-types\",\n    })\n  ).filter(\n    (x) => x.operationRelativeTypescriptFilePath === \"src/FolderExploration.ts\"\n  );\n\n  const isFileOrFolderType = [\n    \"folder\",\n    \"operation\",\n    \"operationFolder\",\n    \"typescript\",\n  ].includes(type);\n\n  const pathMetaData = isFileOrFolderType\n    ? await calculatePathMetaData(absolutePath)\n    : undefined;\n\n  const needsFilePath =\n    !!operationFolderName && absolutePath !== operationBasePath;\n\n  // console.log({\n  //   needsFilePath,\n  //   operationFolderName,\n  //   absolutePath,\n  //   operationBasePath,\n  //   typeIndexType,\n  //   isFileOrFolderType,\n  // });\n  const typescriptIndex =\n    isFileOrFolderType && typeIndexType !== undefined\n      ? await getFolderTypescriptIndex({\n          filePath: needsFilePath ? absolutePath : undefined,\n          basePath: !needsFilePath ? absolutePath : undefined,\n          filter: { hasCommentTypes, interfaceIsDbModel },\n          sort,\n          type: typeIndexType,\n        })\n      : null;\n\n  //   const srcPath = nodePath.join(operationBasePath, \"src\");\n  //   const operationRelativeTypescriptFilePath = absolutePath.substring(srcPath.length + 1);\n\n  if (type === \"folder\") {\n    return {\n      index: folderExplorationInterface,\n      ...typescriptIndex,\n      pathMetaData,\n    };\n  } else if (type === \"operationFolder\") {\n    return {\n      index: folderExplorationInterface,\n      ...typescriptIndex,\n      pathMetaData,\n    };\n  } else if (type === \"operation\" && operationBasePath) {\n    return {\n      index: folderExplorationInterface,\n      ...typescriptIndex,\n      pathMetaData,\n    };\n  } else if (type === \"markdown\") {\n    // markdown parse\n    const markdownPath = nodePath.join(projectRoot, path);\n    const markdown = await readMarkdownFile(markdownPath);\n    return {\n      index: folderExplorationInterface,\n      markdown: markdown || undefined,\n      success: !!markdown,\n      response: markdown ? undefined : \"reading markdown file failed\",\n    };\n  } else if (type === \"typescript\") {\n    const details = typescriptIndex || {\n      success: false,\n      response: \"reading typescript file failed\",\n    };\n\n    return { ...details, index: folderExplorationInterface, pathMetaData };\n    // all functions, interfaces, variables, lint-errors, build-errors, comments, file meta data (should become PathMetaData, better refactor immediately)\n  } else if (type === \"function\") {\n    // one function with name [name]\n    // TODO: figure out how to do with specific file\n    const tsFunction = (\n      await db.get(\"TsFunction\", { operationName: operationFolderName })\n    ).find((x) => x.name === name);\n    return {\n      tsFunctions: tsFunction ? [tsFunction] : undefined,\n      index: folderExplorationInterface,\n    };\n  } else if (type === \"interface\") {\n    // one interface with name [name]\n    const tsInterface = (\n      await db.get(\"TsInterface\", { operationName: operationFolderName })\n    ).find((x) => x.name === name);\n    return {\n      tsInterfaces: tsInterface ? [tsInterface] : undefined,\n      index: folderExplorationInterface,\n    };\n    // if it's a db-model, also the data that is found...? or maybe this should just be a separate endpoint and page where it's linke to\n  } else if (type === \"variable\") {\n    // one variable with name [name]\n    const tsVariable = (\n      await db.get(\"TsVariable\", { operationName: operationFolderName })\n    ).find((x) => x.name === name);\n    return {\n      tsVariables: tsVariable ? [tsVariable] : undefined,\n      index: folderExplorationInterface,\n    };\n  }\n\n  // Should never happen if all ifs  return....\n  return {\n    index: folderExplorationInterface,\n    success: false,\n    response: `getFolderExplorationDetails: Couldn't understand your input: ${JSON.stringify(\n      {\n        path,\n        type,\n        name,\n      }\n    )}`,\n  };\n}",
  "name": "getFolderExplorationDetails",
  "slug": "get-folder-exploration-details",
  "parameters": [
    {
      "name": "config",
      "schema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "hasCommentTypes": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/CommentType"
            },
            "description": "if set, only returns comments containing specific types"
          },
          "interfaceIsDbModel": {
            "type": "boolean",
            "description": "if true, only returns interfaces which are db models"
          },
          "path": {
            "type": "string",
            "description": "relative project path"
          },
          "type": {
            "type": "string",
            "enum": [
              "folder",
              "operation",
              "operationFolder",
              "markdown",
              "typescript",
              "function",
              "interface",
              "variable"
            ],
            "description": "folder is a regular folder outside of operations\n\noperation is a folder that is the root of an operation\n\noperationFolder is a folder inside of an operation\n\nother things are self-explanatory"
          },
          "name": {
            "type": "string"
          },
          "sort": {
            "type": "string"
          },
          "typeIndexType": {
            "type": [
              "string",
              "null"
            ],
            "enum": [
              "TsBuildError",
              "TsLintWarning",
              "TsFunction",
              "TsVariable",
              "TsInterface",
              "TsComment",
              "TsImport",
              "TsExport",
              null
            ],
            "description": "null gives all of them, undefined gives none"
          }
        },
        "required": [
          "name",
          "path",
          "type"
        ]
      },
      "simplifiedSchema": {
        "properties": [
          {
            "name": "hasCommentTypes",
            "required": false,
            "schema": {
              "fullComment": "if set, only returns comments containing specific types",
              "items": [
                {
                  "schema": {
                    "enum": [
                      "todo",
                      "discussion",
                      "idea",
                      "later",
                      "nb",
                      "title",
                      "section",
                      "description"
                    ],
                    "fullComment": "special line prefixes:\n\n**Developer related comments**\n\n- TODO: for developer to know what to do\n- DISCUSSION: for developer to state that discussion is needed\n- IDEA: for developer to state ideas\n- LATER: for developer to mark as thing that needs to be done later\n- NB: for developer to add a note\n\n**Form related comments**\n\n- TITLE: if available, will be used as title of form input (overwrites humanCase version of the property-name itself in that case)\n- SECTION: start a new section in the form from this point, the value behind here can be the title\n- DESCRIPTION: if available, will be used as description of the form input",
                    "type": "string"
                  },
                  "name": "CommentType"
                }
              ],
              "type": "array"
            }
          },
          {
            "name": "interfaceIsDbModel",
            "required": false,
            "schema": {
              "fullComment": "if true, only returns interfaces which are db models",
              "type": "boolean"
            }
          },
          {
            "name": "path",
            "required": true,
            "schema": {
              "fullComment": "relative project path",
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": true,
            "schema": {
              "enum": [
                "folder",
                "operation",
                "operationFolder",
                "markdown",
                "typescript",
                "function",
                "interface",
                "variable"
              ],
              "fullComment": "folder is a regular folder outside of operations\n\noperation is a folder that is the root of an operation\n\noperationFolder is a folder inside of an operation\n\nother things are self-explanatory",
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "typeIndexType",
            "required": false,
            "schema": {
              "enum": [
                "TsBuildError",
                "TsLintWarning",
                "TsFunction",
                "TsVariable",
                "TsInterface",
                "TsComment",
                "TsImport",
                "TsExport",
                null
              ],
              "fullComment": "null gives all of them, undefined gives none",
              "type": "string"
            }
          }
        ],
        "type": "object"
      },
      "required": true
    }
  ],
  "description": "",
  "returnType": {
    "rawType": "Promise<any>",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 5,
  "size": {
    "characters": 4751,
    "lines": 158,
    "bytes": 4751,
    "bytesPerCharacter": 1,
    "charactersPerLine": 30,
    "linesPerFile": 158,
    "numberOfFiles": 1
  },
  "id": "vrzzguevicuspoxuqyoaogpd"
}