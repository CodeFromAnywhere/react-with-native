{
  "createdAt": 1669384298005,
  "updatedAt": 1669384298005,
  "deletedAt": 0,
  "createdFirstAt": 1669384298005,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "getFolderExplorationDetails",
  "slug": "get-folder-exploration-details",
  "operationRelativeTypescriptFilePath": "src/getFolderExplorationDetails.ts",
  "type": {
    "rawType": "(config: { path: string; type: \"function\" | \"folder\" | \"operation\" | \"operationFolder\" | \"markdown\" | \"typescript\" | \"interface\" | \"variable\"; name: string; sort?: string | undefined; typeIndexType?: keyof import(\"/Users/king/King/operations/tools/types/code-types/build/TypescriptIndex\").IndexModels | null | undefined; } & import(\"/Users/king/King/operations/tools/parsing/read-files/read-typescript-file/build/readTypescriptFile\").IndexFilter) => Promise<any>",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "async (\n  config: {\n    /**relative project path*/\n    path: string;\n    type: FolderExploration[\"type\"];\n    name: string;\n    sort?: string;\n    /**\n     * null gives all of them, undefined gives none\n     */\n    typeIndexType?: keyof IndexModels | null;\n  } & IndexFilter\n): Promise<ExplorationDetails> => {\n  const {\n    name,\n    path,\n    type,\n    hasCommentTypes,\n    interfaceIsDbModel,\n    sort,\n    typeIndexType,\n  } = config;\n  const projectRoot = getProjectRoot();\n  if (!projectRoot) {\n    console.log(\"getFolderExplorationDetails: Projectroot not found\");\n    process.exit(1);\n  }\n  const absolutePath = nodePath.join(projectRoot, path);\n  const operationBasePath = findOperationBasePath(absolutePath);\n\n  const operationFolderName = operationBasePath\n    ? getLastFolder(operationBasePath)\n    : undefined;\n\n  const folderExplorationInterface = (\n    await db.get(\"TsInterface\", {\n      operationName: \"code-types\",\n    })\n  ).filter(\n    (x) => x.operationRelativeTypescriptFilePath === \"src/FolderExploration.ts\"\n  );\n\n  const isFileOrFolderType = [\n    \"folder\",\n    \"operation\",\n    \"operationFolder\",\n    \"typescript\",\n  ].includes(type);\n\n  const pathMetaData = isFileOrFolderType\n    ? await calculatePathMetaData(absolutePath)\n    : undefined;\n\n  const needsFilePath =\n    !!operationFolderName && absolutePath !== operationBasePath;\n\n  // console.log({\n  //   needsFilePath,\n  //   operationFolderName,\n  //   absolutePath,\n  //   operationBasePath,\n  //   typeIndexType,\n  //   isFileOrFolderType,\n  // });\n  const typescriptIndex =\n    isFileOrFolderType && typeIndexType !== undefined\n      ? await getFolderTypescriptIndex({\n          filePath: needsFilePath ? absolutePath : undefined,\n          basePath: !needsFilePath ? absolutePath : undefined,\n          filter: { hasCommentTypes, interfaceIsDbModel },\n          sort,\n          type: typeIndexType,\n        })\n      : null;\n\n  //   const srcPath = nodePath.join(operationBasePath, \"src\");\n  //   const operationRelativeTypescriptFilePath = absolutePath.substring(srcPath.length + 1);\n\n  if (type === \"folder\") {\n    return {\n      index: folderExplorationInterface,\n      ...typescriptIndex,\n      pathMetaData,\n    };\n  } else if (type === \"operationFolder\") {\n    return {\n      index: folderExplorationInterface,\n      ...typescriptIndex,\n      pathMetaData,\n    };\n  } else if (type === \"operation\" && operationBasePath) {\n    return {\n      index: folderExplorationInterface,\n      ...typescriptIndex,\n      pathMetaData,\n    };\n  } else if (type === \"markdown\") {\n    // markdown parse\n    const markdownPath = nodePath.join(projectRoot, path);\n    const markdown = await readMarkdownFile(markdownPath);\n    return {\n      index: folderExplorationInterface,\n      markdown: markdown || undefined,\n      success: !!markdown,\n      response: markdown ? undefined : \"reading markdown file failed\",\n    };\n  } else if (type === \"typescript\") {\n    const details = typescriptIndex || {\n      success: false,\n      response: \"reading typescript file failed\",\n    };\n\n    return { ...details, index: folderExplorationInterface, pathMetaData };\n    // all functions, interfaces, variables, lint-errors, build-errors, comments, file meta data (should become PathMetaData, better refactor immediately)\n  } else if (type === \"function\") {\n    // one function with name [name]\n    // TODO: figure out how to do with specific file\n    const tsFunction = (\n      await db.get(\"TsFunction\", { operationName: operationFolderName })\n    ).find((x) => x.name === name);\n    return {\n      tsFunctions: tsFunction ? [tsFunction] : undefined,\n      index: folderExplorationInterface,\n    };\n  } else if (type === \"interface\") {\n    // one interface with name [name]\n    const tsInterface = (\n      await db.get(\"TsInterface\", { operationName: operationFolderName })\n    ).find((x) => x.name === name);\n    return {\n      tsInterfaces: tsInterface ? [tsInterface] : undefined,\n      index: folderExplorationInterface,\n    };\n    // if it's a db-model, also the data that is found...? or maybe this should just be a separate endpoint and page where it's linke to\n  } else if (type === \"variable\") {\n    // one variable with name [name]\n    const tsVariable = (\n      await db.get(\"TsVariable\", { operationName: operationFolderName })\n    ).find((x) => x.name === name);\n    return {\n      tsVariables: tsVariable ? [tsVariable] : undefined,\n      index: folderExplorationInterface,\n    };\n  }\n\n  // Should never happen if all ifs  return....\n  return {\n    index: folderExplorationInterface,\n    success: false,\n    response: `getFolderExplorationDetails: Couldn't understand your input: ${JSON.stringify(\n      {\n        path,\n        type,\n        name,\n      }\n    )}`,\n  };\n}",
  "description": "",
  "id": "fjfgpfdpathguykfzoboxziy"
}