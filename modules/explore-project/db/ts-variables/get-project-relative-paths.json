{
  "createdAt": 1669384304454,
  "updatedAt": 1669384304454,
  "deletedAt": 0,
  "createdFirstAt": 1669384304454,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "getProjectRelativePaths",
  "slug": "get-project-relative-paths",
  "operationRelativeTypescriptFilePath": "src/getProjectRelativePaths.ts",
  "type": {
    "rawType": "(config?: { type?: \"todo\" | undefined; earliestUpdatedAt?: number | undefined; filterDraft?: boolean | undefined; filterPrivate?: boolean | undefined; filterGenerated?: boolean | undefined; sort?: \"recent\" | undefined; } | undefined) => Promise<string[] | undefined>",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "async (\n  // functionContext: FunctionContext,\n  config?: {\n    /**\n     * Optionally filter the results to only:\n     *\n     * - todo: all todos in your project operations\n     * - postable: all your postables in your database\n     *\n     * by default, scans all relevant files...\n     */\n    type?: RelativePathType;\n    earliestUpdatedAt?: number;\n    /**\n     * Not implemented\n     */\n    filterDraft?: boolean;\n    /**\n     * Not implemented\n     */\n    filterPrivate?: boolean;\n    filterGenerated?: boolean;\n    sort?: \"recent\";\n  }\n): Promise<string[] | undefined> => {\n  const {\n    earliestUpdatedAt,\n    filterDraft,\n    filterGenerated,\n    filterPrivate,\n    type,\n    sort,\n  } = destructureOptionalObject(config);\n\n  const projectRoot = getProjectRoot();\n  if (!projectRoot) return;\n  const operationsPath = getRootPath(\"operations\");\n  if (!operationsPath) return;\n  const databasePath = getRootPath(databaseFolderName);\n  if (!databasePath) return;\n  const textPath = getRootPath(\"text\");\n  if (!textPath) return;\n\n  const basePath =\n    type === \"todo\"\n      ? await findAllTodoFolderPaths(operationsPath)\n      : [operationsPath, textPath];\n\n  const shouldFilterRecency = earliestUpdatedAt !== undefined;\n  /*\n  everything from projectRoot, except for: `db`, `node_modules`, `build`\n  */\n\n  const results = await explore({\n    basePath,\n    includeStats: shouldFilterRecency || sort === \"recent\",\n    extension: \"md\",\n    ignore: [databaseFolderName, ...generatedFolders],\n  });\n\n  const filtered = results.filter((result) => {\n    if (!shouldFilterRecency) return true;\n\n    const updatedAt = result.stats?.updatedAt;\n\n    // shouldn't happen\n    if (!updatedAt) return false;\n\n    const isRecentEnough = earliestUpdatedAt < updatedAt;\n\n    return isRecentEnough;\n  });\n\n  const sorted =\n    sort === \"recent\"\n      ? filtered.sort((a, b) => {\n          if (a.stats!.createdAt < b.stats!.createdAt) {\n            return 1;\n          }\n\n          return -1;\n        })\n      : filtered;\n\n  const projectRelativePaths = sorted\n    .map((result) => result.path)\n    .map((absolutePath) => makeRelative(absolutePath, projectRoot));\n  return projectRelativePaths;\n}",
  "description": "get file paths within your project",
  "id": "mqmbmtqrkhlirzfdzvtssmki"
}