{
  "createdAt": 1670528793841,
  "updatedAt": 1670528793841,
  "deletedAt": 0,
  "createdFirstAt": 1670528793841,
  "isApiExposed": true,
  "isExported": true,
  "groupAuthorization": {},
  "operationRelativeTypescriptFilePath": "src/UpdateMeForm.tsx",
  "commentsInside": [],
  "rawText": " (props: {\n  personProfileDetails: PersonProfileDetails;\n}) => {\n  const meQuery = queries.useGetMeWithContext();\n\n  const projectRelativeStorageFilePath =\n    meQuery.data?.result?.device?.currentPersonCalculated?.projectRelativePath;\n  const [form, details, onChange] = useTsInterfaceForm(\n    PersonProfileDetailsIndex as Storing<TsInterface>,\n    \"test\",\n    props.personProfileDetails,\n    projectRelativeStorageFilePath,\n    \"Person\"\n  );\n\n  return form ? (\n    <FormContainer\n      onSubmit={async () => {\n        if (!details || !projectRelativeStorageFilePath) return;\n        const apiResult = await api.updateMeWithContext(details);\n        showStandardResponse(apiResult);\n        await meQuery.refetch();\n      }}\n    >\n      {form}\n    </FormContainer>\n  ) : null;\n}",
  "name": "PersonProfileDetailsForm",
  "slug": "person-profile-details-form",
  "parameters": [
    {
      "name": "props",
      "schema": {
        "type": "object",
        "properties": {
          "personProfileDetails": {
            "$ref": "#/definitions/PersonProfileDetails"
          }
        },
        "required": [
          "personProfileDetails"
        ],
        "additionalProperties": false
      },
      "simplifiedSchema": {
        "properties": [
          {
            "name": "personProfileDetails",
            "required": true,
            "schema": {
              "fullComment": "Things the user can fill in about themselves on their profile",
              "properties": [
                {
                  "name": "name",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "pictureImage",
                  "required": false,
                  "schema": {
                    "fullComment": "Part of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
                    "properties": [
                      {
                        "name": "alt",
                        "required": false,
                        "schema": {
                          "fullComment": "Stored value\n\nAlt text for the asset",
                          "type": "string"
                        }
                      },
                      {
                        "name": "relativePath",
                        "required": false,
                        "schema": {
                          "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                          "type": "string"
                        }
                      },
                      {
                        "name": "name",
                        "required": false,
                        "schema": {
                          "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                          "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                          "type": "string"
                        }
                      },
                      {
                        "name": "temporaryDestination",
                        "required": false,
                        "schema": {
                          "fullComment": "Not stored\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                          "type": "string"
                        }
                      },
                      {
                        "name": "projectRelativeReferencingFilePath",
                        "required": false,
                        "schema": {
                          "fullComment": "Not stored\n\nNeeds to be there before calling `processAsset`. Should be augmented to the backendAsset in the frontend, before sending it to the backend.\n\nLocation of the place where the asset is referenced\n\n- markdown file (or folder where it is located)\n- typescript file (or folder where it is located)\n- database file (or folder where it is located)",
                          "type": "string"
                        }
                      },
                      {
                        "name": "modelName",
                        "required": false,
                        "schema": {
                          "fullComment": "Not stored\n\nNeeds to be there before calling `processAsset`. Should be augmented to the backendAsset in the frontend, before sending it to the backend.\n\nModel that the asset is related to",
                          "type": "string"
                        }
                      },
                      {
                        "name": "absoluteUrl",
                        "required": false,
                        "schema": {
                          "fullComment": "NOT STORED\n\nCan be available in case it's an asset from an external source URL for example within md.\n\nAlso can be set in case it's a static asset from a next project",
                          "type": "string"
                        }
                      }
                    ],
                    "type": "object"
                  }
                },
                {
                  "name": "interestSlugs",
                  "required": false,
                  "schema": {
                    "fullComment": "slugs of interest categories that this person should be notified about.\n\nSince this is a hierarchical model, parent interests will ensure all children are also applied.",
                    "items": [
                      {
                        "schema": {
                          "fullComment": "use this for any identifier that's not an Id-type. Usually this is a kebab-case version of a written text, but it can also be a file path, for example.",
                          "type": "string"
                        },
                        "name": "Slug"
                      }
                    ],
                    "type": "array"
                  }
                },
                {
                  "name": "mediaChannelIds",
                  "required": false,
                  "schema": {
                    "fullComment": "After the `MediaChannel` DB is filled, we can index the names of the persons of the `MediaChannel`, and and we can push them to here, if the name is \"similar\" to the name of this `Person`.\n\n`*` = \"similar\" means: exact match, or at least first name + last name match",
                    "items": [
                      {
                        "schema": {
                          "fullComment": "Should be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
                          "type": "string"
                        },
                        "name": "Id"
                      }
                    ],
                    "type": "array"
                  }
                },
                {
                  "name": "preferred_mediaChannelId",
                  "required": false,
                  "schema": {
                    "fullComment": "Optional. Can be set by admin (not indexed)\n\nIf not available, take the first (mediaChannelIds[0])\n\nShould be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
                    "type": "string"
                  }
                },
                {
                  "name": "media",
                  "required": false,
                  "schema": {
                    "fullComment": "Media that is attached to this person.\n\nNB: not used to authenticate! Can be filled in by King OS, might be erroneous",
                    "nb": "not used to authenticate! Can be filled in by King OS, might be erroneous",
                    "items": [
                      {
                        "schema": {
                          "fullComment": "media (mediums) that a person uses, e.g. linkedin, twitter, whatsapp, sms, calling, and irl",
                          "properties": [
                            {
                              "name": "platformSlug",
                              "required": true,
                              "schema": {
                                "fullComment": "medium where the person is a user\n\nuse this for any identifier that's not an Id-type. Usually this is a kebab-case version of a written text, but it can also be a file path, for example.",
                                "type": "string"
                              }
                            },
                            {
                              "name": "path",
                              "required": true,
                              "schema": {
                                "fullComment": "used to find the user on the platform",
                                "type": "string"
                              }
                            },
                            {
                              "name": "isPremium",
                              "required": true,
                              "schema": {
                                "fullComment": "(if available) whether or not the user has a premium account",
                                "type": "boolean"
                              }
                            },
                            {
                              "name": "tagline",
                              "required": false,
                              "schema": {
                                "fullComment": "(if available) a tagline for the user of the platform",
                                "type": "string"
                              }
                            },
                            {
                              "name": "bio",
                              "required": false,
                              "schema": {
                                "fullComment": "(if available) a bio for the user of the platform",
                                "type": "string"
                              }
                            }
                          ],
                          "type": "object"
                        },
                        "name": "PersonSocialMedia"
                      }
                    ],
                    "type": "array"
                  }
                },
                {
                  "name": "amountAuthenticationMethodsRequired",
                  "required": false,
                  "schema": {
                    "fullComment": "By default, one is enough, but if this is defined, the user needs to use this amount of authentication methods before he/she is authenticated. Must be at least one",
                    "type": "number"
                  }
                },
                {
                  "name": "requiredAuthenticationMethods",
                  "required": false,
                  "schema": {
                    "fullComment": "Optionally, the user can setup for themselves which authentication methods they require for themselves to authenticate on another device",
                    "items": [
                      {
                        "schema": {
                          "enum": [
                            "usernamePassword",
                            "phoneNumber",
                            "email",
                            "apple",
                            "google",
                            "facebook",
                            "twitter",
                            "linkedin",
                            "github"
                          ],
                          "fullComment": "Username + password should be the default\n\nEmail OTP, phone number OTP (sms or call or whatsapp), should be optional 2FA methods\n\nAll others can also act as authentication methods, but the token shouldn't be stored",
                          "type": "string"
                        },
                        "name": "AuthenticationMethodMethod"
                      }
                    ],
                    "type": "array"
                  }
                }
              ],
              "type": "object"
            }
          }
        ],
        "type": "object"
      },
      "required": true
    }
  ],
  "description": "",
  "returnType": {
    "rawType": "JSX.Element | null",
    "typeDefinition": {
      "optional": true,
      "$ref": "#/definitions/JSX.Element"
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 4,
  "size": {
    "characters": 780,
    "lines": 28,
    "bytes": 780,
    "bytesPerCharacter": 1,
    "charactersPerLine": 28,
    "linesPerFile": 28,
    "numberOfFiles": 1
  },
  "id": "oqmerblfnxbnbskfcecqjgqc"
}