{
  "createdAt": 1666263018594,
  "updatedAt": 1666263018594,
  "deletedAt": 0,
  "createdFirstAt": 1666263018594,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "readJsonFile",
  "slug": "read-json-file",
  "operationRelativeTypescriptFilePath": "src/readJsonFile.ts",
  "type": {
    "rawType": "<T>(filePath: string | undefined) => Promise<T | null>",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "async <T>(\n  filePath: Path | undefined\n): Promise<T | null> => {\n  if (!filePath) return null;\n  // TODO: is this needed?\n  if (!fs.existsSync(filePath)) return null;\n\n  const readable = await canRead(filePath);\n  if (!readable) return null;\n  const fileString = await fs.readFile(filePath, \"utf8\");\n  if (!fileString) return null;\n  const parsed = tryParseJson<T>(fileString);\n  return parsed;\n}",
  "description": "Reads and parses JSON file\n\nmake sure to specify what type the file contains as a generic!",
  "id": "glfwrkdwkaddkbahjsgumyco"
}