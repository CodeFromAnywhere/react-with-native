[{"id":"mhijFQzsDhZXvEXx","commentsInside":[],"rawText":" async <T>(\n  filePath: Path | undefined\n): Promise<T | null> => {\n  if (!filePath) return null;\n  // TODO: is this needed?\n  if (!fs.existsSync(filePath)) return null;\n\n  const readable = await canRead(filePath);\n  if (!readable) return null;\n  const fileString = await fs.readFile(filePath, \"utf8\");\n  if (!fileString) return null;\n  const parsed = tryParseJson<T>(fileString);\n  return parsed;\n}","name":"readJsonFile","slug":"read-json-file","parameters":[{"name":"filePath","schema":{"$ref":"#/definitions/Path"},"simplifiedSchema":{"description":"unlike PathLike, this is only a string\n\nFor now, we don't have a clear convention whether or not this string should be absolute or anything.","type":"string"},"required":false}],"description":"Reads and parses JSON file\n\nmake sure to specify what type the file contains as a generic!","returnType":{"rawType":"Promise<T | null>","typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":false,"isEnumLiteral":false},"maxIndentationDepth":1,"relativePathFromProjectRoot":"/tools/control-fs/read-json-file/src/readJsonFile.ts","srcFileId":"/readJsonFile","operationFolderName":"read-json-file","relativeFilePathFromSrc":"/readJsonFile.ts","relativeOperationBasePathFromProjectRoot":"/tools/control-fs/read-json-file","operationName":"read-json-file","size":{"characters":488,"lines":16,"bytes":488,"bytesPerCharacter":1,"charactersPerfLine":30.5,"linesPerFile":16,"numberOfFiles":1}},{"id":"uskwanHSvFlEdKSl","commentsInside":[],"rawText":" <T>(filePath: Path): T | null => {\n  // TODO: is this needed?\n  if (!fs.existsSync(filePath)) return null;\n\n  const readable = canReadSync(filePath);\n  if (!readable) return null;\n  const fileString = fs.readFileSync(filePath, \"utf8\");\n  if (!fileString) return null;\n  const parsed = tryParseJson<T>(fileString);\n  return parsed;\n}","name":"readJsonFileSync","slug":"read-json-file-sync","parameters":[{"name":"filePath","schema":{"$ref":"#/definitions/Path"},"simplifiedSchema":{"description":"unlike PathLike, this is only a string\n\nFor now, we don't have a clear convention whether or not this string should be absolute or anything.","type":"string"},"required":true}],"description":"Reads and parses JSON file\n\nmake sure to specify what type the file contains as a generic!","returnType":{"rawType":"T | null","typeDefinition":{"optional":true,"enum":["ul",""],"x-enumNames":["ul",""],"type":"string"},"typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":false,"isEnumLiteral":false,"simplifiedSchema":{"enum":["ul",""],"type":"string"}},"maxIndentationDepth":1,"relativePathFromProjectRoot":"/tools/control-fs/read-json-file/src/readJsonFile.ts","srcFileId":"/readJsonFile","operationFolderName":"read-json-file","relativeFilePathFromSrc":"/readJsonFile.ts","relativeOperationBasePathFromProjectRoot":"/tools/control-fs/read-json-file","operationName":"read-json-file","size":{"characters":423,"lines":13,"bytes":423,"bytesPerCharacter":1,"charactersPerfLine":32.53846153846154,"linesPerFile":13,"numberOfFiles":1}}]