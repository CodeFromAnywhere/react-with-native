[{"id":"DjjXpFNvyGMvCJOs","commentsInside":[],"rawText":" async (\n  filePath: Path\n): Promise<KeyValueMarkdownParse | null> => {\n  // TODO: is this needed?\n  const pathParse = path.parse(filePath);\n  const isMarkdownFile = [\"md\", \"mdx\"].includes(pathParse.ext.slice(1));\n  if (!isMarkdownFile) return null;\n  if (!fs.existsSync(filePath)) return null;\n  const readable = await canRead(filePath);\n  if (!readable) return null;\n  const fileString = await fs.readFile(filePath, \"utf8\");\n  if (!fileString) return null;\n\n  const keyValueMarkdownParse = kvMdStringToJson(fileString);\n  return keyValueMarkdownParse;\n}","name":"readKvmdFile","slug":"read-kvmd-file","parameters":[{"name":"filePath","schema":{"$ref":"#/definitions/Path"},"simplifiedSchema":{"description":"unlike PathLike, this is only a string\n\nFor now, we don't have a clear convention whether or not this string should be absolute or anything.","type":"string"},"required":true}],"description":"Reads and parses a markdown file","returnType":{"rawType":"Promise<import(\"/Users/king/King/tools/types/common-types/build/keyValueMarkdown\").KeyValueMarkdownParse | null>","typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":false,"isEnumLiteral":false},"maxIndentationDepth":1,"relativePathFromProjectRoot":"/tools/control-fs/read-kvmd-file/src/readKvmdFile.ts","srcFileId":"/readKvmdFile","operationFolderName":"read-kvmd-file","relativeFilePathFromSrc":"/readKvmdFile.ts","relativeOperationBasePathFromProjectRoot":"/tools/control-fs/read-kvmd-file","operationName":"read-kvmd-file","size":{"characters":587,"lines":16,"bytes":587,"bytesPerCharacter":1,"charactersPerfLine":36.6875,"linesPerFile":16,"numberOfFiles":1}}]