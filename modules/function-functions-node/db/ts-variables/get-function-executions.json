{
  "createdAt": 1669276144640,
  "updatedAt": 1669276144640,
  "deletedAt": 0,
  "createdFirstAt": 1669276144640,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "getFunctionExecutions",
  "slug": "get-function-executions",
  "operationRelativeTypescriptFilePath": "src/getFunctionExecutions.ts",
  "type": {
    "rawType": "(functionName: string | undefined) => Promise<import(\"/Users/king/King/operations/tools/types/code-types/build/FunctionExecution\").FunctionExecution[]>",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "async (\n  functionName: string | undefined\n): Promise<FunctionExecution[]> => {\n  if (!functionName) return [];\n  const functionExecutions = (\n    await db.get(\"FunctionExecution\", {\n      // TODO: ensure executiosn are stored in the right place before I add this back\n      //  operationName: tsFunction.operationName,\n    })\n  )\n    .filter((x) => x.functionName === functionName)\n    .map(omitUndefinedValues);\n\n  return functionExecutions;\n}",
  "description": "",
  "id": "tovznkzubytzbswdaoginrcn"
}