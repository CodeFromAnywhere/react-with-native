{
  "createdAt": 1668548058208,
  "updatedAt": 1668548058208,
  "deletedAt": 0,
  "createdFirstAt": 1668548058208,
  "id": "group",
  "name": "Group",
  "slug": "group",
  "operationRelativeTypescriptFilePath": "src/FunctionContext.ts",
  "hasGeneric": false,
  "isExported": false,
  "isOperationIndex": false,
  "description": "A `Person` is able to be part of one or multiple `Group`s. A `Device` without `Person` is just part of group `unidentified` and can only access `public` info and features. `Group`s and individual `Person`s can be given `Authorization`\n\nFunctions that require authorization can have\n\n`AUTH-[GROUP]: authorization1, authorization2, etc.` in their doc-comment",
  "isDbModel": false,
  "commentsInside": [],
  "type": {
    "typeDefinition": {
      "type": "object",
      "properties": {
        "slug": {
          "$ref": "#/definitions/Slug",
          "description": "kebab-case of the name, should be unique"
        },
        "name": {
          "type": "string",
          "description": "Name of the group (will set slug)\n\nNB: this can be used in functions to specify certain access to groups. It should there fore be unique and you should be careful when changing it!"
        },
        "language": {
          "$ref": "#/definitions/Language",
          "default": "en"
        },
        "createdAt": {
          "$ref": "#/definitions/CreatedAt"
        },
        "updatedAt": {
          "$ref": "#/definitions/UpdatedAt"
        },
        "deletedAt": {
          "$ref": "#/definitions/DeletedAt"
        },
        "createdFirstAt": {
          "$ref": "#/definitions/CreatedFirstAt"
        },
        "operationName": {
          "type": [
            "null",
            "string"
          ],
          "description": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you"
        },
        "projectRelativePath": {
          "type": "string",
          "description": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you"
        },
        "operationRelativePath": {
          "type": "string",
          "description": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you"
        },
        "id": {
          "$ref": "#/definitions/Id"
        },
        "categoryStackCalculated": {
          "$ref": "#/definitions/CategoryStack",
          "description": "In case of jsonSingle storageMethod, the categoryStack is generated by the location of the file in the db model folder in the db folder.\n\nNB: Changing this value when updating/upserting, changes where the item is located!"
        },
        "authorizations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Authorization"
          }
        },
        "amountAuthenticationMethodsRequired": {
          "type": "number",
          "description": "By default, one is enough, but if this is defined, the users in this group need to use this amount of authentication methods before he/she is authenticated. Must be at least one."
        },
        "requiredAuthenticationMethods": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AuthenticationMethodMethod"
          },
          "description": "Optionally, you can specify which authentication methods are required for the whole group"
        }
      },
      "required": [
        "authorizations",
        "createdAt",
        "createdFirstAt",
        "deletedAt",
        "id",
        "language",
        "name",
        "operationName",
        "projectRelativePath",
        "slug",
        "updatedAt"
      ],
      "additionalProperties": false,
      "description": "A `Person` is able to be part of one or multiple `Group`s. A `Device` without `Person` is just part of group `unidentified` and can only access `public` info and features. `Group`s and individual `Person`s can be given `Authorization`\n\nFunctions that require authorization can have\n\n`AUTH-[GROUP]: authorization1, authorization2, etc.` in their doc-comment"
    },
    "simplifiedSchema": {
      "fullComment": "A `Person` is able to be part of one or multiple `Group`s. A `Device` without `Person` is just part of group `unidentified` and can only access `public` info and features. `Group`s and individual `Person`s can be given `Authorization`\n\nFunctions that require authorization can have\n\n`AUTH-[GROUP]: authorization1, authorization2, etc.` in their doc-comment",
      "properties": [
        {
          "name": "slug",
          "required": true,
          "schema": {
            "fullComment": "kebab-case of the name, should be unique\n\nuse this for any identifier that's not an Id-type. Usually this is a kebab-case version of a written text, but it can also be a file path, for example.",
            "type": "string"
          }
        },
        {
          "name": "name",
          "required": true,
          "schema": {
            "fullComment": "Name of the group (will set slug)\n\nNB: this can be used in functions to specify certain access to groups. It should there fore be unique and you should be careful when changing it!",
            "nb": "this can be used in functions to specify certain access to groups. It should there fore be unique and you should be careful when changing it!",
            "type": "string"
          }
        },
        {
          "name": "language",
          "required": true,
          "schema": {
            "enum": [
              "english",
              "dutch",
              "nepali",
              "portuguese",
              "brazilian",
              "german",
              "french",
              "spanish",
              "italian",
              "norwegian",
              "swedish",
              "danish",
              "vietnamese",
              "indonesian",
              "southAfrican",
              "tokiPona",
              "hindi",
              "mandarin",
              "arabic",
              "bengali",
              "urdu",
              "japanese",
              "swahili"
            ],
            "fullComment": "all currently supported languages",
            "type": "string"
          }
        },
        {
          "name": "createdAt",
          "required": true,
          "schema": {
            "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
            "type": "number"
          }
        },
        {
          "name": "updatedAt",
          "required": true,
          "schema": {
            "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
            "type": "number"
          }
        },
        {
          "name": "deletedAt",
          "required": true,
          "schema": {
            "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
            "type": "number"
          }
        },
        {
          "name": "createdFirstAt",
          "required": true,
          "schema": {
            "fullComment": "in some cases, data can be created before it was created in our system. In this case, use CreatedFirstAt if this information is important.\n\nTime\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
            "type": "number"
          }
        },
        {
          "name": "operationName",
          "required": true,
          "schema": {
            "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
            "type": "null"
          }
        },
        {
          "name": "projectRelativePath",
          "required": true,
          "schema": {
            "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
            "type": "string"
          }
        },
        {
          "name": "operationRelativePath",
          "required": false,
          "schema": {
            "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
            "type": "string"
          }
        },
        {
          "name": "id",
          "required": true,
          "schema": {
            "fullComment": "Should be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
            "type": "string"
          }
        },
        {
          "name": "categoryStackCalculated",
          "required": false,
          "schema": {
            "fullComment": "In case of jsonSingle storageMethod, the categoryStack is generated by the location of the file in the db model folder in the db folder.\n\nNB: Changing this value when updating/upserting, changes where the item is located!\n\nTaken from the location in the folder of the db-model.\n\nNB: Changing this value when updating/upserting, changes where the item is located!",
            "nb": "Changing this value when updating/upserting, changes where the item is located!",
            "items": [
              {
                "schema": {
                  "type": "string"
                },
                "name": null
              }
            ],
            "type": "array"
          }
        },
        {
          "name": "authorizations",
          "required": true,
          "schema": {
            "items": [
              {
                "schema": {
                  "fullComment": "",
                  "properties": [
                    {
                      "name": "type",
                      "required": true,
                      "schema": {
                        "enum": [
                          "TsFunction",
                          "TsVarialbe",
                          "TsInterface",
                          "Dataset",
                          "operationName",
                          "fileOrFolderPath"
                        ],
                        "fullComment": "What should be authorized?",
                        "type": "string"
                      }
                    },
                    {
                      "name": "value",
                      "required": true,
                      "schema": {
                        "fullComment": "fileOrFolderPath: project relative path string\n\noperationName: name of the operation (grants access to all things there)\n\notherwise: id of the model",
                        "type": "string"
                      }
                    },
                    {
                      "name": "authorizations",
                      "required": true,
                      "schema": {
                        "fullComment": "which things are authorized",
                        "items": [
                          {
                            "schema": {
                              "enum": [
                                "execute",
                                "write-create",
                                "write-update",
                                "write-delete",
                                "read",
                                "search"
                              ],
                              "fullComment": "`AuthorizationLevel` is a single Enum that can apply to privacy and authorization of text, functions, and data.\n\nFor files (ts, md, json, etc...):\n\n- write-create\n- write-update\n- write-delete\n- read\n- search (only search index)\n\nFor db model data subsets:\n\n- write-update\n- write-create\n- write-delete\n- read\n- search (only search index)\n\nFor functions:\n- execute\n\nFor functions, interfaces, variables:\n\n- read (reading docs only. for source, you need to provide the file auth)\n- search (only search index)",
                              "type": "string"
                            },
                            "name": "AuthorizationLevel"
                          }
                        ],
                        "type": "array"
                      }
                    }
                  ],
                  "type": "object"
                },
                "name": "Authorization"
              }
            ],
            "type": "array"
          }
        },
        {
          "name": "amountAuthenticationMethodsRequired",
          "required": false,
          "schema": {
            "fullComment": "By default, one is enough, but if this is defined, the users in this group need to use this amount of authentication methods before he/she is authenticated. Must be at least one.",
            "type": "number"
          }
        },
        {
          "name": "requiredAuthenticationMethods",
          "required": false,
          "schema": {
            "fullComment": "Optionally, you can specify which authentication methods are required for the whole group",
            "items": [
              {
                "schema": {
                  "enum": [
                    "usernamePassword",
                    "phoneNumber",
                    "email",
                    "apple",
                    "google",
                    "facebook",
                    "twitter",
                    "linkedin",
                    "github"
                  ],
                  "fullComment": "Username + password should be the default\n\nEmail OTP, phone number OTP (sms or call or whatsapp), should be optional 2FA methods\n\nAll others can also act as authentication methods, but the token shouldn't be stored",
                  "type": "string"
                },
                "name": "AuthenticationMethodMethod"
              }
            ],
            "type": "array"
          }
        }
      ],
      "type": "object"
    },
    "typeCoverage": 0,
    "rawType": "Group",
    "isArray": false,
    "isEnum": false,
    "isEnumLiteral": false,
    "isObject": false,
    "isPrimitive": false
  }
}