{
  "createdAt": 1667635482993,
  "updatedAt": 1667635482993,
  "deletedAt": 0,
  "createdFirstAt": 1667635482993,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "readMarkdownFile",
  "slug": "read-markdown-file",
  "operationRelativeTypescriptFilePath": "src/readMarkdownFile.ts",
  "type": {
    "rawType": "(filePath: string) => Promise<import(\"/Users/king/King/operations/tools/types/code-types/build/MarkdownParse\").MarkdownParse | null>",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "async (\n  filePath: Path\n): Promise<MarkdownParse | null> => {\n  // TODO: is this needed?\n  const pathParse = path.parse(filePath);\n  const isMarkdownFile = [\"md\", \"mdx\"].includes(pathParse.ext.slice(1));\n  if (!isMarkdownFile) return null;\n  if (!fs.existsSync(filePath)) return null;\n  const readable = await canRead(filePath);\n  if (!readable) return null;\n  const fileString = await fs.readFile(filePath, \"utf8\");\n  if (!fileString) return null;\n\n  const fileName = path.parse(filePath).name;\n\n  const markdownParse = mdToJsonParse(fileString, fileName);\n  return markdownParse;\n}",
  "description": "Reads and parses a markdown file",
  "id": "yjbevqfmbzvkalralbmmfxhu"
}