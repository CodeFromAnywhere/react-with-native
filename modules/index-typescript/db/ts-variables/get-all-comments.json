{
  "createdAt": 1669055587925,
  "updatedAt": 1669055587925,
  "deletedAt": 0,
  "createdFirstAt": 1669055587925,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "getAllComments",
  "slug": "get-all-comments",
  "operationRelativeTypescriptFilePath": "src/getAllComments.ts",
  "type": {
    "rawType": "(tsMorphNode: import(\"/Users/king/King/operations/node_modules/ts-morph/lib/ts-morph\").VariableDeclaration | import(\"/Users/king/King/operations/node_modules/ts-morph/lib/ts-morph\").Statement<import(\"/Users/king/King/operations/node_modules/@ts-morph/common/lib/typescript\").Statement> | import(\"/Users/king/King/operations/node_modules/ts-morph/lib/ts-morph\").Expression<import(\"/Users/king/King/operations/node_modules/@ts-morph/common/lib/typescript\").Expression>, fileContent: string, operationRelativeTypescriptFilePath: string) => any[]",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "(\n  tsMorphNode: VariableDeclaration | Statement | Expression,\n  fileContent: string,\n  operationRelativeTypescriptFilePath: string\n): Creation<TsComment>[] => {\n  const statementName = tsMorphNode\n    .asKind(SyntaxKind.VariableDeclaration)\n    ?.getName();\n  const rawStatement = tsMorphNode.getText();\n  const leadingComments = tsMorphNode\n    .getLeadingCommentRanges()\n    .map((commentRange) =>\n      makeTsComment({\n        operationRelativeTypescriptFilePath,\n        commentRange,\n        rawStatement,\n        statementName,\n        fileContent,\n      })\n    );\n  const trailingComments = tsMorphNode\n    .getTrailingCommentRanges()\n    .map((commentRange) =>\n      makeTsComment({\n        operationRelativeTypescriptFilePath,\n        commentRange,\n        rawStatement,\n        statementName,\n        fileContent,\n      })\n    );\n\n  const all = leadingComments.concat(trailingComments);\n  return all;\n}",
  "description": "gets all leading comments and trailing comments raw text, put together, separated with newlines",
  "id": "rjjrmezankodtgexobtmukrs"
}