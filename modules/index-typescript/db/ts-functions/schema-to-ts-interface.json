{
  "createdAt": 1669055624236,
  "updatedAt": 1669055624236,
  "deletedAt": 0,
  "createdFirstAt": 1669055624236,
  "isApiExposed": true,
  "isExported": true,
  "groupAuthorization": {},
  "operationRelativeTypescriptFilePath": "src/schemaToTsInterface.ts",
  "commentsInside": [],
  "rawText": " async (\n  filePath: string,\n  typeName: string,\n  schema: Schema,\n  morphInterfaceInfo: MorphInterfaceInfo | undefined\n): Promise<Creation<TsInterface> | undefined> => {\n  const definitionOrBoolean = schema.definitions?.[typeName];\n\n  const operationBasePath = findOperationBasePath(filePath);\n  if (!operationBasePath) return;\n\n  const possibleRefs = schema.definitions\n    ? Object.keys(schema.definitions)\n        .map((typeName) => {\n          const theSchema = getSchema(schema.definitions?.[typeName]);\n          return theSchema ? { name: typeName, schema: theSchema } : null;\n        })\n        .filter(notEmpty)\n    : [];\n  const definition: Schema | undefined =\n    typeof definitionOrBoolean === \"object\" ? definitionOrBoolean : undefined;\n\n  if (!definition) return undefined;\n\n  const parsedDescription = parseFrontmatterMarkdownString(\n    stripComment(\n      morphInterfaceInfo?.description || definition.description || \"\"\n    )\n  );\n\n  const frontmatter = parsedDescription.parameters;\n\n  const { operationRelativePath } = frontmatter;\n\n  const isOperationIndex: boolean =\n    frontmatter.isOperationIndex === undefined\n      ? morphInterfaceInfo?.extensions.includes(\"TsIndexModelType\") || false\n      : Boolean(frontmatter.isOperationIndex);\n\n  const dbStorageMethod = getDbStorageMethod({\n    typeName,\n    frontmatter,\n    extensions: morphInterfaceInfo?.extensions,\n  });\n\n  const isDbModel = !!dbStorageMethod;\n\n  const slug = slugify(typeName);\n\n  const operationRelativeTypescriptFilePath = getOperationRelativePath(\n    filePath,\n    operationBasePath\n  );\n\n  const hasGeneric = !!morphInterfaceInfo?.hasGeneric;\n  const isExported = !!morphInterfaceInfo?.isExported;\n\n  const simplifiedSchema = simplifySchema(\n    typeName,\n    definition,\n    possibleRefs,\n    []\n  );\n\n  const interfaceObject: Creation<TsInterface> = {\n    // identifiers\n    id: slug,\n    name: typeName,\n    slug,\n\n    operationRelativeTypescriptFilePath,\n\n    hasGeneric,\n    isExported,\n\n    rawText: morphInterfaceInfo?.raw,\n    extensions: morphInterfaceInfo?.extensions,\n    isOperationIndex,\n    operationStorageLocationRelativeFilePath: operationRelativePath\n      ? String(operationRelativePath)\n      : undefined,\n    // interface info\n    description: parsedDescription?.raw,\n    dbStorageMethod,\n    isDbModel,\n    // TODO:\n    commentsInside: [],\n    type: {\n      // TODO: test\n      typeDefinition: definition,\n      simplifiedSchema,\n      // TODO:\n      typeCoverage: 0,\n      rawType: typeName,\n      // TODO:\n      isArray: false,\n      isEnum: false,\n      isEnumLiteral: false,\n      isObject: false,\n      isPrimitive: false,\n    },\n  };\n\n  return interfaceObject;\n}",
  "name": "schemaToTsInterface",
  "slug": "schema-to-ts-interface",
  "parameters": [
    {
      "name": "filePath",
      "schema": {
        "type": "string"
      },
      "simplifiedSchema": {
        "type": "string"
      },
      "required": true
    },
    {
      "name": "typeName",
      "schema": {
        "type": "string"
      },
      "simplifiedSchema": {
        "type": "string"
      },
      "required": true
    },
    {
      "name": "schema",
      "schema": {
        "$ref": "#/definitions/Schema"
      },
      "simplifiedSchema": {
        "fullComment": "",
        "properties": [
          {
            "name": "$id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$ref",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$comment",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$defs",
            "required": false,
            "schema": {
              "properties": [],
              "type": "object"
            }
          },
          {
            "name": "type",
            "required": false,
            "schema": {
              "properties": [],
              "type": "object"
            }
          },
          {
            "name": "enum",
            "required": false,
            "schema": {
              "items": [
                {
                  "schema": {
                    "fullComment": "Primitive type",
                    "properties": [],
                    "type": "object"
                  },
                  "name": "JSONSchema7Type"
                }
              ],
              "type": "array"
            }
          },
          {
            "name": "const",
            "required": false,
            "schema": {
              "fullComment": "Primitive type",
              "properties": [],
              "type": "object"
            }
          },
          {
            "name": "multipleOf",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "maximum",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "exclusiveMaximum",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "minimum",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "exclusiveMinimum",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "maxLength",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "minLength",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "items",
            "required": false,
            "schema": {
              "properties": [],
              "type": "object"
            }
          },
          {
            "name": "additionalItems",
            "required": false,
            "schema": {
              "fullComment": "JSON Schema v7",
              "properties": [],
              "type": "object"
            }
          },
          {
            "name": "maxItems",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "minItems",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "uniqueItems",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "contains",
            "required": false,
            "schema": {
              "circularRefName": "JSONSchema7",
              "properties": [],
              "type": "object"
            }
          },
          {
            "name": "maxProperties",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "minProperties",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "required",
            "required": false,
            "schema": {
              "items": [
                {
                  "schema": {
                    "type": "string"
                  },
                  "name": null
                }
              ],
              "type": "array"
            }
          },
          {
            "name": "properties",
            "required": false,
            "schema": {
              "properties": [],
              "type": "object"
            }
          },
          {
            "name": "patternProperties",
            "required": false,
            "schema": {
              "properties": [],
              "type": "object"
            }
          },
          {
            "name": "additionalProperties",
            "required": false,
            "schema": {
              "fullComment": "JSON Schema v7",
              "properties": [],
              "type": "object"
            }
          },
          {
            "name": "dependencies",
            "required": false,
            "schema": {
              "properties": [],
              "type": "object"
            }
          },
          {
            "name": "propertyNames",
            "required": false,
            "schema": {
              "fullComment": "JSON Schema v7",
              "properties": [],
              "type": "object"
            }
          },
          {
            "name": "if",
            "required": false,
            "schema": {
              "fullComment": "JSON Schema v7",
              "properties": [],
              "type": "object"
            }
          },
          {
            "name": "then",
            "required": false,
            "schema": {
              "fullComment": "JSON Schema v7",
              "properties": [],
              "type": "object"
            }
          },
          {
            "name": "else",
            "required": false,
            "schema": {
              "fullComment": "JSON Schema v7",
              "properties": [],
              "type": "object"
            }
          },
          {
            "name": "allOf",
            "required": false,
            "schema": {
              "items": [
                {
                  "schema": {
                    "fullComment": "JSON Schema v7",
                    "properties": [],
                    "type": "object"
                  },
                  "name": "JSONSchema7Definition"
                }
              ],
              "type": "array"
            }
          },
          {
            "name": "anyOf",
            "required": false,
            "schema": {
              "items": [
                {
                  "schema": {
                    "fullComment": "JSON Schema v7",
                    "properties": [],
                    "type": "object"
                  },
                  "name": "JSONSchema7Definition"
                }
              ],
              "type": "array"
            }
          },
          {
            "name": "oneOf",
            "required": false,
            "schema": {
              "items": [
                {
                  "schema": {
                    "fullComment": "JSON Schema v7",
                    "properties": [],
                    "type": "object"
                  },
                  "name": "JSONSchema7Definition"
                }
              ],
              "type": "array"
            }
          },
          {
            "name": "not",
            "required": false,
            "schema": {
              "fullComment": "JSON Schema v7",
              "properties": [],
              "type": "object"
            }
          },
          {
            "name": "format",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contentMediaType",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contentEncoding",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "definitions",
            "required": false,
            "schema": {
              "properties": [],
              "type": "object"
            }
          },
          {
            "name": "title",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "default",
            "required": false,
            "schema": {
              "fullComment": "Primitive type",
              "properties": [],
              "type": "object"
            }
          },
          {
            "name": "readOnly",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "writeOnly",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "examples",
            "required": false,
            "schema": {
              "fullComment": "Primitive type",
              "properties": [],
              "type": "object"
            }
          }
        ],
        "type": "object"
      },
      "required": true
    },
    {
      "name": "morphInterfaceInfo",
      "schema": {
        "$ref": "#/definitions/MorphInterfaceInfo"
      },
      "simplifiedSchema": {
        "fullComment": "",
        "properties": [
          {
            "name": "raw",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "extensions",
            "required": true,
            "schema": {
              "items": [
                {
                  "schema": {
                    "type": "string"
                  },
                  "name": null
                }
              ],
              "type": "array"
            }
          },
          {
            "name": "isExported",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "hasGeneric",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "type": "object"
      },
      "required": false
    }
  ],
  "description": "make a tsInterface from a schema generated from the file",
  "returnType": {
    "rawType": "Promise<any>",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 5,
  "size": {
    "characters": 2742,
    "lines": 105,
    "bytes": 2742,
    "bytesPerCharacter": 1,
    "charactersPerLine": 26,
    "linesPerFile": 105,
    "numberOfFiles": 1
  },
  "id": "iwdahtaianslilbojctaglpv"
}