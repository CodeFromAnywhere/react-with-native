{
  "createdAt": 1669055595853,
  "updatedAt": 1669055595853,
  "deletedAt": 0,
  "createdFirstAt": 1669055595853,
  "isApiExposed": true,
  "isExported": true,
  "groupAuthorization": {},
  "operationRelativeTypescriptFilePath": "src/getParametersFromInterface.ts",
  "commentsInside": [],
  "rawText": " (\n  functionName: string,\n  /**\n   * NB: we need ALL interfaces here across the project because there may be others that were not found in the interfaces in the file, but only in the functions.\n   */\n  interfaces: Creation<TsInterface>[]\n) => {\n  const parametersInterface = interfaces.find(\n    (x) => x.name === `NamedParameters<typeof ${functionName}>`\n  );\n\n  /*\n    NB: this is how a named parameters typeDefinition looks for a function with 2 arguments\n    {\n      \"type\": \"object\",\n      \"properties\": {\n        \"markdownString\": { \"type\": \"string\" },\n        \"level\": { \"type\": \"number\" }\n      },\n      \"required\": [\"markdownString\", \"level\"],\n      \"additionalProperties\": false\n    }\n    */\n  const properties = parametersInterface?.type.typeDefinition?.properties;\n\n  const parameters: FunctionParameter[] = properties\n    ? Object.keys(properties)\n        .map((name) => {\n          const propertySchema = getSchema(\n            parametersInterface.type.typeDefinition?.properties?.[name]\n          );\n          const required =\n            parametersInterface.type.typeDefinition?.required?.includes(name) ||\n            false;\n\n          return propertySchema\n            ? {\n                name,\n                schema: propertySchema,\n                simplifiedSchema: simplifySchema(\n                  name,\n                  propertySchema,\n                  getPossibleRefs(interfaces),\n                  []\n                ),\n                required,\n              }\n            : undefined;\n        })\n        .filter(notEmpty)\n    : [];\n\n  return parameters;\n}",
  "name": "getParametersFromInterfaces",
  "slug": "get-parameters-from-interfaces",
  "parameters": [
    {
      "name": "functionName",
      "schema": {
        "type": "string"
      },
      "simplifiedSchema": {
        "type": "string"
      },
      "required": true
    },
    {
      "name": "interfaces",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Creation%3CTsInterface%3E"
        },
        "description": "NB: we need ALL interfaces here across the project because there may be others that were not found in the interfaces in the file, but only in the functions."
      },
      "simplifiedSchema": {
        "fullComment": "NB: we need ALL interfaces here across the project because there may be others that were not found in the interfaces in the file, but only in the functions.",
        "nb": "we need ALL interfaces here across the project because there may be others that were not found in the interfaces in the file, but only in the functions.",
        "items": [],
        "type": "array"
      },
      "required": true
    }
  ],
  "description": "",
  "returnType": {
    "rawType": "import(\"/Users/king/King/operations/tools/types/code-types/build/FunctionParameter\").FunctionParameter[]",
    "typeDefinition": {
      "optional": false,
      "type": "array",
      "items": {}
    },
    "typeCoverage": 0,
    "isArray": true,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "items": [
        {
          "schema": {
            "properties": [],
            "type": "object"
          },
          "name": null
        }
      ],
      "type": "array"
    }
  },
  "maxIndentationDepth": 9,
  "size": {
    "characters": 1586,
    "lines": 54,
    "bytes": 1586,
    "bytesPerCharacter": 1,
    "charactersPerLine": 29,
    "linesPerFile": 54,
    "numberOfFiles": 1
  },
  "id": "fnbepaebxgdpsecsdomjimji"
}