{
  "createdAt": 1669055620786,
  "updatedAt": 1669055620786,
  "deletedAt": 0,
  "createdFirstAt": 1669055620786,
  "isApiExposed": true,
  "isExported": true,
  "groupAuthorization": {},
  "operationRelativeTypescriptFilePath": "src/makeTsComment.ts",
  "commentsInside": [],
  "rawText": " (config: {\n  operationRelativeTypescriptFilePath: string;\n  commentRange: CommentRange;\n  /**\n   * if we can give the statement a name, it should be provided here\n   */\n  statementName: string | undefined;\n  rawStatement: string;\n  /** needed for calculating line numbers */\n  fileContent: string;\n}): Creation<TsComment> => {\n  const {\n    commentRange,\n    rawStatement,\n    statementName,\n    fileContent,\n    operationRelativeTypescriptFilePath,\n  } = config;\n  const fullCommentText = commentRange.getText();\n  const strippedComment = stripComment(fullCommentText);\n\n  // NB: wouldn't hurt to put character positions in the TsComment as well, would it? But let's not do it until we need it\n  const firstCharacter = commentRange.getPos();\n  const lastCharacter = commentRange.getEnd();\n  const firstLine = getNumberOfLines(fileContent.substring(0, firstCharacter));\n  const lastLine = getNumberOfLines(fileContent.substring(0, lastCharacter));\n  const isSingleLineComment = firstLine === lastLine;\n\n  const { parameters, raw: comment }: MarkdownParse = isSingleLineComment\n    ? { raw: strippedComment, parameters: {} }\n    : parseFrontmatterMarkdownString(strippedComment);\n\n  const types = findCommentTypes(comment);\n\n  const tsComment: Creation<TsComment> = {\n    name: \"Comment\",\n    slug: kebabCase(\"Comment\"),\n    operationRelativeTypescriptFilePath,\n    comment,\n    statementName,\n    rawStatement,\n    parameters,\n    types,\n    firstLine,\n    lastLine,\n  };\n\n  return tsComment;\n}",
  "name": "makeTsComment",
  "slug": "make-ts-comment",
  "parameters": [
    {
      "name": "config",
      "schema": {
        "type": "object",
        "properties": {
          "operationRelativeTypescriptFilePath": {
            "type": "string"
          },
          "commentRange": {
            "$ref": "#/definitions/CommentRange"
          },
          "statementName": {
            "type": "string",
            "description": "if we can give the statement a name, it should be provided here"
          },
          "rawStatement": {
            "type": "string"
          },
          "fileContent": {
            "type": "string",
            "description": "needed for calculating line numbers"
          }
        },
        "required": [
          "operationRelativeTypescriptFilePath",
          "commentRange",
          "rawStatement",
          "fileContent"
        ],
        "additionalProperties": false
      },
      "simplifiedSchema": {
        "properties": [
          {
            "name": "operationRelativeTypescriptFilePath",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commentRange",
            "required": true,
            "schema": {
              "fullComment": "",
              "properties": [],
              "type": "object"
            }
          },
          {
            "name": "statementName",
            "required": false,
            "schema": {
              "fullComment": "if we can give the statement a name, it should be provided here",
              "type": "string"
            }
          },
          {
            "name": "rawStatement",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileContent",
            "required": true,
            "schema": {
              "fullComment": "needed for calculating line numbers",
              "type": "string"
            }
          }
        ],
        "type": "object"
      },
      "required": true
    }
  ],
  "description": "this is actually a fundamental part of the OS. How should comments be structured?\n\nI think, in general, that we should make it look as much as possible at markdown, because it should always be able to have markdown anyway.",
  "returnType": {
    "rawType": "any",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 2,
  "size": {
    "characters": 1717,
    "lines": 51,
    "bytes": 1717,
    "bytesPerCharacter": 1,
    "charactersPerLine": 34,
    "linesPerFile": 51,
    "numberOfFiles": 1
  },
  "id": "qgrmtawcllyjbxcdpoqlkzcn"
}