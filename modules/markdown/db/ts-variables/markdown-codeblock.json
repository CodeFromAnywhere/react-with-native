{
  "createdAt": 1667634955691,
  "updatedAt": 1667634955691,
  "deletedAt": 0,
  "createdFirstAt": 1667634955691,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "MarkdownCodeblock",
  "slug": "markdown-codeblock",
  "operationRelativeTypescriptFilePath": "src/MarkdownCodeblock.tsx",
  "type": {
    "rawType": "(props: { text: string; extension?: string | undefined; minimalMode?: import(\"/Users/king/King/operations/tools/interfaces/vui/vui-elements/markdown/src/MarkdownCodeblock\").CodeblockMode | undefined; expandedMode?: import(\"/Users/king/King/operations/tools/interfaces/vui/vui-elements/markdown/src/MarkdownCodeblock\").CodeblockMode | undefined; isInitiallyExpanded?: boolean | undefined; isModeStatic?: boolean | undefined; }) => JSX.Element",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "(props: {\n  text: string;\n  extension?: string;\n  /**\n   * If set, this is the mode when minimised\n   */\n  minimalMode?: CodeblockMode;\n  /**\n   * If set, this is the mode when expanded\n   */\n  expandedMode?: CodeblockMode;\n  /**\n   * if true, by default it's expanded\n   */\n  isInitiallyExpanded?: boolean;\n  /**\n   * if true, mode cannot be changed\n   */\n  isModeStatic?: boolean;\n}) => {\n  const {\n    text,\n    extension,\n    expandedMode,\n    isInitiallyExpanded,\n    minimalMode,\n    isModeStatic,\n  } = props;\n\n  const [isExpanded, setIsExpanded] = useState(isInitiallyExpanded);\n\n  const mode = isExpanded\n    ? expandedMode || defaultExpandedMode\n    : minimalMode || defaultMinimalMode;\n\n  const realText =\n    mode === \"preview\"\n      ? text.length > 200\n        ? text.slice(0, 198) + \"..\"\n        : text\n      : text;\n\n  return (\n    <Div className=\"w-full\">\n      {isModeStatic ? null : (\n        <Div>\n          <ClickableIcon\n            onClick={() => {\n              setIsExpanded(!isExpanded);\n            }}\n            emoji={isExpanded ? \"➖ Minimise\" : \"➕ Expand\"}\n          />\n        </Div>\n      )}\n\n      <Div\n        className={\n          mode === \"scroll\"\n            ? \"overflow-y-auto h-80\"\n            : mode === \"preview\"\n            ? \"opacity-25 bg-black\"\n            : undefined\n        }\n      >\n        {renderMarkdownContent(\n          createCodeblockMarkdown(realText, extension || null),\n          // The config below is not needed since all that is renderedd is a codeblock, which doesn't need to render links etc.\n          {\n            projectRelativeBaseFolderPath: \"\",\n            projectRelativeMarkdownFilePath: \"\",\n          }\n        )}\n      </Div>\n    </Div>\n  );\n}",
  "description": "Renders a markdown codeblock with a text as content and an optional extension",
  "id": "mvjolrtvlreijvfqizyvstvd"
}