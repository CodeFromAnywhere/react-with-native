{
  "createdAt": 1667634961048,
  "updatedAt": 1667634961048,
  "deletedAt": 0,
  "createdFirstAt": 1667634961048,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "renderMarkdownContent",
  "slug": "render-markdown-content",
  "operationRelativeTypescriptFilePath": "src/renderMarkdownContent.tsx",
  "type": {
    "rawType": "(content: string, config: import(\"/Users/king/King/operations/tools/interfaces/vui/vui-elements/markdown/src/types\").MarkdownParseRenderConfig) => JSX.Element",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "(\n  content: string,\n  config: MarkdownParseRenderConfig\n) => {\n  // console.log(\"Need to render:\", content);\n  return (\n    <Span>\n      <ReactMarkdown\n        className={config?.big ? \"max-w-lg\" : undefined}\n        rehypePlugins={[rehypeHighlight, remarkGfm]}\n        components={{\n          img: ({ node, src, ...props }: any) => {\n            const realSrc = getRealSrc(src, config);\n            return <img src={realSrc} {...props} />;\n          },\n          //Fix newlines with `<br>`\n          br: ({ node, ...props }: any) => (\n            // @ts-ignore\n            <br {...props} />\n          ),\n\n          details: ({ node, ...props }: any) => (\n            // @ts-ignore\n            <details {...props} />\n          ),\n          summary: ({ node, ...props }: any) => (\n            // @ts-ignore\n            <summary {...props} />\n          ),\n          td: ({ node, children, ...props }: any) => {\n            return (\n              // @ts-ignore\n              <td\n                className=\"border border-gray-900 dark:border-gray-100\"\n                {...props}\n              >\n                {children?.map((child: any) =>\n                  child === \"<br />\" ? <br /> : child\n                )}\n              </td>\n            );\n          },\n          th: ({ node, ...props }: any) => (\n            // @ts-ignore\n            <th\n              className=\"border border-gray-900 dark:border-gray-100\"\n              {...props}\n            />\n          ),\n\n          ol: ({ node, ...props }: any) => (\n            <ol className=\"list-decimal mx-3 p-2\" {...props} />\n          ),\n          ul: ({ node, ...props }: any) => (\n            <ul\n              style={{ listStyleType: \"circle\" }}\n              className=\"mx-3 p-2\"\n              {...props}\n            />\n          ),\n          p: ({ node, ...props }: any) => (\n            <p style={{ marginTop: 15, marginBottom: 15 }} {...props} />\n          ),\n          li: ({ node, ...props }: any) => <li className=\"\" {...props} />,\n\n          code: ({ node, children, ...props }: any) => {\n            const [popoverShow, setPopoverShow] = React.useState(false);\n            const btnRef = React.createRef<HTMLAnchorElement>();\n            const popoverRef = React.createRef<HTMLSpanElement>();\n            const openTooltip = () => {\n              if (!btnRef.current || !popoverRef.current) return;\n              createPopper(btnRef.current, popoverRef.current, {\n                placement: \"left\",\n              });\n              setPopoverShow(true);\n            };\n            const closeTooltip = () => {\n              setPopoverShow(false);\n            };\n\n            const word: React.ReactNode | string = children[0];\n\n            const foundWord: AugmentedWord | undefined =\n              typeof word === \"string\"\n                ? config?.augmentedWordObject?.[word]\n                : undefined;\n\n            return foundWord &&\n              foundWord.spoiler &&\n              foundWord.spoiler.length > 0 ? (\n              <span>\n                <a\n                  href={`/${foundWord?.queryPath}`}\n                  style={{ color: \"darkred\" }}\n                  onMouseEnter={openTooltip}\n                  onMouseLeave={closeTooltip}\n                  ref={btnRef}\n                  {...props}\n                >\n                  {children}\n                </a>\n\n                <span\n                  className={\n                    (popoverShow ? \"\" : \"hidden \") +\n                    \"bg-black border-0 mr-3 block z-50 font-normal leading-normal text-sm max-w-xs text-left no-underline break-words rounded-lg\"\n                  }\n                  ref={popoverRef}\n                >\n                  <div>\n                    <div className=\"bg-black text-white opacity-75 font-semibold p-3 mb-0 border-b border-solid border-blueGray-100 uppercase rounded-t-lg\">\n                      {foundWord.word}\n                    </div>\n                    <div className=\"p-3 text-white\">\n                      {renderMarkdownContent(foundWord.spoiler, {\n                        projectRelativeBaseFolderPath: getFolderJs(\n                          foundWord.projectRelativeMarkdownSourcePath\n                        )!,\n                        projectRelativeMarkdownFilePath:\n                          foundWord.projectRelativeMarkdownSourcePath,\n                      })}\n                    </div>\n                  </div>\n                </span>\n              </span>\n            ) : (\n              <code\n                className=\"dark:bg-gray-700\"\n                style={{ color: \"darkcyan\" }}\n                {...props}\n              >\n                {children}\n              </code>\n            );\n          },\n          a: ({ node, href, ...props }) => {\n            const youtubeId = getYoutubeId(href);\n            if (youtubeId) {\n              return (\n                <iframe\n                  width=\"560\"\n                  height=\"315\"\n                  src={`https://www.youtube.com/embed/${youtubeId}`}\n                  title=\"YouTube video player\"\n                  frameBorder=\"0\"\n                  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                  allowFullScreen\n                ></iframe>\n              );\n            }\n            return (\n              <a\n                className=\"text-blue-500\"\n                style={{ color: \"darkblue\" }}\n                href={href}\n                {...props}\n              />\n            );\n          },\n        }}\n      >\n        {content}\n      </ReactMarkdown>\n    </Span>\n  );\n}",
  "description": "renders a markdown striing (without frontmatter)",
  "id": "awmyyywgptwvkwpsiwtgugqq"
}