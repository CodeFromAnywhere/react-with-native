{
  "createdAt": 1670528683334,
  "updatedAt": 1670528683334,
  "deletedAt": 0,
  "createdFirstAt": 1670528683334,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "renderMarkdownContent",
  "slug": "render-markdown-content",
  "operationRelativeTypescriptFilePath": "src/renderMarkdownContent.tsx",
  "type": {
    "rawType": "(content: string, config: import(\"/Users/king/King/operations/tools/user-interfaces/gui/smart/markdown/src/types\").MarkdownParseRenderConfig) => JSX.Element",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "(\n  content: string,\n  config: MarkdownParseRenderConfig\n): JSX.Element => {\n  const contextSelection = useLastSelection();\n  const { openContextMenuProps, renderContextMenu } = useSelectionPromptsMenu(\n    config.selectionPrompts || [],\n    {\n      contextContent: content,\n      context_projectRelativeFilePath: config.projectRelativeMarkdownFilePath,\n      contextSelection,\n    }\n  );\n  if (!content) return <Div>No content</Div>;\n\n  const markdownRender = (\n    <ReactMarkdown\n      className={config?.big ? \"max-w-lg\" : undefined}\n      rehypePlugins={[rehypeHighlight, remarkGfm, rehypeRaw]}\n      components={{\n        h1: HtmlHeader,\n        h2: HtmlHeader,\n        h3: HtmlHeader,\n        h4: HtmlHeader,\n        h5: HtmlHeader,\n        h6: HtmlHeader,\n\n        img: ({ src, alt }) => {\n          if (!src) return <Div>Bad asset src</Div>;\n          const isRelative = isPathRelative(src);\n          if (isRelative && !config.projectRelativeMarkdownFilePath) {\n            // We can't show the asset in this scenario\n            return (\n              <P>\n                ![${alt}](${src})\n              </P>\n            );\n          }\n\n          const url = isRelative ? undefined : src;\n          const relativePath = isRelative ? src : undefined;\n          const asset: Asset = { alt, relativePath, absoluteUrl: url };\n\n          return (\n            <AssetView\n              asset={asset}\n              projectRelativeReferencingFilePath={\n                config.projectRelativeMarkdownFilePath\n              }\n              hideDownloadLink\n              className=\"w-96\"\n            />\n          );\n        },\n        //Fix newlines with `<br>`\n        br: ({ node, ...props }: any) => (\n          // @ts-ignore\n          <br {...props} />\n        ),\n\n        details: ({ node, ...props }) => {\n          return (\n            // @ts-ignore\n            <details\n              className=\"group border border-gray-600 rounded-lg\"\n              {...props}\n            />\n          );\n        },\n\n        summary: ({ node, ...props }: any) => {\n          return (\n            // @ts-ignore\n            <summary\n              className=\"bg-gray-200 dark:bg-gray-700 p-2 rounded-lg group-open:rounded-b-none group-open:border group-open:border-b-gray-600 select-none\"\n              {...props}\n            />\n          );\n        },\n\n        td: ({ node, children, ...props }: any) => {\n          return (\n            // @ts-ignore\n            <td\n              className=\"border-spacing-1 border-t border-r last:border-r-0 border-gray-600 dark:border-gray-100 p-2\"\n              {...props}\n            >\n              {children?.map((child: any) =>\n                child === \"<br />\" ? <br /> : child\n              )}\n            </td>\n          );\n        },\n        th: ({ node, ...props }) => (\n          // @ts-ignore\n          <th className=\"\" {...props} />\n        ),\n\n        table: ({ node, ...props }) => (\n          // @ts-ignore\n          <div className=\"inline-block rounded-lg border shadow-2xl\">\n            <table className=\"\" {...props} />\n          </div>\n        ),\n\n        tbody: ({ node, ...props }) => (\n          // @ts-ignore\n          <tbody className=\"border-gray-600 dark:border-gray-100\" {...props} />\n        ),\n\n        tr: ({ node, ...props }) => (\n          // @ts-ignore\n          <tr\n            className=\"dark:even:bg-black even:bg-gray-400 even:bg-opacity-30\"\n            {...props}\n          />\n        ),\n\n        ol: ({ node, ...props }: any) => (\n          <ol className=\"list-decimal mx-3 p-2\" {...props} />\n        ),\n        ul: ({ node, ...props }: any) => (\n          <ul\n            style={{ listStyleType: \"circle\" }}\n            className=\"mx-3 p-2\"\n            {...props}\n          />\n        ),\n\n        p: ({ node, ...props }) => {\n          // TODO: make this work for components as well, now only works if the children of p is raw text...\n          const text = makeArray(props.children)\n            .map((x) => {\n              if (typeof x === \"string\" || typeof x === \"number\") {\n                return String(x);\n              }\n              return undefined;\n            })\n            .filter(notEmpty)\n            .join(\"\");\n\n          const selectionResultsThisParagraph =\n            config.selectionContextualPromptResults?.filter((x) =>\n              x.selectionString ? text.includes(x.selectionString) : false\n            );\n\n          return (\n            <>\n              <p\n                style={{\n                  marginTop: 15,\n                  marginBottom: 15,\n                  whiteSpace: \"pre-line\",\n                }}\n                {...props}\n              />\n              {selectionResultsThisParagraph?.map((result) => {\n                return (\n                  <Div key={`result-${result.id}`}>\n                    {result.contextualPromptSlug}: {result.resultText}{\" \"}\n                    (selection: {result.selectionString})\n                  </Div>\n                );\n              })}\n            </>\n          );\n        },\n        li: ({ node, ...props }: any) => <li className=\"\" {...props} />,\n\n        code: ({ node, children, ...props }) => {\n          // NB: There's a big problem with this because all code elements get put in a `<pre>` element. I don't think this is easy to remove, but we can look in the issues. we can also look in google for how to improve it with css because i couldn't figure it out myself\n          const word: React.ReactNode | string = children[0];\n\n          const wordString: string | undefined =\n            typeof word === \"string\" ? word : undefined;\n\n          const foundWord: AugmentedWord | undefined = wordString\n            ? config?.augmentedWordObject?.[wordString]\n            : undefined;\n\n          return foundWord &&\n            foundWord.spoiler &&\n            foundWord.spoiler.length > 0 ? (\n            <Tooltip\n              placement=\"left\"\n              tooltip={\n                <>\n                  <div className=\"font-semibold px-3 mb-0 border-b border-solid border-gray-100 rounded-t-lg\">\n                    {foundWord.word}\n                  </div>\n                  <div className=\"px-3\">\n                    {renderMarkdownContent(foundWord.spoiler, {\n                      projectRelativeBaseFolderPath: getFolderJs(\n                        foundWord.projectRelativeMarkdownSourcePath\n                      )!,\n                      projectRelativeMarkdownFilePath:\n                        foundWord.projectRelativeMarkdownSourcePath,\n                    })}\n                  </div>\n                </>\n              }\n            >\n              <a\n                href={`/${foundWord?.queryPath}`}\n                style={{ color: \"darkred\" }}\n                {...props}\n              >\n                {children}\n              </a>\n            </Tooltip>\n          ) : wordString?.startsWith(\".\") ? (\n            <Parameter text={wordString} />\n          ) : (\n            <code\n              className=\"dark:bg-gray-700\"\n              {...props}\n              style={{\n                color: \"darkcyan\",\n                // NB: the below doesn't work!\n                wordBreak: \"break-all\",\n                wordWrap: \"break-word\",\n              }}\n            >\n              {children}\n            </code>\n          );\n        },\n        a: ({ node, href, ...props }) => {\n          const youtubeId = getYoutubeId(href);\n          if (youtubeId) {\n            return (\n              <iframe\n                width=\"560\"\n                height=\"315\"\n                src={`https://www.youtube.com/embed/${youtubeId}`}\n                title=\"YouTube video player\"\n                frameBorder=\"0\"\n                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                allowFullScreen\n              ></iframe>\n            );\n          }\n          return (\n            <a\n              className=\"dark:text-blue-200 text-blue-500\"\n              href={href}\n              {...props}\n            />\n          );\n        },\n      }}\n    >\n      {content}\n    </ReactMarkdown>\n  );\n\n  if (config.disableSelectionContextMenu) return markdownRender;\n\n  // console.log(\"Need to render:\", content);\n  return (\n    <div {...openContextMenuProps}>\n      {renderContextMenu()}\n      {markdownRender}\n    </div>\n  );\n}",
  "description": "Renders a markdown string (without frontmatter)\n\nTODO:\n\n- **Show selection prompt-results** In `renderMarkdownContent`, augment the alineas with the `ContextualPromptResult`. Would be great to see the results when hovering over the selected thing, or maybe showing it with a button, or inline, even.",
  "id": "ycujgjjsdgpcskqmeproytcb"
}