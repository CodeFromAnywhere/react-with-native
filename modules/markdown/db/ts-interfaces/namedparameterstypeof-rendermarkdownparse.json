{
  "createdAt": 1667634962136,
  "updatedAt": 1667634962136,
  "deletedAt": 0,
  "createdFirstAt": 1667634962136,
  "id": "namedparameterstypeof-rendermarkdownparse",
  "name": "NamedParameters<typeof renderMarkdownParse>",
  "slug": "namedparameterstypeof-rendermarkdownparse",
  "operationRelativeTypescriptFilePath": "src/renderMarkdownParse.tsx",
  "hasGeneric": false,
  "isExported": false,
  "isOperationIndex": false,
  "description": "",
  "isDbModel": false,
  "commentsInside": [],
  "type": {
    "typeDefinition": {
      "type": "object",
      "properties": {
        "markdownParse": {
          "$ref": "#/definitions/MarkdownParse"
        },
        "config": {
          "$ref": "#/definitions/MarkdownParseRenderConfig"
        }
      },
      "required": [
        "markdownParse",
        "config"
      ],
      "additionalProperties": false
    },
    "simplifiedSchema": {
      "properties": [
        {
          "name": "markdownParse",
          "required": true,
          "schema": {
            "fullComment": "",
            "properties": [
              {
                "name": "fileName",
                "required": false,
                "schema": {
                  "fullComment": "if available, this can be the filename of the markdown in this markdown-parse. Can be used for things like merging",
                  "type": "string"
                }
              },
              {
                "name": "createdAt",
                "required": false,
                "schema": {
                  "type": "number"
                }
              },
              {
                "name": "openedAt",
                "required": false,
                "schema": {
                  "type": "number"
                }
              },
              {
                "name": "updatedAt",
                "required": false,
                "schema": {
                  "type": "number"
                }
              },
              {
                "name": "deletedAt",
                "required": false,
                "schema": {
                  "type": "number"
                }
              },
              {
                "name": "createdFirstAt",
                "required": false,
                "schema": {
                  "type": "number"
                }
              },
              {
                "name": "parameters",
                "required": true,
                "schema": {
                  "fullComment": "parameters found in frontmatter\n\nOur version of frontmatter is a bit simpler than regular frontmatter\n\nNot sure if this is a good idea, but it keeps it simple for our OS\n\nall values parse in a similar way to csv\n\nmake sure that you use quotes if you want to store a string with commas, because commas in a parameter indicate that it is a string array\n\nNB: string arrays are comma separated values, where you can put values with special characters in between quotes",
                  "nb": "string arrays are comma separated values, where you can put values with special characters in between quotes",
                  "properties": [],
                  "type": "object"
                }
              },
              {
                "name": "downmatterParameters",
                "required": false,
                "schema": {
                  "fullComment": "downmatter is the same as frontmatter, but it is to be found at the end of the file. It is supposed to be containing things that are not important for the user to know, yet it is important metadata that is connected to this file. This can be indexed things, for example.\n\n",
                  "properties": [
                    {
                      "name": "detectedLanguage",
                      "required": false,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "labels",
                      "required": false,
                      "schema": {
                        "items": [
                          {
                            "schema": {
                              "type": "string"
                            },
                            "name": null
                          }
                        ],
                        "type": "array"
                      }
                    }
                  ],
                  "type": "object"
                }
              },
              {
                "name": "content",
                "required": false,
                "schema": {
                  "fullComment": "structured content based on h1, h2, h3, etc (paragraphs, recursive)",
                  "items": [
                    {
                      "schema": {
                        "fullComment": "",
                        "properties": [
                          {
                            "name": "level",
                            "required": true,
                            "schema": {
                              "fullComment": "0 is a paragraph 1-6 is h1 until h6",
                              "type": "number"
                            }
                          },
                          {
                            "name": "content",
                            "required": false,
                            "schema": {
                              "type": "string"
                            }
                          },
                          {
                            "name": "markdownEmbed",
                            "required": false,
                            "schema": {
                              "fullComment": "Anything in the format `![alt](src)`\n\nNB: I need to be very clear how this one works",
                              "nb": "I need to be very clear how this one works",
                              "properties": [
                                {
                                  "name": "alt",
                                  "required": true,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "src",
                                  "required": true,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "type",
                                  "required": true,
                                  "schema": {
                                    "enum": [
                                      "youtube",
                                      "video",
                                      "image",
                                      "audio",
                                      "markdown",
                                      "json",
                                      "typescript",
                                      "file"
                                    ],
                                    "fullComment": "type of asset that is being embedded",
                                    "type": "string"
                                  }
                                }
                              ],
                              "type": "object"
                            }
                          },
                          {
                            "name": "markdownLink",
                            "required": false,
                            "schema": {
                              "fullComment": "Anything in the format `[alt](href)`\n\nIt needs to be clear how this works. There is a convention for this, and I should implement that as good as possible, and document it here",
                              "properties": [
                                {
                                  "name": "alt",
                                  "required": true,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "href",
                                  "required": true,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "type",
                                  "required": true,
                                  "schema": {
                                    "enum": [
                                      "youtube",
                                      "video",
                                      "image",
                                      "audio",
                                      "markdown",
                                      "json",
                                      "typescript",
                                      "file"
                                    ],
                                    "fullComment": "Can be inferred from href\n\ntype of asset that is being embedded",
                                    "type": "string"
                                  }
                                }
                              ],
                              "type": "object"
                            }
                          },
                          {
                            "name": "title",
                            "required": false,
                            "schema": {
                              "fullComment": "NB: title can also be an empty string (\"\")",
                              "nb": "title can also be an empty string (\"\")",
                              "type": "string"
                            }
                          },
                          {
                            "name": "children",
                            "required": false,
                            "schema": {
                              "fullComment": "all content until the next title. it's either a content array if there's any titles found, or a string[] if it's paragraphs",
                              "items": [
                                {
                                  "schema": {
                                    "circularRefName": "MarkdownChunk",
                                    "properties": [],
                                    "type": "object"
                                  },
                                  "name": "MarkdownChunk"
                                }
                              ],
                              "type": "array"
                            }
                          }
                        ],
                        "type": "object"
                      },
                      "name": "MarkdownChunk"
                    }
                  ],
                  "type": "array"
                }
              },
              {
                "name": "raw",
                "required": true,
                "schema": {
                  "fullComment": "raw markdown without frontmatter",
                  "type": "string"
                }
              }
            ],
            "type": "object"
          }
        },
        {
          "name": "config",
          "required": true,
          "schema": {
            "fullComment": "",
            "properties": [
              {
                "name": "projectRelativeBaseFolderPath",
                "required": true,
                "schema": {
                  "fullComment": "Folder path where the markdown is supposed to be located.\n\nThis is used for knowing where relative links or assets can be found",
                  "type": "string"
                }
              },
              {
                "name": "projectRelativeMarkdownFilePath",
                "required": true,
                "schema": {
                  "fullComment": "project relative path of the markdown file.\n\nThis is used for knowing where relative links or assets can be found",
                  "type": "string"
                }
              },
              {
                "name": "isStatic",
                "required": false,
                "schema": {
                  "fullComment": "If true, the files should come from a static folder. This means the relative references should now become projectRelative. Also see `copyAllRelativeFiles`.\n\nIf not true, we will use the api.",
                  "type": "boolean"
                }
              },
              {
                "name": "isDev",
                "required": false,
                "schema": {
                  "fullComment": "If true, we assume not all files are present in the static folder yet. This means we need to use the api.",
                  "type": "boolean"
                }
              },
              {
                "name": "big",
                "required": false,
                "schema": {
                  "type": "boolean"
                }
              }
            ],
            "type": "object"
          }
        }
      ],
      "type": "object"
    },
    "typeCoverage": 0,
    "rawType": "NamedParameters<typeof renderMarkdownParse>",
    "isArray": false,
    "isEnum": false,
    "isEnumLiteral": false,
    "isObject": false,
    "isPrimitive": false
  }
}