{
  "createdAt": 1667634959189,
  "updatedAt": 1667634959189,
  "deletedAt": 0,
  "createdFirstAt": 1667634959189,
  "id": "namedparameterstypeof-rendermarkdownchunk",
  "name": "NamedParameters<typeof renderMarkdownChunk>",
  "slug": "namedparameterstypeof-rendermarkdownchunk",
  "operationRelativeTypescriptFilePath": "src/renderMarkdownChunk.tsx",
  "hasGeneric": false,
  "isExported": false,
  "isOperationIndex": false,
  "description": "",
  "isDbModel": false,
  "commentsInside": [],
  "type": {
    "typeDefinition": {
      "type": "object",
      "properties": {
        "chunk": {
          "$ref": "#/definitions/MarkdownChunk"
        },
        "config": {
          "$ref": "#/definitions/MarkdownParseRenderConfig"
        }
      },
      "required": [
        "chunk",
        "config"
      ],
      "additionalProperties": false
    },
    "simplifiedSchema": {
      "properties": [
        {
          "name": "chunk",
          "required": true,
          "schema": {
            "fullComment": "",
            "properties": [
              {
                "name": "level",
                "required": true,
                "schema": {
                  "fullComment": "0 is a paragraph 1-6 is h1 until h6",
                  "type": "number"
                }
              },
              {
                "name": "content",
                "required": false,
                "schema": {
                  "type": "string"
                }
              },
              {
                "name": "markdownEmbed",
                "required": false,
                "schema": {
                  "fullComment": "Anything in the format `![alt](src)`\n\nNB: I need to be very clear how this one works",
                  "nb": "I need to be very clear how this one works",
                  "properties": [
                    {
                      "name": "alt",
                      "required": true,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "src",
                      "required": true,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "type",
                      "required": true,
                      "schema": {
                        "enum": [
                          "youtube",
                          "video",
                          "image",
                          "audio",
                          "markdown",
                          "json",
                          "typescript",
                          "file"
                        ],
                        "fullComment": "type of asset that is being embedded",
                        "type": "string"
                      }
                    }
                  ],
                  "type": "object"
                }
              },
              {
                "name": "markdownLink",
                "required": false,
                "schema": {
                  "fullComment": "Anything in the format `[alt](href)`\n\nIt needs to be clear how this works. There is a convention for this, and I should implement that as good as possible, and document it here",
                  "properties": [
                    {
                      "name": "alt",
                      "required": true,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "href",
                      "required": true,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "type",
                      "required": true,
                      "schema": {
                        "enum": [
                          "youtube",
                          "video",
                          "image",
                          "audio",
                          "markdown",
                          "json",
                          "typescript",
                          "file"
                        ],
                        "fullComment": "Can be inferred from href\n\ntype of asset that is being embedded",
                        "type": "string"
                      }
                    }
                  ],
                  "type": "object"
                }
              },
              {
                "name": "title",
                "required": false,
                "schema": {
                  "fullComment": "NB: title can also be an empty string (\"\")",
                  "nb": "title can also be an empty string (\"\")",
                  "type": "string"
                }
              },
              {
                "name": "children",
                "required": false,
                "schema": {
                  "fullComment": "all content until the next title. it's either a content array if there's any titles found, or a string[] if it's paragraphs",
                  "items": [
                    {
                      "schema": {
                        "circularRefName": "MarkdownChunk",
                        "properties": [],
                        "type": "object"
                      },
                      "name": "MarkdownChunk"
                    }
                  ],
                  "type": "array"
                }
              }
            ],
            "type": "object"
          }
        },
        {
          "name": "config",
          "required": true,
          "schema": {
            "fullComment": "",
            "properties": [
              {
                "name": "projectRelativeBaseFolderPath",
                "required": true,
                "schema": {
                  "fullComment": "Folder path where the markdown is supposed to be located.\n\nThis is used for knowing where relative links or assets can be found",
                  "type": "string"
                }
              },
              {
                "name": "projectRelativeMarkdownFilePath",
                "required": true,
                "schema": {
                  "fullComment": "project relative path of the markdown file.\n\nThis is used for knowing where relative links or assets can be found",
                  "type": "string"
                }
              },
              {
                "name": "isStatic",
                "required": false,
                "schema": {
                  "fullComment": "If true, the files should come from a static folder. This means the relative references should now become projectRelative. Also see `copyAllRelativeFiles`.\n\nIf not true, we will use the api.",
                  "type": "boolean"
                }
              },
              {
                "name": "isDev",
                "required": false,
                "schema": {
                  "fullComment": "If true, we assume not all files are present in the static folder yet. This means we need to use the api.",
                  "type": "boolean"
                }
              },
              {
                "name": "big",
                "required": false,
                "schema": {
                  "type": "boolean"
                }
              }
            ],
            "type": "object"
          }
        }
      ],
      "type": "object"
    },
    "typeCoverage": 0,
    "rawType": "NamedParameters<typeof renderMarkdownChunk>",
    "isArray": false,
    "isEnum": false,
    "isEnumLiteral": false,
    "isObject": false,
    "isPrimitive": false
  }
}