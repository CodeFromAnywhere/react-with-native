{
  "createdAt": 1668149315858,
  "updatedAt": 1668149315858,
  "deletedAt": 0,
  "createdFirstAt": 1668149315858,
  "publicAuthorization": [
    "read",
    "search"
  ],
  "isApiExposed": false,
  "isPostApi": false,
  "isGetApi": false,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/renderMarkdownParse.tsx",
  "commentsInside": [],
  "rawText": " (\n  markdownParse: MarkdownParse,\n  config: MarkdownParseRenderConfig\n) => {\n  // NB: not sure if this is the best way, there may be mulitiple markdown parses....\n  useOpenHashDetails();\n\n  return (\n    <Div>\n      {renderFrontmatter(markdownParse.parameters, { renderSpacer: true })}\n      {/* NB: Previously we needed renderMarkdownTtile, renderMarkdownChunk etc... but this was not rightly parsed, so we are going to use the regular raw parser now from `react-markdown` instead... */}\n      {renderMarkdownContent(markdownParse.raw, config)}\n    </Div>\n  );\n}",
  "name": "renderMarkdownParse",
  "slug": "render-markdown-parse",
  "parameters": [
    {
      "name": "markdownParse",
      "schema": {
        "$ref": "#/definitions/MarkdownParse"
      },
      "simplifiedSchema": {
        "fullComment": "",
        "properties": [
          {
            "name": "fileName",
            "required": false,
            "schema": {
              "fullComment": "if available, this can be the filename of the markdown in this markdown-parse. Can be used for things like merging",
              "type": "string"
            }
          },
          {
            "name": "createdAt",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "openedAt",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "updatedAt",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "deletedAt",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "createdFirstAt",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "content",
            "required": false,
            "schema": {
              "fullComment": "structured content based on h1, h2, h3, etc (paragraphs, recursive)",
              "items": [],
              "type": "array"
            }
          },
          {
            "name": "raw",
            "required": true,
            "schema": {
              "fullComment": "raw markdown without frontmatter",
              "type": "string"
            }
          }
        ],
        "type": "object"
      },
      "required": true
    },
    {
      "name": "config",
      "schema": {
        "$ref": "#/definitions/MarkdownParseRenderConfig"
      },
      "required": true
    }
  ],
  "description": "renders the MardkownParse interface (including frontmatter)",
  "returnType": {
    "rawType": "JSX.Element",
    "typeDefinition": {
      "optional": false,
      "$ref": "#/definitions/JSX.Element"
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 3,
  "size": {
    "characters": 622,
    "lines": 15,
    "bytes": 622,
    "bytesPerCharacter": 1,
    "charactersPerLine": 41,
    "linesPerFile": 15,
    "numberOfFiles": 1
  },
  "id": "jhjdyztrtkojyvdycuepvble"
}