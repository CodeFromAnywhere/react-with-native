[
  {
    "createdAt": 1667684638019,
    "updatedAt": 1667684638019,
    "deletedAt": 0,
    "createdFirstAt": 1667684638019,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/types.ts",
    "comment": "later we can make this an enum! it can be auto-generated along with enums for the operation paths, and more things alike.\n\nif it's an enum it will automatically be possible to select a value from it in the simplified schema form :D\n\nbesides simply having OperationName, we can have specific operation classification operation names:\n\n- JsOperationName (js)\n- NodeOperationName (node)\n- ServerOperationName (server)\n- AppShellOperationName (web, app, etc.)\n- UiOperationName (ui-es6 and ui-es5)",
    "rawStatement": "export type OperationName = string;",
    "parameters": {},
    "types": [],
    "firstLine": 1,
    "lastLine": 13,
    "id": "sujnppcplzfcvpvampilbilp"
  },
  {
    "createdAt": 1667684638019,
    "updatedAt": 1667684638019,
    "deletedAt": 0,
    "createdFirstAt": 1667684638019,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/types.ts",
    "comment": "later this could be known by the frontend so it will render a ui to select a folder\n\nWe need to figure out how we can know all type types in between when getting the type definition schema, not only the final type. If I'm lucky there is a way to find it as a #ref in a consistent way.",
    "rawStatement": "export type ProjectRelativeFolderPath = string;",
    "parameters": {},
    "types": [],
    "firstLine": 17,
    "lastLine": 21,
    "id": "zfecnfmmmzfsiqbcgqpxuidb"
  }
]