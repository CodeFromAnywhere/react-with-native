{
  "createdAt": 1667684637074,
  "updatedAt": 1667684637074,
  "deletedAt": 0,
  "createdFirstAt": 1667684637074,
  "id": "projectrelativefolderpath",
  "name": "ProjectRelativeFolderPath",
  "slug": "projectrelativefolderpath",
  "operationRelativeTypescriptFilePath": "src/types.ts",
  "hasGeneric": false,
  "isExported": true,
  "rawText": "\n\n/**\n * later this could be known by the frontend so it will render a ui to select a folder\n *\n * We need to figure out how we can know all type types in between when getting the type definition schema, not only the final type. If I'm lucky there is a way to find it as a #ref in a consistent way.\n */\nexport type ProjectRelativeFolderPath = string;",
  "extensions": [],
  "isOperationIndex": false,
  "description": "later this could be known by the frontend so it will render a ui to select a folder\n\nWe need to figure out how we can know all type types in between when getting the type definition schema, not only the final type. If I'm lucky there is a way to find it as a #ref in a consistent way.",
  "isDbModel": false,
  "commentsInside": [],
  "type": {
    "typeDefinition": {
      "type": "string",
      "description": "later this could be known by the frontend so it will render a ui to select a folder\n\nWe need to figure out how we can know all type types in between when getting the type definition schema, not only the final type. If I'm lucky there is a way to find it as a #ref in a consistent way."
    },
    "simplifiedSchema": {
      "fullComment": "later this could be known by the frontend so it will render a ui to select a folder\n\nWe need to figure out how we can know all type types in between when getting the type definition schema, not only the final type. If I'm lucky there is a way to find it as a #ref in a consistent way.",
      "type": "string"
    },
    "typeCoverage": 0,
    "rawType": "ProjectRelativeFolderPath",
    "isArray": false,
    "isEnum": false,
    "isEnumLiteral": false,
    "isObject": false,
    "isPrimitive": false
  }
}