{
  "createdAt": 1667684632150,
  "updatedAt": 1667684632150,
  "deletedAt": 0,
  "createdFirstAt": 1667684632150,
  "id": "finalbundleconfig",
  "name": "FinalBundleConfig",
  "slug": "finalbundleconfig",
  "operationRelativeTypescriptFilePath": "src/FinalBundleConfig.ts",
  "hasGeneric": false,
  "isExported": true,
  "rawText": "\n\nexport type FinalBundleConfig = Omit<\n  BundleConfig,\n  \"customisableBundleConfig\" | \"createBundleConfig\"\n> & {\n  customisableBundleConfig: FinalCustomisableBundleConfig;\n  createBundleConfig: FinalCreateBundleConfig;\n};",
  "extensions": [],
  "isOperationIndex": false,
  "description": "",
  "isDbModel": false,
  "commentsInside": [],
  "type": {
    "typeDefinition": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "customisableBundleConfig": {
          "$ref": "#/definitions/FinalCustomisableBundleConfig"
        },
        "createBundleConfig": {
          "$ref": "#/definitions/FinalCreateBundleConfig"
        },
        "categoryStackCalculated": {
          "$ref": "#/definitions/CategoryStack",
          "description": "In case of jsonSingle storageMethod, the categoryStack is generated by the location of the file in the db model folder in the db folder.\n\nNB: Changing this value when updating/upserting, changes where the item is located!"
        },
        "id": {
          "$ref": "#/definitions/Id"
        },
        "operationName": {
          "type": [
            "null",
            "string"
          ],
          "description": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you"
        },
        "projectRelativePath": {
          "type": "string",
          "description": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you"
        },
        "operationRelativePath": {
          "type": "string",
          "description": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you"
        },
        "createdAt": {
          "$ref": "#/definitions/CreatedAt"
        },
        "updatedAt": {
          "$ref": "#/definitions/UpdatedAt"
        },
        "deletedAt": {
          "$ref": "#/definitions/DeletedAt"
        },
        "createdFirstAt": {
          "$ref": "#/definitions/CreatedFirstAt"
        },
        "slug": {
          "$ref": "#/definitions/Id"
        },
        "name": {
          "$ref": "#/definitions/Id"
        },
        "language": {
          "$ref": "#/definitions/Id"
        },
        "description": {
          "$ref": "#/definitions/Id"
        },
        "emoji": {
          "$ref": "#/definitions/Id"
        },
        "primaryColor": {
          "$ref": "#/definitions/Id"
        },
        "gitRepoUrl": {
          "$ref": "#/definitions/Id"
        },
        "isGitRepoPublic": {
          "$ref": "#/definitions/Id"
        },
        "bundleMarkdownReaderConfig": {
          "$ref": "#/definitions/Id"
        }
      },
      "required": [
        "createBundleConfig",
        "createdAt",
        "createdFirstAt",
        "customisableBundleConfig",
        "deletedAt",
        "id",
        "operationName",
        "projectRelativePath",
        "updatedAt"
      ]
    },
    "simplifiedSchema": {
      "properties": [
        {
          "name": "customisableBundleConfig",
          "required": true,
          "schema": {
            "fullComment": "",
            "properties": [
              {
                "name": "description",
                "required": false,
                "schema": {
                  "fullComment": "descriptioin for git commit, if pushing. Default is \"monorepo update\"",
                  "type": "string"
                }
              },
              {
                "name": "debug",
                "required": false,
                "schema": {
                  "type": "boolean"
                }
              },
              {
                "name": "branchName",
                "required": false,
                "schema": {
                  "fullComment": "optionally, specify a custom branch name to pull from / push to / checkout (default is \"main\")",
                  "type": "string"
                }
              },
              {
                "name": "isOffline",
                "required": false,
                "schema": {
                  "fullComment": "if true, will not clone/pull/push and deploy. No internet is needed, will also not use any `.git` folder.",
                  "type": "boolean"
                }
              },
              {
                "name": "skipPull",
                "required": false,
                "schema": {
                  "fullComment": "skips the step where it gets the new stuff from github",
                  "type": "boolean"
                }
              },
              {
                "name": "skipPush",
                "required": false,
                "schema": {
                  "fullComment": "skips the step where it pushes the new bundle to remote",
                  "type": "boolean"
                }
              },
              {
                "name": "skipUpsert",
                "required": false,
                "schema": {
                  "fullComment": "skips the step where it saves to the db",
                  "type": "boolean"
                }
              },
              {
                "name": "publicEnvironmentVariables",
                "required": false,
                "schema": {
                  "fullComment": "",
                  "properties": [],
                  "type": "object"
                }
              },
              {
                "name": "privateEnvironmentVariables",
                "required": false,
                "schema": {
                  "fullComment": "NB: should not end up in public repos!\n\n",
                  "nb": "should not end up in public repos!",
                  "properties": [],
                  "type": "object"
                }
              },
              {
                "name": "gitUserEmail",
                "required": false,
                "schema": {
                  "fullComment": "Configuration for your commit (needed for vercel deployment)",
                  "type": "string"
                }
              },
              {
                "name": "gitUserName",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            ],
            "type": "object"
          }
        },
        {
          "name": "createBundleConfig",
          "required": true,
          "schema": {
            "fullComment": "CreateBundleConfig after applying the defaults",
            "properties": [
              {
                "name": "informationStrategy",
                "required": false,
                "schema": {
                  "enum": [
                    "ignore",
                    "push",
                    "pullReplace",
                    "pullMerge"
                  ],
                  "fullComment": "Default information strategy\n\npush (default): take needed information from project and push to bundle (removing the existing info)\n\npullReplace: pull bundle and keep its information intact, not taking anything new from the OS, replacing all the information we had from these models in the OS\n\npullMerge: pull bundle and use its information in conjunction with the information we had in the OS. This option will merge both information sources, removing duplicate IDs\n\nignore: don't put any data in the bundle!",
                  "type": "string"
                }
              },
              {
                "name": "foldersFromRepo",
                "required": false,
                "schema": {
                  "fullComment": "if given, it will fetch these folders from the repo and paste them in the bundle whenever the bundle is generated\n\ncan be handy if you're working with someone else...",
                  "items": [
                    {
                      "schema": {
                        "type": "string"
                      },
                      "name": null
                    }
                  ],
                  "type": "array"
                }
              },
              {
                "name": "keepStructure",
                "required": false,
                "schema": {
                  "fullComment": "If true, the structure of operation locations is kept the same but still inside packages/apps/modules.",
                  "type": "boolean"
                }
              },
              {
                "name": "modelInformationStrategy",
                "required": false,
                "schema": {
                  "fullComment": "Information strategy per model\n\nFor example, this would ensure your diaries are not copied over to the bundle:\n\n```json { \"Diary\": \"ignore\" } ```\n\nIf you want to be certain something isn't included, instead of putting it into the model specific information strategy, you can also just put it in an operation that isn't required in the bundle.\n\nThis parameter is especially useful if you want to change a information stategy for one model in specific.",
                  "properties": [],
                  "type": "object"
                }
              },
              {
                "name": "additional_datasetSlugs",
                "required": false,
                "schema": {
                  "fullComment": "After applying the `informationStrategy`, and `modelInformationStrategy`, these datasets will be added or overwriting the data",
                  "items": [
                    {
                      "schema": {
                        "fullComment": "use this for any identifier that's not an Id-type. Usually this is a kebab-case version of a written text, but it can also be a file path, for example.",
                        "type": "string"
                      },
                      "name": "Slug"
                    }
                  ],
                  "type": "array"
                }
              },
              {
                "name": "filter_datasetSlugs",
                "required": false,
                "schema": {
                  "fullComment": "After applying the `informationStrategy`, and `modelInformationStrategy`, these datasets will be found in the then available data in the bundle, and will be filtered out.",
                  "items": [
                    {
                      "schema": {
                        "fullComment": "use this for any identifier that's not an Id-type. Usually this is a kebab-case version of a written text, but it can also be a file path, for example.",
                        "type": "string"
                      },
                      "name": "Slug"
                    }
                  ],
                  "type": "array"
                }
              },
              {
                "name": "isDraft",
                "required": false,
                "schema": {
                  "fullComment": "If true, this bundleconfig will be skipped when using `generateAllBundles`",
                  "type": "boolean"
                }
              },
              {
                "name": "keepTodos",
                "required": false,
                "schema": {
                  "fullComment": "if true, todos are also copied into their original location, which is in `packages` if it's not in an operation, or in the operation in any of the folders if it's an operation.\n\nThe markdown-reader will then add them to a todo menu.\n\nNB: Only works in conjunction with `keepStructure`",
                  "nb": "Only works in conjunction with `keepStructure`",
                  "type": "boolean"
                }
              },
              {
                "name": "bundles",
                "required": true,
                "schema": {
                  "items": [
                    {
                      "schema": {
                        "fullComment": "This type can specify a frontend and backend that belong to each other. it doesn't include all operations that the ui or server are dependent on, they are calculated separately",
                        "properties": [
                          {
                            "name": "operations",
                            "required": false,
                            "schema": {
                              "fullComment": "any operation names that are not necesarily dependencies of the named front-back bundle but still need to be available.",
                              "items": [
                                {
                                  "schema": {
                                    "fullComment": "",
                                    "properties": [
                                      {
                                        "name": "operationName",
                                        "required": true,
                                        "schema": {
                                          "type": "string"
                                        }
                                      },
                                      {
                                        "name": "privacy",
                                        "required": true,
                                        "schema": {
                                          "enum": [
                                            "public",
                                            "private"
                                          ],
                                          "fullComment": "if public, everything will be kept\n\nif private, src and todo will be removed from bundle, unless it's a ui-es6 operation, because src is needed then. In that case, only \"todo\" will be deleted.",
                                          "type": "string"
                                        }
                                      }
                                    ],
                                    "type": "object"
                                  },
                                  "name": "OperationPrivacy"
                                }
                              ],
                              "type": "array"
                            }
                          },
                          {
                            "name": "uiOperationName",
                            "required": false,
                            "schema": {
                              "fullComment": "(optional) main shared ui package of the frontend",
                              "type": "string"
                            }
                          },
                          {
                            "name": "appShellOperationNames",
                            "required": false,
                            "schema": {
                              "fullComment": "which app shell(s) or app operations are there for the frontend?",
                              "items": [
                                {
                                  "schema": {
                                    "type": "string"
                                  },
                                  "name": null
                                }
                              ],
                              "type": "array"
                            }
                          },
                          {
                            "name": "serverOperationName",
                            "required": false,
                            "schema": {
                              "fullComment": "operation name for server, if this UI is connected to one",
                              "type": "string"
                            }
                          },
                          {
                            "name": "productionWebUrl",
                            "required": false,
                            "schema": {
                              "fullComment": "if there is a ui and it has a web-shell, and it is deployed somewhere into production, add the deployed domain here.",
                              "type": "string"
                            }
                          },
                          {
                            "name": "productionApiUrl",
                            "required": false,
                            "schema": {
                              "fullComment": "if there is one, it should be specified here (without trailing slash)",
                              "type": "string"
                            }
                          },
                          {
                            "name": "endpointsAuthToken",
                            "required": false,
                            "schema": {
                              "fullComment": "if this is provided, all endpoints require this auth token to be provided, or the endpoints do not work\n\nif you wish to have a more extensive authentication method for your endpoints, make sure to create your own auth layer",
                              "type": "string"
                            }
                          }
                        ],
                        "type": "object"
                      },
                      "name": "FrontBackBundle"
                    }
                  ],
                  "type": "array"
                }
              },
              {
                "name": "dependencies",
                "required": true,
                "schema": {
                  "fullComment": "Generated, private by default. If they're already here, uses private/public setting as given.\n\nWhen generating, removes the ones that are not dependencies (of dependencies) of your standalone apps",
                  "items": [
                    {
                      "schema": {
                        "fullComment": "",
                        "properties": [
                          {
                            "name": "operationName",
                            "required": true,
                            "schema": {
                              "type": "string"
                            }
                          },
                          {
                            "name": "privacy",
                            "required": true,
                            "schema": {
                              "enum": [
                                "public",
                                "private"
                              ],
                              "fullComment": "if public, everything will be kept\n\nif private, src and todo will be removed from bundle, unless it's a ui-es6 operation, because src is needed then. In that case, only \"todo\" will be deleted.",
                              "type": "string"
                            }
                          }
                        ],
                        "type": "object"
                      },
                      "name": "OperationPrivacy"
                    }
                  ],
                  "type": "array"
                }
              },
              {
                "name": "docsRelativeFolderPath",
                "required": false,
                "schema": {
                  "fullComment": "optional. Could also find the main file from here and use that as README.md\n\nMust be a relative path from project root. Can be multiple!",
                  "properties": [],
                  "type": "object"
                }
              },
              {
                "name": "readmeRelativeFilePath",
                "required": false,
                "schema": {
                  "fullComment": "Optional. path to a readme file for the monorepo root.\n\nIf not given, and if you did provide a path for docs, the main docs intro file will be taken\n\nMust be a relative path from project  root\n\n",
                  "type": "string"
                }
              }
            ],
            "type": "object"
          }
        },
        {
          "name": "categoryStackCalculated",
          "required": false,
          "schema": {
            "fullComment": "In case of jsonSingle storageMethod, the categoryStack is generated by the location of the file in the db model folder in the db folder.\n\nNB: Changing this value when updating/upserting, changes where the item is located!\n\n",
            "nb": "Changing this value when updating/upserting, changes where the item is located!",
            "items": [
              {
                "schema": {
                  "type": "string"
                },
                "name": null
              }
            ],
            "type": "array"
          }
        },
        {
          "name": "id",
          "required": true,
          "schema": {
            "fullComment": "Should be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
            "type": "string"
          }
        },
        {
          "name": "operationName",
          "required": true,
          "schema": {
            "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
            "type": "null"
          }
        },
        {
          "name": "projectRelativePath",
          "required": true,
          "schema": {
            "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
            "type": "string"
          }
        },
        {
          "name": "operationRelativePath",
          "required": false,
          "schema": {
            "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
            "type": "string"
          }
        },
        {
          "name": "createdAt",
          "required": true,
          "schema": {
            "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
            "type": "number"
          }
        },
        {
          "name": "updatedAt",
          "required": true,
          "schema": {
            "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
            "type": "number"
          }
        },
        {
          "name": "deletedAt",
          "required": true,
          "schema": {
            "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
            "type": "number"
          }
        },
        {
          "name": "createdFirstAt",
          "required": true,
          "schema": {
            "fullComment": "in some cases, data can be created before it was created in our system. In this case, use CreatedFirstAt if this information is important.\n\nTime\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
            "type": "number"
          }
        },
        {
          "name": "slug",
          "required": false,
          "schema": {
            "fullComment": "Should be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
            "type": "string"
          }
        },
        {
          "name": "name",
          "required": false,
          "schema": {
            "fullComment": "Should be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
            "type": "string"
          }
        },
        {
          "name": "language",
          "required": false,
          "schema": {
            "fullComment": "Should be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
            "type": "string"
          }
        },
        {
          "name": "description",
          "required": false,
          "schema": {
            "fullComment": "Should be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
            "type": "string"
          }
        },
        {
          "name": "emoji",
          "required": false,
          "schema": {
            "fullComment": "Should be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
            "type": "string"
          }
        },
        {
          "name": "primaryColor",
          "required": false,
          "schema": {
            "fullComment": "Should be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
            "type": "string"
          }
        },
        {
          "name": "gitRepoUrl",
          "required": false,
          "schema": {
            "fullComment": "Should be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
            "type": "string"
          }
        },
        {
          "name": "isGitRepoPublic",
          "required": false,
          "schema": {
            "fullComment": "Should be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
            "type": "string"
          }
        },
        {
          "name": "bundleMarkdownReaderConfig",
          "required": false,
          "schema": {
            "fullComment": "Should be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
            "type": "string"
          }
        }
      ],
      "type": "object"
    },
    "typeCoverage": 0,
    "rawType": "FinalBundleConfig",
    "isArray": false,
    "isEnum": false,
    "isEnumLiteral": false,
    "isObject": false,
    "isPrimitive": false
  }
}