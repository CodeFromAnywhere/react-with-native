[{"id":"hTUkiewgttZHyEzD","name":"BundleTypesTypes","slug":"bundle-types-types","relativePathFromProjectRoot":"/tools/types/bundle-types/src/index.ts","srcFileId":"/index","operationFolderName":"bundle-types","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/bundle-types","operationName":"bundle-types","rawText":"\n\n\nexport type BundleTypesTypes = { BundleConfig: BundleConfig,OperationName: OperationName,ServerOperationName: ServerOperationName,ProjectRelativeFolderPath: ProjectRelativeFolderPath,ProjectRelativeFilePath: ProjectRelativeFilePath,OperationPrivacy: OperationPrivacy,AppShell: AppShell,FrontBackBundle: FrontBackBundle,GenerateBundleConfig: GenerateBundleConfig,InformationStrategy: InformationStrategy };","extensions":[],"description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"BundleConfig":{"$ref":"#/definitions/BundleConfig"},"OperationName":{"$ref":"#/definitions/OperationName"},"ServerOperationName":{"$ref":"#/definitions/ServerOperationName"},"ProjectRelativeFolderPath":{"$ref":"#/definitions/ProjectRelativeFolderPath"},"ProjectRelativeFilePath":{"$ref":"#/definitions/ProjectRelativeFilePath"},"OperationPrivacy":{"$ref":"#/definitions/OperationPrivacy"},"AppShell":{"$ref":"#/definitions/AppShell"},"FrontBackBundle":{"$ref":"#/definitions/FrontBackBundle"},"GenerateBundleConfig":{"$ref":"#/definitions/GenerateBundleConfig"},"InformationStrategy":{"$ref":"#/definitions/InformationStrategy"}},"required":["BundleConfig","OperationName","ServerOperationName","ProjectRelativeFolderPath","ProjectRelativeFilePath","OperationPrivacy","AppShell","FrontBackBundle","GenerateBundleConfig","InformationStrategy"],"additionalProperties":false},"simplifiedSchema":{"properties":[{"name":"BundleConfig","required":true,"schema":{"properties":[{"name":"createdAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}},{"name":"updatedAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}},{"name":"deletedAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}},{"name":"createdFirstAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}},{"name":"id","required":true,"schema":{"description":"unique id used for compatibility purposes","type":"string"}},{"name":"slug","required":true,"schema":{"description":"use this for any identifier that's not an Id-type. Usually this is a kebab-case version of a written text, but it can also be a file path, for example.","type":"string"}},{"name":"name","required":true,"schema":{"description":"Human readable name of the monorepo (A kebab-case version of this will be used as root foldername)","type":"string"}},{"name":"language","required":true,"schema":{"description":"all currently supported languages","enum":["en","nl","np","pt","de","fr","es","it","no","sw","da","vn","in","vl","af"],"type":"string"}},{"name":"bundles","required":true,"schema":{"items":[{"schema":{"description":"This type can specify a frontend and backend that belong to each other. it doesn't include all operations that the ui or server are dependent on, they are calculated separately","properties":[{"name":"operations","required":false,"schema":{"description":"any operation names that are not necesarily dependencies of the named front-back bundle but still need to be available.","items":[{"schema":{"properties":[{"name":"operationName","required":true,"schema":{"type":"string"}},{"name":"privacy","required":true,"schema":{"description":"if public, everything will be kept\n\nif private, src and todo will be removed from bundle, unless it's a ui-es6 operation, because src is needed then. In that case, only \"todo\" will be deleted.","enum":["public","private"],"type":"string"}}],"type":"object"},"name":"OperationPrivacy"}],"type":"array"}},{"name":"uiOperationName","required":false,"schema":{"description":"(optional) main shared ui package of the frontend","type":"string"}},{"name":"appShellOperationNames","required":false,"schema":{"description":"which app shell(s) or app operations are there for the frontend?","items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"serverOperationName","required":false,"schema":{"description":"operation name for server, if this UI is connected to one","type":"string"}},{"name":"productionWebUrl","required":false,"schema":{"description":"if there is a ui and it has a web-shell, and it is deployed somewhere into production, add the deployed domain here.","type":"string"}},{"name":"envOperationName","required":false,"schema":{"description":"if the server is to be deployed, specify the server-env package that exposes the server environment variables (JSON) to the ui\n\nBy default, uses \"server-env\" operation, which simply exposes a configuration env.json file. the generation of the bundle will set the \"remoteServer\" key in this env.json to the \"productionApiUrl\" so the deployed version can reach the api","type":"string"}},{"name":"productionApiUrl","required":false,"schema":{"description":"if there is one, it should be specified here (without trailing slash)","type":"string"}},{"name":"endpointsAuthToken","required":false,"schema":{"description":"if this is provided, all endpoints require this auth token to be provided, or the endpoints do not work\n\nif you wish to have a more extensive authentication method for your endpoints, make sure to create your own auth layer","type":"string"}}],"type":"object"},"name":"FrontBackBundle"}],"type":"array"}},{"name":"dependencies","required":true,"schema":{"description":"Generated, private by default. If they're already here, uses private/public setting as given.\n\nWhen generating, removes the ones that are not dependencies (of dependencies) of your standalone apps","items":[{"schema":{"properties":[{"name":"operationName","required":true,"schema":{"type":"string"}},{"name":"privacy","required":true,"schema":{"description":"if public, everything will be kept\n\nif private, src and todo will be removed from bundle, unless it's a ui-es6 operation, because src is needed then. In that case, only \"todo\" will be deleted.","enum":["public","private"],"type":"string"}}],"type":"object"},"name":"OperationPrivacy"}],"type":"array"}},{"name":"docsRelativeFolderPath","required":false,"schema":{"description":"later this could be known by the frontend so it will render a ui to select a folder\n\nWe need to figure out how we can know all type types in between when getting the type definition schema, not only the final type. If I'm lucky there is a way to find it as a #ref in a consistent way.","type":"string"}},{"name":"readmeRelativeFilePath","required":false,"schema":{"type":"string"}},{"name":"foldersFromRepo","required":false,"schema":{"description":"if given, it will fetch these folders from the repo and paste them in the bundle whenever the bundle is generated\n\ncan be handy if you're working with someone else...","items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"informationStrategy","required":false,"schema":{"description":"push (default): take needed information from project and push to bundle (removing the existing info)\n\npullReplace: pull bundle and keep its information intact, not taking anything new from the OS, replacing all the information we had from these models in the OS\n\npullMerge: pull bundle and use its information in conjunction with the information we had in the OS. This option will merge both information sources, removing duplicate IDs\n\nNB: Later we may want to define this setting on a per-model basis!","enum":["push","pullReplace","pullMerge"],"type":"string"}},{"name":"gitRepoUrl","required":false,"schema":{"type":"string"}},{"name":"branchName","required":false,"schema":{"description":"specify the branch to use of your git repo (defaults to \"main\")","type":"string"}}],"type":"object"}},{"name":"OperationName","required":true,"schema":{"description":"later we can make this an enum! it can be auto-generated along with enums for the operation paths, and more things alike.\n\nif it's an enum it will automatically be possible to select a value from it in the simplified schema form :D\n\nbesides simply having OperationName, we can have specific operation classification operation names:\n\n- JsOperationName (js)\n- NodeOperationName (node)\n- ServerOperationName (server)\n- AppShellOperationName (web, app, etc.)\n- UiOperationName (ui-es6 and ui-es5)","type":"string"}},{"name":"ServerOperationName","required":true,"schema":{"type":"string"}},{"name":"ProjectRelativeFolderPath","required":true,"schema":{"description":"later this could be known by the frontend so it will render a ui to select a folder\n\nWe need to figure out how we can know all type types in between when getting the type definition schema, not only the final type. If I'm lucky there is a way to find it as a #ref in a consistent way.","type":"string"}},{"name":"ProjectRelativeFilePath","required":true,"schema":{"type":"string"}},{"name":"OperationPrivacy","required":true,"schema":{"properties":[{"name":"operationName","required":true,"schema":{"type":"string"}},{"name":"privacy","required":true,"schema":{"description":"if public, everything will be kept\n\nif private, src and todo will be removed from bundle, unless it's a ui-es6 operation, because src is needed then. In that case, only \"todo\" will be deleted.","enum":["public","private"],"type":"string"}}],"type":"object"}},{"name":"AppShell","required":true,"schema":{"enum":["web","app","computer","vscode","browser","docusaurus"],"type":"string"}},{"name":"FrontBackBundle","required":true,"schema":{"description":"This type can specify a frontend and backend that belong to each other. it doesn't include all operations that the ui or server are dependent on, they are calculated separately","properties":[{"name":"operations","required":false,"schema":{"description":"any operation names that are not necesarily dependencies of the named front-back bundle but still need to be available.","items":[{"schema":{"properties":[{"name":"operationName","required":true,"schema":{"type":"string"}},{"name":"privacy","required":true,"schema":{"description":"if public, everything will be kept\n\nif private, src and todo will be removed from bundle, unless it's a ui-es6 operation, because src is needed then. In that case, only \"todo\" will be deleted.","enum":["public","private"],"type":"string"}}],"type":"object"},"name":"OperationPrivacy"}],"type":"array"}},{"name":"uiOperationName","required":false,"schema":{"description":"(optional) main shared ui package of the frontend","type":"string"}},{"name":"appShellOperationNames","required":false,"schema":{"description":"which app shell(s) or app operations are there for the frontend?","items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"serverOperationName","required":false,"schema":{"description":"operation name for server, if this UI is connected to one","type":"string"}},{"name":"productionWebUrl","required":false,"schema":{"description":"if there is a ui and it has a web-shell, and it is deployed somewhere into production, add the deployed domain here.","type":"string"}},{"name":"envOperationName","required":false,"schema":{"description":"if the server is to be deployed, specify the server-env package that exposes the server environment variables (JSON) to the ui\n\nBy default, uses \"server-env\" operation, which simply exposes a configuration env.json file. the generation of the bundle will set the \"remoteServer\" key in this env.json to the \"productionApiUrl\" so the deployed version can reach the api","type":"string"}},{"name":"productionApiUrl","required":false,"schema":{"description":"if there is one, it should be specified here (without trailing slash)","type":"string"}},{"name":"endpointsAuthToken","required":false,"schema":{"description":"if this is provided, all endpoints require this auth token to be provided, or the endpoints do not work\n\nif you wish to have a more extensive authentication method for your endpoints, make sure to create your own auth layer","type":"string"}}],"type":"object"}},{"name":"GenerateBundleConfig","required":true,"schema":{"description":"configuration that can be applied when generating a new bundle","properties":[{"name":"skipPull","required":false,"schema":{"description":"skips the step where it gets the new stuff from github","type":"boolean"}},{"name":"skipPush","required":false,"schema":{"description":"skips the step where it pushes the new bundle to remote","type":"boolean"}},{"name":"skipUpsert","required":false,"schema":{"description":"skips the step where it saves to the db","type":"boolean"}},{"name":"description","required":false,"schema":{"description":"descriptioin for git commit, if pushing. Default is \"monorepo update\"","type":"string"}},{"name":"informationStrategy","required":false,"schema":{"description":"push (default): take needed information from project and push to bundle (removing the existing info)\n\npullReplace: pull bundle and keep its information intact, not taking anything new from the OS, replacing all the information we had from these models in the OS\n\npullMerge: pull bundle and use its information in conjunction with the information we had in the OS. This option will merge both information sources, removing duplicate IDs\n\nNB: Later we may want to define this setting on a per-model basis!","enum":["push","pullReplace","pullMerge"],"type":"string"}},{"name":"debug","required":false,"schema":{"type":"boolean"}},{"name":"branchName","required":false,"schema":{"description":"optionally, specify a custom branch name to pull from","type":"string"}}],"type":"object"}},{"name":"InformationStrategy","required":true,"schema":{"description":"push (default): take needed information from project and push to bundle (removing the existing info)\n\npullReplace: pull bundle and keep its information intact, not taking anything new from the OS, replacing all the information we had from these models in the OS\n\npullMerge: pull bundle and use its information in conjunction with the information we had in the OS. This option will merge both information sources, removing duplicate IDs\n\nNB: Later we may want to define this setting on a per-model basis!","enum":["push","pullReplace","pullMerge"],"type":"string"}}],"type":"object"},"typeCoverage":0,"rawType":"BundleTypesTypes","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"tOhFfNtQhwgVDfDk","name":"BundleConfig","slug":"bundle-config","relativePathFromProjectRoot":"/tools/types/bundle-types/src/index.ts","srcFileId":"/index","operationFolderName":"bundle-types","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/bundle-types","operationName":"bundle-types","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"createdAt":{"$ref":"#/definitions/CreatedAt"},"updatedAt":{"$ref":"#/definitions/UpdatedAt"},"deletedAt":{"$ref":"#/definitions/DeletedAt"},"createdFirstAt":{"$ref":"#/definitions/CreatedFirstAt"},"id":{"type":"string","description":"unique id used for compatibility purposes"},"slug":{"$ref":"#/definitions/Slug","description":"kebab-case of the name, should be unique"},"name":{"type":"string","description":"Human readable name of the monorepo (A kebab-case version of this will be used as root foldername)"},"language":{"$ref":"#/definitions/Language","default":"en"},"bundles":{"type":"array","items":{"$ref":"#/definitions/FrontBackBundle"}},"dependencies":{"type":"array","items":{"$ref":"#/definitions/OperationPrivacy"},"description":"Generated, private by default. If they're already here, uses private/public setting as given.\n\nWhen generating, removes the ones that are not dependencies (of dependencies) of your standalone apps"},"docsRelativeFolderPath":{"$ref":"#/definitions/ProjectRelativeFolderPath","description":"optional. Could also find the main file from here and use that as README.md\n\nMust be a relative path from project root"},"readmeRelativeFilePath":{"$ref":"#/definitions/ProjectRelativeFilePath","description":"optional. path to a readme file for the monorepo root.\n\nIf not given, and if you did provide a path for docs, the main docs intro file will be taken\n\nMust be a relative path from project  root"},"foldersFromRepo":{"type":"array","items":{"type":"string"},"description":"if given, it will fetch these folders from the repo and paste them in the bundle whenever the bundle is generated\n\ncan be handy if you're working with someone else..."},"informationStrategy":{"$ref":"#/definitions/InformationStrategy"},"gitRepoUrl":{"type":"string"},"branchName":{"type":"string","description":"specify the branch to use of your git repo (defaults to \"main\")"}},"required":["bundles","createdAt","createdFirstAt","deletedAt","dependencies","id","language","name","slug","updatedAt"],"additionalProperties":{"anyOf":[{"$ref":"#/definitions/Id"},{"not":{}}]}},"simplifiedSchema":{"properties":[{"name":"createdAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}},{"name":"updatedAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}},{"name":"deletedAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}},{"name":"createdFirstAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}},{"name":"id","required":true,"schema":{"description":"unique id used for compatibility purposes","type":"string"}},{"name":"slug","required":true,"schema":{"description":"use this for any identifier that's not an Id-type. Usually this is a kebab-case version of a written text, but it can also be a file path, for example.","type":"string"}},{"name":"name","required":true,"schema":{"description":"Human readable name of the monorepo (A kebab-case version of this will be used as root foldername)","type":"string"}},{"name":"language","required":true,"schema":{"description":"all currently supported languages","enum":["en","nl","np","pt","de","fr","es","it","no","sw","da","vn","in","vl","af"],"type":"string"}},{"name":"bundles","required":true,"schema":{"items":[{"schema":{"description":"This type can specify a frontend and backend that belong to each other. it doesn't include all operations that the ui or server are dependent on, they are calculated separately","properties":[{"name":"operations","required":false,"schema":{"description":"any operation names that are not necesarily dependencies of the named front-back bundle but still need to be available.","items":[{"schema":{"properties":[{"name":"operationName","required":true,"schema":{"type":"string"}},{"name":"privacy","required":true,"schema":{"description":"if public, everything will be kept\n\nif private, src and todo will be removed from bundle, unless it's a ui-es6 operation, because src is needed then. In that case, only \"todo\" will be deleted.","enum":["public","private"],"type":"string"}}],"type":"object"},"name":"OperationPrivacy"}],"type":"array"}},{"name":"uiOperationName","required":false,"schema":{"description":"(optional) main shared ui package of the frontend","type":"string"}},{"name":"appShellOperationNames","required":false,"schema":{"description":"which app shell(s) or app operations are there for the frontend?","items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"serverOperationName","required":false,"schema":{"description":"operation name for server, if this UI is connected to one","type":"string"}},{"name":"productionWebUrl","required":false,"schema":{"description":"if there is a ui and it has a web-shell, and it is deployed somewhere into production, add the deployed domain here.","type":"string"}},{"name":"envOperationName","required":false,"schema":{"description":"if the server is to be deployed, specify the server-env package that exposes the server environment variables (JSON) to the ui\n\nBy default, uses \"server-env\" operation, which simply exposes a configuration env.json file. the generation of the bundle will set the \"remoteServer\" key in this env.json to the \"productionApiUrl\" so the deployed version can reach the api","type":"string"}},{"name":"productionApiUrl","required":false,"schema":{"description":"if there is one, it should be specified here (without trailing slash)","type":"string"}},{"name":"endpointsAuthToken","required":false,"schema":{"description":"if this is provided, all endpoints require this auth token to be provided, or the endpoints do not work\n\nif you wish to have a more extensive authentication method for your endpoints, make sure to create your own auth layer","type":"string"}}],"type":"object"},"name":"FrontBackBundle"}],"type":"array"}},{"name":"dependencies","required":true,"schema":{"description":"Generated, private by default. If they're already here, uses private/public setting as given.\n\nWhen generating, removes the ones that are not dependencies (of dependencies) of your standalone apps","items":[{"schema":{"properties":[{"name":"operationName","required":true,"schema":{"type":"string"}},{"name":"privacy","required":true,"schema":{"description":"if public, everything will be kept\n\nif private, src and todo will be removed from bundle, unless it's a ui-es6 operation, because src is needed then. In that case, only \"todo\" will be deleted.","enum":["public","private"],"type":"string"}}],"type":"object"},"name":"OperationPrivacy"}],"type":"array"}},{"name":"docsRelativeFolderPath","required":false,"schema":{"description":"later this could be known by the frontend so it will render a ui to select a folder\n\nWe need to figure out how we can know all type types in between when getting the type definition schema, not only the final type. If I'm lucky there is a way to find it as a #ref in a consistent way.","type":"string"}},{"name":"readmeRelativeFilePath","required":false,"schema":{"type":"string"}},{"name":"foldersFromRepo","required":false,"schema":{"description":"if given, it will fetch these folders from the repo and paste them in the bundle whenever the bundle is generated\n\ncan be handy if you're working with someone else...","items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"informationStrategy","required":false,"schema":{"description":"push (default): take needed information from project and push to bundle (removing the existing info)\n\npullReplace: pull bundle and keep its information intact, not taking anything new from the OS, replacing all the information we had from these models in the OS\n\npullMerge: pull bundle and use its information in conjunction with the information we had in the OS. This option will merge both information sources, removing duplicate IDs\n\nNB: Later we may want to define this setting on a per-model basis!","enum":["push","pullReplace","pullMerge"],"type":"string"}},{"name":"gitRepoUrl","required":false,"schema":{"type":"string"}},{"name":"branchName","required":false,"schema":{"description":"specify the branch to use of your git repo (defaults to \"main\")","type":"string"}}],"type":"object"},"typeCoverage":0,"rawType":"BundleConfig","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"PRBkmOldSAtLPsoK","name":"CreatedAt","slug":"created-at","relativePathFromProjectRoot":"/tools/types/bundle-types/src/index.ts","srcFileId":"/index","operationFolderName":"bundle-types","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/bundle-types","operationName":"bundle-types","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"$ref":"#/definitions/Time"},"simplifiedSchema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"},"typeCoverage":0,"rawType":"CreatedAt","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"mYcgdjtlsQRctaVy","name":"Time","slug":"time","relativePathFromProjectRoot":"/tools/types/bundle-types/src/index.ts","srcFileId":"/index","operationFolderName":"bundle-types","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/bundle-types","operationName":"bundle-types","description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"number","description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()"},"simplifiedSchema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"},"typeCoverage":0,"rawType":"Time","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"acZetyXbAojnYmXu","name":"UpdatedAt","slug":"updated-at","relativePathFromProjectRoot":"/tools/types/bundle-types/src/index.ts","srcFileId":"/index","operationFolderName":"bundle-types","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/bundle-types","operationName":"bundle-types","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"$ref":"#/definitions/Time"},"simplifiedSchema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"},"typeCoverage":0,"rawType":"UpdatedAt","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"fvpZHrnKslWmbiUV","name":"DeletedAt","slug":"deleted-at","relativePathFromProjectRoot":"/tools/types/bundle-types/src/index.ts","srcFileId":"/index","operationFolderName":"bundle-types","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/bundle-types","operationName":"bundle-types","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"$ref":"#/definitions/Time"},"simplifiedSchema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"},"typeCoverage":0,"rawType":"DeletedAt","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"tqDseWUsXRzAWRuQ","name":"CreatedFirstAt","slug":"created-first-at","relativePathFromProjectRoot":"/tools/types/bundle-types/src/index.ts","srcFileId":"/index","operationFolderName":"bundle-types","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/bundle-types","operationName":"bundle-types","description":"in some cases, data can be created before it was created in our system. In this case, use CreatedFirstAt if this information is important.","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"$ref":"#/definitions/Time","description":"in some cases, data can be created before it was created in our system. In this case, use CreatedFirstAt if this information is important."},"simplifiedSchema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"},"typeCoverage":0,"rawType":"CreatedFirstAt","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"iJYqTGQCqoPNgaIq","name":"Slug","slug":"slug","relativePathFromProjectRoot":"/tools/types/bundle-types/src/index.ts","srcFileId":"/index","operationFolderName":"bundle-types","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/bundle-types","operationName":"bundle-types","description":"use this for any identifier that's not an Id-type. Usually this is a kebab-case version of a written text, but it can also be a file path, for example.","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"string","description":"use this for any identifier that's not an Id-type. Usually this is a kebab-case version of a written text, but it can also be a file path, for example."},"simplifiedSchema":{"description":"use this for any identifier that's not an Id-type. Usually this is a kebab-case version of a written text, but it can also be a file path, for example.","type":"string"},"typeCoverage":0,"rawType":"Slug","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"BtBvWJluAYftKhfF","name":"Language","slug":"language","relativePathFromProjectRoot":"/tools/types/bundle-types/src/index.ts","srcFileId":"/index","operationFolderName":"bundle-types","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/bundle-types","operationName":"bundle-types","description":"all currently supported languages","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"string","enum":["en","nl","np","pt","de","fr","es","it","no","sw","da","vn","in","vl","af"],"description":"all currently supported languages"},"simplifiedSchema":{"description":"all currently supported languages","enum":["en","nl","np","pt","de","fr","es","it","no","sw","da","vn","in","vl","af"],"type":"string"},"typeCoverage":0,"rawType":"Language","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"aZmOtpNmZkiNNNKF","name":"FrontBackBundle","slug":"front-back-bundle","relativePathFromProjectRoot":"/tools/types/bundle-types/src/index.ts","srcFileId":"/index","operationFolderName":"bundle-types","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/bundle-types","operationName":"bundle-types","description":"This type can specify a frontend and backend that belong to each other. it doesn't include all operations that the ui or server are dependent on, they are calculated separately","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"operations":{"type":"array","items":{"$ref":"#/definitions/OperationPrivacy"},"description":"any operation names that are not necesarily dependencies of the named front-back bundle but still need to be available."},"uiOperationName":{"type":"string","description":"(optional) main shared ui package of the frontend"},"appShellOperationNames":{"type":"array","items":{"type":"string"},"description":"which app shell(s) or app operations are there for the frontend?"},"serverOperationName":{"type":"string","description":"operation name for server, if this UI is connected to one"},"productionWebUrl":{"type":"string","description":"if there is a ui and it has a web-shell, and it is deployed somewhere into production, add the deployed domain here."},"envOperationName":{"type":"string","description":"if the server is to be deployed, specify the server-env package that exposes the server environment variables (JSON) to the ui\n\nBy default, uses \"server-env\" operation, which simply exposes a configuration env.json file. the generation of the bundle will set the \"remoteServer\" key in this env.json to the \"productionApiUrl\" so the deployed version can reach the api"},"productionApiUrl":{"type":"string","description":"if there is one, it should be specified here (without trailing slash)"},"endpointsAuthToken":{"type":"string","description":"if this is provided, all endpoints require this auth token to be provided, or the endpoints do not work\n\nif you wish to have a more extensive authentication method for your endpoints, make sure to create your own auth layer"}},"additionalProperties":false,"description":"This type can specify a frontend and backend that belong to each other. it doesn't include all operations that the ui or server are dependent on, they are calculated separately"},"simplifiedSchema":{"description":"This type can specify a frontend and backend that belong to each other. it doesn't include all operations that the ui or server are dependent on, they are calculated separately","properties":[{"name":"operations","required":false,"schema":{"description":"any operation names that are not necesarily dependencies of the named front-back bundle but still need to be available.","items":[{"schema":{"properties":[{"name":"operationName","required":true,"schema":{"type":"string"}},{"name":"privacy","required":true,"schema":{"description":"if public, everything will be kept\n\nif private, src and todo will be removed from bundle, unless it's a ui-es6 operation, because src is needed then. In that case, only \"todo\" will be deleted.","enum":["public","private"],"type":"string"}}],"type":"object"},"name":"OperationPrivacy"}],"type":"array"}},{"name":"uiOperationName","required":false,"schema":{"description":"(optional) main shared ui package of the frontend","type":"string"}},{"name":"appShellOperationNames","required":false,"schema":{"description":"which app shell(s) or app operations are there for the frontend?","items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"serverOperationName","required":false,"schema":{"description":"operation name for server, if this UI is connected to one","type":"string"}},{"name":"productionWebUrl","required":false,"schema":{"description":"if there is a ui and it has a web-shell, and it is deployed somewhere into production, add the deployed domain here.","type":"string"}},{"name":"envOperationName","required":false,"schema":{"description":"if the server is to be deployed, specify the server-env package that exposes the server environment variables (JSON) to the ui\n\nBy default, uses \"server-env\" operation, which simply exposes a configuration env.json file. the generation of the bundle will set the \"remoteServer\" key in this env.json to the \"productionApiUrl\" so the deployed version can reach the api","type":"string"}},{"name":"productionApiUrl","required":false,"schema":{"description":"if there is one, it should be specified here (without trailing slash)","type":"string"}},{"name":"endpointsAuthToken","required":false,"schema":{"description":"if this is provided, all endpoints require this auth token to be provided, or the endpoints do not work\n\nif you wish to have a more extensive authentication method for your endpoints, make sure to create your own auth layer","type":"string"}}],"type":"object"},"typeCoverage":0,"rawType":"FrontBackBundle","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"JQRPiJVMVylkVuwK","name":"OperationPrivacy","slug":"operation-privacy","relativePathFromProjectRoot":"/tools/types/bundle-types/src/index.ts","srcFileId":"/index","operationFolderName":"bundle-types","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/bundle-types","operationName":"bundle-types","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"operationName":{"type":"string"},"privacy":{"type":"string","enum":["public","private"],"description":"if public, everything will be kept\n\nif private, src and todo will be removed from bundle, unless it's a ui-es6 operation, because src is needed then. In that case, only \"todo\" will be deleted."}},"required":["operationName","privacy"],"additionalProperties":false},"simplifiedSchema":{"properties":[{"name":"operationName","required":true,"schema":{"type":"string"}},{"name":"privacy","required":true,"schema":{"description":"if public, everything will be kept\n\nif private, src and todo will be removed from bundle, unless it's a ui-es6 operation, because src is needed then. In that case, only \"todo\" will be deleted.","enum":["public","private"],"type":"string"}}],"type":"object"},"typeCoverage":0,"rawType":"OperationPrivacy","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"SqzpZaRWLEIgfoLh","name":"ProjectRelativeFolderPath","slug":"project-relative-folder-path","relativePathFromProjectRoot":"/tools/types/bundle-types/src/index.ts","srcFileId":"/index","operationFolderName":"bundle-types","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/bundle-types","operationName":"bundle-types","description":"later this could be known by the frontend so it will render a ui to select a folder\n\nWe need to figure out how we can know all type types in between when getting the type definition schema, not only the final type. If I'm lucky there is a way to find it as a #ref in a consistent way.","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"string","description":"later this could be known by the frontend so it will render a ui to select a folder\n\nWe need to figure out how we can know all type types in between when getting the type definition schema, not only the final type. If I'm lucky there is a way to find it as a #ref in a consistent way."},"simplifiedSchema":{"description":"later this could be known by the frontend so it will render a ui to select a folder\n\nWe need to figure out how we can know all type types in between when getting the type definition schema, not only the final type. If I'm lucky there is a way to find it as a #ref in a consistent way.","type":"string"},"typeCoverage":0,"rawType":"ProjectRelativeFolderPath","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"ALjXhepnUwfEtXYb","name":"ProjectRelativeFilePath","slug":"project-relative-file-path","relativePathFromProjectRoot":"/tools/types/bundle-types/src/index.ts","srcFileId":"/index","operationFolderName":"bundle-types","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/bundle-types","operationName":"bundle-types","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"string"},"simplifiedSchema":{"type":"string"},"typeCoverage":0,"rawType":"ProjectRelativeFilePath","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"kDMbwDHGryFAfWUh","name":"InformationStrategy","slug":"information-strategy","relativePathFromProjectRoot":"/tools/types/bundle-types/src/index.ts","srcFileId":"/index","operationFolderName":"bundle-types","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/bundle-types","operationName":"bundle-types","description":"push (default): take needed information from project and push to bundle (removing the existing info)\n\npullReplace: pull bundle and keep its information intact, not taking anything new from the OS, replacing all the information we had from these models in the OS\n\npullMerge: pull bundle and use its information in conjunction with the information we had in the OS. This option will merge both information sources, removing duplicate IDs\n\nNB: Later we may want to define this setting on a per-model basis!","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"string","enum":["push","pullReplace","pullMerge"],"description":"push (default): take needed information from project and push to bundle (removing the existing info)\n\npullReplace: pull bundle and keep its information intact, not taking anything new from the OS, replacing all the information we had from these models in the OS\n\npullMerge: pull bundle and use its information in conjunction with the information we had in the OS. This option will merge both information sources, removing duplicate IDs\n\nNB: Later we may want to define this setting on a per-model basis!"},"simplifiedSchema":{"description":"push (default): take needed information from project and push to bundle (removing the existing info)\n\npullReplace: pull bundle and keep its information intact, not taking anything new from the OS, replacing all the information we had from these models in the OS\n\npullMerge: pull bundle and use its information in conjunction with the information we had in the OS. This option will merge both information sources, removing duplicate IDs\n\nNB: Later we may want to define this setting on a per-model basis!","enum":["push","pullReplace","pullMerge"],"type":"string"},"typeCoverage":0,"rawType":"InformationStrategy","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"jjZeBQKuzRBrRkPI","name":"Id","slug":"id","relativePathFromProjectRoot":"/tools/types/bundle-types/src/index.ts","srcFileId":"/index","operationFolderName":"bundle-types","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/bundle-types","operationName":"bundle-types","description":"azAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` {  \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"string","description":"azAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` {  \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this."},"simplifiedSchema":{"description":"azAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` {  \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.","type":"string"},"typeCoverage":0,"rawType":"Id","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"zHwzdqNtpsdvMWNl","name":"OperationName","slug":"operation-name","relativePathFromProjectRoot":"/tools/types/bundle-types/src/index.ts","srcFileId":"/index","operationFolderName":"bundle-types","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/bundle-types","operationName":"bundle-types","description":"later we can make this an enum! it can be auto-generated along with enums for the operation paths, and more things alike.\n\nif it's an enum it will automatically be possible to select a value from it in the simplified schema form :D\n\nbesides simply having OperationName, we can have specific operation classification operation names:\n\n- JsOperationName (js)\n- NodeOperationName (node)\n- ServerOperationName (server)\n- AppShellOperationName (web, app, etc.)\n- UiOperationName (ui-es6 and ui-es5)","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"string","description":"later we can make this an enum! it can be auto-generated along with enums for the operation paths, and more things alike.\n\nif it's an enum it will automatically be possible to select a value from it in the simplified schema form :D\n\nbesides simply having OperationName, we can have specific operation classification operation names:\n\n- JsOperationName (js)\n- NodeOperationName (node)\n- ServerOperationName (server)\n- AppShellOperationName (web, app, etc.)\n- UiOperationName (ui-es6 and ui-es5)"},"simplifiedSchema":{"description":"later we can make this an enum! it can be auto-generated along with enums for the operation paths, and more things alike.\n\nif it's an enum it will automatically be possible to select a value from it in the simplified schema form :D\n\nbesides simply having OperationName, we can have specific operation classification operation names:\n\n- JsOperationName (js)\n- NodeOperationName (node)\n- ServerOperationName (server)\n- AppShellOperationName (web, app, etc.)\n- UiOperationName (ui-es6 and ui-es5)","type":"string"},"typeCoverage":0,"rawType":"OperationName","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"IkduKBChUvAUjWgn","name":"ServerOperationName","slug":"server-operation-name","relativePathFromProjectRoot":"/tools/types/bundle-types/src/index.ts","srcFileId":"/index","operationFolderName":"bundle-types","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/bundle-types","operationName":"bundle-types","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"string"},"simplifiedSchema":{"type":"string"},"typeCoverage":0,"rawType":"ServerOperationName","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"yxhtnwAWFyfMUBKa","name":"AppShell","slug":"app-shell","relativePathFromProjectRoot":"/tools/types/bundle-types/src/index.ts","srcFileId":"/index","operationFolderName":"bundle-types","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/bundle-types","operationName":"bundle-types","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"string","enum":["web","app","computer","vscode","browser","docusaurus"]},"simplifiedSchema":{"enum":["web","app","computer","vscode","browser","docusaurus"],"type":"string"},"typeCoverage":0,"rawType":"AppShell","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"HANNQKKUKVJFzQRd","name":"GenerateBundleConfig","slug":"generate-bundle-config","relativePathFromProjectRoot":"/tools/types/bundle-types/src/index.ts","srcFileId":"/index","operationFolderName":"bundle-types","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/bundle-types","operationName":"bundle-types","description":"configuration that can be applied when generating a new bundle","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"skipPull":{"type":"boolean","description":"skips the step where it gets the new stuff from github"},"skipPush":{"type":"boolean","description":"skips the step where it pushes the new bundle to remote"},"skipUpsert":{"type":"boolean","description":"skips the step where it saves to the db"},"description":{"type":"string","description":"descriptioin for git commit, if pushing. Default is \"monorepo update\""},"informationStrategy":{"$ref":"#/definitions/InformationStrategy","description":"normally, the informationStrategy is taken from BundleConfig (if present). Can be overwritten with this setting"},"debug":{"type":"boolean"},"branchName":{"type":"string","description":"optionally, specify a custom branch name to pull from"}},"additionalProperties":false,"description":"configuration that can be applied when generating a new bundle"},"simplifiedSchema":{"description":"configuration that can be applied when generating a new bundle","properties":[{"name":"skipPull","required":false,"schema":{"description":"skips the step where it gets the new stuff from github","type":"boolean"}},{"name":"skipPush","required":false,"schema":{"description":"skips the step where it pushes the new bundle to remote","type":"boolean"}},{"name":"skipUpsert","required":false,"schema":{"description":"skips the step where it saves to the db","type":"boolean"}},{"name":"description","required":false,"schema":{"description":"descriptioin for git commit, if pushing. Default is \"monorepo update\"","type":"string"}},{"name":"informationStrategy","required":false,"schema":{"description":"push (default): take needed information from project and push to bundle (removing the existing info)\n\npullReplace: pull bundle and keep its information intact, not taking anything new from the OS, replacing all the information we had from these models in the OS\n\npullMerge: pull bundle and use its information in conjunction with the information we had in the OS. This option will merge both information sources, removing duplicate IDs\n\nNB: Later we may want to define this setting on a per-model basis!","enum":["push","pullReplace","pullMerge"],"type":"string"}},{"name":"debug","required":false,"schema":{"type":"boolean"}},{"name":"branchName","required":false,"schema":{"description":"optionally, specify a custom branch name to pull from","type":"string"}}],"type":"object"},"typeCoverage":0,"rawType":"GenerateBundleConfig","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}}]