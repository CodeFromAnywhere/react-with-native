[{"id":"GZcDfZoxAATDvTPU","name":"OperationName","slug":"operation-name","relativePathFromProjectRoot":"/tools/types/bundle-types/src/types.ts","srcFileId":"/types","operationFolderName":"bundle-types","relativeFilePathFromSrc":"/types.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/bundle-types","operationName":"bundle-types","rawText":"/**\n * later we can make this an enum! it can be auto-generated along with enums for the operation paths, and more things alike.\n *\n * if it's an enum it will automatically be possible to select a value from it in the simplified schema form :D\n *\n * besides simply having OperationName, we can have specific operation classification operation names:\n *\n * - JsOperationName (js)\n * - NodeOperationName (node)\n * - ServerOperationName (server)\n * - AppShellOperationName (web, app, etc.)\n * - UiOperationName (ui-es6 and ui-es5)\n */\nexport type OperationName = string;","extensions":[],"description":"later we can make this an enum! it can be auto-generated along with enums for the operation paths, and more things alike.\n\nif it's an enum it will automatically be possible to select a value from it in the simplified schema form :D\n\nbesides simply having OperationName, we can have specific operation classification operation names:\n\n- JsOperationName (js)\n- NodeOperationName (node)\n- ServerOperationName (server)\n- AppShellOperationName (web, app, etc.)\n- UiOperationName (ui-es6 and ui-es5)","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"string","description":"later we can make this an enum! it can be auto-generated along with enums for the operation paths, and more things alike.\n\nif it's an enum it will automatically be possible to select a value from it in the simplified schema form :D\n\nbesides simply having OperationName, we can have specific operation classification operation names:\n\n- JsOperationName (js)\n- NodeOperationName (node)\n- ServerOperationName (server)\n- AppShellOperationName (web, app, etc.)\n- UiOperationName (ui-es6 and ui-es5)"},"simplifiedSchema":{"description":"later we can make this an enum! it can be auto-generated along with enums for the operation paths, and more things alike.\n\nif it's an enum it will automatically be possible to select a value from it in the simplified schema form :D\n\nbesides simply having OperationName, we can have specific operation classification operation names:\n\n- JsOperationName (js)\n- NodeOperationName (node)\n- ServerOperationName (server)\n- AppShellOperationName (web, app, etc.)\n- UiOperationName (ui-es6 and ui-es5)","type":"string"},"typeCoverage":0,"rawType":"OperationName","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"BBnXjSiJwlqiFYJo","name":"ServerOperationName","slug":"server-operation-name","relativePathFromProjectRoot":"/tools/types/bundle-types/src/types.ts","srcFileId":"/types","operationFolderName":"bundle-types","relativeFilePathFromSrc":"/types.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/bundle-types","operationName":"bundle-types","rawText":"\nexport type ServerOperationName = string;","extensions":[],"description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"string"},"simplifiedSchema":{"type":"string"},"typeCoverage":0,"rawType":"ServerOperationName","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"VDWJFVOEBbwAiItJ","name":"ProjectRelativeFolderPath","slug":"project-relative-folder-path","relativePathFromProjectRoot":"/tools/types/bundle-types/src/types.ts","srcFileId":"/types","operationFolderName":"bundle-types","relativeFilePathFromSrc":"/types.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/bundle-types","operationName":"bundle-types","rawText":"\n\n/**\n * later this could be known by the frontend so it will render a ui to select a folder\n *\n * We need to figure out how we can know all type types in between when getting the type definition schema, not only the final type. If I'm lucky there is a way to find it as a #ref in a consistent way.\n */\nexport type ProjectRelativeFolderPath = string;","extensions":[],"description":"later this could be known by the frontend so it will render a ui to select a folder\n\nWe need to figure out how we can know all type types in between when getting the type definition schema, not only the final type. If I'm lucky there is a way to find it as a #ref in a consistent way.","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"string","description":"later this could be known by the frontend so it will render a ui to select a folder\n\nWe need to figure out how we can know all type types in between when getting the type definition schema, not only the final type. If I'm lucky there is a way to find it as a #ref in a consistent way."},"simplifiedSchema":{"description":"later this could be known by the frontend so it will render a ui to select a folder\n\nWe need to figure out how we can know all type types in between when getting the type definition schema, not only the final type. If I'm lucky there is a way to find it as a #ref in a consistent way.","type":"string"},"typeCoverage":0,"rawType":"ProjectRelativeFolderPath","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"WflCeNBNewsulRGF","name":"ProjectRelativeFilePath","slug":"project-relative-file-path","relativePathFromProjectRoot":"/tools/types/bundle-types/src/types.ts","srcFileId":"/types","operationFolderName":"bundle-types","relativeFilePathFromSrc":"/types.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/bundle-types","operationName":"bundle-types","rawText":"\nexport type ProjectRelativeFilePath = string;","extensions":[],"description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"string"},"simplifiedSchema":{"type":"string"},"typeCoverage":0,"rawType":"ProjectRelativeFilePath","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"NKujnWvolUDCbYzo","name":"OperationPrivacy","slug":"operation-privacy","relativePathFromProjectRoot":"/tools/types/bundle-types/src/types.ts","srcFileId":"/types","operationFolderName":"bundle-types","relativeFilePathFromSrc":"/types.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/bundle-types","operationName":"bundle-types","rawText":"\n\nexport interface OperationPrivacy {\n  operationName: string;\n  /**\n   * if public, everything will be kept\n   *\n   * if private, src and todo will be removed from bundle, unless it's a ui-es6 operation, because src is needed then. In that case, only \"todo\" will be deleted.\n   */\n  privacy: \"public\" | \"private\";\n}","extensions":[],"description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"operationName":{"type":"string"},"privacy":{"type":"string","enum":["public","private"],"description":"if public, everything will be kept\n\nif private, src and todo will be removed from bundle, unless it's a ui-es6 operation, because src is needed then. In that case, only \"todo\" will be deleted."}},"required":["operationName","privacy"],"additionalProperties":false},"simplifiedSchema":{"properties":[{"name":"operationName","required":true,"schema":{"type":"string"}},{"name":"privacy","required":true,"schema":{"description":"if public, everything will be kept\n\nif private, src and todo will be removed from bundle, unless it's a ui-es6 operation, because src is needed then. In that case, only \"todo\" will be deleted.","enum":["public","private"],"type":"string"}}],"type":"object"},"typeCoverage":0,"rawType":"OperationPrivacy","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"XryefhgaVVdEUAXH","name":"AppShell","slug":"app-shell","relativePathFromProjectRoot":"/tools/types/bundle-types/src/types.ts","srcFileId":"/types","operationFolderName":"bundle-types","relativeFilePathFromSrc":"/types.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/bundle-types","operationName":"bundle-types","rawText":"\n\nexport type AppShell =\n  | \"web\"\n  | \"app\"\n  | \"computer\"\n  | \"vscode\"\n  | \"browser\"\n  | \"docusaurus\";","extensions":[],"description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"string","enum":["web","app","computer","vscode","browser","docusaurus"]},"simplifiedSchema":{"enum":["web","app","computer","vscode","browser","docusaurus"],"type":"string"},"typeCoverage":0,"rawType":"AppShell","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"lHNpENMBDntikFxG","name":"FrontBackBundle","slug":"front-back-bundle","relativePathFromProjectRoot":"/tools/types/bundle-types/src/types.ts","srcFileId":"/types","operationFolderName":"bundle-types","relativeFilePathFromSrc":"/types.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/bundle-types","operationName":"bundle-types","rawText":"\n\n/**\n * This type can specify a frontend and backend that belong to each other. it doesn't include all operations that the ui or server are dependent on, they are calculated separately\n */\nexport interface FrontBackBundle {\n  /**\n   * any operation names that are not necesarily dependencies of the named front-back bundle but still need to be available.\n   */\n  operations?: OperationPrivacy[];\n  /**\n   * (optional) main shared ui package of the frontend\n   */\n  uiOperationName?: string;\n  /**\n   * which app shell(s) or app operations are there for the frontend?\n   */\n  appShellOperationNames?: string[];\n\n  /** operation name for server, if this UI is connected to one */\n  serverOperationName?: string;\n\n  /**\n   * if there is a ui and it has a web-shell, and it is deployed somewhere into production, add the deployed domain here.\n   */\n  productionWebUrl?: string;\n  /**\n   * if the server is to be deployed, specify the server-env package that exposes the server environment variables (JSON) to the ui\n   *\n   * By default, uses \"server-env\" operation, which simply exposes a configuration env.json file. the generation of the bundle will set the \"remoteServer\" key in this env.json to the \"productionApiUrl\" so the deployed version can reach the api\n   */\n  envOperationName?: string;\n\n  /**\n   * if there is one, it should be specified here (without trailing slash)\n   */\n  productionApiUrl?: string;\n\n  /**\n   * if this is provided, all endpoints require this auth token to be provided, or the endpoints do not work\n   *\n   * if you wish to have a more extensive authentication method for your endpoints, make sure to create your own auth layer\n   */\n  endpointsAuthToken?: string;\n}","extensions":[],"description":"This type can specify a frontend and backend that belong to each other. it doesn't include all operations that the ui or server are dependent on, they are calculated separately","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"operations":{"type":"array","items":{"$ref":"#/definitions/OperationPrivacy"},"description":"any operation names that are not necesarily dependencies of the named front-back bundle but still need to be available."},"uiOperationName":{"type":"string","description":"(optional) main shared ui package of the frontend"},"appShellOperationNames":{"type":"array","items":{"type":"string"},"description":"which app shell(s) or app operations are there for the frontend?"},"serverOperationName":{"type":"string","description":"operation name for server, if this UI is connected to one"},"productionWebUrl":{"type":"string","description":"if there is a ui and it has a web-shell, and it is deployed somewhere into production, add the deployed domain here."},"envOperationName":{"type":"string","description":"if the server is to be deployed, specify the server-env package that exposes the server environment variables (JSON) to the ui\n\nBy default, uses \"server-env\" operation, which simply exposes a configuration env.json file. the generation of the bundle will set the \"remoteServer\" key in this env.json to the \"productionApiUrl\" so the deployed version can reach the api"},"productionApiUrl":{"type":"string","description":"if there is one, it should be specified here (without trailing slash)"},"endpointsAuthToken":{"type":"string","description":"if this is provided, all endpoints require this auth token to be provided, or the endpoints do not work\n\nif you wish to have a more extensive authentication method for your endpoints, make sure to create your own auth layer"}},"additionalProperties":false,"description":"This type can specify a frontend and backend that belong to each other. it doesn't include all operations that the ui or server are dependent on, they are calculated separately"},"simplifiedSchema":{"description":"This type can specify a frontend and backend that belong to each other. it doesn't include all operations that the ui or server are dependent on, they are calculated separately","properties":[{"name":"operations","required":false,"schema":{"description":"any operation names that are not necesarily dependencies of the named front-back bundle but still need to be available.","items":[{"schema":{"properties":[{"name":"operationName","required":true,"schema":{"type":"string"}},{"name":"privacy","required":true,"schema":{"description":"if public, everything will be kept\n\nif private, src and todo will be removed from bundle, unless it's a ui-es6 operation, because src is needed then. In that case, only \"todo\" will be deleted.","enum":["public","private"],"type":"string"}}],"type":"object"},"name":"OperationPrivacy"}],"type":"array"}},{"name":"uiOperationName","required":false,"schema":{"description":"(optional) main shared ui package of the frontend","type":"string"}},{"name":"appShellOperationNames","required":false,"schema":{"description":"which app shell(s) or app operations are there for the frontend?","items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"serverOperationName","required":false,"schema":{"description":"operation name for server, if this UI is connected to one","type":"string"}},{"name":"productionWebUrl","required":false,"schema":{"description":"if there is a ui and it has a web-shell, and it is deployed somewhere into production, add the deployed domain here.","type":"string"}},{"name":"envOperationName","required":false,"schema":{"description":"if the server is to be deployed, specify the server-env package that exposes the server environment variables (JSON) to the ui\n\nBy default, uses \"server-env\" operation, which simply exposes a configuration env.json file. the generation of the bundle will set the \"remoteServer\" key in this env.json to the \"productionApiUrl\" so the deployed version can reach the api","type":"string"}},{"name":"productionApiUrl","required":false,"schema":{"description":"if there is one, it should be specified here (without trailing slash)","type":"string"}},{"name":"endpointsAuthToken","required":false,"schema":{"description":"if this is provided, all endpoints require this auth token to be provided, or the endpoints do not work\n\nif you wish to have a more extensive authentication method for your endpoints, make sure to create your own auth layer","type":"string"}}],"type":"object"},"typeCoverage":0,"rawType":"FrontBackBundle","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"SOKBxepzZChBlJWn","name":"GenerateBundleConfig","slug":"generate-bundle-config","relativePathFromProjectRoot":"/tools/types/bundle-types/src/types.ts","srcFileId":"/types","operationFolderName":"bundle-types","relativeFilePathFromSrc":"/types.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/bundle-types","operationName":"bundle-types","rawText":"\n\n/**\n * configuration that can be applied when generating a new bundle\n */\nexport type GenerateBundleConfig = {\n  /** skips the step where it gets the new stuff from github */\n  skipPull?: boolean;\n  /** skips the step where it pushes the new bundle to remote */\n  skipPush?: boolean;\n  /** skips the step where it saves to the db */\n  skipUpsert?: boolean;\n  /** descriptioin for git commit, if pushing. Default is \"monorepo update\" */\n  description?: string;\n  /** normally, the informationStrategy is taken from BundleConfig (if present). Can be overwritten with this setting */\n  informationStrategy?: InformationStrategy;\n  debug?: boolean;\n  /**\n   * optionally, specify a custom branch name to pull from\n   */\n  branchName?: string;\n};","extensions":[],"description":"configuration that can be applied when generating a new bundle","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"skipPull":{"type":"boolean","description":"skips the step where it gets the new stuff from github"},"skipPush":{"type":"boolean","description":"skips the step where it pushes the new bundle to remote"},"skipUpsert":{"type":"boolean","description":"skips the step where it saves to the db"},"description":{"type":"string","description":"descriptioin for git commit, if pushing. Default is \"monorepo update\""},"informationStrategy":{"$ref":"#/definitions/InformationStrategy","description":"normally, the informationStrategy is taken from BundleConfig (if present). Can be overwritten with this setting"},"debug":{"type":"boolean"},"branchName":{"type":"string","description":"optionally, specify a custom branch name to pull from"}},"additionalProperties":false,"description":"configuration that can be applied when generating a new bundle"},"simplifiedSchema":{"description":"configuration that can be applied when generating a new bundle","properties":[{"name":"skipPull","required":false,"schema":{"description":"skips the step where it gets the new stuff from github","type":"boolean"}},{"name":"skipPush","required":false,"schema":{"description":"skips the step where it pushes the new bundle to remote","type":"boolean"}},{"name":"skipUpsert","required":false,"schema":{"description":"skips the step where it saves to the db","type":"boolean"}},{"name":"description","required":false,"schema":{"description":"descriptioin for git commit, if pushing. Default is \"monorepo update\"","type":"string"}},{"name":"informationStrategy","required":false,"schema":{"description":"push (default): take needed information from project and push to bundle (removing the existing info)\n\npullReplace: pull bundle and keep its information intact, not taking anything new from the OS, replacing all the information we had from these models in the OS\n\npullMerge: pull bundle and use its information in conjunction with the information we had in the OS. This option will merge both information sources, removing duplicate IDs\n\nNB: Later we may want to define this setting on a per-model basis!","enum":["push","pullReplace","pullMerge"],"type":"string"}},{"name":"debug","required":false,"schema":{"type":"boolean"}},{"name":"branchName","required":false,"schema":{"description":"optionally, specify a custom branch name to pull from","type":"string"}}],"type":"object"},"typeCoverage":0,"rawType":"GenerateBundleConfig","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"VSGCGLxtDwTxYfsd","name":"InformationStrategy","slug":"information-strategy","relativePathFromProjectRoot":"/tools/types/bundle-types/src/types.ts","srcFileId":"/types","operationFolderName":"bundle-types","relativeFilePathFromSrc":"/types.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/bundle-types","operationName":"bundle-types","rawText":"\n\n/**\n * push (default): take needed information from project and push to bundle (removing the existing info)\n *\n * pullReplace: pull bundle and keep its information intact, not taking anything new from the OS, replacing all the information we had from these models in the OS\n *\n * pullMerge: pull bundle and use its information in conjunction with the information we had in the OS. This option will merge both information sources, removing duplicate IDs\n *\n * NB: Later we may want to define this setting on a per-model basis!\n */\nexport type InformationStrategy = \"push\" | \"pullReplace\" | \"pullMerge\";","extensions":[],"description":"push (default): take needed information from project and push to bundle (removing the existing info)\n\npullReplace: pull bundle and keep its information intact, not taking anything new from the OS, replacing all the information we had from these models in the OS\n\npullMerge: pull bundle and use its information in conjunction with the information we had in the OS. This option will merge both information sources, removing duplicate IDs\n\nNB: Later we may want to define this setting on a per-model basis!","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"string","enum":["push","pullReplace","pullMerge"],"description":"push (default): take needed information from project and push to bundle (removing the existing info)\n\npullReplace: pull bundle and keep its information intact, not taking anything new from the OS, replacing all the information we had from these models in the OS\n\npullMerge: pull bundle and use its information in conjunction with the information we had in the OS. This option will merge both information sources, removing duplicate IDs\n\nNB: Later we may want to define this setting on a per-model basis!"},"simplifiedSchema":{"description":"push (default): take needed information from project and push to bundle (removing the existing info)\n\npullReplace: pull bundle and keep its information intact, not taking anything new from the OS, replacing all the information we had from these models in the OS\n\npullMerge: pull bundle and use its information in conjunction with the information we had in the OS. This option will merge both information sources, removing duplicate IDs\n\nNB: Later we may want to define this setting on a per-model basis!","enum":["push","pullReplace","pullMerge"],"type":"string"},"typeCoverage":0,"rawType":"InformationStrategy","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}}]