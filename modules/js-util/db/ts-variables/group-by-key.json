{
  "createdAt": 1666513252702,
  "updatedAt": 1666513252702,
  "deletedAt": 0,
  "createdFirstAt": 1666513252702,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "groupByKey",
  "slug": "group-by-key",
  "operationRelativeTypescriptFilePath": "src/general.ts",
  "type": {
    "rawType": "<T extends { [key: string]: any; }>(array: T[], key: keyof T) => any",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "<T extends { [key: string]: any }>(\n  array: T[],\n  key: keyof T\n) => {\n  return array.reduce((all, item) => {\n    const newAll = all;\n\n    const keyToUse: string = item[key as string];\n\n    const already = newAll[keyToUse];\n    if (!already) {\n      // create a new parameter in the group-object\n      newAll[item[key]] = [item];\n    } else {\n      // push to existing group-object parameter\n      newAll[item[key]].push(item);\n    }\n\n    return newAll;\n  }, {} as { [key: string]: T[] });\n}",
  "description": "key should be of type string!\n\ninput = [{path:\"xyz\"},{path:\"xyz\"},{path:\"abc\"}]\ngroupByKey(input, \"path\")\nouput: { xyz: [{path:\"xyz\"},{path:\"xyz\"}], abc: [{path:\"abc\"}]}",
  "id": "zkiydeurhlllivmaujhqelzc"
}