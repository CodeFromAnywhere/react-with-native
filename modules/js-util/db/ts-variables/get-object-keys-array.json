{
  "createdAt": 1666513255070,
  "updatedAt": 1666513255070,
  "deletedAt": 0,
  "createdFirstAt": 1666513255070,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "getObjectKeysArray",
  "slug": "get-object-keys-array",
  "operationRelativeTypescriptFilePath": "src/getObjectKeysArray.ts",
  "type": {
    "rawType": "<TObject extends { [key: string]: any; }>(object: TObject) => Extract<keyof TObject, string>[]",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "<TObject extends { [key: string]: any }>(\n  object: TObject\n) => {\n  return Object.keys(object) as Extract<keyof TObject, string>[];\n}",
  "description": "Handy function to get the keys of an object, but typed.\n\nNB: The only difference from Object.keys is that this returns the keys in a typesafe manner",
  "id": "iaqrsfbzwduqspdhhtacuujt"
}