{
  "createdAt": 1666513252702,
  "updatedAt": 1666513252702,
  "deletedAt": 0,
  "createdFirstAt": 1666513252702,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "sumObjectParameters",
  "slug": "sum-object-parameters",
  "operationRelativeTypescriptFilePath": "src/general.ts",
  "type": {
    "rawType": "<TObject extends { [key: string]: number; }>(object1: TObject, object2: TObject) => TObject",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "<TObject extends { [key: string]: number }>(\n  object1: TObject,\n  object2: TObject\n): TObject => {\n  const objectKeys: (keyof TObject)[] = Object.keys(object1);\n  const summedObject = mergeObjectsArray(\n    objectKeys.map((key) => {\n      const summedObjectPart = { [key]: object1[key] + object2[key] };\n\n      return summedObjectPart;\n    })\n  ) as TObject;\n  // NB: too bad we still need `as TObject` here. I would love to learn how to prevent that\n\n  return summedObject;\n}",
  "description": "sums all parameters in two objects together",
  "id": "wauipvsxrxgdcatbskgiofhd"
}