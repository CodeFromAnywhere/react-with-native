{
  "createdAt": 1666513252702,
  "updatedAt": 1666513252702,
  "deletedAt": 0,
  "createdFirstAt": 1666513252702,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "makeArray",
  "slug": "make-array",
  "operationRelativeTypescriptFilePath": "src/general.ts",
  "type": {
    "rawType": "<T>(...arrayOrNotArray: (T | T[] | undefined)[]) => any",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "<T>(...arrayOrNotArray: (T | T[] | undefined)[]) => {\n  return arrayOrNotArray\n    .map((arrayOrNot) => {\n      const array: T[] = arrayOrNot\n        ? Array.isArray(arrayOrNot)\n          ? arrayOrNot\n          : [arrayOrNot]\n        : [];\n\n      return array;\n    })\n    .flat();\n}",
  "description": "if something is not an array, returns it as the first element of an array\n\nif the input is undefined, an empty array will be returned.\n\nNB: TODO: find out the workings of the array constructor (`Array(\"any value\")`), because maybe it does something very similar. No need to have a dependency then if it's similar.",
  "id": "zlfkkfddqkmjcvhbvxrodxip"
}