{
  "createdAt": 1666513261958,
  "updatedAt": 1666513261958,
  "deletedAt": 0,
  "createdFirstAt": 1666513261958,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "objectMapSync",
  "slug": "object-map-sync",
  "operationRelativeTypescriptFilePath": "src/object-maps.ts",
  "type": {
    "rawType": "<TObject extends { [key: string]: any; }, TMapResult, TResultObject extends { [key in keyof TObject]: TMapResult; }>(object: TObject, mapFn: (key: keyof TObject, value: TObject[keyof TObject]) => TMapResult) => TResultObject",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "<\n  TObject extends { [key: string]: any },\n  TMapResult,\n  TResultObject extends { [key in keyof TObject]: TMapResult }\n>(\n  object: TObject,\n  mapFn: (key: keyof TObject, value: TObject[keyof TObject]) => TMapResult\n): TResultObject => {\n  const valueObjectParts = getObjectKeysArray(object).map((key) => {\n    return { [key]: mapFn(key, object[key]) };\n  });\n\n  const merged = mergeObjectsArray(\n    valueObjectParts\n  ) as unknown as TResultObject;\n\n  return merged;\n}",
  "description": "maps over all values in an object and replaces them using a mapfn\n\nExample usage:\n\n```ts\n\nconst result = objectMapSync({ hello: \"world\", isTrue: true }, (key,value) => {\nreturn `${value}123`;\n});\n```",
  "id": "opjxqggqegnalyejwsshpcof"
}