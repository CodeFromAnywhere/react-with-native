{
  "createdAt": 1666513259652,
  "updatedAt": 1666513259652,
  "deletedAt": 0,
  "createdFirstAt": 1666513259652,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "mapMany",
  "slug": "map-many",
  "operationRelativeTypescriptFilePath": "src/mapMany.ts",
  "type": {
    "rawType": "<T, U>(array: T[], mapFn: (item: T, index: number, array: T[]) => Promise<U>, limit?: number | undefined) => Promise<U[]>",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "async <T, U>(\n  array: T[],\n  mapFn: (item: T, index: number, array: T[]) => Promise<U>,\n  limit?: number\n): Promise<U[]> => {\n  const result: U[] = [];\n\n  if (array.length === 0) {\n    return result;\n  }\n\n  const generator = arrayGenerator(array);\n  const realLimit = Math.min(limit || array.length, array.length);\n  const workers = new Array(realLimit);\n\n  for (let i = 0; i < realLimit; i++) {\n    workers.push(worker(i, generator, mapFn, result));\n  }\n\n  // console.log(`Initialized ${limit} workers`);\n\n  await Promise.all(workers);\n\n  return result;\n}",
  "description": "Lets you map over any array with a async function while setting a max. concurrency\n\nTaken and improved from https://codeburst.io/async-map-with-limited-parallelism-in-node-js-2b91bd47af70",
  "id": "leqeosdhdgedtzfkqevxczct"
}