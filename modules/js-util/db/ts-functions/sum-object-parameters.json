{
  "createdAt": 1666513251921,
  "updatedAt": 1666513251921,
  "deletedAt": 0,
  "createdFirstAt": 1666513251921,
  "publicAuthorization": [
    "read-docs",
    "search"
  ],
  "isApiExposed": false,
  "isPostApi": false,
  "isGetApi": false,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/general.ts",
  "commentsInside": [],
  "rawText": " <TObject extends { [key: string]: number }>(\n  object1: TObject,\n  object2: TObject\n): TObject => {\n  const objectKeys: (keyof TObject)[] = Object.keys(object1);\n  const summedObject = mergeObjectsArray(\n    objectKeys.map((key) => {\n      const summedObjectPart = { [key]: object1[key] + object2[key] };\n\n      return summedObjectPart;\n    })\n  ) as TObject;\n  // NB: too bad we still need `as TObject` here. I would love to learn how to prevent that\n\n  return summedObject;\n}",
  "name": "sumObjectParameters",
  "slug": "sum-object-parameters",
  "parameters": [],
  "description": "sums all parameters in two objects together",
  "returnType": {
    "rawType": "{ [key: string]: number; }",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "maxIndentationDepth": 3,
  "size": {
    "characters": 521,
    "lines": 16,
    "bytes": 521,
    "bytesPerCharacter": 1,
    "charactersPerLine": 33,
    "linesPerFile": 16,
    "numberOfFiles": 1
  },
  "id": "dpwtrwfkuqyulbfsketikcyl"
}