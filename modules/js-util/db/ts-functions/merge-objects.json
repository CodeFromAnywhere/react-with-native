{
  "createdAt": 1666513263176,
  "updatedAt": 1666513263176,
  "deletedAt": 0,
  "createdFirstAt": 1666513263176,
  "publicAuthorization": [
    "read-docs",
    "search"
  ],
  "isApiExposed": false,
  "isPostApi": false,
  "isGetApi": false,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/object-merge.ts",
  "commentsInside": [],
  "rawText": " <T extends { [key: string]: any | undefined }>(\n  ...objects: (Partial<T> | undefined)[]\n): T | undefined => {\n  if (objects.length === 0) return;\n\n  const firstObject = objects[0];\n\n  const mergedObject = objects.reduce((previous, current) => {\n    if (!current) return previous;\n\n    const currentWithoutUndefined = omitUndefinedValues(current);\n\n    const newObject: Partial<T> | undefined = !previous\n      ? current\n      : { ...previous, ...currentWithoutUndefined };\n\n    return newObject;\n    // NB: we cannot guarantee this based on the input!\n  }, firstObject) as T;\n\n  return mergedObject;\n}",
  "name": "mergeObjects",
  "slug": "merge-objects",
  "parameters": [],
  "description": "merges multiple objects, overwriting the previous one with the next. Can be useful for configs where there are multiple layers of configs that overwrite each other.\n\nPlease note though, that only the root keys of the object are overwriting each other, so if there is nested datastructures, the last one with a specific key overwrites the previous ones copletely\n\nPlease note that you can provide partial objects as well, as long as you are sure that the final object is full, the type interface is correct.\n\nPlease note that if a latter object has a key which holds \"undefined\", it will NOT overwrite it. Anything else WILL",
  "returnType": {
    "rawType": "T | undefined",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 3,
  "size": {
    "characters": 1226,
    "lines": 28,
    "bytes": 1226,
    "bytesPerCharacter": 1,
    "charactersPerLine": 44,
    "linesPerFile": 28,
    "numberOfFiles": 1
  },
  "id": "ptdaytjogfzmdqdtumhqtrhc"
}