[{"id":"UIoAfclROzCmYyde","commentsInside":[],"rawText":" <T>(functions: ((input: T) => T)[], value: T) => {\n  return functions.reduce((val, fn) => {\n    return fn(val);\n  }, value);\n}","name":"apply","slug":"apply","parameters":[],"description":"function that takes an array of functions and applies them one by one, on the value or the result of the previous function. Only possible if the type of the value stays the same.","returnType":{"rawType":"any","typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":false,"isEnumLiteral":false},"maxIndentationDepth":2,"relativePathFromProjectRoot":"/tools/util/js-util/src/general.ts","srcFileId":"/general","operationFolderName":"js-util","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/js-util","operationName":"js-util","size":{"characters":305,"lines":5,"bytes":305,"bytesPerCharacter":1,"charactersPerfLine":61,"linesPerFile":5,"numberOfFiles":1}},{"id":"EbBJhjoHimkRsvkt","commentsInside":[],"rawText":" <T extends readonly string[]>(\n  array: T\n): { [K in typeof array[number]]: K } =>\n  array.reduce((previous, current) => {\n    return { ...previous, [current]: current };\n  }, {} as any)","name":"createEnum","slug":"create-enum","parameters":[],"description":"creates an enum object from a readonly const array so you don't have to\n------\nconst taskNames = [\"a\",\"b\",\"c\"] as const;\ntype TaskNames = typeof taskNames[number];\nconst enummm = createEnum(taskNames);\n(value of enummm: { a: \"a\", b: \"b\", c: \"c\" })","returnType":{"rawType":"{ [K in T[number]]: K; }","typeDefinition":{"type":"object","properties":{},"optional":false},"typeCoverage":0,"isArray":false,"isEnum":false,"isObject":true,"isPrimitive":false,"isEnumLiteral":false,"simplifiedSchema":{"properties":[],"type":"object"}},"maxIndentationDepth":2,"relativePathFromProjectRoot":"/tools/util/js-util/src/general.ts","srcFileId":"/general","operationFolderName":"js-util","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/js-util","operationName":"js-util","size":{"characters":434,"lines":11,"bytes":434,"bytesPerCharacter":1,"charactersPerfLine":39.45454545454545,"linesPerFile":11,"numberOfFiles":1}},{"id":"tzXIkPhPloWLnmjW","commentsInside":[],"rawText":" <T extends { [key: string]: any }>(\n  array: T[],\n  key: keyof T\n) => {\n  return array.reduce((all, item) => {\n    const newAll = all;\n\n    const keyToUse: string = item[key as string];\n\n    const already = newAll[keyToUse];\n    if (!already) {\n      // create a new parameter in the group-object\n      newAll[item[key]] = [item];\n    } else {\n      // push to existing group-object parameter\n      newAll[item[key]].push(item);\n    }\n\n    return newAll;\n  }, {} as { [key: string]: T[] });\n}","name":"groupByKey","slug":"group-by-key","parameters":[],"description":"key should be of type string!\n\ninput = [{path:\"xyz\"},{path:\"xyz\"},{path:\"abc\"}]\ngroupByKey(input, \"path\")\nouput: { xyz: [{path:\"xyz\"},{path:\"xyz\"}], abc: [{path:\"abc\"}]}","returnType":{"rawType":"any","typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":false,"isEnumLiteral":false},"maxIndentationDepth":3,"relativePathFromProjectRoot":"/tools/util/js-util/src/general.ts","srcFileId":"/general","operationFolderName":"js-util","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/js-util","operationName":"js-util","size":{"characters":662,"lines":25,"bytes":662,"bytesPerCharacter":1,"charactersPerfLine":26.48,"linesPerFile":25,"numberOfFiles":1}},{"id":"hgptWzSBJcPZyhne","commentsInside":[],"rawText":" (array: boolean[]): boolean => {\n  return !array.find((x) => !x);\n}","name":"isAllTrue","slug":"is-all-true","parameters":[],"description":"checks if all items in an array are true","returnType":{"rawType":"{}","typeDefinition":{"optional":false,"type":"boolean"},"typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":true,"isEnumLiteral":false,"simplifiedSchema":{"type":"boolean"}},"maxIndentationDepth":1,"relativePathFromProjectRoot":"/tools/util/js-util/src/general.ts","srcFileId":"/general","operationFolderName":"js-util","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/js-util","operationName":"js-util","size":{"characters":108,"lines":3,"bytes":108,"bytesPerCharacter":1,"charactersPerfLine":36,"linesPerFile":3,"numberOfFiles":1}},{"id":"yJSYffTlgFxvyuei","commentsInside":[],"rawText":" async (\n  object: { [key: string]: any },\n  mapFn: (key: string) => string | Promise<string> | undefined\n) => {\n  const keyPairs = await Promise.all(\n    Object.keys(object).map(async (oldKey) => {\n      return { oldKey, newKey: await mapFn(oldKey) };\n    })\n  );\n\n  return mergeObjectsArray(\n    keyPairs\n      .map((pair) => {\n        return pair.newKey ? { [pair.newKey]: object[pair.oldKey] } : null;\n      })\n      .filter(notEmpty)\n  );\n}","name":"mapKeys","slug":"map-keys","parameters":[],"description":"maps over all keys in an object and replaces them using a mapfn","returnType":{"rawType":"unknown","typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":false,"isEnumLiteral":false},"maxIndentationDepth":4,"relativePathFromProjectRoot":"/tools/util/js-util/src/general.ts","srcFileId":"/general","operationFolderName":"js-util","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/js-util","operationName":"js-util","size":{"characters":508,"lines":18,"bytes":508,"bytesPerCharacter":1,"charactersPerfLine":28.22222222222222,"linesPerFile":18,"numberOfFiles":1}},{"id":"bRocDVjIpCWTDQUX","commentsInside":[],"rawText":" async <T, U>(\n  object: { [key: string]: T },\n  mapFn: (value: T) => U | Promise<U>\n) => {\n  const valueObjectParts = await Promise.all(\n    Object.keys(object).map(async (key) => {\n      return { [key]: await mapFn(object[key]) };\n    })\n  );\n\n  return mergeObjectsArray(valueObjectParts);\n}","name":"mapValues","slug":"map-values","parameters":[],"description":"maps over all values in an object and replaces them using a mapfn\n\nNB: TODO: the current type interface leads this object to be detyped if it had a clear type. I hope I can find a way to solve this!","returnType":{"rawType":"unknown","typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":false,"isEnumLiteral":false},"maxIndentationDepth":3,"relativePathFromProjectRoot":"/tools/util/js-util/src/general.ts","srcFileId":"/general","operationFolderName":"js-util","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/js-util","operationName":"js-util","size":{"characters":491,"lines":14,"bytes":491,"bytesPerCharacter":1,"charactersPerfLine":35.07142857142857,"linesPerFile":14,"numberOfFiles":1}},{"id":"OBMSSbaJNNzelvVF","commentsInside":[],"rawText":" <T, U>(\n  object: { [key: string]: T },\n  mapFn: (value: T) => U\n) => {\n  const valueObjectParts = Object.keys(object).map((key) => {\n    return { [key]: mapFn(object[key]) };\n  });\n\n  return mergeObjectsArray(valueObjectParts);\n}","name":"mapValuesSync","slug":"map-values-sync","parameters":[],"description":"maps over all values in an object and replaces them using a mapfn\n\nsync","returnType":{"rawType":"{ [key: string]: any; }","typeDefinition":{"type":"object","properties":{},"optional":false},"typeCoverage":0,"isArray":false,"isEnum":false,"isObject":true,"isPrimitive":false,"isEnumLiteral":false,"simplifiedSchema":{"properties":[],"type":"object"}},"maxIndentationDepth":2,"relativePathFromProjectRoot":"/tools/util/js-util/src/general.ts","srcFileId":"/general","operationFolderName":"js-util","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/js-util","operationName":"js-util","size":{"characters":302,"lines":12,"bytes":302,"bytesPerCharacter":1,"charactersPerfLine":25.166666666666668,"linesPerFile":12,"numberOfFiles":1}},{"id":"qmRsmuWKqOzJPADz","commentsInside":[],"rawText":"\n  <U>(isEqualFn?: (a: U, b: U) => boolean) =>\n  <T extends U>(value: T, index: number, self: T[]) => {\n    return (\n      self.findIndex((v) => (isEqualFn ? isEqualFn(v, value) : v === value)) ===\n      index\n    );\n  }","name":"onlyUnique2","slug":"only-unique-2","parameters":[],"description":"function that returns a filter function that can be used as a filter for any array. removes duplicates.\n\noptionally takes a compare function that should return a \"true\" if two instances are equal. if you use this function, make sure to pass a generic of the type the items will have, in order to make this equality function type safe as well","returnType":{"rawType":"<T extends U>(value: T, index: number, self: T[]) => boolean","typeDefinition":{"type":"object","properties":{},"optional":false},"typeCoverage":0,"isArray":false,"isEnum":false,"isObject":true,"isPrimitive":false,"isEnumLiteral":false,"simplifiedSchema":{"properties":[],"type":"object"}},"maxIndentationDepth":3,"relativePathFromProjectRoot":"/tools/util/js-util/src/general.ts","srcFileId":"/general","operationFolderName":"js-util","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/js-util","operationName":"js-util","size":{"characters":561,"lines":10,"bytes":561,"bytesPerCharacter":1,"charactersPerfLine":56.1,"linesPerFile":10,"numberOfFiles":1}},{"id":"OYnlfWYFhSFxZrKZ","commentsInside":[],"rawText":" <T>(...arrayOrNotArray: (T | T[] | undefined)[]) => {\n  return arrayOrNotArray\n    .map((arrayOrNot) => {\n      const array: T[] = arrayOrNot\n        ? Array.isArray(arrayOrNot)\n          ? arrayOrNot\n          : [arrayOrNot]\n        : [];\n\n      return array;\n    })\n    .flat();\n}","name":"makeArray","slug":"make-array","parameters":[],"description":"if something is not an array, returns it as the first element of an array\n\nif the input is undefined, an empty array will be returned.\n\nNB: TODO: find out the workings of the array constructor (`Array(\"any value\")`), because maybe it does something very similar. No need to have a dependency then if it's similar.","returnType":{"rawType":"any","typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":false,"isEnumLiteral":false},"maxIndentationDepth":5,"relativePathFromProjectRoot":"/tools/util/js-util/src/general.ts","srcFileId":"/general","operationFolderName":"js-util","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/js-util","operationName":"js-util","size":{"characters":596,"lines":17,"bytes":596,"bytesPerCharacter":1,"charactersPerfLine":35.05882352941177,"linesPerFile":17,"numberOfFiles":1}},{"id":"yIALpqpdiXxoIsnO","commentsInside":[],"rawText":" <T>(arrayOrNot: T | T[]) => {\n  return makeArray(arrayOrNot)[0];\n}","name":"takeFirst","slug":"take-first","parameters":[],"description":"takes any type T or an array of T and returns T or the first of the array (which is T)","returnType":{"rawType":"any","typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":false,"isEnumLiteral":false},"maxIndentationDepth":1,"relativePathFromProjectRoot":"/tools/util/js-util/src/general.ts","srcFileId":"/general","operationFolderName":"js-util","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/js-util","operationName":"js-util","size":{"characters":153,"lines":3,"bytes":153,"bytesPerCharacter":1,"charactersPerfLine":51,"linesPerFile":3,"numberOfFiles":1}},{"id":"cyaDNvyMZNmutWfv","commentsInside":[],"rawText":" <T>(\n  object: { [key: string]: T },\n  keys: string[]\n) => {\n  const subsetObject = keys.reduce((obj, key) => {\n    return { ...obj, [key]: object[key] };\n  }, {} as { [key: string]: T });\n  return subsetObject;\n}","name":"getSubsetFromObject","slug":"get-subset-from-object","parameters":[],"description":"takes an object and a subset of its keys and returns a subset of that object\n\ninput: { x: \"a\", y: \"b\", z: \"c\" } and [\"x\"]\n\noutput: { x: \"a\" }","returnType":{"rawType":"any","typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":false,"isEnumLiteral":false},"maxIndentationDepth":2,"relativePathFromProjectRoot":"/tools/util/js-util/src/general.ts","srcFileId":"/general","operationFolderName":"js-util","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/js-util","operationName":"js-util","size":{"characters":355,"lines":13,"bytes":355,"bytesPerCharacter":1,"charactersPerfLine":27.307692307692307,"linesPerFile":13,"numberOfFiles":1}},{"id":"YcQjHwXvUsHySpQe","commentsInside":[],"rawText":" (paramsString: string) =>\n  mergeObjectsArray(\n    paramsString\n      .split(\",\")\n      .map((x) => x.trim().split(\":\"))\n      .map((pair) =>\n        pair[0] && pair[1] ? { [pair[0].trim()]: pair[1] } : null\n      )\n      .filter(notEmpty)\n  )","name":"getObjectFromParamsString","slug":"get-object-from-params-string","parameters":[],"description":"useful for cli's that only take strings. This creates an object from a string\n\ninput: \"x:a, y:b, z:c\"\noutput: { x: \"a\", y: \"b\", z: \"c\" }\n\nTODO: would be nice if we can validate this string immediately using a JSON SCHEMA","returnType":{"rawType":"{ [key: string]: any; }","typeDefinition":{"type":"object","properties":{},"optional":false},"typeCoverage":0,"isArray":false,"isEnum":false,"isObject":true,"isPrimitive":false,"isEnumLiteral":false,"simplifiedSchema":{"properties":[],"type":"object"}},"maxIndentationDepth":4,"relativePathFromProjectRoot":"/tools/util/js-util/src/general.ts","srcFileId":"/general","operationFolderName":"js-util","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/js-util","operationName":"js-util","size":{"characters":464,"lines":15,"bytes":464,"bytesPerCharacter":1,"charactersPerfLine":30.933333333333334,"linesPerFile":15,"numberOfFiles":1}},{"id":"iRuGjtdGiQXxPBjD","commentsInside":[],"rawText":" <TObject extends { [key: string]: number }>(\n  object1: TObject,\n  object2: TObject\n): TObject => {\n  const objectKeys: (keyof TObject)[] = Object.keys(object1);\n  const summedObject = mergeObjectsArray(\n    objectKeys.map((key) => {\n      const summedObjectPart = { [key]: object1[key] + object2[key] };\n\n      return summedObjectPart;\n    })\n  ) as TObject;\n  // NB: too bad we still need `as TObject` here. I would love to learn how to prevent that\n\n  return summedObject;\n}","name":"sumObjectParameters","slug":"sum-object-parameters","parameters":[],"description":"sums all parameters in two objects together","returnType":{"rawType":"{ [key: string]: number; }","typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":false,"isEnumLiteral":false},"maxIndentationDepth":3,"relativePathFromProjectRoot":"/tools/util/js-util/src/general.ts","srcFileId":"/general","operationFolderName":"js-util","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/js-util","operationName":"js-util","size":{"characters":521,"lines":16,"bytes":521,"bytesPerCharacter":1,"charactersPerfLine":32.5625,"linesPerFile":16,"numberOfFiles":1}},{"id":"KbMAwidNJHwBwhdb","commentsInside":[],"rawText":" <T extends { [key: string]: number | undefined }>(\n  objectArray: T[],\n  keys: (keyof T)[]\n): T => {\n  const sumObject = objectArray.reduce((total, item) => {\n    // NB: not needed normally, but there seems to be some corrupt data here and there\n    if (!item) return total;\n    const newTotal = mergeObjectsArray(\n      keys.map((key) => {\n        const value1: number = total ? total[key] || 0 : 0;\n        const value2: number = item?.[key] || 0;\n\n        const sum =\n          (!total || total[key] === undefined) && item[key] === undefined\n            ? undefined\n            : value1 + value2;\n\n        return { [key]: sum };\n      })\n    ) as T;\n\n    return newTotal;\n  }, null as null | T) as T;\n\n  return sumObject;\n}","name":"sumAllKeys","slug":"sum-all-keys","parameters":[],"description":"sums all keys of an array of objects, assuming the objects have the same datastructure and assuming the values contain either numbers or undefined","returnType":{"rawType":"{ [key: string]: number | undefined; }","typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":false,"isEnumLiteral":false},"maxIndentationDepth":6,"relativePathFromProjectRoot":"/tools/util/js-util/src/general.ts","srcFileId":"/general","operationFolderName":"js-util","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/js-util","operationName":"js-util","size":{"characters":873,"lines":26,"bytes":873,"bytesPerCharacter":1,"charactersPerfLine":33.57692307692308,"linesPerFile":26,"numberOfFiles":1}},{"id":"uaJMpitVmGYZwrKp","commentsInside":[],"rawText":" <T extends { [key: string]: any }>(\n  objectsArray: T[]\n): T =>\n  objectsArray.reduce((previous, current) => {\n    return { ...previous, ...current };\n  }, {} as T)","name":"mergeObjectsArray","slug":"merge-objects-array","parameters":[],"description":"","returnType":{"rawType":"{ [key: string]: any; }","typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":false,"isEnumLiteral":false},"maxIndentationDepth":2,"relativePathFromProjectRoot":"/tools/util/js-util/src/general.ts","srcFileId":"/general","operationFolderName":"js-util","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/js-util","operationName":"js-util","size":{"characters":165,"lines":6,"bytes":165,"bytesPerCharacter":1,"charactersPerfLine":27.5,"linesPerFile":6,"numberOfFiles":1}},{"id":"IpabaIlGnoPPTnIm","commentsInside":[],"rawText":" <T>(\n  config: T | undefined,\n  defaults: T | undefined\n) => {\n  const parameters = Object.keys({\n    ...config,\n    ...defaults,\n  }) as (keyof T)[];\n\n  const mergedConfig = parameters.reduce(\n    (getConfig, p) => ({ ...getConfig, [p]: config?.[p] || defaults?.[p] }),\n    {} as Partial<T>\n  );\n  return mergedConfig;\n}","name":"mergeObjectParameters","slug":"merge-object-parameters","parameters":[],"description":"merges two objects: a config object and a defaults object. If the config object has something missing, a default will be used from the defaults object.\n\nIn short: merges two objects, for every parameter, use the default as a fallback\n\nNB: could be useful to rewrite this later if I need multiple levels of defaults... The only provided argument can just be a T[], which reduces that by using deeper and deeper fallbacks. For example, VSCode does this with settings: you have workspace settings, user settings, and global settings","returnType":{"rawType":"any","typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":false,"isEnumLiteral":false},"maxIndentationDepth":2,"relativePathFromProjectRoot":"/tools/util/js-util/src/general.ts","srcFileId":"/general","operationFolderName":"js-util","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/js-util","operationName":"js-util","size":{"characters":851,"lines":19,"bytes":851,"bytesPerCharacter":1,"charactersPerfLine":44.78947368421053,"linesPerFile":19,"numberOfFiles":1}},{"id":"faPtSuWmGbGHqnHe","commentsInside":[],"name":"onlyUnique","slug":"only-unique","relativePathFromProjectRoot":"/tools/util/js-util/src/general.ts","srcFileId":"/general","operationFolderName":"js-util","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/js-util","operationName":"js-util","description":"/**\n * DEPRECATED: should refactor everything to use onlyUnique2 and call it onlyUnique again\n *\n * to be used as a filter. removes duplicates\n */","parameters":[],"returnType":{"rawType":"{}","typeDefinition":{"type":"object","properties":{},"optional":false},"typeCoverage":0,"isArray":false,"isEnum":false,"isObject":true,"isPrimitive":false,"isEnumLiteral":false,"simplifiedSchema":{"properties":[],"type":"object"}},"size":{"characters":443,"lines":18,"bytes":443,"bytesPerCharacter":1,"charactersPerfLine":24.61111111111111,"linesPerFile":18,"numberOfFiles":1},"rawText":"\n\n/**\n * DEPRECATED: should refactor everything to use onlyUnique2 and call it onlyUnique again\n *\n * to be used as a filter. removes duplicates\n */\nexport function onlyUnique<T extends unknown>(\n  value: T,\n  index: number,\n  self: T[]\n) {\n  return self.findIndex((v) => v === value) === index;\n}","maxIndentationDepth":1},{"id":"oKSOdzRDonolvjZj","commentsInside":[],"name":"objectValuesMap","slug":"object-values-map","relativePathFromProjectRoot":"/tools/util/js-util/src/general.ts","srcFileId":"/general","operationFolderName":"js-util","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/js-util","operationName":"js-util","description":"/**\n * not sure if this is the best way, but it does save some lines of code!\n *\n * maps over an object's values with a map function\n */","parameters":[],"returnType":{"rawType":"{ [key: string]: U; }","typeDefinition":{"type":"object","properties":{},"optional":false},"typeCoverage":0,"isArray":false,"isEnum":false,"isObject":true,"isPrimitive":false,"isEnumLiteral":false,"simplifiedSchema":{"properties":[],"type":"object"}},"size":{"characters":599,"lines":23,"bytes":599,"bytesPerCharacter":1,"charactersPerfLine":26.043478260869566,"linesPerFile":23,"numberOfFiles":1},"rawText":"\n\n/**\n * not sure if this is the best way, but it does save some lines of code!\n *\n * maps over an object's values with a map function\n */\nexport function objectValuesMap<\n  T extends { [key: string]: T[string] },\n  U extends unknown\n>(\n  object: T,\n  mapFn: (value: T[string], key: string) => U\n): { [key: string]: U } {\n  return Object.keys(object).reduce(function (result, key) {\n    result[key] = mapFn(object[key], key);\n    return result;\n  }, {} as any);\n}","maxIndentationDepth":2},{"id":"dLwmfoFqAYDrspbc","commentsInside":[],"name":"notEmpty","slug":"not-empty","relativePathFromProjectRoot":"/tools/util/js-util/src/general.ts","srcFileId":"/general","operationFolderName":"js-util","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/js-util","operationName":"js-util","description":"/**\n * Removes empty values (null or undefined) from your arrays in a type-safe way\n */","parameters":[],"returnType":{"rawType":"{}","typeDefinition":{"type":"object","properties":{},"optional":false},"typeCoverage":0,"isArray":false,"isEnum":false,"isObject":true,"isPrimitive":false,"isEnumLiteral":false,"simplifiedSchema":{"properties":[],"type":"object"}},"size":{"characters":316,"lines":12,"bytes":316,"bytesPerCharacter":1,"charactersPerfLine":26.333333333333332,"linesPerFile":12,"numberOfFiles":1},"rawText":"\n\n/**\n * Removes empty values (null or undefined) from your arrays in a type-safe way\n */\nexport function notEmpty<TValue>(\n  value: TValue | null | undefined\n): value is TValue {\n  return value !== null && value !== undefined;\n}","maxIndentationDepth":1}]