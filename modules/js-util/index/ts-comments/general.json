[{"id":"RhmiTQyLQcImZAap","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/tools/util/js-util/src/general.ts","srcFileId":"/general","operationFolderName":"js-util","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/js-util","operationName":"js-util","comment":"function that takes an array of functions and applies them one by one, on the value or the result of the previous function. Only possible if the type of the value stays the same.","rawStatement":"export const apply = <T>(functions: ((input: T) => T)[], value: T) => {\n  return functions.reduce((val, fn) => {\n    return fn(val);\n  }, value);\n};","parameters":{},"types":[],"firstLine":3,"lastLine":5},{"id":"RhmiTQyLQcImZAap","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/tools/util/js-util/src/general.ts","srcFileId":"/general","operationFolderName":"js-util","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/js-util","operationName":"js-util","comment":"creates an enum object from a readonly const array so you don't have to\n------\nconst taskNames = [\"a\",\"b\",\"c\"] as const;\ntype TaskNames = typeof taskNames[number];\nconst enummm = createEnum(taskNames);\n(value of enummm: { a: \"a\", b: \"b\", c: \"c\" })","rawStatement":"export const createEnum = <T extends readonly string[]>(\n  array: T\n): { [K in typeof array[number]]: K } =>\n  array.reduce((previous, current) => {\n    return { ...previous, [current]: current };\n  }, {} as any);","parameters":{},"types":[],"firstLine":12,"lastLine":19},{"id":"RhmiTQyLQcImZAap","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/tools/util/js-util/src/general.ts","srcFileId":"/general","operationFolderName":"js-util","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/js-util","operationName":"js-util","comment":"key should be of type string!\n\ninput = [{path:\"xyz\"},{path:\"xyz\"},{path:\"abc\"}]\ngroupByKey(input, \"path\")\nouput: { xyz: [{path:\"xyz\"},{path:\"xyz\"}], abc: [{path:\"abc\"}]}","rawStatement":"export const groupByKey = <T extends { [key: string]: any }>(\n  array: T[],\n  key: keyof T\n) => {\n  return array.reduce((all, item) => {\n    const newAll = all;\n\n    const keyToUse: string = item[key as string];\n\n    const already = newAll[keyToUse];\n    if (!already) {\n      // create a new parameter in the group-object\n      newAll[item[key]] = [item];\n    } else {\n      // push to existing group-object parameter\n      newAll[item[key]].push(item);\n    }\n\n    return newAll;\n  }, {} as { [key: string]: T[] });\n};","parameters":{},"types":[],"firstLine":27,"lastLine":33},{"id":"RhmiTQyLQcImZAap","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/tools/util/js-util/src/general.ts","srcFileId":"/general","operationFolderName":"js-util","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/js-util","operationName":"js-util","comment":"checks if all items in an array are true","rawStatement":"export const isAllTrue = (array: boolean[]): boolean => {\n  return !array.find((x) => !x);\n};","parameters":{},"types":[],"firstLine":56,"lastLine":58},{"id":"RhmiTQyLQcImZAap","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/tools/util/js-util/src/general.ts","srcFileId":"/general","operationFolderName":"js-util","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/js-util","operationName":"js-util","comment":"maps over all keys in an object and replaces them using a mapfn","rawStatement":"export const mapKeys = async (\n  object: { [key: string]: any },\n  mapFn: (key: string) => string | Promise<string> | undefined\n) => {\n  const keyPairs = await Promise.all(\n    Object.keys(object).map(async (oldKey) => {\n      return { oldKey, newKey: await mapFn(oldKey) };\n    })\n  );\n\n  return mergeObjectsArray(\n    keyPairs\n      .map((pair) => {\n        return pair.newKey ? { [pair.newKey]: object[pair.oldKey] } : null;\n      })\n      .filter(notEmpty)\n  );\n};","parameters":{},"types":[],"firstLine":63,"lastLine":65},{"id":"RhmiTQyLQcImZAap","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/tools/util/js-util/src/general.ts","srcFileId":"/general","operationFolderName":"js-util","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/js-util","operationName":"js-util","comment":"maps over all values in an object and replaces them using a mapfn\n\nNB: TODO: the current type interface leads this object to be detyped if it had a clear type. I hope I can find a way to solve this!","rawStatement":"export const mapValues = async <T, U>(\n  object: { [key: string]: T },\n  mapFn: (value: T) => U | Promise<U>\n) => {\n  const valueObjectParts = await Promise.all(\n    Object.keys(object).map(async (key) => {\n      return { [key]: await mapFn(object[key]) };\n    })\n  );\n\n  return mergeObjectsArray(valueObjectParts);\n};","parameters":{},"types":["nb"],"firstLine":85,"lastLine":89},{"id":"RhmiTQyLQcImZAap","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/tools/util/js-util/src/general.ts","srcFileId":"/general","operationFolderName":"js-util","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/js-util","operationName":"js-util","comment":"maps over all values in an object and replaces them using a mapfn\n\nsync","rawStatement":"export const mapValuesSync = <T, U>(\n  object: { [key: string]: T },\n  mapFn: (value: T) => U\n) => {\n  const valueObjectParts = Object.keys(object).map((key) => {\n    return { [key]: mapFn(object[key]) };\n  });\n\n  return mergeObjectsArray(valueObjectParts);\n};","parameters":{},"types":[],"firstLine":103,"lastLine":107},{"id":"RhmiTQyLQcImZAap","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/tools/util/js-util/src/general.ts","srcFileId":"/general","operationFolderName":"js-util","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/js-util","operationName":"js-util","comment":"DEPRECATED: should refactor everything to use onlyUnique2 and call it onlyUnique again\n\nto be used as a filter. removes duplicates","rawStatement":"export function onlyUnique<T extends unknown>(\n  value: T,\n  index: number,\n  self: T[]\n) {\n  return self.findIndex((v) => v === value) === index;\n}","parameters":{},"types":[],"firstLine":119,"lastLine":123},{"id":"RhmiTQyLQcImZAap","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/tools/util/js-util/src/general.ts","srcFileId":"/general","operationFolderName":"js-util","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/js-util","operationName":"js-util","comment":"function that returns a filter function that can be used as a filter for any array. removes duplicates.\n\noptionally takes a compare function that should return a \"true\" if two instances are equal. if you use this function, make sure to pass a generic of the type the items will have, in order to make this equality function type safe as well","rawStatement":"export const onlyUnique2 =\n  <U>(isEqualFn?: (a: U, b: U) => boolean) =>\n  <T extends U>(value: T, index: number, self: T[]) => {\n    return (\n      self.findIndex((v) => (isEqualFn ? isEqualFn(v, value) : v === value)) ===\n      index\n    );\n  };","parameters":{},"types":[],"firstLine":132,"lastLine":138},{"id":"RhmiTQyLQcImZAap","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/tools/util/js-util/src/general.ts","srcFileId":"/general","operationFolderName":"js-util","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/js-util","operationName":"js-util","comment":"if something is not an array, returns it as the first element of an array\n\nif the input is undefined, an empty array will be returned.\n\nNB: TODO: find out the workings of the array constructor (`Array(\"any value\")`), because maybe it does something very similar. No need to have a dependency then if it's similar.","rawStatement":"export const makeArray = <T>(...arrayOrNotArray: (T | T[] | undefined)[]) => {\n  return arrayOrNotArray\n    .map((arrayOrNot) => {\n      const array: T[] = arrayOrNot\n        ? Array.isArray(arrayOrNot)\n          ? arrayOrNot\n          : [arrayOrNot]\n        : [];\n\n      return array;\n    })\n    .flat();\n};","parameters":{},"types":["nb"],"firstLine":148,"lastLine":154},{"id":"RhmiTQyLQcImZAap","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/tools/util/js-util/src/general.ts","srcFileId":"/general","operationFolderName":"js-util","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/js-util","operationName":"js-util","comment":"not sure if this is the best way, but it does save some lines of code!\n\nmaps over an object's values with a map function","rawStatement":"export function objectValuesMap<\n  T extends { [key: string]: T[string] },\n  U extends unknown\n>(\n  object: T,\n  mapFn: (value: T[string], key: string) => U\n): { [key: string]: U } {\n  return Object.keys(object).reduce(function (result, key) {\n    result[key] = mapFn(object[key], key);\n    return result;\n  }, {} as any);\n}","parameters":{},"types":[],"firstLine":169,"lastLine":173},{"id":"RhmiTQyLQcImZAap","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/tools/util/js-util/src/general.ts","srcFileId":"/general","operationFolderName":"js-util","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/js-util","operationName":"js-util","comment":"takes any type T or an array of T and returns T or the first of the array (which is T)","rawStatement":"export const takeFirst = <T>(arrayOrNot: T | T[]) => {\n  return makeArray(arrayOrNot)[0];\n};","parameters":{},"types":[],"firstLine":187,"lastLine":189},{"id":"RhmiTQyLQcImZAap","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/tools/util/js-util/src/general.ts","srcFileId":"/general","operationFolderName":"js-util","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/js-util","operationName":"js-util","comment":"takes an object and a subset of its keys and returns a subset of that object\n\ninput: { x: \"a\", y: \"b\", z: \"c\" } and [\"x\"]\n\noutput: { x: \"a\" }","rawStatement":"export const getSubsetFromObject = <T>(\n  object: { [key: string]: T },\n  keys: string[]\n) => {\n  const subsetObject = keys.reduce((obj, key) => {\n    return { ...obj, [key]: object[key] };\n  }, {} as { [key: string]: T });\n  return subsetObject;\n};","parameters":{},"types":[],"firstLine":193,"lastLine":199},{"id":"RhmiTQyLQcImZAap","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/tools/util/js-util/src/general.ts","srcFileId":"/general","operationFolderName":"js-util","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/js-util","operationName":"js-util","comment":"useful for cli's that only take strings. This creates an object from a string\n\ninput: \"x:a, y:b, z:c\"\noutput: { x: \"a\", y: \"b\", z: \"c\" }\n\nTODO: would be nice if we can validate this string immediately using a JSON SCHEMA","rawStatement":"export const getObjectFromParamsString = (paramsString: string) =>\n  mergeObjectsArray(\n    paramsString\n      .split(\",\")\n      .map((x) => x.trim().split(\":\"))\n      .map((pair) =>\n        pair[0] && pair[1] ? { [pair[0].trim()]: pair[1] } : null\n      )\n      .filter(notEmpty)\n  );","parameters":{},"types":["todo"],"firstLine":210,"lastLine":217},{"id":"RhmiTQyLQcImZAap","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/tools/util/js-util/src/general.ts","srcFileId":"/general","operationFolderName":"js-util","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/js-util","operationName":"js-util","comment":"sums all parameters in two objects together","rawStatement":"export const sumObjectParameters = <TObject extends { [key: string]: number }>(\n  object1: TObject,\n  object2: TObject\n): TObject => {\n  const objectKeys: (keyof TObject)[] = Object.keys(object1);\n  const summedObject = mergeObjectsArray(\n    objectKeys.map((key) => {\n      const summedObjectPart = { [key]: object1[key] + object2[key] };\n\n      return summedObjectPart;\n    })\n  ) as TObject;\n  // NB: too bad we still need `as TObject` here. I would love to learn how to prevent that\n\n  return summedObject;\n};","parameters":{},"types":[],"firstLine":229,"lastLine":229},{"id":"RhmiTQyLQcImZAap","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/tools/util/js-util/src/general.ts","srcFileId":"/general","operationFolderName":"js-util","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/js-util","operationName":"js-util","comment":"sums all keys of an array of objects, assuming the objects have the same datastructure and assuming the values contain either numbers or undefined","rawStatement":"export const sumAllKeys = <T extends { [key: string]: number | undefined }>(\n  objectArray: T[],\n  keys: (keyof T)[]\n): T => {\n  const sumObject = objectArray.reduce((total, item) => {\n    // NB: not needed normally, but there seems to be some corrupt data here and there\n    if (!item) return total;\n    const newTotal = mergeObjectsArray(\n      keys.map((key) => {\n        const value1: number = total ? total[key] || 0 : 0;\n        const value2: number = item?.[key] || 0;\n\n        const sum =\n          (!total || total[key] === undefined) && item[key] === undefined\n            ? undefined\n            : value1 + value2;\n\n        return { [key]: sum };\n      })\n    ) as T;\n\n    return newTotal;\n  }, null as null | T) as T;\n\n  return sumObject;\n};","parameters":{},"types":[],"firstLine":247,"lastLine":249},{"id":"RhmiTQyLQcImZAap","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/tools/util/js-util/src/general.ts","srcFileId":"/general","operationFolderName":"js-util","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/js-util","operationName":"js-util","comment":"Removes empty values (null or undefined) from your arrays in a type-safe way","rawStatement":"export function notEmpty<TValue>(\n  value: TValue | null | undefined\n): value is TValue {\n  return value !== null && value !== undefined;\n}","parameters":{},"types":[],"firstLine":284,"lastLine":286},{"id":"RhmiTQyLQcImZAap","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/tools/util/js-util/src/general.ts","srcFileId":"/general","operationFolderName":"js-util","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/js-util","operationName":"js-util","comment":"merges two objects: a config object and a defaults object. If the config object has something missing, a default will be used from the defaults object.\n\nIn short: merges two objects, for every parameter, use the default as a fallback\n\nNB: could be useful to rewrite this later if I need multiple levels of defaults... The only provided argument can just be a T[], which reduces that by using deeper and deeper fallbacks. For example, VSCode does this with settings: you have workspace settings, user settings, and global settings","rawStatement":"export const mergeObjectParameters = <T>(\n  config: T | undefined,\n  defaults: T | undefined\n) => {\n  const parameters = Object.keys({\n    ...config,\n    ...defaults,\n  }) as (keyof T)[];\n\n  const mergedConfig = parameters.reduce(\n    (getConfig, p) => ({ ...getConfig, [p]: config?.[p] || defaults?.[p] }),\n    {} as Partial<T>\n  );\n  return mergedConfig;\n};","parameters":{},"types":["nb"],"firstLine":293,"lastLine":299}]