[{"id":"GHiktlGFsIrlsftr","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/tools/util/js-util/src/mapAsync.ts","srcFileId":"/mapAsync","operationFolderName":"js-util","relativeFilePathFromSrc":"/mapAsync.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/js-util","operationName":"js-util","comment":"mapAsync makes it possible to map over an array async without having to do the promise.all afterwards\n\nIt saves a lot of lines of code, and makes it more readable\nExample usage:\n\n\n```ts\n\nconst myNumbers = [1, 2, 3, 4, 5];\n\nconst doubleAsync = (num) => Promise.resolve(num + num);\nconst sqrtAsync = (sum) => Promise.resolve(sum * sum);\nconst halfAsync = (time) => Promise.resolve(time / 2);\n\nconst doubleSqrtHalfs = await mapAsync(myNumbers, doubleAsync)\n.then((sums) => mapAsync(sums, sqrtAsync))\n.then((times) => mapAsync(times, halfAsync));\n```","rawStatement":"export const mapAsync = <T, U>(\n  array: T[],\n  callback: (value: T, index: number, array: T[]) => Promise<U>\n) => {\n  const u = Promise.all(array.map(callback));\n  return u;\n};","parameters":{},"types":[],"firstLine":1,"lastLine":20}]