{
  "createdAt": 1669200488277,
  "updatedAt": 1669200488277,
  "deletedAt": 0,
  "createdFirstAt": 1669200488277,
  "isApiExposed": true,
  "isExported": true,
  "groupAuthorization": {},
  "operationRelativeTypescriptFilePath": "src/parsing/outline.ts",
  "commentsInside": [],
  "rawText": " (\n  markdownParse: MarkdownParse\n): string | undefined => {\n  const titles = markdownParse.content?.map(getTitlesRecursively).flat();\n  const outlineString = printNestedTitles(titles);\n  return outlineString;\n}",
  "name": "getOutline",
  "slug": "get-outline",
  "parameters": [
    {
      "name": "markdownParse",
      "schema": {
        "$ref": "#/definitions/MarkdownParse"
      },
      "simplifiedSchema": {
        "fullComment": "",
        "properties": [
          {
            "name": "fileName",
            "required": false,
            "schema": {
              "fullComment": "if available, this can be the filename of the markdown in this markdown-parse. Can be used for things like merging",
              "type": "string"
            }
          },
          {
            "name": "createdAt",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "openedAt",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "updatedAt",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "deletedAt",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "createdFirstAt",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "parameters",
            "required": true,
            "schema": {
              "fullComment": "parameters found in frontmatter\n\nOur version of frontmatter is a bit simpler than regular frontmatter\n\nNot sure if this is a good idea, but it keeps it simple for our OS\n\nall values parse in a similar way to csv\n\nmake sure that you use quotes if you want to store a string with commas, because commas in a parameter indicate that it is a string array\n\nNB: string arrays are comma separated values, where you can put values with special characters in between quotes",
              "nb": "string arrays are comma separated values, where you can put values with special characters in between quotes",
              "properties": [],
              "type": "object"
            }
          },
          {
            "name": "content",
            "required": false,
            "schema": {
              "fullComment": "structured content based on h1, h2, h3, etc (paragraphs, recursive)",
              "items": [
                {
                  "schema": {
                    "fullComment": "",
                    "properties": [
                      {
                        "name": "level",
                        "required": true,
                        "schema": {
                          "fullComment": "0 is a paragraph 1-6 is h1 until h6",
                          "type": "number"
                        }
                      },
                      {
                        "name": "content",
                        "required": false,
                        "schema": {
                          "type": "string"
                        }
                      },
                      {
                        "name": "markdownEmbed",
                        "required": false,
                        "schema": {
                          "fullComment": "Anything in the format `![alt](src)`\n\nNB: I need to be very clear how this one works",
                          "nb": "I need to be very clear how this one works",
                          "properties": [
                            {
                              "name": "alt",
                              "required": true,
                              "schema": {
                                "type": "string"
                              }
                            },
                            {
                              "name": "src",
                              "required": true,
                              "schema": {
                                "type": "string"
                              }
                            },
                            {
                              "name": "type",
                              "required": true,
                              "schema": {
                                "enum": [
                                  "youtube",
                                  "video",
                                  "image",
                                  "audio",
                                  "markdown",
                                  "json",
                                  "typescript",
                                  "file"
                                ],
                                "fullComment": "type of asset that is being embedded",
                                "type": "string"
                              }
                            }
                          ],
                          "type": "object"
                        }
                      },
                      {
                        "name": "markdownLink",
                        "required": false,
                        "schema": {
                          "fullComment": "Anything in the format `[alt](href)`\n\nIt needs to be clear how this works. There is a convention for this, and I should implement that as good as possible, and document it here",
                          "properties": [
                            {
                              "name": "alt",
                              "required": true,
                              "schema": {
                                "type": "string"
                              }
                            },
                            {
                              "name": "href",
                              "required": true,
                              "schema": {
                                "type": "string"
                              }
                            },
                            {
                              "name": "type",
                              "required": true,
                              "schema": {
                                "enum": [
                                  "youtube",
                                  "video",
                                  "image",
                                  "audio",
                                  "markdown",
                                  "json",
                                  "typescript",
                                  "file"
                                ],
                                "fullComment": "Can be inferred from href\n\ntype of asset that is being embedded",
                                "type": "string"
                              }
                            }
                          ],
                          "type": "object"
                        }
                      },
                      {
                        "name": "title",
                        "required": false,
                        "schema": {
                          "fullComment": "NB: title can also be an empty string (\"\")",
                          "nb": "title can also be an empty string (\"\")",
                          "type": "string"
                        }
                      },
                      {
                        "name": "children",
                        "required": false,
                        "schema": {
                          "fullComment": "all content until the next title. it's either a content array if there's any titles found, or a string[] if it's paragraphs",
                          "items": [
                            {
                              "schema": {
                                "circularRefName": "MarkdownChunk",
                                "properties": [],
                                "type": "object"
                              },
                              "name": "MarkdownChunk"
                            }
                          ],
                          "type": "array"
                        }
                      }
                    ],
                    "type": "object"
                  },
                  "name": "MarkdownChunk"
                }
              ],
              "type": "array"
            }
          },
          {
            "name": "raw",
            "required": true,
            "schema": {
              "fullComment": "raw markdown without frontmatter",
              "type": "string"
            }
          }
        ],
        "type": "object"
      },
      "required": true
    }
  ],
  "description": "low-level function that gets the outline for MarkdownParse\n\nNB: with books usually the pages are referred in the outline. Since that depends on the font size and dimensions, this cannot be done straight from the markdown parse. Eventually we probably need to check the made pdf for its content, maybe there is even a pdf feature that creates an outline for you. There must be more people having this problem.",
  "returnType": {
    "rawType": "string | undefined",
    "typeDefinition": {
      "optional": true,
      "type": "string",
      "allOf": [
        {
          "transform": [
            "trim"
          ]
        },
        {
          "minLength": 1
        }
      ]
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "type": "string"
    }
  },
  "maxIndentationDepth": 1,
  "size": {
    "characters": 619,
    "lines": 9,
    "bytes": 619,
    "bytesPerCharacter": 1,
    "charactersPerLine": 69,
    "linesPerFile": 9,
    "numberOfFiles": 1
  },
  "id": "rjcosrqszgoyolgsuappfbdb"
}