{
  "createdAt": 1669200473087,
  "updatedAt": 1669200473087,
  "deletedAt": 0,
  "createdFirstAt": 1669200473087,
  "isApiExposed": true,
  "isExported": true,
  "groupAuthorization": {},
  "operationRelativeTypescriptFilePath": "src/getTypeDescriptorRecursive.ts",
  "commentsInside": [],
  "rawText": " (\n  schema: JSONSchema7,\n  /**\n   * If true, references will be links, otherwise, just the name of the referred interface\n   */\n  isMarkdown: boolean\n): string => {\n  const refLink = getRefLink(schema.$ref);\n  // console.log({ $ref: schema.$ref, refLink });\n\n  const type = Array.isArray(schema.type) ? schema.type[0] : schema.type;\n\n  if (refLink) {\n    return isMarkdown ? `\\`${refLink}\\`` : refLink;\n  } //(#${getImplicitId(refLink)})\n\n  if (schema.enum) {\n    const enumString = `${schema.enum.map(String).join(\" / \")}`;\n    return type === \"number\" ? `${enumString} (number)` : enumString;\n  }\n\n  if (type === \"boolean\") return \"boolean\";\n  if (type === \"string\") return \"string\";\n  if (type === \"number\" || type === \"integer\") return \"number\";\n  if (type === \"null\") return \"null\";\n  if (type === \"array\") {\n    const items = getSchemaItems(schema);\n\n    const itemsString = items\n      .map((item) => getTypeDescriptorRecursive(item, true))\n      .join(\" | \");\n\n    return `${items.length > 1 ? `(${itemsString})` : itemsString}[]`;\n  }\n\n  //   NB: only type object is left now\n\n  const properties = getProperties(schema);\n\n  const additionalProperties = getSchema(schema.additionalProperties);\n  const additionalPropertiesString = additionalProperties\n    ? `[key: string]: ${getTypeDescriptorRecursive(\n        additionalProperties,\n        isMarkdown\n      )}`\n    : \"\";\n\n  const propertyStrings = properties\n    .map((property) => {\n      const propertyString = `${property.name}${\n        property?.required ? \":\" : \"?:\"\n      } ${getTypeDescriptorRecursive(property.schema, isMarkdown)}`;\n\n      return propertyString;\n    })\n    .concat(additionalPropertiesString);\n\n  return isMarkdown\n    ? noNewlines(`{ ${propertyStrings.join(\", \\n\")} }`)!\n    : propertyStrings.join(\", \");\n}",
  "name": "getTypeDescriptorRecursive",
  "slug": "get-type-descriptor-recursive",
  "parameters": [
    {
      "name": "schema",
      "schema": {
        "$ref": "#/definitions/JSONSchema7"
      },
      "simplifiedSchema": {
        "fullComment": "",
        "properties": [
          {
            "name": "$id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$ref",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$comment",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$defs",
            "required": false,
            "schema": {
              "properties": [],
              "type": "object"
            }
          },
          {
            "name": "type",
            "required": false,
            "schema": {
              "properties": [],
              "type": "object"
            }
          },
          {
            "name": "enum",
            "required": false,
            "schema": {
              "items": [
                {
                  "schema": {
                    "fullComment": "Primitive type",
                    "properties": [],
                    "type": "object"
                  },
                  "name": "JSONSchema7Type"
                }
              ],
              "type": "array"
            }
          },
          {
            "name": "const",
            "required": false,
            "schema": {
              "fullComment": "Primitive type",
              "properties": [],
              "type": "object"
            }
          },
          {
            "name": "multipleOf",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "maximum",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "exclusiveMaximum",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "minimum",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "exclusiveMinimum",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "maxLength",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "minLength",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "items",
            "required": false,
            "schema": {
              "properties": [],
              "type": "object"
            }
          },
          {
            "name": "additionalItems",
            "required": false,
            "schema": {
              "fullComment": "JSON Schema v7",
              "properties": [],
              "type": "object"
            }
          },
          {
            "name": "maxItems",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "minItems",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "uniqueItems",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "contains",
            "required": false,
            "schema": {
              "circularRefName": "JSONSchema7",
              "properties": [],
              "type": "object"
            }
          },
          {
            "name": "maxProperties",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "minProperties",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "required",
            "required": false,
            "schema": {
              "items": [
                {
                  "schema": {
                    "type": "string"
                  },
                  "name": null
                }
              ],
              "type": "array"
            }
          },
          {
            "name": "properties",
            "required": false,
            "schema": {
              "properties": [],
              "type": "object"
            }
          },
          {
            "name": "patternProperties",
            "required": false,
            "schema": {
              "properties": [],
              "type": "object"
            }
          },
          {
            "name": "additionalProperties",
            "required": false,
            "schema": {
              "fullComment": "JSON Schema v7",
              "properties": [],
              "type": "object"
            }
          },
          {
            "name": "dependencies",
            "required": false,
            "schema": {
              "properties": [],
              "type": "object"
            }
          },
          {
            "name": "propertyNames",
            "required": false,
            "schema": {
              "fullComment": "JSON Schema v7",
              "properties": [],
              "type": "object"
            }
          },
          {
            "name": "if",
            "required": false,
            "schema": {
              "fullComment": "JSON Schema v7",
              "properties": [],
              "type": "object"
            }
          },
          {
            "name": "then",
            "required": false,
            "schema": {
              "fullComment": "JSON Schema v7",
              "properties": [],
              "type": "object"
            }
          },
          {
            "name": "else",
            "required": false,
            "schema": {
              "fullComment": "JSON Schema v7",
              "properties": [],
              "type": "object"
            }
          },
          {
            "name": "allOf",
            "required": false,
            "schema": {
              "items": [
                {
                  "schema": {
                    "fullComment": "JSON Schema v7",
                    "properties": [],
                    "type": "object"
                  },
                  "name": "JSONSchema7Definition"
                }
              ],
              "type": "array"
            }
          },
          {
            "name": "anyOf",
            "required": false,
            "schema": {
              "items": [
                {
                  "schema": {
                    "fullComment": "JSON Schema v7",
                    "properties": [],
                    "type": "object"
                  },
                  "name": "JSONSchema7Definition"
                }
              ],
              "type": "array"
            }
          },
          {
            "name": "oneOf",
            "required": false,
            "schema": {
              "items": [
                {
                  "schema": {
                    "fullComment": "JSON Schema v7",
                    "properties": [],
                    "type": "object"
                  },
                  "name": "JSONSchema7Definition"
                }
              ],
              "type": "array"
            }
          },
          {
            "name": "not",
            "required": false,
            "schema": {
              "fullComment": "JSON Schema v7",
              "properties": [],
              "type": "object"
            }
          },
          {
            "name": "format",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contentMediaType",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contentEncoding",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "definitions",
            "required": false,
            "schema": {
              "properties": [],
              "type": "object"
            }
          },
          {
            "name": "title",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "default",
            "required": false,
            "schema": {
              "fullComment": "Primitive type",
              "properties": [],
              "type": "object"
            }
          },
          {
            "name": "readOnly",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "writeOnly",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "examples",
            "required": false,
            "schema": {
              "fullComment": "Primitive type",
              "properties": [],
              "type": "object"
            }
          }
        ],
        "type": "object"
      },
      "required": true
    },
    {
      "name": "isMarkdown",
      "schema": {
        "type": "boolean",
        "description": "If true, references will be links, otherwise, just the name of the referred interface"
      },
      "simplifiedSchema": {
        "fullComment": "If true, references will be links, otherwise, just the name of the referred interface",
        "type": "boolean"
      },
      "required": true
    }
  ],
  "description": "Returns a single line descriptor of the type of a json schema. Can be used in markdown tables.",
  "returnType": {
    "rawType": "String",
    "typeDefinition": {
      "optional": false,
      "$ref": "#/definitions/String"
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 4,
  "size": {
    "characters": 1888,
    "lines": 61,
    "bytes": 1888,
    "bytesPerCharacter": 1,
    "charactersPerLine": 31,
    "linesPerFile": 61,
    "numberOfFiles": 1
  },
  "id": "cxdyfgxqueddaxlvigoacdkx"
}