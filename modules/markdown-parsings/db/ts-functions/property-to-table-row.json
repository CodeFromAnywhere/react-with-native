{
  "createdAt": 1669200508396,
  "updatedAt": 1669200508396,
  "deletedAt": 0,
  "createdFirstAt": 1669200508396,
  "isApiExposed": true,
  "isExported": true,
  "groupAuthorization": {},
  "operationRelativeTypescriptFilePath": "src/util/propertyToTableRow.ts",
  "commentsInside": [],
  "rawText": " (\n  property: SimplifiedSchemaProperty\n): string => {\n  const requiredString = property.required ? \"\" : \"(optional)\";\n\n  const descriptionString = noNewlines(property.schema.description) || \"\";\n\n  // TODO: stack deeper objects and make sure to also print tables for those\n  return `| ${property.name} ${requiredString} | ${property.schema.type} | ${descriptionString} |`;\n}",
  "name": "propertyToTableRow",
  "slug": "property-to-table-row",
  "parameters": [
    {
      "name": "property",
      "schema": {
        "$ref": "#/definitions/SimplifiedSchemaProperty"
      },
      "simplifiedSchema": {
        "fullComment": "",
        "properties": [
          {
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schema",
            "required": true,
            "schema": {
              "fullComment": "JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form",
              "properties": [
                {
                  "name": "todo",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "discussion",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "idea",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "later",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "nb",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "title",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "section",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "description",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "type",
                  "required": true,
                  "schema": {
                    "enum": [
                      "string",
                      "number",
                      "boolean",
                      "object",
                      "array",
                      "null"
                    ],
                    "fullComment": "- string\n- number\n- boolean\n- object\n- array\n- null\n\nNB: Omit doesn't work for the indexer! This would be the type: Omit<JSONSchema7TypeName, \"integer\">;\n\n",
                    "nb": "Omit doesn't work for the indexer! This would be the type: Omit<JSONSchema7TypeName, \"integer\">;",
                    "type": "string"
                  }
                },
                {
                  "name": "circularRefName",
                  "required": false,
                  "schema": {
                    "fullComment": "sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here",
                    "type": "string"
                  }
                },
                {
                  "name": "enum",
                  "required": false,
                  "schema": {
                    "fullComment": "in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think",
                    "items": [
                      {
                        "schema": {
                          "fullComment": "Primitive type",
                          "properties": [],
                          "type": "object"
                        },
                        "name": "JSONSchema7Type"
                      }
                    ],
                    "type": "array"
                  }
                },
                {
                  "name": "properties",
                  "required": false,
                  "schema": {
                    "fullComment": "in case of object, this will always appear",
                    "items": [
                      {
                        "schema": {
                          "circularRefName": "SimplifiedSchemaProperty",
                          "properties": [],
                          "type": "object"
                        },
                        "name": "SimplifiedSchemaProperty"
                      }
                    ],
                    "type": "array"
                  }
                },
                {
                  "name": "items",
                  "required": false,
                  "schema": {
                    "fullComment": "in case of arrays, this will always appear",
                    "items": [
                      {
                        "schema": {
                          "fullComment": "",
                          "properties": [
                            {
                              "name": "name",
                              "required": true,
                              "schema": {
                                "fullComment": "name in case of it being a reference, otherwise null",
                                "type": "string"
                              }
                            },
                            {
                              "name": "schema",
                              "required": true,
                              "schema": {
                                "circularRefName": "SimplifiedSchema",
                                "properties": [],
                                "type": "object"
                              }
                            }
                          ],
                          "type": "object"
                        },
                        "name": "SimplifiedSchemaItem"
                      }
                    ],
                    "type": "array"
                  }
                },
                {
                  "name": "fullComment",
                  "required": false,
                  "schema": {
                    "fullComment": "Full doccomment, parsed without all stars syntax.\n\nNB: besides this, every `CommentType` can optionally also be found as a property on the `SimplifiedSchema`",
                    "nb": "besides this, every `CommentType` can optionally also be found as a property on the `SimplifiedSchema`",
                    "type": "string"
                  }
                }
              ],
              "type": "object"
            }
          },
          {
            "name": "required",
            "required": true,
            "schema": {
              "fullComment": "NB: can't we put this in the SimplifiedSchema itself?",
              "nb": "can't we put this in the SimplifiedSchema itself?",
              "type": "boolean"
            }
          }
        ],
        "type": "object"
      },
      "required": true
    }
  ],
  "description": "",
  "returnType": {
    "rawType": "String",
    "typeDefinition": {
      "optional": false,
      "$ref": "#/definitions/String"
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 1,
  "size": {
    "characters": 374,
    "lines": 10,
    "bytes": 374,
    "bytesPerCharacter": 1,
    "charactersPerLine": 37,
    "linesPerFile": 10,
    "numberOfFiles": 1
  },
  "id": "iowcfrelowxtomkrtagdpajq"
}