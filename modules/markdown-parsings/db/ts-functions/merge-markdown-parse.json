{
  "createdAt": 1669200486125,
  "updatedAt": 1669200486125,
  "deletedAt": 0,
  "createdFirstAt": 1669200486125,
  "isApiExposed": true,
  "isExported": true,
  "groupAuthorization": {},
  "operationRelativeTypescriptFilePath": "src/parsing/merge.ts",
  "commentsInside": [],
  "rawText": " (\n  markdownParses: MarkdownParse[],\n  fileName?: string\n): { merged: MarkdownParse; outline: MergedMarkdownOutlineUrl[] } => {\n  const allParameters = mergeObjectsArray(\n    markdownParses.map((x) => x.parameters)\n  );\n\n  const allMarkdownChunks = markdownParses.map((x) => {\n    const newMarkodwnChunk: MarkdownChunk = {\n      children: upMarkdownChunkLevelRecursively(x.content),\n      level: 1,\n      content: undefined,\n      title: x.fileName\n        ? humanCase(removeExtensionsFromPath(x.fileName))\n        : undefined,\n    };\n\n    return newMarkodwnChunk;\n  });\n\n  const newMarkdownParse: MarkdownParse = {\n    parameters: allParameters,\n    raw: markdownChunksToMarkdownStringRecursive(allMarkdownChunks),\n    content: allMarkdownChunks,\n    fileName,\n  };\n\n  const outline: MergedMarkdownOutlineUrl[] = markdownParses\n    .map((markdownParse) => {\n      if (!markdownParse.fileName) return;\n\n      const title = humanCase(markdownParse.fileName);\n\n      const implicitId = getImplicitId(title);\n      return {\n        title,\n        // NB: because the title in the markdownparse is humancase, we need to slugify that to get the hashtagpath\n        hashtagPath: implicitId,\n      };\n    })\n    .filter(notEmpty);\n\n  return { merged: newMarkdownParse, outline };\n}",
  "name": "mergeMarkdownParse",
  "slug": "merge-markdown-parse",
  "parameters": [
    {
      "name": "markdownParses",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/MarkdownParse"
        }
      },
      "simplifiedSchema": {
        "items": [
          {
            "schema": {
              "fullComment": "",
              "properties": [
                {
                  "name": "fileName",
                  "required": false,
                  "schema": {
                    "fullComment": "if available, this can be the filename of the markdown in this markdown-parse. Can be used for things like merging",
                    "type": "string"
                  }
                },
                {
                  "name": "createdAt",
                  "required": false,
                  "schema": {
                    "type": "number"
                  }
                },
                {
                  "name": "openedAt",
                  "required": false,
                  "schema": {
                    "type": "number"
                  }
                },
                {
                  "name": "updatedAt",
                  "required": false,
                  "schema": {
                    "type": "number"
                  }
                },
                {
                  "name": "deletedAt",
                  "required": false,
                  "schema": {
                    "type": "number"
                  }
                },
                {
                  "name": "createdFirstAt",
                  "required": false,
                  "schema": {
                    "type": "number"
                  }
                },
                {
                  "name": "parameters",
                  "required": true,
                  "schema": {
                    "fullComment": "parameters found in frontmatter\n\nOur version of frontmatter is a bit simpler than regular frontmatter\n\nNot sure if this is a good idea, but it keeps it simple for our OS\n\nall values parse in a similar way to csv\n\nmake sure that you use quotes if you want to store a string with commas, because commas in a parameter indicate that it is a string array\n\nNB: string arrays are comma separated values, where you can put values with special characters in between quotes",
                    "nb": "string arrays are comma separated values, where you can put values with special characters in between quotes",
                    "properties": [],
                    "type": "object"
                  }
                },
                {
                  "name": "content",
                  "required": false,
                  "schema": {
                    "fullComment": "structured content based on h1, h2, h3, etc (paragraphs, recursive)",
                    "items": [
                      {
                        "schema": {
                          "fullComment": "",
                          "properties": [
                            {
                              "name": "level",
                              "required": true,
                              "schema": {
                                "fullComment": "0 is a paragraph 1-6 is h1 until h6",
                                "type": "number"
                              }
                            },
                            {
                              "name": "content",
                              "required": false,
                              "schema": {
                                "type": "string"
                              }
                            },
                            {
                              "name": "markdownEmbed",
                              "required": false,
                              "schema": {
                                "fullComment": "Anything in the format `![alt](src)`\n\nNB: I need to be very clear how this one works",
                                "nb": "I need to be very clear how this one works",
                                "properties": [
                                  {
                                    "name": "alt",
                                    "required": true,
                                    "schema": {
                                      "type": "string"
                                    }
                                  },
                                  {
                                    "name": "src",
                                    "required": true,
                                    "schema": {
                                      "type": "string"
                                    }
                                  },
                                  {
                                    "name": "type",
                                    "required": true,
                                    "schema": {
                                      "enum": [
                                        "youtube",
                                        "video",
                                        "image",
                                        "audio",
                                        "markdown",
                                        "json",
                                        "typescript",
                                        "file"
                                      ],
                                      "fullComment": "type of asset that is being embedded",
                                      "type": "string"
                                    }
                                  }
                                ],
                                "type": "object"
                              }
                            },
                            {
                              "name": "markdownLink",
                              "required": false,
                              "schema": {
                                "fullComment": "Anything in the format `[alt](href)`\n\nIt needs to be clear how this works. There is a convention for this, and I should implement that as good as possible, and document it here",
                                "properties": [
                                  {
                                    "name": "alt",
                                    "required": true,
                                    "schema": {
                                      "type": "string"
                                    }
                                  },
                                  {
                                    "name": "href",
                                    "required": true,
                                    "schema": {
                                      "type": "string"
                                    }
                                  },
                                  {
                                    "name": "type",
                                    "required": true,
                                    "schema": {
                                      "enum": [
                                        "youtube",
                                        "video",
                                        "image",
                                        "audio",
                                        "markdown",
                                        "json",
                                        "typescript",
                                        "file"
                                      ],
                                      "fullComment": "Can be inferred from href\n\ntype of asset that is being embedded",
                                      "type": "string"
                                    }
                                  }
                                ],
                                "type": "object"
                              }
                            },
                            {
                              "name": "title",
                              "required": false,
                              "schema": {
                                "fullComment": "NB: title can also be an empty string (\"\")",
                                "nb": "title can also be an empty string (\"\")",
                                "type": "string"
                              }
                            },
                            {
                              "name": "children",
                              "required": false,
                              "schema": {
                                "fullComment": "all content until the next title. it's either a content array if there's any titles found, or a string[] if it's paragraphs",
                                "items": [
                                  {
                                    "schema": {
                                      "circularRefName": "MarkdownChunk",
                                      "properties": [],
                                      "type": "object"
                                    },
                                    "name": "MarkdownChunk"
                                  }
                                ],
                                "type": "array"
                              }
                            }
                          ],
                          "type": "object"
                        },
                        "name": "MarkdownChunk"
                      }
                    ],
                    "type": "array"
                  }
                },
                {
                  "name": "raw",
                  "required": true,
                  "schema": {
                    "fullComment": "raw markdown without frontmatter",
                    "type": "string"
                  }
                }
              ],
              "type": "object"
            },
            "name": "MarkdownParse"
          }
        ],
        "type": "array"
      },
      "required": true
    },
    {
      "name": "fileName",
      "schema": {
        "type": "string"
      },
      "simplifiedSchema": {
        "type": "string"
      },
      "required": false
    }
  ],
  "description": "Merges multiple markdown parses to create a new markdown parse",
  "returnType": {
    "rawType": "{ merged: import(\"/Users/king/King/operations/tools/types/code-types/build/MarkdownParse\").MarkdownParse; outline: import(\"/Users/king/King/operations/tools/parsing/file-conversion/md/markdown-parsings/src/parsing/merge\").MergedMarkdownOutlineUrl[]; }",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 4,
  "size": {
    "characters": 1336,
    "lines": 45,
    "bytes": 1336,
    "bytesPerCharacter": 1,
    "charactersPerLine": 30,
    "linesPerFile": 45,
    "numberOfFiles": 1
  },
  "id": "mmgrtuyjajzhzpbfbsjowjhw"
}