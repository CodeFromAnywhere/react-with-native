{
  "createdAt": 1669200491434,
  "updatedAt": 1669200491434,
  "deletedAt": 0,
  "createdFirstAt": 1669200491434,
  "isApiExposed": true,
  "isExported": true,
  "groupAuthorization": {},
  "operationRelativeTypescriptFilePath": "src/parsing/parsing.ts",
  "commentsInside": [],
  "rawText": " (\n  markdownChunks: MarkdownChunk[] | undefined\n): MarkdownChunk[] | undefined => {\n  if (!markdownChunks) return;\n\n  const newMarkdownChunks: MarkdownChunk[] = markdownChunks.map((chunk) => ({\n    ...chunk,\n    level: chunk.level + 1,\n    children: upMarkdownChunkLevelRecursively(chunk.children),\n  }));\n\n  return newMarkdownChunks;\n}",
  "name": "upMarkdownChunkLevelRecursively",
  "slug": "up-markdown-chunk-level-recursively",
  "parameters": [
    {
      "name": "markdownChunks",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/MarkdownChunk"
        }
      },
      "simplifiedSchema": {
        "items": [
          {
            "schema": {
              "fullComment": "",
              "properties": [
                {
                  "name": "level",
                  "required": true,
                  "schema": {
                    "fullComment": "0 is a paragraph 1-6 is h1 until h6",
                    "type": "number"
                  }
                },
                {
                  "name": "content",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "markdownEmbed",
                  "required": false,
                  "schema": {
                    "fullComment": "Anything in the format `![alt](src)`\n\nNB: I need to be very clear how this one works",
                    "nb": "I need to be very clear how this one works",
                    "properties": [
                      {
                        "name": "alt",
                        "required": true,
                        "schema": {
                          "type": "string"
                        }
                      },
                      {
                        "name": "src",
                        "required": true,
                        "schema": {
                          "type": "string"
                        }
                      },
                      {
                        "name": "type",
                        "required": true,
                        "schema": {
                          "enum": [
                            "youtube",
                            "video",
                            "image",
                            "audio",
                            "markdown",
                            "json",
                            "typescript",
                            "file"
                          ],
                          "fullComment": "type of asset that is being embedded",
                          "type": "string"
                        }
                      }
                    ],
                    "type": "object"
                  }
                },
                {
                  "name": "markdownLink",
                  "required": false,
                  "schema": {
                    "fullComment": "Anything in the format `[alt](href)`\n\nIt needs to be clear how this works. There is a convention for this, and I should implement that as good as possible, and document it here",
                    "properties": [
                      {
                        "name": "alt",
                        "required": true,
                        "schema": {
                          "type": "string"
                        }
                      },
                      {
                        "name": "href",
                        "required": true,
                        "schema": {
                          "type": "string"
                        }
                      },
                      {
                        "name": "type",
                        "required": true,
                        "schema": {
                          "enum": [
                            "youtube",
                            "video",
                            "image",
                            "audio",
                            "markdown",
                            "json",
                            "typescript",
                            "file"
                          ],
                          "fullComment": "Can be inferred from href\n\ntype of asset that is being embedded",
                          "type": "string"
                        }
                      }
                    ],
                    "type": "object"
                  }
                },
                {
                  "name": "title",
                  "required": false,
                  "schema": {
                    "fullComment": "NB: title can also be an empty string (\"\")",
                    "nb": "title can also be an empty string (\"\")",
                    "type": "string"
                  }
                },
                {
                  "name": "children",
                  "required": false,
                  "schema": {
                    "fullComment": "all content until the next title. it's either a content array if there's any titles found, or a string[] if it's paragraphs",
                    "items": [
                      {
                        "schema": {
                          "circularRefName": "MarkdownChunk",
                          "properties": [],
                          "type": "object"
                        },
                        "name": "MarkdownChunk"
                      }
                    ],
                    "type": "array"
                  }
                }
              ],
              "type": "object"
            },
            "name": "MarkdownChunk"
          }
        ],
        "type": "array"
      },
      "required": false
    }
  ],
  "description": "Ups the levels of the markdownChunk array, recursively.\n\nCan be useful for merging multiple markdown sources",
  "returnType": {
    "rawType": "import(\"/Users/king/King/operations/tools/types/code-types/build/MarkdownParse\").MarkdownChunk[] | undefined",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 2,
  "size": {
    "characters": 445,
    "lines": 15,
    "bytes": 445,
    "bytesPerCharacter": 1,
    "charactersPerLine": 30,
    "linesPerFile": 15,
    "numberOfFiles": 1
  },
  "id": "ytcglssnyqexquprgaetiuhz"
}