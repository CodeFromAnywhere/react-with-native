{
  "createdAt": 1669200501290,
  "updatedAt": 1669200501290,
  "deletedAt": 0,
  "createdFirstAt": 1669200501290,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "tsInterfaceToMarkdownString",
  "slug": "ts-interface-to-markdown-string",
  "operationRelativeTypescriptFilePath": "src/tsInterfaceToMarkdownString.ts",
  "type": {
    "rawType": "(tsInterface: import(\"/Users/king/King/operations/tools/types/code-types/build/TsInterface\").TsInterface) => string",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "(\n  tsInterface: TsInterface\n): string => {\n  const icon = tsInterface.isDbModel ? \"ðŸ”¸\" : \"ðŸ”¹\";\n\n  const titleString = `# ${icon} ${tsInterface.name}`;\n  const storageMethodString = tsInterface.dbStorageMethod\n    ? `${tsInterface.dbStorageMethod} model\\n\\n`\n    : undefined;\n\n  // const operationName = tsInterface.operationName\n  //   ? `(from: \\`${tsInterface.operationName}\\`)`\n  //   : undefined;\n\n  // const interfaceText = `\\`\\`\\`ts\\n${tsInterface.rawText}\\n\\`\\`\\``;\n\n  const interfaceText = simplifiedSchemaToMarkdownString(\n    tsInterface.type.simplifiedSchema,\n    undefined,\n    true,\n    2\n  );\n\n  const alineas: (string | undefined)[] = [\n    titleString,\n    // operationName,\n    storageMethodString,\n    tsInterface.description,\n    interfaceText,\n  ];\n\n  return alineas.filter(notEmpty).join(\"\\n\\n\");\n}",
  "description": "properties, their type, and their description\n\nuse simplifiedJsonSchema, but split up nested things into multiple tables (ive written a thing for splitting up nested objects before, use that)",
  "id": "mvcgtrcqmtcxnigppjmzcprs"
}