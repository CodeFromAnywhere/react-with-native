{
  "createdAt": 1669200471269,
  "updatedAt": 1669200471269,
  "deletedAt": 0,
  "createdFirstAt": 1669200471269,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "getPublicMarkdownNestedPathObject",
  "slug": "get-public-markdown-nested-path-object",
  "operationRelativeTypescriptFilePath": "src/getPublicMarkdownNestedObject.ts",
  "type": {
    "rawType": "(absoluteFolderPath: string) => Promise<import(\"/Users/king/King/operations/tools/types/recursive-types/build/NestedObject\").NestedObject<string>>",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "async (\n  absoluteFolderPath: string\n): Promise<NestedObject<string>> => {\n  const promises = (\n    await getPublicMarkdownFilePaths(absoluteFolderPath, true)\n  ).map(async (result) => {\n    const name = getFolderJs(removeExtensionsFromPath(result.path));\n\n    const nestedPathObjectOrPath: NestedObject<string> | string =\n      result.isFolder\n        ? await getPublicMarkdownNestedPathObject(result.path)\n        : result.path;\n\n    return {\n      [name]: nestedPathObjectOrPath,\n    };\n  });\n\n  const completeNestedObject: NestedObject<string> = mergeObjectsArray(\n    await Promise.all(promises)\n  );\n\n  return completeNestedObject;\n}",
  "description": "Recursively searches a folder for public markdown files, and returns a `NestedObject` with the keys being the file or folder names, and the leafs being the absolute file paths.\n\nFile and folder names are stripped (number prefixes are removed, )\n\nexample:\n```json\n{\n\"README\": \"path/path/README.md\"\n\"folder1\":{\n\"README\": \"path/path/folder1/REAMDE.md\"\n\"file1\": \"path/path/folder1/file1.md\",\n}\n}",
  "id": "fifmnpgjlrtqxekykykblscv"
}