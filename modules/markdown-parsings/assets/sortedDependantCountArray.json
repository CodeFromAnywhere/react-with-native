[
  {
    "tsVariable": {
      "createdAt": 1667378806366,
      "updatedAt": 1667378806366,
      "deletedAt": 0,
      "createdFirstAt": 1667378806366,
      "classification": "const",
      "comments": [],
      "isExported": true,
      "name": "path",
      "slug": "path",
      "operationRelativeTypescriptFilePath": "src/path.ts",
      "type": {
        "rawType": "{ relative: (from: string, to: string) => string; parse: (path: string) => import(\"path\").ParsedPath; basename: (path: string, suffix?: string | undefined) => string; delimiter: \";\" | \":\"; dirname: (path: string) => string; extname: (path: string) => string; format: (pathObject: import(\"path\").FormatInputPathObject) => string; isAbsolute: (path: string) => boolean; join: (...paths: string[]) => string; normalize: (path: string) => string; resolve: (...paths: string[]) => string; sep: \"/\" | \"\\\\\"; }",
        "typeDefinition": {
          "type": "object",
          "properties": {
            "relative": {
              "type": "object",
              "properties": {}
            },
            "parse": {
              "type": "object",
              "properties": {}
            },
            "basename": {
              "type": "object",
              "properties": {}
            },
            "delimiter": {
              "enum": [
                ";",
                ":"
              ],
              "x-enumNames": [
                ";",
                ":"
              ],
              "type": "string"
            },
            "dirname": {
              "type": "object",
              "properties": {}
            },
            "extname": {
              "type": "object",
              "properties": {}
            },
            "format": {
              "type": "object",
              "properties": {}
            },
            "isAbsolute": {
              "type": "object",
              "properties": {}
            },
            "join": {
              "type": "object",
              "properties": {}
            },
            "normalize": {
              "type": "object",
              "properties": {}
            },
            "resolve": {
              "type": "object",
              "properties": {}
            },
            "sep": {
              "enum": [
                "/",
                "\\\\"
              ],
              "x-enumNames": [
                "/",
                "\\\\"
              ],
              "type": "string"
            }
          },
          "required": [
            "relative",
            "parse",
            "basename",
            "delimiter",
            "dirname",
            "extname",
            "format",
            "isAbsolute",
            "join",
            "normalize",
            "resolve",
            "sep"
          ],
          "optional": false
        },
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": true,
        "isPrimitive": false,
        "isEnumLiteral": false,
        "simplifiedSchema": {
          "properties": [
            {
              "name": "relative",
              "required": true,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "parse",
              "required": true,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "basename",
              "required": true,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "delimiter",
              "required": true,
              "schema": {
                "enum": [
                  ";",
                  ":"
                ],
                "type": "string"
              }
            },
            {
              "name": "dirname",
              "required": true,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "extname",
              "required": true,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "format",
              "required": true,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "isAbsolute",
              "required": true,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "join",
              "required": true,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "normalize",
              "required": true,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "resolve",
              "required": true,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "sep",
              "required": true,
              "schema": {
                "enum": [
                  "/",
                  "\\\\"
                ],
                "type": "string"
              }
            }
          ],
          "type": "object"
        }
      },
      "value": "{\n  relative,\n  parse,\n  basename,\n  delimiter,\n  dirname,\n  extname,\n  format,\n  isAbsolute,\n  join,\n  normalize,\n  resolve,\n  sep,\n}",
      "description": "",
      "id": "equcdyzdhtakgrhreilpufcw",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-variables/path.json",
      "operationRelativePath": "/db/ts-variables/path.json"
    },
    "externalDependantFiles": [
      "/operations/tools/asset/asset-functions-node/db/ts-imports.json",
      "/operations/tools/control-fs/get-associated-md/db/ts-imports.json",
      "/operations/tools/control-fs/get-available-folder-path/db/ts-imports.json",
      "/operations/tools/control-fs/get-package-json/db/ts-imports.json",
      "/operations/tools/control-fs/get-package-source-paths/db/ts-imports.json",
      "/operations/tools/control-fs/get-ts-config/db/ts-imports.json",
      "/operations/tools/control-fs/path-util/db/ts-imports.json",
      "/operations/tools/control-fs/set-json-key/db/ts-imports.json",
      "/operations/tools/control-fs/watch-folders/db/ts-imports.json",
      "/operations/tools/control-fs/write-to-assets/db/ts-imports.json",
      "/operations/tools/control-project/all/db/ts-imports.json",
      "/operations/tools/control-project/deprecated/make-file-type/db/ts-imports.json",
      "/operations/tools/control-project/explore-project/db/ts-imports.json",
      "/operations/tools/control-project/get-all-operation-source-paths/db/ts-imports.json",
      "/operations/tools/control-project/get-path/db/ts-imports.json",
      "/operations/tools/control-project/k-explore/db/ts-imports.json",
      "/operations/tools/control-project/operation-util/db/ts-imports.json",
      "/operations/tools/control-system/play-music/db/ts-imports.json",
      "/operations/tools/control-system/vscode-open/db/ts-imports.json",
      "/operations/tools/database/db-recipes/db/ts-imports.json",
      "/operations/tools/database/fs-orm/db/ts-imports.json",
      "/operations/tools/deployment/bundling/bundle-util/db/ts-imports.json",
      "/operations/tools/deployment/bundling/create-backup/db/ts-imports.json",
      "/operations/tools/deployment/bundling/create-distribution/db/ts-imports.json",
      "/operations/tools/deployment/bundling/generate-bundle/db/ts-imports.json",
      "/operations/tools/deployment/bundling/yarn-install-new-distribution/db/ts-imports.json",
      "/operations/tools/deployment/deprecated/sensible/sensible/db/ts-imports.json",
      "/operations/tools/deployment/deprecated/sensible/sensible-server/db/ts-imports.json",
      "/operations/tools/interfaces/api/function-server/db/ts-imports.json",
      "/operations/tools/interfaces/api/function-server-endpoints/db/ts-imports.json",
      "/operations/tools/interfaces/cli/cli-version-updates/db/ts-imports.json",
      "/operations/tools/interfaces/cli/function-util/db/ts-imports.json",
      "/operations/tools/language/simplify-text/db/ts-imports.json",
      "/operations/tools/markdown-reader/augmented-words/db/ts-imports.json",
      "/operations/tools/markdown-reader/markdown-reader-functions/db/ts-imports.json",
      "/operations/tools/p2p/peer-functions/db/ts-imports.json",
      "/operations/tools/parsing/file-conversion/md/markdown-parsings/db/ts-imports.json",
      "/operations/tools/parsing/read-files/read-csv-file/db/ts-imports.json",
      "/operations/tools/parsing/read-files/read-kvmd-file/db/ts-imports.json",
      "/operations/tools/parsing/read-files/read-markdown-file/db/ts-imports.json",
      "/operations/tools/parsing/read-files/read-typescript-file/db/ts-imports.json",
      "/operations/tools/typescript/compile-typescript/db/ts-imports.json",
      "/operations/tools/typescript/generate-index/db/ts-imports.json",
      "/operations/tools/typescript/generate-sdk-operations/db/ts-imports.json",
      "/operations/tools/typescript/get-imports-exports/db/ts-imports.json",
      "/operations/tools/typescript/get-missing-dependencies/db/ts-imports.json",
      "/operations/tools/typescript/index-typescript/db/ts-imports.json",
      "/operations/tools/typescript/minify-build/db/ts-imports.json",
      "/operations/tools/typescript/new-template/db/ts-imports.json",
      "/operations/tools/typescript/rebuild-operation/db/ts-imports.json",
      "/operations/tools/typescript/rename-operation/db/ts-imports.json",
      "/operations/tools/typescript/testing/k-test/db/ts-imports.json",
      "/operations/tools/typescript/ts-morph-util/db/ts-imports.json",
      "/operations/tools/util/geo-parse/db/ts-imports.json",
      "/operations/tools/util/k-dev/db/ts-imports.json",
      "/operations/tools/util/nodemon/db/ts-imports.json",
      "/operations/tools/util/run-child-process/db/ts-imports.json",
      "/operations/tools/writer/writer-functions/db/ts-imports.json",
      "/operations/niches/code-from-anywhere/bootcamp-operations/course-basics/db/ts-imports.json",
      "/operations/niches/sprent/parse-images/db/ts-imports.json",
      "/operations/niches/sprent/sprent-migrate/db/ts-imports.json"
    ]
  },
  {
    "tsVariable": {
      "createdAt": 1667378796901,
      "updatedAt": 1667378796901,
      "deletedAt": 0,
      "createdFirstAt": 1667378796901,
      "classification": "const",
      "comments": [],
      "isExported": true,
      "name": "fs",
      "slug": "fs",
      "operationRelativeTypescriptFilePath": "src/fs.ts",
      "type": {
        "rawType": "{ cpAsync: typeof import(\"fs/promises\").cp; constants: typeof import(\"fs\").constants; readFileSync: typeof import(\"fs\").readFileSync; readdirSync: typeof import(\"fs\").readdirSync; writeFileSync: typeof import(\"fs\").writeFileSync; rmSync: typeof import(\"fs\").rmSync; existsSync: typeof import(\"fs\").existsSync; accessSync: typeof import(\"fs\").accessSync; cpSync: typeof import(\"fs\").cpSync; rename: typeof import(\"fs\").rename.__promisify__; mkdir: typeof import(\"fs\").mkdir.__promisify__; readFile: typeof import(\"fs\").readFile.__promisify__; writeFile: typeof import(\"fs\").writeFile.__promisify__; access: typeof import(\"fs\").access.__promisify__; watch: (arg1: import(\"fs\").PathLike) => Promise<TResult>; appendFile: typeof import(\"fs\").appendFile.__promisify__; chmod: typeof import(\"fs\").chmod.__promisify__; chown: typeof import(\"fs\").chown.__promisify__; copyFile: typeof import(\"fs\").copyFile.__promisify__; cp: (arg1: string | import(\"url\").URL, arg2: string | import(\"url\").URL) => Promise<void>; rm: typeof import(\"fs\").rm.__promisify__; readdir: typeof import(\"fs\").readdir.__promisify__; realpath: typeof import(\"fs\").realpath.__promisify__; stat: typeof import(\"fs\").stat.__promisify__; }",
        "typeDefinition": {
          "type": "object",
          "properties": {
            "cpAsync": {
              "type": "object",
              "properties": {}
            },
            "constants": {
              "type": "object",
              "properties": {
                "F_OK": {
                  "type": "number"
                },
                "R_OK": {
                  "type": "number"
                },
                "W_OK": {
                  "type": "number"
                },
                "X_OK": {
                  "type": "number"
                },
                "COPYFILE_EXCL": {
                  "type": "number"
                },
                "COPYFILE_FICLONE": {
                  "type": "number"
                },
                "COPYFILE_FICLONE_FORCE": {
                  "type": "number"
                },
                "O_RDONLY": {
                  "type": "number"
                },
                "O_WRONLY": {
                  "type": "number"
                },
                "O_RDWR": {
                  "type": "number"
                },
                "O_CREAT": {
                  "type": "number"
                },
                "O_EXCL": {
                  "type": "number"
                },
                "O_NOCTTY": {
                  "type": "number"
                },
                "O_TRUNC": {
                  "type": "number"
                },
                "O_APPEND": {
                  "type": "number"
                },
                "O_DIRECTORY": {
                  "type": "number"
                },
                "O_NOATIME": {
                  "type": "number"
                },
                "O_NOFOLLOW": {
                  "type": "number"
                },
                "O_SYNC": {
                  "type": "number"
                },
                "O_DSYNC": {
                  "type": "number"
                },
                "O_SYMLINK": {
                  "type": "number"
                },
                "O_DIRECT": {
                  "type": "number"
                },
                "O_NONBLOCK": {
                  "type": "number"
                },
                "S_IFMT": {
                  "type": "number"
                },
                "S_IFREG": {
                  "type": "number"
                },
                "S_IFDIR": {
                  "type": "number"
                },
                "S_IFCHR": {
                  "type": "number"
                },
                "S_IFBLK": {
                  "type": "number"
                },
                "S_IFIFO": {
                  "type": "number"
                },
                "S_IFLNK": {
                  "type": "number"
                },
                "S_IFSOCK": {
                  "type": "number"
                },
                "S_IRWXU": {
                  "type": "number"
                },
                "S_IRUSR": {
                  "type": "number"
                },
                "S_IWUSR": {
                  "type": "number"
                },
                "S_IXUSR": {
                  "type": "number"
                },
                "S_IRWXG": {
                  "type": "number"
                },
                "S_IRGRP": {
                  "type": "number"
                },
                "S_IWGRP": {
                  "type": "number"
                },
                "S_IXGRP": {
                  "type": "number"
                },
                "S_IRWXO": {
                  "type": "number"
                },
                "S_IROTH": {
                  "type": "number"
                },
                "S_IWOTH": {
                  "type": "number"
                },
                "S_IXOTH": {
                  "type": "number"
                },
                "UV_FS_O_FILEMAP": {
                  "type": "number"
                }
              },
              "required": [
                "F_OK",
                "R_OK",
                "W_OK",
                "X_OK",
                "COPYFILE_EXCL",
                "COPYFILE_FICLONE",
                "COPYFILE_FICLONE_FORCE",
                "O_RDONLY",
                "O_WRONLY",
                "O_RDWR",
                "O_CREAT",
                "O_EXCL",
                "O_NOCTTY",
                "O_TRUNC",
                "O_APPEND",
                "O_DIRECTORY",
                "O_NOATIME",
                "O_NOFOLLOW",
                "O_SYNC",
                "O_DSYNC",
                "O_SYMLINK",
                "O_DIRECT",
                "O_NONBLOCK",
                "S_IFMT",
                "S_IFREG",
                "S_IFDIR",
                "S_IFCHR",
                "S_IFBLK",
                "S_IFIFO",
                "S_IFLNK",
                "S_IFSOCK",
                "S_IRWXU",
                "S_IRUSR",
                "S_IWUSR",
                "S_IXUSR",
                "S_IRWXG",
                "S_IRGRP",
                "S_IWGRP",
                "S_IXGRP",
                "S_IRWXO",
                "S_IROTH",
                "S_IWOTH",
                "S_IXOTH",
                "UV_FS_O_FILEMAP"
              ]
            },
            "readFileSync": {
              "type": "object",
              "properties": {}
            },
            "readdirSync": {
              "type": "object",
              "properties": {}
            },
            "writeFileSync": {
              "type": "object",
              "properties": {}
            },
            "rmSync": {
              "type": "object",
              "properties": {}
            },
            "existsSync": {
              "type": "object",
              "properties": {}
            },
            "accessSync": {
              "type": "object",
              "properties": {}
            },
            "cpSync": {
              "type": "object",
              "properties": {}
            },
            "rename": {
              "type": "object",
              "properties": {}
            },
            "mkdir": {
              "type": "object",
              "properties": {}
            },
            "readFile": {
              "type": "object",
              "properties": {}
            },
            "writeFile": {
              "type": "object",
              "properties": {}
            },
            "access": {
              "type": "object",
              "properties": {}
            },
            "watch": {
              "type": "object",
              "properties": {}
            },
            "appendFile": {
              "type": "object",
              "properties": {}
            },
            "chmod": {
              "type": "object",
              "properties": {}
            },
            "chown": {
              "type": "object",
              "properties": {}
            },
            "copyFile": {
              "type": "object",
              "properties": {}
            },
            "cp": {
              "type": "object",
              "properties": {}
            },
            "rm": {
              "type": "object",
              "properties": {}
            },
            "readdir": {
              "type": "object",
              "properties": {}
            },
            "realpath": {
              "type": "object",
              "properties": {}
            },
            "stat": {
              "type": "object",
              "properties": {}
            }
          },
          "required": [
            "cpAsync",
            "constants",
            "readFileSync",
            "readdirSync",
            "writeFileSync",
            "rmSync",
            "existsSync",
            "accessSync",
            "cpSync",
            "rename",
            "mkdir",
            "readFile",
            "writeFile",
            "access",
            "watch",
            "appendFile",
            "chmod",
            "chown",
            "copyFile",
            "cp",
            "rm",
            "readdir",
            "realpath",
            "stat"
          ],
          "optional": false
        },
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": true,
        "isPrimitive": false,
        "isEnumLiteral": false,
        "simplifiedSchema": {
          "properties": [
            {
              "name": "cpAsync",
              "required": true,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "constants",
              "required": true,
              "schema": {
                "properties": [
                  {
                    "name": "F_OK",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "R_OK",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "W_OK",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "X_OK",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "COPYFILE_EXCL",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "COPYFILE_FICLONE",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "COPYFILE_FICLONE_FORCE",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "O_RDONLY",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "O_WRONLY",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "O_RDWR",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "O_CREAT",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "O_EXCL",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "O_NOCTTY",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "O_TRUNC",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "O_APPEND",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "O_DIRECTORY",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "O_NOATIME",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "O_NOFOLLOW",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "O_SYNC",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "O_DSYNC",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "O_SYMLINK",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "O_DIRECT",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "O_NONBLOCK",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "S_IFMT",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "S_IFREG",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "S_IFDIR",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "S_IFCHR",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "S_IFBLK",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "S_IFIFO",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "S_IFLNK",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "S_IFSOCK",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "S_IRWXU",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "S_IRUSR",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "S_IWUSR",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "S_IXUSR",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "S_IRWXG",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "S_IRGRP",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "S_IWGRP",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "S_IXGRP",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "S_IRWXO",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "S_IROTH",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "S_IWOTH",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "S_IXOTH",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "UV_FS_O_FILEMAP",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  }
                ],
                "type": "object"
              }
            },
            {
              "name": "readFileSync",
              "required": true,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "readdirSync",
              "required": true,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "writeFileSync",
              "required": true,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "rmSync",
              "required": true,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "existsSync",
              "required": true,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "accessSync",
              "required": true,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "cpSync",
              "required": true,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "rename",
              "required": true,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "mkdir",
              "required": true,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "readFile",
              "required": true,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "writeFile",
              "required": true,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "access",
              "required": true,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "watch",
              "required": true,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "appendFile",
              "required": true,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "chmod",
              "required": true,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "chown",
              "required": true,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "copyFile",
              "required": true,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "cp",
              "required": true,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "rm",
              "required": true,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "readdir",
              "required": true,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "realpath",
              "required": true,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "stat",
              "required": true,
              "schema": {
                "properties": [],
                "type": "object"
              }
            }
          ],
          "type": "object"
        }
      },
      "value": "{\n  ...gracefulFsPromises,\n  ...gracefulFsConstants,\n  ...fsPromises,\n}",
      "description": "NB: for some reason some of the graceful-fs functions aren't complete. For example, I can't seem to copy folders with cp from graceful-fs (cp)\n\nFor that one I added cpAsync.",
      "id": "oqxpzqkggaomkjbdmbazpzyg",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-variables/fs.json",
      "operationRelativePath": "/db/ts-variables/fs.json"
    },
    "externalDependantFiles": [
      "/operations/tools/asset/asset-functions-node/db/ts-imports.json",
      "/operations/tools/control-fs/get-associated-md/db/ts-imports.json",
      "/operations/tools/control-fs/get-available-folder-path/db/ts-imports.json",
      "/operations/tools/control-fs/path-util/db/ts-imports.json",
      "/operations/tools/control-fs/rename-template-files/db/ts-imports.json",
      "/operations/tools/control-fs/set-json-key/db/ts-imports.json",
      "/operations/tools/control-fs/watch-folders/db/ts-imports.json",
      "/operations/tools/control-project/all/db/ts-imports.json",
      "/operations/tools/control-project/deprecated/make-file-type/db/ts-imports.json",
      "/operations/tools/control-project/get-all-operation-source-paths/db/ts-imports.json",
      "/operations/tools/control-project/get-path/db/ts-imports.json",
      "/operations/tools/control-project/k-explore/db/ts-imports.json",
      "/operations/tools/control-project/operation-util/db/ts-imports.json",
      "/operations/tools/control-system/play-music/db/ts-imports.json",
      "/operations/tools/control-system/vscode-open/db/ts-imports.json",
      "/operations/tools/database/fs-orm/db/ts-imports.json",
      "/operations/tools/deployment/bundling/create-backup/db/ts-imports.json",
      "/operations/tools/deployment/bundling/create-distribution/db/ts-imports.json",
      "/operations/tools/deployment/bundling/generate-bundle/db/ts-imports.json",
      "/operations/tools/deployment/deprecated/sensible/sensible/db/ts-imports.json",
      "/operations/tools/interfaces/cli/cli-version-updates/db/ts-imports.json",
      "/operations/tools/language/simplify-text/db/ts-imports.json",
      "/operations/tools/markdown-reader/markdown-reader-functions/db/ts-imports.json",
      "/operations/tools/parsing/file-conversion/md/markdown-parsings/db/ts-imports.json",
      "/operations/tools/parsing/read-files/read-csv-file/db/ts-imports.json",
      "/operations/tools/parsing/read-files/read-json-file/db/ts-imports.json",
      "/operations/tools/parsing/read-files/read-kvmd-file/db/ts-imports.json",
      "/operations/tools/parsing/read-files/read-markdown-file/db/ts-imports.json",
      "/operations/tools/parsing/read-files/read-typescript-file/db/ts-imports.json",
      "/operations/tools/typescript/generate-index/db/ts-imports.json",
      "/operations/tools/typescript/generate-sdk-operations/db/ts-imports.json",
      "/operations/tools/typescript/index-typescript/db/ts-imports.json",
      "/operations/tools/typescript/minify-build/db/ts-imports.json",
      "/operations/tools/typescript/new-template/db/ts-imports.json",
      "/operations/tools/typescript/rebuild-operation/db/ts-imports.json",
      "/operations/tools/typescript/rename-operation/db/ts-imports.json",
      "/operations/tools/typescript/testing/k-test/db/ts-imports.json",
      "/operations/tools/typescript/ts-morph-util/db/ts-imports.json",
      "/operations/tools/util/geo-parse/db/ts-imports.json",
      "/operations/tools/util/k-dev/db/ts-imports.json",
      "/operations/tools/util/nodemon/db/ts-imports.json",
      "/operations/tools/util/run-child-process/db/ts-imports.json",
      "/operations/tools/writer/writer-functions/db/ts-imports.json",
      "/operations/niches/bhagya/markdown-translator/db/ts-imports.json",
      "/operations/niches/code-from-anywhere/bootcamp-operations/course-basics/db/ts-imports.json",
      "/operations/niches/sprent/parse-address-henrik/db/ts-imports.json",
      "/operations/niches/sprent/parse-images/db/ts-imports.json",
      "/operations/niches/sprent/sprent-migrate/db/ts-imports.json"
    ]
  },
  {
    "tsFunction": {
      "createdAt": 1667378803634,
      "updatedAt": 1667378803634,
      "deletedAt": 0,
      "createdFirstAt": 1667378803634,
      "publicAuthorization": [
        "read-docs",
        "search"
      ],
      "isApiExposed": false,
      "isPostApi": false,
      "isGetApi": false,
      "isExported": true,
      "operationRelativeTypescriptFilePath": "src/js.ts",
      "commentsInside": [],
      "rawText": " (pathString: string) => {\n  const lastFolder = getFolder(pathString).split(\"/\").pop()!;\n  // console.log({ pathString, lastFolder });\n  return lastFolder;\n}",
      "name": "getLastFolder",
      "slug": "get-last-folder",
      "parameters": [
        {
          "name": "pathString",
          "schema": {
            "type": "string"
          },
          "simplifiedSchema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "description": "removes everything after the last slash to get folder path\n\ninput: /Users/king/Documents/some/folder/xyz\noutput: xyz\n\ninput: /Users/king/Documents/some/folder/xyz.txt\noutput: folder",
      "returnType": {
        "rawType": "any",
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": false,
        "isPrimitive": false,
        "isEnumLiteral": false
      },
      "maxIndentationDepth": 1,
      "size": {
        "characters": 338,
        "lines": 11,
        "bytes": 338,
        "bytesPerCharacter": 1,
        "charactersPerLine": 31,
        "linesPerFile": 11,
        "numberOfFiles": 1
      },
      "id": "sbeppjscmxwkoctmedunglyy",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-functions/get-last-folder.json",
      "operationRelativePath": "/db/ts-functions/get-last-folder.json"
    },
    "externalDependantFiles": [
      "/operations/tools/control-fs/path-util/db/ts-imports.json",
      "/operations/tools/control-project/all/db/ts-imports.json",
      "/operations/tools/control-project/explore-project/db/ts-imports.json",
      "/operations/tools/control-project/get-path/db/ts-imports.json",
      "/operations/tools/control-project/operation-util/db/ts-imports.json",
      "/operations/tools/database/db-recipes/db/ts-imports.json",
      "/operations/tools/database/fs-orm/db/ts-imports.json",
      "/operations/tools/deployment/bundling/create-backup/db/ts-imports.json",
      "/operations/tools/deployment/bundling/create-distribution/db/ts-imports.json",
      "/operations/tools/deployment/bundling/generate-bundle/db/ts-imports.json",
      "/operations/tools/interfaces/cli/function-util/db/ts-imports.json",
      "/operations/tools/markdown-reader/markdown-reader-functions/db/ts-imports.json",
      "/operations/tools/parsing/read-files/read-markdown-file/db/ts-imports.json",
      "/operations/tools/parsing/read-files/read-typescript-file/db/ts-imports.json",
      "/operations/tools/typescript/compile-typescript/db/ts-imports.json",
      "/operations/tools/typescript/find-all-dependency-operations/db/ts-imports.json",
      "/operations/tools/typescript/generate-sdk-operations/db/ts-imports.json",
      "/operations/tools/typescript/get-imports-exports/db/ts-imports.json",
      "/operations/tools/typescript/index-typescript/db/ts-imports.json",
      "/operations/tools/typescript/lint/db/ts-imports.json",
      "/operations/tools/typescript/new-template/db/ts-imports.json",
      "/operations/tools/typescript/rebuild-operation/db/ts-imports.json"
    ]
  },
  {
    "tsVariable": {
      "createdAt": 1667378803944,
      "updatedAt": 1667378803944,
      "deletedAt": 0,
      "createdFirstAt": 1667378803944,
      "classification": "const",
      "comments": [],
      "isExported": true,
      "name": "getLastFolder",
      "slug": "get-last-folder",
      "operationRelativeTypescriptFilePath": "src/js.ts",
      "type": {
        "rawType": "(pathString: string) => any",
        "typeDefinition": {
          "type": "object",
          "properties": {},
          "optional": false
        },
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": true,
        "isPrimitive": false,
        "isEnumLiteral": false,
        "simplifiedSchema": {
          "properties": [],
          "type": "object"
        }
      },
      "value": "(pathString: string) => {\n  const lastFolder = getFolder(pathString).split(\"/\").pop()!;\n  // console.log({ pathString, lastFolder });\n  return lastFolder;\n}",
      "description": "removes everything after the last slash to get folder path\n\ninput: /Users/king/Documents/some/folder/xyz\noutput: xyz\n\ninput: /Users/king/Documents/some/folder/xyz.txt\noutput: folder",
      "id": "wwoyngjjbsyqkqcwucsntzwh",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-variables/get-last-folder.json",
      "operationRelativePath": "/db/ts-variables/get-last-folder.json"
    },
    "externalDependantFiles": [
      "/operations/tools/control-fs/path-util/db/ts-imports.json",
      "/operations/tools/control-project/all/db/ts-imports.json",
      "/operations/tools/control-project/explore-project/db/ts-imports.json",
      "/operations/tools/control-project/get-path/db/ts-imports.json",
      "/operations/tools/control-project/operation-util/db/ts-imports.json",
      "/operations/tools/database/db-recipes/db/ts-imports.json",
      "/operations/tools/database/fs-orm/db/ts-imports.json",
      "/operations/tools/deployment/bundling/create-backup/db/ts-imports.json",
      "/operations/tools/deployment/bundling/create-distribution/db/ts-imports.json",
      "/operations/tools/deployment/bundling/generate-bundle/db/ts-imports.json",
      "/operations/tools/interfaces/cli/function-util/db/ts-imports.json",
      "/operations/tools/markdown-reader/markdown-reader-functions/db/ts-imports.json",
      "/operations/tools/parsing/read-files/read-markdown-file/db/ts-imports.json",
      "/operations/tools/parsing/read-files/read-typescript-file/db/ts-imports.json",
      "/operations/tools/typescript/compile-typescript/db/ts-imports.json",
      "/operations/tools/typescript/find-all-dependency-operations/db/ts-imports.json",
      "/operations/tools/typescript/generate-sdk-operations/db/ts-imports.json",
      "/operations/tools/typescript/get-imports-exports/db/ts-imports.json",
      "/operations/tools/typescript/index-typescript/db/ts-imports.json",
      "/operations/tools/typescript/lint/db/ts-imports.json",
      "/operations/tools/typescript/new-template/db/ts-imports.json",
      "/operations/tools/typescript/rebuild-operation/db/ts-imports.json"
    ]
  },
  {
    "tsFunction": {
      "createdAt": 1667378792419,
      "updatedAt": 1667378792419,
      "deletedAt": 0,
      "createdFirstAt": 1667378792419,
      "publicAuthorization": [
        "read-docs",
        "search"
      ],
      "isApiExposed": false,
      "isPostApi": false,
      "isGetApi": false,
      "isExported": true,
      "operationRelativeTypescriptFilePath": "src/files.ts",
      "commentsInside": [],
      "rawText": " async <T>(\n  p: Path,\n  data: T\n): Promise<boolean> => {\n  if (!data) {\n    console.log({ p, data });\n    return false;\n  }\n  const stringifiedData = JSON.stringify(data, null, 2);\n\n  const folderToBe = getFolder(p);\n  if (!fs.existsSync(folderToBe)) {\n    //first, make sure the folder exists\n    await fs.mkdir(folderToBe, { recursive: true });\n  }\n  //then write it\n  await fs.writeFile(p, stringifiedData, \"utf8\");\n  return true;\n}",
      "name": "writeJsonToFile",
      "slug": "write-json-to-file",
      "parameters": [],
      "description": "write json to a file\n\nmakes the dir and file if they don't exist",
      "returnType": {
        "rawType": "Promise<boolean>",
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": false,
        "isPrimitive": false,
        "isEnumLiteral": false
      },
      "maxIndentationDepth": 2,
      "size": {
        "characters": 500,
        "lines": 21,
        "bytes": 500,
        "bytesPerCharacter": 1,
        "charactersPerLine": 24,
        "linesPerFile": 21,
        "numberOfFiles": 1
      },
      "id": "umvkrmtqqlscagoniwyrkeit",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-functions/write-json-to-file.json",
      "operationRelativePath": "/db/ts-functions/write-json-to-file.json"
    },
    "externalDependantFiles": [
      "/operations/tools/control-fs/write-to-assets/db/ts-imports.json",
      "/operations/tools/database/fs-orm/db/ts-imports.json",
      "/operations/tools/deployment/bundling/generate-bundle/db/ts-imports.json",
      "/operations/tools/parsing/edit-json-file/db/ts-imports.json",
      "/operations/tools/parsing/file-conversion/md/markdown-parsings/db/ts-imports.json",
      "/operations/tools/parsing/read-files/read-kvmd-file/db/ts-imports.json",
      "/operations/tools/typescript/rebuild-operation/db/ts-imports.json",
      "/operations/tools/util/geo-parse/db/ts-imports.json",
      "/operations/niches/sprent/sprent-migrate/db/ts-imports.json"
    ]
  },
  {
    "tsVariable": {
      "createdAt": 1667378793209,
      "updatedAt": 1667378793209,
      "deletedAt": 0,
      "createdFirstAt": 1667378793209,
      "classification": "const",
      "comments": [],
      "isExported": true,
      "name": "writeJsonToFile",
      "slug": "write-json-to-file",
      "operationRelativeTypescriptFilePath": "src/files.ts",
      "type": {
        "rawType": "<T>(p: string, data: T) => Promise<boolean>",
        "typeDefinition": {
          "type": "object",
          "properties": {},
          "optional": false
        },
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": true,
        "isPrimitive": false,
        "isEnumLiteral": false,
        "simplifiedSchema": {
          "properties": [],
          "type": "object"
        }
      },
      "value": "async <T>(\n  p: Path,\n  data: T\n): Promise<boolean> => {\n  if (!data) {\n    console.log({ p, data });\n    return false;\n  }\n  const stringifiedData = JSON.stringify(data, null, 2);\n\n  const folderToBe = getFolder(p);\n  if (!fs.existsSync(folderToBe)) {\n    //first, make sure the folder exists\n    await fs.mkdir(folderToBe, { recursive: true });\n  }\n  //then write it\n  await fs.writeFile(p, stringifiedData, \"utf8\");\n  return true;\n}",
      "description": "write json to a file\n\nmakes the dir and file if they don't exist",
      "id": "rwovlnutxessxcuuikcudupz",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-variables/write-json-to-file.json",
      "operationRelativePath": "/db/ts-variables/write-json-to-file.json"
    },
    "externalDependantFiles": [
      "/operations/tools/control-fs/write-to-assets/db/ts-imports.json",
      "/operations/tools/database/fs-orm/db/ts-imports.json",
      "/operations/tools/deployment/bundling/generate-bundle/db/ts-imports.json",
      "/operations/tools/parsing/edit-json-file/db/ts-imports.json",
      "/operations/tools/parsing/file-conversion/md/markdown-parsings/db/ts-imports.json",
      "/operations/tools/parsing/read-files/read-kvmd-file/db/ts-imports.json",
      "/operations/tools/typescript/rebuild-operation/db/ts-imports.json",
      "/operations/tools/util/geo-parse/db/ts-imports.json",
      "/operations/niches/sprent/sprent-migrate/db/ts-imports.json"
    ]
  },
  {
    "tsFunction": {
      "createdAt": 1667378792419,
      "updatedAt": 1667378792419,
      "deletedAt": 0,
      "createdFirstAt": 1667378792419,
      "publicAuthorization": [
        "read-docs",
        "search"
      ],
      "isApiExposed": false,
      "isPostApi": false,
      "isGetApi": false,
      "isExported": true,
      "operationRelativeTypescriptFilePath": "src/files.ts",
      "commentsInside": [],
      "rawText": " async (p: PathLike) => canAccess(p, fs.constants.R_OK)",
      "name": "canRead",
      "slug": "can-read",
      "parameters": [],
      "description": "File is readable to the calling process",
      "returnType": {
        "rawType": "unknown",
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": false,
        "isPrimitive": false,
        "isEnumLiteral": false
      },
      "maxIndentationDepth": 0,
      "size": {
        "characters": 94,
        "lines": 1,
        "bytes": 94,
        "bytesPerCharacter": 1,
        "charactersPerLine": 94,
        "linesPerFile": 1,
        "numberOfFiles": 1
      },
      "id": "ebwvnqbtuadwhmyhbbchyycw",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-functions/can-read.json",
      "operationRelativePath": "/db/ts-functions/can-read.json"
    },
    "externalDependantFiles": [
      "/operations/tools/control-project/k-explore/db/ts-imports.json",
      "/operations/tools/parsing/read-files/read-csv-file/db/ts-imports.json",
      "/operations/tools/parsing/read-files/read-json-file/db/ts-imports.json",
      "/operations/tools/parsing/read-files/read-kvmd-file/db/ts-imports.json",
      "/operations/tools/parsing/read-files/read-markdown-file/db/ts-imports.json",
      "/operations/tools/typescript/new-template/db/ts-imports.json",
      "/operations/tools/util/run-child-process/db/ts-imports.json"
    ]
  },
  {
    "tsFunction": {
      "createdAt": 1667378792419,
      "updatedAt": 1667378792419,
      "deletedAt": 0,
      "createdFirstAt": 1667378792419,
      "publicAuthorization": [
        "read-docs",
        "search"
      ],
      "isApiExposed": false,
      "isPostApi": false,
      "isGetApi": false,
      "isExported": true,
      "operationRelativeTypescriptFilePath": "src/files.ts",
      "commentsInside": [],
      "rawText": " async (\n  p: Path,\n  data: string\n): Promise<boolean> => {\n  if (data === undefined || data === null || typeof data !== \"string\") {\n    log(`Incorrect data provided`, data);\n    return false;\n  }\n\n  const folderToBe = getFolder(p);\n\n  if (!fs.existsSync(folderToBe)) {\n    //first, make sure the folder exists\n    await fs.mkdir(folderToBe, { recursive: true });\n  }\n\n  //then write it\n  await fs.writeFile(p, data, \"utf8\");\n\n  return true;\n}",
      "name": "writeStringToFile",
      "slug": "write-string-to-file",
      "parameters": [],
      "description": "write string to a file\n\nmakes the dir and file if they don't exist",
      "returnType": {
        "rawType": "Promise<boolean>",
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": false,
        "isPrimitive": false,
        "isEnumLiteral": false
      },
      "maxIndentationDepth": 2,
      "size": {
        "characters": 509,
        "lines": 23,
        "bytes": 509,
        "bytesPerCharacter": 1,
        "charactersPerLine": 22,
        "linesPerFile": 23,
        "numberOfFiles": 1
      },
      "id": "azuqurvzhqxxqedcyykdfpxi",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-functions/write-string-to-file.json",
      "operationRelativePath": "/db/ts-functions/write-string-to-file.json"
    },
    "externalDependantFiles": [
      "/operations/tools/control-fs/write-to-assets/db/ts-imports.json",
      "/operations/tools/database/fs-orm/db/ts-imports.json",
      "/operations/tools/parsing/file-conversion/md/markdown-parsings/db/ts-imports.json",
      "/operations/tools/parsing/read-files/read-kvmd-file/db/ts-imports.json",
      "/operations/tools/typescript/new-template/db/ts-imports.json",
      "/operations/tools/util/geo-parse/db/ts-imports.json",
      "/operations/niches/code-from-anywhere/bootcamp-operations/course-basics/db/ts-imports.json"
    ]
  },
  {
    "tsInterface": {
      "createdAt": 1667378809243,
      "updatedAt": 1667378809243,
      "deletedAt": 0,
      "createdFirstAt": 1667378809243,
      "id": "path",
      "name": "Path",
      "slug": "path",
      "operationRelativeTypescriptFilePath": "src/types.ts",
      "hasGeneric": false,
      "isExported": true,
      "rawText": "\n\n/**\n * unlike PathLike, this is only a string\n *\n * For now, we don't have a clear convention whether or not this string should be absolute or anything.\n */\nexport type Path = string;",
      "extensions": [],
      "isOperationIndex": false,
      "description": "unlike PathLike, this is only a string\n\nFor now, we don't have a clear convention whether or not this string should be absolute or anything.",
      "isDbModel": false,
      "commentsInside": [],
      "type": {
        "typeDefinition": {
          "type": "string",
          "description": "unlike PathLike, this is only a string\n\nFor now, we don't have a clear convention whether or not this string should be absolute or anything."
        },
        "simplifiedSchema": {
          "fullComment": "unlike PathLike, this is only a string\n\nFor now, we don't have a clear convention whether or not this string should be absolute or anything.",
          "type": "string"
        },
        "typeCoverage": 0,
        "rawType": "Path",
        "isArray": false,
        "isEnum": false,
        "isEnumLiteral": false,
        "isObject": false,
        "isPrimitive": false
      },
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-interfaces/path.json",
      "operationRelativePath": "/db/ts-interfaces/path.json"
    },
    "externalDependantFiles": [
      "/operations/tools/deployment/deprecated/sensible/sensible-core/db/ts-imports.json",
      "/operations/tools/deployment/deprecated/sensible/sensible-server/db/ts-imports.json",
      "/operations/tools/parsing/read-files/read-csv-file/db/ts-imports.json",
      "/operations/tools/parsing/read-files/read-json-file/db/ts-imports.json",
      "/operations/tools/parsing/read-files/read-kvmd-file/db/ts-imports.json",
      "/operations/tools/parsing/read-files/read-markdown-file/db/ts-imports.json",
      "/operations/tools/parsing/read-files/read-typescript-file/db/ts-imports.json"
    ]
  },
  {
    "tsVariable": {
      "createdAt": 1667378793208,
      "updatedAt": 1667378793208,
      "deletedAt": 0,
      "createdFirstAt": 1667378793208,
      "classification": "const",
      "comments": [],
      "isExported": true,
      "name": "canRead",
      "slug": "can-read",
      "operationRelativeTypescriptFilePath": "src/files.ts",
      "type": {
        "rawType": "(p: import(\"fs\").PathLike) => unknown",
        "typeDefinition": {
          "type": "object",
          "properties": {},
          "optional": false
        },
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": true,
        "isPrimitive": false,
        "isEnumLiteral": false,
        "simplifiedSchema": {
          "properties": [],
          "type": "object"
        }
      },
      "value": "async (p: PathLike) => canAccess(p, fs.constants.R_OK)",
      "description": "File is readable to the calling process",
      "id": "rtuyqmqmcrjrhoiqptxnyhtd",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-variables/can-read.json",
      "operationRelativePath": "/db/ts-variables/can-read.json"
    },
    "externalDependantFiles": [
      "/operations/tools/control-project/k-explore/db/ts-imports.json",
      "/operations/tools/parsing/read-files/read-csv-file/db/ts-imports.json",
      "/operations/tools/parsing/read-files/read-json-file/db/ts-imports.json",
      "/operations/tools/parsing/read-files/read-kvmd-file/db/ts-imports.json",
      "/operations/tools/parsing/read-files/read-markdown-file/db/ts-imports.json",
      "/operations/tools/typescript/new-template/db/ts-imports.json",
      "/operations/tools/util/run-child-process/db/ts-imports.json"
    ]
  },
  {
    "tsVariable": {
      "createdAt": 1667378793209,
      "updatedAt": 1667378793209,
      "deletedAt": 0,
      "createdFirstAt": 1667378793209,
      "classification": "const",
      "comments": [],
      "isExported": true,
      "name": "writeStringToFile",
      "slug": "write-string-to-file",
      "operationRelativeTypescriptFilePath": "src/files.ts",
      "type": {
        "rawType": "(p: string, data: string) => Promise<boolean>",
        "typeDefinition": {
          "type": "object",
          "properties": {},
          "optional": false
        },
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": true,
        "isPrimitive": false,
        "isEnumLiteral": false,
        "simplifiedSchema": {
          "properties": [],
          "type": "object"
        }
      },
      "value": "async (\n  p: Path,\n  data: string\n): Promise<boolean> => {\n  if (data === undefined || data === null || typeof data !== \"string\") {\n    log(`Incorrect data provided`, data);\n    return false;\n  }\n\n  const folderToBe = getFolder(p);\n\n  if (!fs.existsSync(folderToBe)) {\n    //first, make sure the folder exists\n    await fs.mkdir(folderToBe, { recursive: true });\n  }\n\n  //then write it\n  await fs.writeFile(p, data, \"utf8\");\n\n  return true;\n}",
      "description": "write string to a file\n\nmakes the dir and file if they don't exist",
      "id": "wxtjxrnwivvuuvimorvbwcud",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-variables/write-string-to-file.json",
      "operationRelativePath": "/db/ts-variables/write-string-to-file.json"
    },
    "externalDependantFiles": [
      "/operations/tools/control-fs/write-to-assets/db/ts-imports.json",
      "/operations/tools/database/fs-orm/db/ts-imports.json",
      "/operations/tools/parsing/file-conversion/md/markdown-parsings/db/ts-imports.json",
      "/operations/tools/parsing/read-files/read-kvmd-file/db/ts-imports.json",
      "/operations/tools/typescript/new-template/db/ts-imports.json",
      "/operations/tools/util/geo-parse/db/ts-imports.json",
      "/operations/niches/code-from-anywhere/bootcamp-operations/course-basics/db/ts-imports.json"
    ]
  },
  {
    "tsFunction": {
      "createdAt": 1667378803634,
      "updatedAt": 1667378803634,
      "deletedAt": 0,
      "createdFirstAt": 1667378803634,
      "publicAuthorization": [
        "read-docs",
        "search"
      ],
      "isApiExposed": false,
      "isPostApi": false,
      "isGetApi": false,
      "isExported": true,
      "operationRelativeTypescriptFilePath": "src/js.ts",
      "commentsInside": [],
      "rawText": " (pathString: string) => {\n  const parsedPath = path.parse(pathString);\n  const hasExtension = parsedPath.ext.length > 0;\n\n  if (hasExtension) {\n    // NB: assume it's a file, let's avoid folders with dots!\n    const pathChunks = pathString.split(\"/\");\n    pathChunks.pop(); //remove the filename\n    return pathChunks.join(\"/\");\n  } else {\n    // NB: it's already a folder!\n    return pathString;\n  }\n}",
      "name": "getFolder",
      "slug": "get-folder",
      "parameters": [
        {
          "name": "pathString",
          "schema": {
            "type": "string"
          },
          "simplifiedSchema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "description": "if the path exists:\n- if the pathString is a folder, that is returned.\n- if the pathstring is not a folder, returns the pathstring without the file suffix\n\nif the path doesn't exist: returns pathString witout last chunk (this would only work for file paths)",
      "returnType": {
        "rawType": "any",
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": false,
        "isPrimitive": false,
        "isEnumLiteral": false
      },
      "maxIndentationDepth": 2,
      "size": {
        "characters": 660,
        "lines": 18,
        "bytes": 660,
        "bytesPerCharacter": 1,
        "charactersPerLine": 37,
        "linesPerFile": 18,
        "numberOfFiles": 1
      },
      "id": "wrgkuudbwjqikgyxmedhrdqp",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-functions/get-folder.json",
      "operationRelativePath": "/db/ts-functions/get-folder.json"
    },
    "externalDependantFiles": [
      "/operations/tools/control-fs/path-util/db/ts-imports.json",
      "/operations/tools/control-fs/set-json-key/db/ts-imports.json",
      "/operations/tools/control-project/all/db/ts-imports.json",
      "/operations/tools/control-project/k-explore/db/ts-imports.json",
      "/operations/tools/control-project/operation-util/db/ts-imports.json",
      "/operations/tools/deployment/bundling/yarn-install-new-distribution/db/ts-imports.json"
    ]
  },
  {
    "tsVariable": {
      "createdAt": 1667378803944,
      "updatedAt": 1667378803944,
      "deletedAt": 0,
      "createdFirstAt": 1667378803944,
      "classification": "const",
      "comments": [],
      "isExported": true,
      "name": "getFolder",
      "slug": "get-folder",
      "operationRelativeTypescriptFilePath": "src/js.ts",
      "type": {
        "rawType": "(pathString: string) => any",
        "typeDefinition": {
          "type": "object",
          "properties": {},
          "optional": false
        },
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": true,
        "isPrimitive": false,
        "isEnumLiteral": false,
        "simplifiedSchema": {
          "properties": [],
          "type": "object"
        }
      },
      "value": "(pathString: string) => {\n  const parsedPath = path.parse(pathString);\n  const hasExtension = parsedPath.ext.length > 0;\n\n  if (hasExtension) {\n    // NB: assume it's a file, let's avoid folders with dots!\n    const pathChunks = pathString.split(\"/\");\n    pathChunks.pop(); //remove the filename\n    return pathChunks.join(\"/\");\n  } else {\n    // NB: it's already a folder!\n    return pathString;\n  }\n}",
      "description": "if the path exists:\n- if the pathString is a folder, that is returned.\n- if the pathstring is not a folder, returns the pathstring without the file suffix\n\nif the path doesn't exist: returns pathString witout last chunk (this would only work for file paths)",
      "id": "cbbiltdtkhhxddcnwzpozcok",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-variables/get-folder.json",
      "operationRelativePath": "/db/ts-variables/get-folder.json"
    },
    "externalDependantFiles": [
      "/operations/tools/control-fs/path-util/db/ts-imports.json",
      "/operations/tools/control-fs/set-json-key/db/ts-imports.json",
      "/operations/tools/control-project/all/db/ts-imports.json",
      "/operations/tools/control-project/k-explore/db/ts-imports.json",
      "/operations/tools/control-project/operation-util/db/ts-imports.json",
      "/operations/tools/deployment/bundling/yarn-install-new-distribution/db/ts-imports.json"
    ]
  },
  {
    "tsFunction": {
      "createdAt": 1667378792419,
      "updatedAt": 1667378792419,
      "deletedAt": 0,
      "createdFirstAt": 1667378792419,
      "publicAuthorization": [
        "read-docs",
        "search"
      ],
      "isApiExposed": false,
      "isPostApi": false,
      "isGetApi": false,
      "isExported": true,
      "operationRelativeTypescriptFilePath": "src/files.ts",
      "commentsInside": [],
      "rawText": " (p: PathLike) => canAccessSync(p, fs.constants.R_OK)",
      "name": "canReadSync",
      "slug": "can-read-sync",
      "parameters": [],
      "description": "File is readable to the calling process",
      "returnType": {
        "rawType": "{}",
        "typeDefinition": {
          "type": "object",
          "properties": {},
          "optional": false
        },
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": true,
        "isPrimitive": false,
        "isEnumLiteral": false,
        "simplifiedSchema": {
          "properties": [],
          "type": "object"
        }
      },
      "maxIndentationDepth": 0,
      "size": {
        "characters": 92,
        "lines": 1,
        "bytes": 92,
        "bytesPerCharacter": 1,
        "charactersPerLine": 92,
        "linesPerFile": 1,
        "numberOfFiles": 1
      },
      "id": "ernyndjlivgvphhygjgjqsmx",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-functions/can-read-sync.json",
      "operationRelativePath": "/db/ts-functions/can-read-sync.json"
    },
    "externalDependantFiles": [
      "/operations/tools/parsing/read-files/read-csv-file/db/ts-imports.json",
      "/operations/tools/parsing/read-files/read-json-file/db/ts-imports.json"
    ]
  },
  {
    "tsFunction": {
      "createdAt": 1667378789036,
      "updatedAt": 1667378789036,
      "deletedAt": 0,
      "createdFirstAt": 1667378789036,
      "publicAuthorization": [
        "read-docs",
        "search"
      ],
      "isApiExposed": false,
      "isPostApi": false,
      "isGetApi": false,
      "isExported": true,
      "operationRelativeTypescriptFilePath": "src/copyAllRelativeFiles.ts",
      "commentsInside": [],
      "rawText": " async (\n  relativeFilePaths: string[],\n  absoluteSourceRoot: string,\n  absoluteDestinationRoot: string,\n  /**\n   * Overwrite existing file or directory\n   */\n  force?: boolean\n) => {\n  const promises = relativeFilePaths.map(async (relativeFilePath) => {\n    const fullSourcePath = path.join(absoluteSourceRoot, relativeFilePath);\n    const fullDestinationPath = path.join(\n      absoluteDestinationRoot,\n      relativeFilePath\n    );\n    if (fs.existsSync(fullSourcePath)) {\n      await fs.cpAsync(fullSourcePath, fullDestinationPath, {\n        recursive: true,\n        force: force || false,\n      });\n    }\n  });\n  await Promise.all(promises);\n\n  return true;\n}",
      "name": "copyAllRelativeFiles",
      "slug": "copy-all-relative-files",
      "parameters": [
        {
          "name": "relativeFilePaths",
          "schema": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "simplifiedSchema": {
            "items": [
              {
                "schema": {
                  "type": "string"
                },
                "name": null
              }
            ],
            "type": "array"
          },
          "required": true
        },
        {
          "name": "absoluteSourceRoot",
          "schema": {
            "type": "string"
          },
          "simplifiedSchema": {
            "type": "string"
          },
          "required": true
        },
        {
          "name": "absoluteDestinationRoot",
          "schema": {
            "type": "string"
          },
          "simplifiedSchema": {
            "type": "string"
          },
          "required": true
        },
        {
          "name": "force",
          "schema": {
            "type": "boolean",
            "description": "Overwrite existing file or directory"
          },
          "simplifiedSchema": {
            "fullComment": "Overwrite existing file or directory",
            "type": "boolean"
          },
          "required": false
        }
      ],
      "description": "copy a bunch of relative files from one root folder to another",
      "returnType": {
        "rawType": "unknown",
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": false,
        "isPrimitive": false,
        "isEnumLiteral": false
      },
      "maxIndentationDepth": 4,
      "size": {
        "characters": 726,
        "lines": 26,
        "bytes": 726,
        "bytesPerCharacter": 1,
        "charactersPerLine": 28,
        "linesPerFile": 26,
        "numberOfFiles": 1
      },
      "id": "haiwyrfhwzeexkfqokvhdxcd",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-functions/copy-all-relative-files.json",
      "operationRelativePath": "/db/ts-functions/copy-all-relative-files.json"
    },
    "externalDependantFiles": [
      "/operations/tools/deployment/bundling/generate-bundle/db/ts-imports.json",
      "/operations/tools/markdown-reader/markdown-reader-functions/db/ts-imports.json"
    ]
  },
  {
    "tsFunction": {
      "createdAt": 1667378800060,
      "updatedAt": 1667378800060,
      "deletedAt": 0,
      "createdFirstAt": 1667378800060,
      "publicAuthorization": [
        "read-docs",
        "search"
      ],
      "isApiExposed": false,
      "isPostApi": false,
      "isGetApi": false,
      "isExported": true,
      "operationRelativeTypescriptFilePath": "src/getAllFoldersUntilFolder.ts",
      "commentsInside": [],
      "rawText": " (folderPath: string): string[] => {\n  const chunks = trimSlashes(folderPath).split(\"/\");\n  // chunks = ['a', 'random', 'path']\n\n  const result = chunks.map((_, index, array) => {\n    return \"/\" + array.slice(0, index + 1).join(\"/\");\n  });\n\n  return result;\n}",
      "name": "getAllFoldersUntilFolder",
      "slug": "get-all-folders-until-folder",
      "parameters": [
        {
          "name": "folderPath",
          "schema": {
            "type": "string"
          },
          "simplifiedSchema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "description": "NB: I already have this somewhere else but couldn't find it!\n\nIf the path is /a/random/path\n\nThe result of this function will be:\n\n['/a', '/a/random', '/a/random/path']",
      "returnType": {
        "rawType": "string[]",
        "typeDefinition": {
          "optional": false,
          "type": "array",
          "items": {
            "type": "string",
            "allOf": [
              {
                "transform": [
                  "trim"
                ]
              },
              {
                "minLength": 1
              }
            ]
          }
        },
        "typeCoverage": 0,
        "isArray": true,
        "isEnum": false,
        "isObject": true,
        "isPrimitive": false,
        "isEnumLiteral": false,
        "simplifiedSchema": {
          "items": [
            {
              "schema": {
                "type": "string"
              },
              "name": null
            }
          ],
          "type": "array"
        }
      },
      "maxIndentationDepth": 2,
      "size": {
        "characters": 427,
        "lines": 16,
        "bytes": 427,
        "bytesPerCharacter": 1,
        "charactersPerLine": 27,
        "linesPerFile": 16,
        "numberOfFiles": 1
      },
      "id": "msjdwhwpxhhptewrggzplcis",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-functions/get-all-folders-until-folder.json",
      "operationRelativePath": "/db/ts-functions/get-all-folders-until-folder.json"
    },
    "externalDependantFiles": [
      "/operations/tools/deployment/bundling/generate-bundle/db/ts-imports.json",
      "/operations/tools/markdown-reader/markdown-reader-functions/db/ts-imports.json"
    ]
  },
  {
    "tsFunction": {
      "createdAt": 1667378807290,
      "updatedAt": 1667378807290,
      "deletedAt": 0,
      "createdFirstAt": 1667378807290,
      "publicAuthorization": [
        "read-docs",
        "search"
      ],
      "isApiExposed": false,
      "isPostApi": false,
      "isGetApi": false,
      "isExported": true,
      "operationRelativeTypescriptFilePath": "src/removeAllExcept.ts",
      "commentsInside": [],
      "rawText": " async (\n  folderPath: string,\n  config?: {\n    /**\n     * array of relative folder paths and file paths that should not be removed (include the extensions!)\n     */\n    ignore?: string[];\n    typeToRemove?: \"file\" | \"folder\";\n  }\n): Promise<\n  {\n    name: string;\n    removed: boolean;\n  }[]\n> => {\n  const filesAndFolders = await fs.readdir(folderPath, {\n    encoding: \"utf8\",\n    withFileTypes: true,\n  });\n\n  const removePromises = filesAndFolders.map((dirent) => {\n    if (config?.ignore?.find((x) => x.includes(dirent.name)))\n      return { name: dirent.name, removed: false };\n\n    if (config?.typeToRemove === \"file\" && !dirent.isFile())\n      return { name: dirent.name, removed: false };\n\n    if (config?.typeToRemove === \"folder\" && !dirent.isDirectory())\n      return { name: dirent.name, removed: false };\n\n    return fs\n      .rm(path.join(folderPath, dirent.name), { recursive: true })\n      .then(() => ({ name: dirent.name, removed: true }));\n  });\n\n  const promised = await Promise.all(removePromises);\n  return promised;\n}",
      "name": "removeAllExcept",
      "slug": "remove-all-except",
      "parameters": [
        {
          "name": "folderPath",
          "schema": {
            "type": "string"
          },
          "simplifiedSchema": {
            "type": "string"
          },
          "required": true
        },
        {
          "name": "config",
          "schema": {
            "type": "object",
            "properties": {
              "ignore": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "array of relative folder paths and file paths that should not be removed (include the extensions!)"
              },
              "typeToRemove": {
                "type": "string",
                "enum": [
                  "file",
                  "folder"
                ]
              }
            },
            "additionalProperties": false
          },
          "simplifiedSchema": {
            "properties": [
              {
                "name": "ignore",
                "required": false,
                "schema": {
                  "fullComment": "array of relative folder paths and file paths that should not be removed (include the extensions!)",
                  "items": [
                    {
                      "schema": {
                        "type": "string"
                      },
                      "name": null
                    }
                  ],
                  "type": "array"
                }
              },
              {
                "name": "typeToRemove",
                "required": false,
                "schema": {
                  "enum": [
                    "file",
                    "folder"
                  ],
                  "type": "string"
                }
              }
            ],
            "type": "object"
          },
          "required": false
        }
      ],
      "description": "Removes everything inside a folder except some files and folders that can, optionally, be ignored for removal. does not remove the folder itself\n\nNB: make this work with subdirectories!",
      "returnType": {
        "rawType": "Promise<{ name: string; removed: boolean; }[]>",
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": false,
        "isPrimitive": false,
        "isEnumLiteral": false
      },
      "maxIndentationDepth": 3,
      "size": {
        "characters": 1226,
        "lines": 40,
        "bytes": 1226,
        "bytesPerCharacter": 1,
        "charactersPerLine": 31,
        "linesPerFile": 40,
        "numberOfFiles": 1
      },
      "id": "vramqqjdexjwweyaihwetcoj",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-functions/remove-all-except.json",
      "operationRelativePath": "/db/ts-functions/remove-all-except.json"
    },
    "externalDependantFiles": [
      "/operations/tools/deployment/bundling/generate-bundle/db/ts-imports.json",
      "/operations/tools/markdown-reader/markdown-reader-functions/db/ts-imports.json"
    ]
  },
  {
    "tsVariable": {
      "createdAt": 1667378793209,
      "updatedAt": 1667378793209,
      "deletedAt": 0,
      "createdFirstAt": 1667378793209,
      "classification": "const",
      "comments": [],
      "isExported": true,
      "name": "canReadSync",
      "slug": "can-read-sync",
      "operationRelativeTypescriptFilePath": "src/files.ts",
      "type": {
        "rawType": "(p: import(\"fs\").PathLike) => boolean",
        "typeDefinition": {
          "type": "object",
          "properties": {},
          "optional": false
        },
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": true,
        "isPrimitive": false,
        "isEnumLiteral": false,
        "simplifiedSchema": {
          "properties": [],
          "type": "object"
        }
      },
      "value": "(p: PathLike) => canAccessSync(p, fs.constants.R_OK)",
      "description": "File is readable to the calling process",
      "id": "nytpceskuidqzscsyepperlu",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-variables/can-read-sync.json",
      "operationRelativePath": "/db/ts-variables/can-read-sync.json"
    },
    "externalDependantFiles": [
      "/operations/tools/parsing/read-files/read-csv-file/db/ts-imports.json",
      "/operations/tools/parsing/read-files/read-json-file/db/ts-imports.json"
    ]
  },
  {
    "tsVariable": {
      "createdAt": 1667378789191,
      "updatedAt": 1667378789191,
      "deletedAt": 0,
      "createdFirstAt": 1667378789191,
      "classification": "const",
      "comments": [],
      "isExported": true,
      "name": "copyAllRelativeFiles",
      "slug": "copy-all-relative-files",
      "operationRelativeTypescriptFilePath": "src/copyAllRelativeFiles.ts",
      "type": {
        "rawType": "(relativeFilePaths: string[], absoluteSourceRoot: string, absoluteDestinationRoot: string, force?: boolean | undefined) => unknown",
        "typeDefinition": {
          "type": "object",
          "properties": {},
          "optional": false
        },
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": true,
        "isPrimitive": false,
        "isEnumLiteral": false,
        "simplifiedSchema": {
          "properties": [],
          "type": "object"
        }
      },
      "value": "async (\n  relativeFilePaths: string[],\n  absoluteSourceRoot: string,\n  absoluteDestinationRoot: string,\n  /**\n   * Overwrite existing file or directory\n   */\n  force?: boolean\n) => {\n  const promises = relativeFilePaths.map(async (relativeFilePath) => {\n    const fullSourcePath = path.join(absoluteSourceRoot, relativeFilePath);\n    const fullDestinationPath = path.join(\n      absoluteDestinationRoot,\n      relativeFilePath\n    );\n    if (fs.existsSync(fullSourcePath)) {\n      await fs.cpAsync(fullSourcePath, fullDestinationPath, {\n        recursive: true,\n        force: force || false,\n      });\n    }\n  });\n  await Promise.all(promises);\n\n  return true;\n}",
      "description": "copy a bunch of relative files from one root folder to another",
      "id": "ollappxtckvsdouxalnmwpek",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-variables/copy-all-relative-files.json",
      "operationRelativePath": "/db/ts-variables/copy-all-relative-files.json"
    },
    "externalDependantFiles": [
      "/operations/tools/deployment/bundling/generate-bundle/db/ts-imports.json",
      "/operations/tools/markdown-reader/markdown-reader-functions/db/ts-imports.json"
    ]
  },
  {
    "tsVariable": {
      "createdAt": 1667378800215,
      "updatedAt": 1667378800215,
      "deletedAt": 0,
      "createdFirstAt": 1667378800215,
      "classification": "const",
      "comments": [],
      "isExported": true,
      "name": "getAllFoldersUntilFolder",
      "slug": "get-all-folders-until-folder",
      "operationRelativeTypescriptFilePath": "src/getAllFoldersUntilFolder.ts",
      "type": {
        "rawType": "(folderPath: string) => string[]",
        "typeDefinition": {
          "type": "object",
          "properties": {},
          "optional": false
        },
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": true,
        "isPrimitive": false,
        "isEnumLiteral": false,
        "simplifiedSchema": {
          "properties": [],
          "type": "object"
        }
      },
      "value": "(folderPath: string): string[] => {\n  const chunks = trimSlashes(folderPath).split(\"/\");\n  // chunks = ['a', 'random', 'path']\n\n  const result = chunks.map((_, index, array) => {\n    return \"/\" + array.slice(0, index + 1).join(\"/\");\n  });\n\n  return result;\n}",
      "description": "NB: I already have this somewhere else but couldn't find it!\n\nIf the path is /a/random/path\n\nThe result of this function will be:\n\n['/a', '/a/random', '/a/random/path']",
      "id": "kdgvpxrfaeakselahisrfpnf",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-variables/get-all-folders-until-folder.json",
      "operationRelativePath": "/db/ts-variables/get-all-folders-until-folder.json"
    },
    "externalDependantFiles": [
      "/operations/tools/deployment/bundling/generate-bundle/db/ts-imports.json",
      "/operations/tools/markdown-reader/markdown-reader-functions/db/ts-imports.json"
    ]
  },
  {
    "tsVariable": {
      "createdAt": 1667378807484,
      "updatedAt": 1667378807484,
      "deletedAt": 0,
      "createdFirstAt": 1667378807484,
      "classification": "const",
      "comments": [],
      "isExported": true,
      "name": "removeAllExcept",
      "slug": "remove-all-except",
      "operationRelativeTypescriptFilePath": "src/removeAllExcept.ts",
      "type": {
        "rawType": "(folderPath: string, config?: { ignore?: string[] | undefined; typeToRemove?: \"file\" | \"folder\" | undefined; } | undefined) => Promise<{ name: string; removed: boolean; }[]>",
        "typeDefinition": {
          "type": "object",
          "properties": {},
          "optional": false
        },
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": true,
        "isPrimitive": false,
        "isEnumLiteral": false,
        "simplifiedSchema": {
          "properties": [],
          "type": "object"
        }
      },
      "value": "async (\n  folderPath: string,\n  config?: {\n    /**\n     * array of relative folder paths and file paths that should not be removed (include the extensions!)\n     */\n    ignore?: string[];\n    typeToRemove?: \"file\" | \"folder\";\n  }\n): Promise<\n  {\n    name: string;\n    removed: boolean;\n  }[]\n> => {\n  const filesAndFolders = await fs.readdir(folderPath, {\n    encoding: \"utf8\",\n    withFileTypes: true,\n  });\n\n  const removePromises = filesAndFolders.map((dirent) => {\n    if (config?.ignore?.find((x) => x.includes(dirent.name)))\n      return { name: dirent.name, removed: false };\n\n    if (config?.typeToRemove === \"file\" && !dirent.isFile())\n      return { name: dirent.name, removed: false };\n\n    if (config?.typeToRemove === \"folder\" && !dirent.isDirectory())\n      return { name: dirent.name, removed: false };\n\n    return fs\n      .rm(path.join(folderPath, dirent.name), { recursive: true })\n      .then(() => ({ name: dirent.name, removed: true }));\n  });\n\n  const promised = await Promise.all(removePromises);\n  return promised;\n}",
      "description": "Removes everything inside a folder except some files and folders that can, optionally, be ignored for removal. does not remove the folder itself\n\nNB: make this work with subdirectories!",
      "id": "whuqehmthhwzokmnpqklllyk",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-variables/remove-all-except.json",
      "operationRelativePath": "/db/ts-variables/remove-all-except.json"
    },
    "externalDependantFiles": [
      "/operations/tools/deployment/bundling/generate-bundle/db/ts-imports.json",
      "/operations/tools/markdown-reader/markdown-reader-functions/db/ts-imports.json"
    ]
  },
  {
    "tsFunction": {
      "createdAt": 1667378792419,
      "updatedAt": 1667378792419,
      "deletedAt": 0,
      "createdFirstAt": 1667378792419,
      "publicAuthorization": [
        "read-docs",
        "search"
      ],
      "isApiExposed": false,
      "isPostApi": false,
      "isGetApi": false,
      "isExported": true,
      "operationRelativeTypescriptFilePath": "src/files.ts",
      "commentsInside": [],
      "rawText": " async (p: PathLike) => canAccess(p, fs.constants.F_OK)",
      "name": "canSee",
      "slug": "can-see",
      "parameters": [],
      "description": "File is visible to the calling process",
      "returnType": {
        "rawType": "unknown",
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": false,
        "isPrimitive": false,
        "isEnumLiteral": false
      },
      "maxIndentationDepth": 0,
      "size": {
        "characters": 93,
        "lines": 1,
        "bytes": 93,
        "bytesPerCharacter": 1,
        "charactersPerLine": 93,
        "linesPerFile": 1,
        "numberOfFiles": 1
      },
      "id": "ibfbxvjeeboswlnikedhgdzv",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-functions/can-see.json",
      "operationRelativePath": "/db/ts-functions/can-see.json"
    },
    "externalDependantFiles": [
      "/operations/tools/control-project/k-explore/db/ts-imports.json"
    ]
  },
  {
    "tsFunction": {
      "createdAt": 1667378792419,
      "updatedAt": 1667378792419,
      "deletedAt": 0,
      "createdFirstAt": 1667378792419,
      "publicAuthorization": [
        "read-docs",
        "search"
      ],
      "isApiExposed": false,
      "isPostApi": false,
      "isGetApi": false,
      "isExported": true,
      "operationRelativeTypescriptFilePath": "src/files.ts",
      "commentsInside": [],
      "rawText": " (p: PathLike) =>\n  canAccessSync(p, fs.constants.W_OK)",
      "name": "canWriteSync",
      "slug": "can-write-sync",
      "parameters": [],
      "description": "File is writable to the calling process",
      "returnType": {
        "rawType": "{}",
        "typeDefinition": {
          "type": "object",
          "properties": {},
          "optional": false
        },
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": true,
        "isPrimitive": false,
        "isEnumLiteral": false,
        "simplifiedSchema": {
          "properties": [],
          "type": "object"
        }
      },
      "maxIndentationDepth": 1,
      "size": {
        "characters": 94,
        "lines": 2,
        "bytes": 94,
        "bytesPerCharacter": 1,
        "charactersPerLine": 47,
        "linesPerFile": 2,
        "numberOfFiles": 1
      },
      "id": "fzznzpbdxdjpoarcgghiychl",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-functions/can-write-sync.json",
      "operationRelativePath": "/db/ts-functions/can-write-sync.json"
    },
    "externalDependantFiles": [
      "/operations/tools/database/fs-orm/db/ts-imports.json"
    ]
  },
  {
    "tsFunction": {
      "createdAt": 1667378790178,
      "updatedAt": 1667378790178,
      "deletedAt": 0,
      "createdFirstAt": 1667378790178,
      "publicAuthorization": [
        "read-docs",
        "search"
      ],
      "isApiExposed": false,
      "isPostApi": false,
      "isGetApi": false,
      "isExported": true,
      "operationRelativeTypescriptFilePath": "src/deprecated.ts",
      "commentsInside": [],
      "rawText": " (\n  folderPath: Path,\n  onlyInCurrentFolder?: boolean\n): Markdown[] => {\n  //1. find all md file paths recursively in this folder, but don't look in node_modules\n\n  const fileFolderPaths = findFilesRecursively({\n    basePath: folderPath,\n    match: (_, extension) => extension === \"md\",\n    onlyInCurrentFolder,\n  });\n\n  const filePaths = fileFolderPaths.map((x) => x.path);\n  const mdArray = filePaths.map(parseMd);\n  return mdArray;\n}",
      "name": "findAllMd",
      "slug": "find-all-md",
      "parameters": [],
      "description": "DEPRECATED: `k-explore` can be used",
      "returnType": {
        "rawType": "import(\"/Users/king/King/operations/tools/control-fs/fs-util/src/types\").Markdown[]",
        "typeCoverage": 0,
        "isArray": true,
        "isEnum": false,
        "isObject": true,
        "isPrimitive": false,
        "isEnumLiteral": false
      },
      "maxIndentationDepth": 2,
      "size": {
        "characters": 472,
        "lines": 16,
        "bytes": 472,
        "bytesPerCharacter": 1,
        "charactersPerLine": 30,
        "linesPerFile": 16,
        "numberOfFiles": 1
      },
      "id": "uuvqqwhmxaiiedwwinpknyqs",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-functions/find-all-md.json",
      "operationRelativePath": "/db/ts-functions/find-all-md.json"
    },
    "externalDependantFiles": [
      "/operations/tools/deployment/deprecated/sensible/sensible-server/db/ts-imports.json"
    ]
  },
  {
    "tsFunction": {
      "createdAt": 1667378803634,
      "updatedAt": 1667378803634,
      "deletedAt": 0,
      "createdFirstAt": 1667378803634,
      "publicAuthorization": [
        "read-docs",
        "search"
      ],
      "isApiExposed": false,
      "isPostApi": false,
      "isGetApi": false,
      "isExported": true,
      "operationRelativeTypescriptFilePath": "src/js.ts",
      "commentsInside": [],
      "rawText": " (pathString: string) => {\n  return path.basename(pathString);\n}",
      "name": "getFileName",
      "slug": "get-file-name",
      "parameters": [
        {
          "name": "pathString",
          "schema": {
            "type": "string"
          },
          "simplifiedSchema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "description": "removes everything before the last slash to get file name",
      "returnType": {
        "rawType": "String",
        "typeDefinition": {
          "optional": false,
          "$ref": "#/definitions/String"
        },
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": true,
        "isPrimitive": false,
        "isEnumLiteral": false
      },
      "maxIndentationDepth": 1,
      "size": {
        "characters": 121,
        "lines": 3,
        "bytes": 121,
        "bytesPerCharacter": 1,
        "charactersPerLine": 40,
        "linesPerFile": 3,
        "numberOfFiles": 1
      },
      "id": "wtyhjuvdgybbdmypvrjeygpp",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-functions/get-file-name.json",
      "operationRelativePath": "/db/ts-functions/get-file-name.json"
    },
    "externalDependantFiles": [
      "/operations/tools/deployment/bundling/yarn-install-new-distribution/db/ts-imports.json"
    ]
  },
  {
    "tsFunction": {
      "createdAt": 1667378801227,
      "updatedAt": 1667378801227,
      "deletedAt": 0,
      "createdFirstAt": 1667378801227,
      "publicAuthorization": [
        "read-docs",
        "search"
      ],
      "isApiExposed": false,
      "isPostApi": false,
      "isGetApi": false,
      "isExported": true,
      "operationRelativeTypescriptFilePath": "src/getFirstAvailableFilename.ts",
      "commentsInside": [],
      "rawText": " (absoluteFilePath: string): string => {\n  // If that doesn't exist, use that\n  if (!fs.existsSync(absoluteFilePath)) return absoluteFilePath;\n\n  const parsedPath = path.parse(absoluteFilePath);\n\n  const newFilename = `${oneUp(parsedPath.name)}${parsedPath.ext}`;\n  const newProposedPath = path.join(parsedPath.dir, newFilename);\n  return getFirstAvailableFilename(newProposedPath);\n}",
      "name": "getFirstAvailableFilename",
      "slug": "get-first-available-filename",
      "parameters": [
        {
          "name": "absoluteFilePath",
          "schema": {
            "type": "string"
          },
          "simplifiedSchema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "description": "",
      "returnType": {
        "rawType": "String",
        "typeDefinition": {
          "optional": false,
          "$ref": "#/definitions/String"
        },
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": true,
        "isPrimitive": false,
        "isEnumLiteral": false
      },
      "maxIndentationDepth": 1,
      "size": {
        "characters": 384,
        "lines": 10,
        "bytes": 384,
        "bytesPerCharacter": 1,
        "charactersPerLine": 38,
        "linesPerFile": 10,
        "numberOfFiles": 1
      },
      "id": "ugsljluyetukgliuhvmyyxfl",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-functions/get-first-available-filename.json",
      "operationRelativePath": "/db/ts-functions/get-first-available-filename.json"
    },
    "externalDependantFiles": [
      "/operations/tools/asset/asset-functions-node/db/ts-imports.json"
    ]
  },
  {
    "tsFunction": {
      "createdAt": 1667378802426,
      "updatedAt": 1667378802426,
      "deletedAt": 0,
      "createdFirstAt": 1667378802426,
      "publicAuthorization": [
        "read-docs",
        "search"
      ],
      "isApiExposed": false,
      "isPostApi": false,
      "isGetApi": false,
      "isExported": true,
      "operationRelativeTypescriptFilePath": "src/getOneFolderUpPath.ts",
      "commentsInside": [],
      "rawText": " (folderPath: string) => {\n  const pathParts = folderPath.split(\"/\");\n  pathParts.pop();\n  return pathParts.join(\"/\");\n}",
      "name": "getOneFolderUpPath",
      "slug": "get-one-folder-up-path",
      "parameters": [
        {
          "name": "folderPath",
          "schema": {
            "type": "string"
          },
          "simplifiedSchema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "description": "Takes a folder path and returns a path that is one folder up",
      "returnType": {
        "rawType": "any",
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": false,
        "isPrimitive": false,
        "isEnumLiteral": false
      },
      "maxIndentationDepth": 1,
      "size": {
        "characters": 180,
        "lines": 5,
        "bytes": 180,
        "bytesPerCharacter": 1,
        "charactersPerLine": 36,
        "linesPerFile": 5,
        "numberOfFiles": 1
      },
      "id": "rcmtksfztshjpyyugabflxgo",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-functions/get-one-folder-up-path.json",
      "operationRelativePath": "/db/ts-functions/get-one-folder-up-path.json"
    },
    "externalDependantFiles": [
      "/operations/tools/markdown-reader/markdown-reader-functions/db/ts-imports.json"
    ]
  },
  {
    "tsFunction": {
      "createdAt": 1667378790178,
      "updatedAt": 1667378790178,
      "deletedAt": 0,
      "createdFirstAt": 1667378790178,
      "publicAuthorization": [
        "read-docs",
        "search"
      ],
      "isApiExposed": false,
      "isPostApi": false,
      "isGetApi": false,
      "isExported": true,
      "operationRelativeTypescriptFilePath": "src/deprecated.ts",
      "commentsInside": [],
      "rawText": " <T>({\n  files,\n  importStrategy = \"default\",\n  list,\n  guard,\n}: {\n  files: Path[];\n  importStrategy?: \"default\" | \"fileName\" | \"list\";\n  list?: string[];\n  guard?: (moduleExports: any) => boolean;\n}) => {\n  return files\n    .map((filePath) => {\n      const moduleExports = require(filePath);\n      if (importStrategy === \"default\") {\n        return moduleExports.default || moduleExports;\n      } else if (importStrategy === \"fileName\") {\n        const fileName = withoutExtension(filePath.split(\"/\").pop()!);\n        return moduleExports[fileName];\n      } else if (importStrategy === \"list\") {\n        return list\n          ? mergeObjectsArray(\n              list.map((item) => {\n                return { [item]: moduleExports[item] };\n              })\n            )\n          : {};\n      }\n    })\n    .filter((moduleExport) =>\n      guard ? guard(moduleExport) && moduleExport : moduleExport\n    ) as T[];\n}",
      "name": "importFromFiles",
      "slug": "import-from-files",
      "parameters": [],
      "description": "DEPRECATED:\n\nworks fine but this requires us to know exactly what we want from the file, so it requires a very clear convention.\nbetter would be to introspect the code and just require whatever's there\nreturns T[] where every T is one of:\n- the default export (importStrategy \"default\")\n- the export with the name of the extension\n- an object with a subset of exports",
      "returnType": {
        "rawType": "T[]",
        "typeDefinition": {
          "optional": false,
          "type": "array",
          "items": {}
        },
        "typeCoverage": 0,
        "isArray": true,
        "isEnum": false,
        "isObject": true,
        "isPrimitive": false,
        "isEnumLiteral": false,
        "simplifiedSchema": {
          "items": [
            {
              "schema": {
                "properties": [],
                "type": "object"
              },
              "name": null
            }
          ],
          "type": "array"
        }
      },
      "maxIndentationDepth": 8,
      "size": {
        "characters": 1279,
        "lines": 40,
        "bytes": 1279,
        "bytesPerCharacter": 1,
        "charactersPerLine": 32,
        "linesPerFile": 40,
        "numberOfFiles": 1
      },
      "id": "koxllqjuytpaumagctkwocbt",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-functions/import-from-files.json",
      "operationRelativePath": "/db/ts-functions/import-from-files.json"
    },
    "externalDependantFiles": [
      "/operations/tools/deployment/deprecated/sensible/sensible-server/db/ts-imports.json"
    ]
  },
  {
    "tsFunction": {
      "createdAt": 1667378790178,
      "updatedAt": 1667378790178,
      "deletedAt": 0,
      "createdFirstAt": 1667378790178,
      "publicAuthorization": [
        "read-docs",
        "search"
      ],
      "isApiExposed": false,
      "isPostApi": false,
      "isGetApi": false,
      "isExported": true,
      "operationRelativeTypescriptFilePath": "src/deprecated.ts",
      "commentsInside": [],
      "rawText": " (moduleExports: any) =>\n  typeof moduleExports === \"object\" && Array.isArray(moduleExports)",
      "name": "isArrayGuard",
      "slug": "is-array-guard",
      "parameters": [],
      "description": "DEPRECATED",
      "returnType": {
        "rawType": "any",
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": false,
        "isPrimitive": false,
        "isEnumLiteral": false
      },
      "maxIndentationDepth": 1,
      "size": {
        "characters": 102,
        "lines": 2,
        "bytes": 102,
        "bytesPerCharacter": 1,
        "charactersPerLine": 51,
        "linesPerFile": 2,
        "numberOfFiles": 1
      },
      "id": "dvnfkzqfjjwqoiuwmfokrkmx",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-functions/is-array-guard.json",
      "operationRelativePath": "/db/ts-functions/is-array-guard.json"
    },
    "externalDependantFiles": [
      "/operations/tools/deployment/deprecated/sensible/sensible-server/db/ts-imports.json"
    ]
  },
  {
    "tsFunction": {
      "createdAt": 1667378805218,
      "updatedAt": 1667378805218,
      "deletedAt": 0,
      "createdFirstAt": 1667378805218,
      "publicAuthorization": [
        "read-docs",
        "search"
      ],
      "isApiExposed": false,
      "isPostApi": false,
      "isGetApi": false,
      "isExported": true,
      "operationRelativeTypescriptFilePath": "src/parseMd.ts",
      "commentsInside": [],
      "rawText": " (mdFilePath: Path): Markdown => {\n  const fileContents = fs.readFileSync(mdFilePath, \"utf8\");\n  const fileStats = fs.statSync(mdFilePath);\n\n  const config: matter.GrayMatterOption<string, any> | undefined = undefined;\n  const matterResult = matter(fileContents, config);\n\n  const fileName = mdFilePath.split(\"/\").pop()!.replace(/\\.md$/, \"\");\n\n  return {\n    content: matterResult.content,\n    createdAt: fileStats.birthtimeMs,\n    fileName,\n    openedAt: fileStats.atimeMs,\n    params: matterResult.data,\n    updatedAt: fileStats.ctimeMs,\n    modifiedAt: fileStats.mtimeMs,\n  };\n}",
      "name": "parseMd",
      "slug": "parse-md",
      "parameters": [
        {
          "name": "mdFilePath",
          "schema": {
            "$ref": "#/definitions/Path",
            "description": "path to a md file"
          },
          "required": true
        }
      ],
      "description": "DEPRECATED: just use `md-to-json-parse`\n\nparse a md file to all the needed info\n@param mdFilePath path to a md file\n@returns Md",
      "returnType": {
        "rawType": "import(\"/Users/king/King/operations/tools/control-fs/fs-util/src/types\").Markdown",
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": true,
        "isPrimitive": false,
        "isEnumLiteral": false
      },
      "maxIndentationDepth": 2,
      "size": {
        "characters": 708,
        "lines": 23,
        "bytes": 708,
        "bytesPerCharacter": 1,
        "charactersPerLine": 31,
        "linesPerFile": 23,
        "numberOfFiles": 1
      },
      "id": "mofybxoxcvhdahcewarkdgjy",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-functions/parse-md.json",
      "operationRelativePath": "/db/ts-functions/parse-md.json"
    },
    "externalDependantFiles": [
      "/operations/tools/deployment/deprecated/sensible/sensible-server/db/ts-imports.json"
    ]
  },
  {
    "tsFunction": {
      "createdAt": 1667378808388,
      "updatedAt": 1667378808388,
      "deletedAt": 0,
      "createdFirstAt": 1667378808388,
      "publicAuthorization": [
        "read-docs",
        "search"
      ],
      "isApiExposed": false,
      "isPostApi": false,
      "isGetApi": false,
      "isExported": true,
      "operationRelativeTypescriptFilePath": "src/renameAndCreate.ts",
      "commentsInside": [],
      "rawText": " async (oldPath: string, newPath: string) => {\n  const newPathFolderPath = path.parse(newPath).dir;\n\n  if (!fs.existsSync(newPathFolderPath)) {\n    await fs.mkdir(newPathFolderPath, { recursive: true });\n  }\n\n  await fs.rename(oldPath, newPath);\n}",
      "name": "renameAndCreate",
      "slug": "rename-and-create",
      "parameters": [
        {
          "name": "oldPath",
          "schema": {
            "type": "string"
          },
          "simplifiedSchema": {
            "type": "string"
          },
          "required": true
        },
        {
          "name": "newPath",
          "schema": {
            "type": "string"
          },
          "simplifiedSchema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "description": "",
      "returnType": {
        "rawType": "any",
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": false,
        "isPrimitive": false,
        "isEnumLiteral": false
      },
      "maxIndentationDepth": 2,
      "size": {
        "characters": 247,
        "lines": 9,
        "bytes": 247,
        "bytesPerCharacter": 1,
        "charactersPerLine": 27,
        "linesPerFile": 9,
        "numberOfFiles": 1
      },
      "id": "ihbsvaucsjujjxkaxdnvehmg",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-functions/rename-and-create.json",
      "operationRelativePath": "/db/ts-functions/rename-and-create.json"
    },
    "externalDependantFiles": [
      "/operations/tools/asset/asset-functions-node/db/ts-imports.json"
    ]
  },
  {
    "tsInterface": {
      "createdAt": 1667378809243,
      "updatedAt": 1667378809243,
      "deletedAt": 0,
      "createdFirstAt": 1667378809243,
      "id": "markdown",
      "name": "Markdown",
      "slug": "markdown",
      "operationRelativeTypescriptFilePath": "src/types.ts",
      "hasGeneric": false,
      "isExported": true,
      "rawText": "\n\nexport interface Markdown {\n  fileName: string;\n  params: {\n    title?: string;\n    author?: string;\n  } & {\n    [key: string]: string;\n  };\n  createdAt: UnixTimestamp;\n  updatedAt: UnixTimestamp;\n  modifiedAt: UnixTimestamp;\n  openedAt: UnixTimestamp;\n  content: MarkdownContent;\n}",
      "extensions": [],
      "isOperationIndex": false,
      "description": "",
      "isDbModel": false,
      "commentsInside": [],
      "type": {
        "typeDefinition": {
          "type": "object",
          "properties": {
            "fileName": {
              "type": "string"
            },
            "params": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "properties": {
                "title": {
                  "type": "string"
                },
                "author": {
                  "type": "string"
                }
              }
            },
            "createdAt": {
              "$ref": "#/definitions/UnixTimestamp"
            },
            "updatedAt": {
              "$ref": "#/definitions/UnixTimestamp"
            },
            "modifiedAt": {
              "$ref": "#/definitions/UnixTimestamp"
            },
            "openedAt": {
              "$ref": "#/definitions/UnixTimestamp"
            },
            "content": {
              "$ref": "#/definitions/MarkdownContent"
            }
          },
          "required": [
            "fileName",
            "params",
            "createdAt",
            "updatedAt",
            "modifiedAt",
            "openedAt",
            "content"
          ],
          "additionalProperties": false
        },
        "simplifiedSchema": {
          "properties": [
            {
              "name": "fileName",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "params",
              "required": true,
              "schema": {
                "properties": [
                  {
                    "name": "title",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "author",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "type": "object"
              }
            },
            {
              "name": "createdAt",
              "required": true,
              "schema": {
                "fullComment": "",
                "type": "number"
              }
            },
            {
              "name": "updatedAt",
              "required": true,
              "schema": {
                "fullComment": "",
                "type": "number"
              }
            },
            {
              "name": "modifiedAt",
              "required": true,
              "schema": {
                "fullComment": "",
                "type": "number"
              }
            },
            {
              "name": "openedAt",
              "required": true,
              "schema": {
                "fullComment": "",
                "type": "number"
              }
            },
            {
              "name": "content",
              "required": true,
              "schema": {
                "fullComment": "",
                "type": "string"
              }
            }
          ],
          "type": "object"
        },
        "typeCoverage": 0,
        "rawType": "Markdown",
        "isArray": false,
        "isEnum": false,
        "isEnumLiteral": false,
        "isObject": false,
        "isPrimitive": false
      },
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-interfaces/markdown.json",
      "operationRelativePath": "/db/ts-interfaces/markdown.json"
    },
    "externalDependantFiles": [
      "/operations/tools/deployment/deprecated/sensible/sensible-core/db/ts-imports.json"
    ]
  },
  {
    "tsVariable": {
      "createdAt": 1667378793208,
      "updatedAt": 1667378793208,
      "deletedAt": 0,
      "createdFirstAt": 1667378793208,
      "classification": "const",
      "comments": [],
      "isExported": true,
      "name": "canSee",
      "slug": "can-see",
      "operationRelativeTypescriptFilePath": "src/files.ts",
      "type": {
        "rawType": "(p: import(\"fs\").PathLike) => unknown",
        "typeDefinition": {
          "type": "object",
          "properties": {},
          "optional": false
        },
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": true,
        "isPrimitive": false,
        "isEnumLiteral": false,
        "simplifiedSchema": {
          "properties": [],
          "type": "object"
        }
      },
      "value": "async (p: PathLike) => canAccess(p, fs.constants.F_OK)",
      "description": "File is visible to the calling process",
      "id": "nxomywuteeyvgegtjcfogpnd",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-variables/can-see.json",
      "operationRelativePath": "/db/ts-variables/can-see.json"
    },
    "externalDependantFiles": [
      "/operations/tools/control-project/k-explore/db/ts-imports.json"
    ]
  },
  {
    "tsVariable": {
      "createdAt": 1667378793209,
      "updatedAt": 1667378793209,
      "deletedAt": 0,
      "createdFirstAt": 1667378793209,
      "classification": "const",
      "comments": [],
      "isExported": true,
      "name": "canWriteSync",
      "slug": "can-write-sync",
      "operationRelativeTypescriptFilePath": "src/files.ts",
      "type": {
        "rawType": "(p: import(\"fs\").PathLike) => boolean",
        "typeDefinition": {
          "type": "object",
          "properties": {},
          "optional": false
        },
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": true,
        "isPrimitive": false,
        "isEnumLiteral": false,
        "simplifiedSchema": {
          "properties": [],
          "type": "object"
        }
      },
      "value": "(p: PathLike) =>\n  canAccessSync(p, fs.constants.W_OK)",
      "description": "File is writable to the calling process",
      "id": "hxzlvyxnylchuklnwqwdxkcz",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-variables/can-write-sync.json",
      "operationRelativePath": "/db/ts-variables/can-write-sync.json"
    },
    "externalDependantFiles": [
      "/operations/tools/database/fs-orm/db/ts-imports.json"
    ]
  },
  {
    "tsVariable": {
      "createdAt": 1667378790551,
      "updatedAt": 1667378790551,
      "deletedAt": 0,
      "createdFirstAt": 1667378790551,
      "classification": "const",
      "comments": [],
      "isExported": true,
      "name": "findAllMd",
      "slug": "find-all-md",
      "operationRelativeTypescriptFilePath": "src/deprecated.ts",
      "type": {
        "rawType": "(folderPath: string, onlyInCurrentFolder?: boolean | undefined) => import(\"/Users/king/King/operations/tools/control-fs/fs-util/src/types\").Markdown[]",
        "typeDefinition": {
          "type": "object",
          "properties": {},
          "optional": false
        },
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": true,
        "isPrimitive": false,
        "isEnumLiteral": false,
        "simplifiedSchema": {
          "properties": [],
          "type": "object"
        }
      },
      "value": "(\n  folderPath: Path,\n  onlyInCurrentFolder?: boolean\n): Markdown[] => {\n  //1. find all md file paths recursively in this folder, but don't look in node_modules\n\n  const fileFolderPaths = findFilesRecursively({\n    basePath: folderPath,\n    match: (_, extension) => extension === \"md\",\n    onlyInCurrentFolder,\n  });\n\n  const filePaths = fileFolderPaths.map((x) => x.path);\n  const mdArray = filePaths.map(parseMd);\n  return mdArray;\n}",
      "description": "DEPRECATED: `k-explore` can be used",
      "id": "fonxbiqwbgzqiyrtmotusvmh",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-variables/find-all-md.json",
      "operationRelativePath": "/db/ts-variables/find-all-md.json"
    },
    "externalDependantFiles": [
      "/operations/tools/deployment/deprecated/sensible/sensible-server/db/ts-imports.json"
    ]
  },
  {
    "tsVariable": {
      "createdAt": 1667378803944,
      "updatedAt": 1667378803944,
      "deletedAt": 0,
      "createdFirstAt": 1667378803944,
      "classification": "const",
      "comments": [],
      "isExported": true,
      "name": "getFileName",
      "slug": "get-file-name",
      "operationRelativeTypescriptFilePath": "src/js.ts",
      "type": {
        "rawType": "(pathString: string) => string",
        "typeDefinition": {
          "type": "object",
          "properties": {},
          "optional": false
        },
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": true,
        "isPrimitive": false,
        "isEnumLiteral": false,
        "simplifiedSchema": {
          "properties": [],
          "type": "object"
        }
      },
      "value": "(pathString: string) => {\n  return path.basename(pathString);\n}",
      "description": "removes everything before the last slash to get file name",
      "id": "ixyiyhibgtqutrzktiswdmwl",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-variables/get-file-name.json",
      "operationRelativePath": "/db/ts-variables/get-file-name.json"
    },
    "externalDependantFiles": [
      "/operations/tools/deployment/bundling/yarn-install-new-distribution/db/ts-imports.json"
    ]
  },
  {
    "tsVariable": {
      "createdAt": 1667378801484,
      "updatedAt": 1667378801484,
      "deletedAt": 0,
      "createdFirstAt": 1667378801484,
      "classification": "const",
      "comments": [],
      "isExported": true,
      "name": "getFirstAvailableFilename",
      "slug": "get-first-available-filename",
      "operationRelativeTypescriptFilePath": "src/getFirstAvailableFilename.ts",
      "type": {
        "rawType": "(absoluteFilePath: string) => string",
        "typeDefinition": {
          "type": "object",
          "properties": {},
          "optional": false
        },
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": true,
        "isPrimitive": false,
        "isEnumLiteral": false,
        "simplifiedSchema": {
          "properties": [],
          "type": "object"
        }
      },
      "value": "(absoluteFilePath: string): string => {\n  // If that doesn't exist, use that\n  if (!fs.existsSync(absoluteFilePath)) return absoluteFilePath;\n\n  const parsedPath = path.parse(absoluteFilePath);\n\n  const newFilename = `${oneUp(parsedPath.name)}${parsedPath.ext}`;\n  const newProposedPath = path.join(parsedPath.dir, newFilename);\n  return getFirstAvailableFilename(newProposedPath);\n}",
      "description": "",
      "id": "sggjhlwuvixwpgkedzdvlfzn",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-variables/get-first-available-filename.json",
      "operationRelativePath": "/db/ts-variables/get-first-available-filename.json"
    },
    "externalDependantFiles": [
      "/operations/tools/asset/asset-functions-node/db/ts-imports.json"
    ]
  },
  {
    "tsVariable": {
      "createdAt": 1667378802574,
      "updatedAt": 1667378802574,
      "deletedAt": 0,
      "createdFirstAt": 1667378802574,
      "classification": "const",
      "comments": [],
      "isExported": true,
      "name": "getOneFolderUpPath",
      "slug": "get-one-folder-up-path",
      "operationRelativeTypescriptFilePath": "src/getOneFolderUpPath.ts",
      "type": {
        "rawType": "(folderPath: string) => any",
        "typeDefinition": {
          "type": "object",
          "properties": {},
          "optional": false
        },
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": true,
        "isPrimitive": false,
        "isEnumLiteral": false,
        "simplifiedSchema": {
          "properties": [],
          "type": "object"
        }
      },
      "value": "(folderPath: string) => {\n  const pathParts = folderPath.split(\"/\");\n  pathParts.pop();\n  return pathParts.join(\"/\");\n}",
      "description": "Takes a folder path and returns a path that is one folder up",
      "id": "eedvhonmlblbzrlbdymjexpp",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-variables/get-one-folder-up-path.json",
      "operationRelativePath": "/db/ts-variables/get-one-folder-up-path.json"
    },
    "externalDependantFiles": [
      "/operations/tools/markdown-reader/markdown-reader-functions/db/ts-imports.json"
    ]
  },
  {
    "tsVariable": {
      "createdAt": 1667378790551,
      "updatedAt": 1667378790551,
      "deletedAt": 0,
      "createdFirstAt": 1667378790551,
      "classification": "const",
      "comments": [],
      "isExported": true,
      "name": "importFromFiles",
      "slug": "import-from-files",
      "operationRelativeTypescriptFilePath": "src/deprecated.ts",
      "type": {
        "rawType": "<T>({ files, importStrategy, list, guard, }: { files: string[]; importStrategy?: \"default\" | \"fileName\" | \"list\" | undefined; list?: string[] | undefined; guard?: ((moduleExports: any) => boolean) | undefined; }) => T[]",
        "typeDefinition": {
          "type": "object",
          "properties": {},
          "optional": false
        },
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": true,
        "isPrimitive": false,
        "isEnumLiteral": false,
        "simplifiedSchema": {
          "properties": [],
          "type": "object"
        }
      },
      "value": "<T>({\n  files,\n  importStrategy = \"default\",\n  list,\n  guard,\n}: {\n  files: Path[];\n  importStrategy?: \"default\" | \"fileName\" | \"list\";\n  list?: string[];\n  guard?: (moduleExports: any) => boolean;\n}) => {\n  return files\n    .map((filePath) => {\n      const moduleExports = require(filePath);\n      if (importStrategy === \"default\") {\n        return moduleExports.default || moduleExports;\n      } else if (importStrategy === \"fileName\") {\n        const fileName = withoutExtension(filePath.split(\"/\").pop()!);\n        return moduleExports[fileName];\n      } else if (importStrategy === \"list\") {\n        return list\n          ? mergeObjectsArray(\n              list.map((item) => {\n                return { [item]: moduleExports[item] };\n              })\n            )\n          : {};\n      }\n    })\n    .filter((moduleExport) =>\n      guard ? guard(moduleExport) && moduleExport : moduleExport\n    ) as T[];\n}",
      "description": "DEPRECATED:\n\nworks fine but this requires us to know exactly what we want from the file, so it requires a very clear convention.\nbetter would be to introspect the code and just require whatever's there\nreturns T[] where every T is one of:\n- the default export (importStrategy \"default\")\n- the export with the name of the extension\n- an object with a subset of exports",
      "id": "jlrefhisvnrxhflsjgctlnfx",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-variables/import-from-files.json",
      "operationRelativePath": "/db/ts-variables/import-from-files.json"
    },
    "externalDependantFiles": [
      "/operations/tools/deployment/deprecated/sensible/sensible-server/db/ts-imports.json"
    ]
  },
  {
    "tsVariable": {
      "createdAt": 1667378790551,
      "updatedAt": 1667378790551,
      "deletedAt": 0,
      "createdFirstAt": 1667378790551,
      "classification": "const",
      "comments": [],
      "isExported": true,
      "name": "isArrayGuard",
      "slug": "is-array-guard",
      "operationRelativeTypescriptFilePath": "src/deprecated.ts",
      "type": {
        "rawType": "(moduleExports: any) => any",
        "typeDefinition": {
          "type": "object",
          "properties": {},
          "optional": false
        },
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": true,
        "isPrimitive": false,
        "isEnumLiteral": false,
        "simplifiedSchema": {
          "properties": [],
          "type": "object"
        }
      },
      "value": "(moduleExports: any) =>\n  typeof moduleExports === \"object\" && Array.isArray(moduleExports)",
      "description": "DEPRECATED",
      "id": "awiuxatbgcqyewctylfblbih",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-variables/is-array-guard.json",
      "operationRelativePath": "/db/ts-variables/is-array-guard.json"
    },
    "externalDependantFiles": [
      "/operations/tools/deployment/deprecated/sensible/sensible-server/db/ts-imports.json"
    ]
  },
  {
    "tsVariable": {
      "createdAt": 1667378790551,
      "updatedAt": 1667378790551,
      "deletedAt": 0,
      "createdFirstAt": 1667378790551,
      "classification": "const",
      "comments": [],
      "isExported": true,
      "name": "mergeObjectsArray",
      "slug": "merge-objects-array",
      "operationRelativeTypescriptFilePath": "src/deprecated.ts",
      "type": {
        "rawType": "<T extends { [key: string]: any; }>(objectsArray: T[]) => T",
        "typeDefinition": {
          "type": "object",
          "properties": {},
          "optional": false
        },
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": true,
        "isPrimitive": false,
        "isEnumLiteral": false,
        "simplifiedSchema": {
          "properties": [],
          "type": "object"
        }
      },
      "value": "mergeObjectsArrayJsUtil",
      "description": "DEPRECATED: in favor of mergeObjectsArray from \"js-util\"",
      "id": "izgitraozpjqzwxhsumuaion",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-variables/merge-objects-array.json",
      "operationRelativePath": "/db/ts-variables/merge-objects-array.json"
    },
    "externalDependantFiles": [
      "/operations/tools/deployment/deprecated/sensible/sensible-server/db/ts-imports.json"
    ]
  },
  {
    "tsVariable": {
      "createdAt": 1667378805370,
      "updatedAt": 1667378805370,
      "deletedAt": 0,
      "createdFirstAt": 1667378805370,
      "classification": "const",
      "comments": [],
      "isExported": true,
      "name": "parseMd",
      "slug": "parse-md",
      "operationRelativeTypescriptFilePath": "src/parseMd.ts",
      "type": {
        "rawType": "(mdFilePath: string) => import(\"/Users/king/King/operations/tools/control-fs/fs-util/src/types\").Markdown",
        "typeDefinition": {
          "type": "object",
          "properties": {},
          "optional": false
        },
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": true,
        "isPrimitive": false,
        "isEnumLiteral": false,
        "simplifiedSchema": {
          "properties": [],
          "type": "object"
        }
      },
      "value": "(mdFilePath: Path): Markdown => {\n  const fileContents = fs.readFileSync(mdFilePath, \"utf8\");\n  const fileStats = fs.statSync(mdFilePath);\n\n  const config: matter.GrayMatterOption<string, any> | undefined = undefined;\n  const matterResult = matter(fileContents, config);\n\n  const fileName = mdFilePath.split(\"/\").pop()!.replace(/\\.md$/, \"\");\n\n  return {\n    content: matterResult.content,\n    createdAt: fileStats.birthtimeMs,\n    fileName,\n    openedAt: fileStats.atimeMs,\n    params: matterResult.data,\n    updatedAt: fileStats.ctimeMs,\n    modifiedAt: fileStats.mtimeMs,\n  };\n}",
      "description": "DEPRECATED: just use `md-to-json-parse`\n\nparse a md file to all the needed info\n@param mdFilePath path to a md file\n@returns Md",
      "id": "kuzrjzquubjpimucyxnmqhgk",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-variables/parse-md.json",
      "operationRelativePath": "/db/ts-variables/parse-md.json"
    },
    "externalDependantFiles": [
      "/operations/tools/deployment/deprecated/sensible/sensible-server/db/ts-imports.json"
    ]
  },
  {
    "tsVariable": {
      "createdAt": 1667378808542,
      "updatedAt": 1667378808542,
      "deletedAt": 0,
      "createdFirstAt": 1667378808542,
      "classification": "const",
      "comments": [],
      "isExported": true,
      "name": "renameAndCreate",
      "slug": "rename-and-create",
      "operationRelativeTypescriptFilePath": "src/renameAndCreate.ts",
      "type": {
        "rawType": "(oldPath: string, newPath: string) => any",
        "typeDefinition": {
          "type": "object",
          "properties": {},
          "optional": false
        },
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": true,
        "isPrimitive": false,
        "isEnumLiteral": false,
        "simplifiedSchema": {
          "properties": [],
          "type": "object"
        }
      },
      "value": "async (oldPath: string, newPath: string) => {\n  const newPathFolderPath = path.parse(newPath).dir;\n\n  if (!fs.existsSync(newPathFolderPath)) {\n    await fs.mkdir(newPathFolderPath, { recursive: true });\n  }\n\n  await fs.rename(oldPath, newPath);\n}",
      "description": "",
      "id": "ocyebovvkqdllxhxsgqlfhki",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-variables/rename-and-create.json",
      "operationRelativePath": "/db/ts-variables/rename-and-create.json"
    },
    "externalDependantFiles": [
      "/operations/tools/asset/asset-functions-node/db/ts-imports.json"
    ]
  },
  {
    "tsFunction": {
      "createdAt": 1667378792419,
      "updatedAt": 1667378792419,
      "deletedAt": 0,
      "createdFirstAt": 1667378792419,
      "publicAuthorization": [
        "read-docs",
        "search"
      ],
      "isApiExposed": false,
      "isPostApi": false,
      "isGetApi": false,
      "isExported": true,
      "operationRelativeTypescriptFilePath": "src/files.ts",
      "commentsInside": [],
      "rawText": " (p: PathLike, mode: number): boolean => {\n  try {\n    fs.accessSync(p, mode);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}",
      "name": "canAccessSync",
      "slug": "can-access-sync",
      "parameters": [],
      "description": "uses fs.access to determine if something can be accessed\n\nCheck File access constants for possible values of mode. It is possible to create a mask consisting of the bitwise OR of two or more values (e.g. fs.constants.W_OK | fs.constants.R_OK).",
      "returnType": {
        "rawType": "{}",
        "typeDefinition": {
          "type": "object",
          "properties": {},
          "optional": false
        },
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": true,
        "isPrimitive": false,
        "isEnumLiteral": false,
        "simplifiedSchema": {
          "properties": [],
          "type": "object"
        }
      },
      "maxIndentationDepth": 2,
      "size": {
        "characters": 378,
        "lines": 10,
        "bytes": 378,
        "bytesPerCharacter": 1,
        "charactersPerLine": 38,
        "linesPerFile": 10,
        "numberOfFiles": 1
      },
      "id": "ctckcudjaugujphfevtgwjnb",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-functions/can-access-sync.json",
      "operationRelativePath": "/db/ts-functions/can-access-sync.json"
    },
    "externalDependantFiles": []
  },
  {
    "tsFunction": {
      "createdAt": 1667378792419,
      "updatedAt": 1667378792419,
      "deletedAt": 0,
      "createdFirstAt": 1667378792419,
      "publicAuthorization": [
        "read-docs",
        "search"
      ],
      "isApiExposed": false,
      "isPostApi": false,
      "isGetApi": false,
      "isExported": true,
      "operationRelativeTypescriptFilePath": "src/files.ts",
      "commentsInside": [],
      "rawText": " async (\n  p: PathLike,\n  mode: number\n): Promise<boolean> => {\n  try {\n    await fs.access(p, mode);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}",
      "name": "canAccess",
      "slug": "can-access",
      "parameters": [],
      "description": "uses fs.access to determine if something can be accessed\n\nCheck File access constants for possible values of mode. It is possible to create a mask consisting of the bitwise OR of two or more values (e.g. fs.constants.W_OK | fs.constants.R_OK).",
      "returnType": {
        "rawType": "Promise<boolean>",
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": false,
        "isPrimitive": false,
        "isEnumLiteral": false
      },
      "maxIndentationDepth": 2,
      "size": {
        "characters": 401,
        "lines": 13,
        "bytes": 401,
        "bytesPerCharacter": 1,
        "charactersPerLine": 31,
        "linesPerFile": 13,
        "numberOfFiles": 1
      },
      "id": "otcmdfikvwiwnlwyqqkhinbz",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-functions/can-access.json",
      "operationRelativePath": "/db/ts-functions/can-access.json"
    },
    "externalDependantFiles": []
  },
  {
    "tsFunction": {
      "createdAt": 1667378792419,
      "updatedAt": 1667378792419,
      "deletedAt": 0,
      "createdFirstAt": 1667378792419,
      "publicAuthorization": [
        "read-docs",
        "search"
      ],
      "isApiExposed": false,
      "isPostApi": false,
      "isGetApi": false,
      "isExported": true,
      "operationRelativeTypescriptFilePath": "src/files.ts",
      "commentsInside": [],
      "rawText": " (p: PathLike) =>\n  canAccessSync(p, fs.constants.X_OK)",
      "name": "canExecuteSync",
      "slug": "can-execute-sync",
      "parameters": [],
      "description": "File is executable to the calling process",
      "returnType": {
        "rawType": "{}",
        "typeDefinition": {
          "type": "object",
          "properties": {},
          "optional": false
        },
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": true,
        "isPrimitive": false,
        "isEnumLiteral": false,
        "simplifiedSchema": {
          "properties": [],
          "type": "object"
        }
      },
      "maxIndentationDepth": 1,
      "size": {
        "characters": 96,
        "lines": 2,
        "bytes": 96,
        "bytesPerCharacter": 1,
        "charactersPerLine": 48,
        "linesPerFile": 2,
        "numberOfFiles": 1
      },
      "id": "wivyrrycyxurxhvqbvuluwmr",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-functions/can-execute-sync.json",
      "operationRelativePath": "/db/ts-functions/can-execute-sync.json"
    },
    "externalDependantFiles": []
  },
  {
    "tsFunction": {
      "createdAt": 1667378792419,
      "updatedAt": 1667378792419,
      "deletedAt": 0,
      "createdFirstAt": 1667378792419,
      "publicAuthorization": [
        "read-docs",
        "search"
      ],
      "isApiExposed": false,
      "isPostApi": false,
      "isGetApi": false,
      "isExported": true,
      "operationRelativeTypescriptFilePath": "src/files.ts",
      "commentsInside": [],
      "rawText": " async (p: PathLike) =>\n  canAccess(p, fs.constants.X_OK)",
      "name": "canExecute",
      "slug": "can-execute",
      "parameters": [],
      "description": "File is executable to the calling process",
      "returnType": {
        "rawType": "unknown",
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": false,
        "isPrimitive": false,
        "isEnumLiteral": false
      },
      "maxIndentationDepth": 1,
      "size": {
        "characters": 98,
        "lines": 2,
        "bytes": 98,
        "bytesPerCharacter": 1,
        "charactersPerLine": 49,
        "linesPerFile": 2,
        "numberOfFiles": 1
      },
      "id": "mhrfqxrzcuwyaiocvkawzeto",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-functions/can-execute.json",
      "operationRelativePath": "/db/ts-functions/can-execute.json"
    },
    "externalDependantFiles": []
  },
  {
    "tsFunction": {
      "createdAt": 1667378792419,
      "updatedAt": 1667378792419,
      "deletedAt": 0,
      "createdFirstAt": 1667378792419,
      "publicAuthorization": [
        "read-docs",
        "search"
      ],
      "isApiExposed": false,
      "isPostApi": false,
      "isGetApi": false,
      "isExported": true,
      "operationRelativeTypescriptFilePath": "src/files.ts",
      "commentsInside": [],
      "rawText": " async (p: PathLike) =>\n  canAccessSync(p, fs.constants.F_OK)",
      "name": "canSeeSync",
      "slug": "can-see-sync",
      "parameters": [],
      "description": "File is visible to the calling process",
      "returnType": {
        "rawType": "unknown",
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": false,
        "isPrimitive": false,
        "isEnumLiteral": false
      },
      "maxIndentationDepth": 1,
      "size": {
        "characters": 99,
        "lines": 2,
        "bytes": 99,
        "bytesPerCharacter": 1,
        "charactersPerLine": 50,
        "linesPerFile": 2,
        "numberOfFiles": 1
      },
      "id": "zzdgmpgqqxacfogkinfclogb",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-functions/can-see-sync.json",
      "operationRelativePath": "/db/ts-functions/can-see-sync.json"
    },
    "externalDependantFiles": []
  },
  {
    "tsFunction": {
      "createdAt": 1667378792419,
      "updatedAt": 1667378792419,
      "deletedAt": 0,
      "createdFirstAt": 1667378792419,
      "publicAuthorization": [
        "read-docs",
        "search"
      ],
      "isApiExposed": false,
      "isPostApi": false,
      "isGetApi": false,
      "isExported": true,
      "operationRelativeTypescriptFilePath": "src/files.ts",
      "commentsInside": [],
      "rawText": " async (p: PathLike) => canAccess(p, fs.constants.W_OK)",
      "name": "canWrite",
      "slug": "can-write",
      "parameters": [],
      "description": "File is writable to the calling process",
      "returnType": {
        "rawType": "unknown",
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": false,
        "isPrimitive": false,
        "isEnumLiteral": false
      },
      "maxIndentationDepth": 0,
      "size": {
        "characters": 94,
        "lines": 1,
        "bytes": 94,
        "bytesPerCharacter": 1,
        "charactersPerLine": 94,
        "linesPerFile": 1,
        "numberOfFiles": 1
      },
      "id": "kfyxnaxhbbetopuhyggwhioc",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-functions/can-write.json",
      "operationRelativePath": "/db/ts-functions/can-write.json"
    },
    "externalDependantFiles": []
  },
  {
    "tsFunction": {
      "createdAt": 1667378795420,
      "updatedAt": 1667378795420,
      "deletedAt": 0,
      "createdFirstAt": 1667378795420,
      "publicAuthorization": [
        "read-docs",
        "search"
      ],
      "isApiExposed": false,
      "isPostApi": false,
      "isGetApi": false,
      "isExported": true,
      "operationRelativeTypescriptFilePath": "src/findFileNameCaseInsensitive.ts",
      "commentsInside": [],
      "rawText": " async (\n  folderPath: string,\n  /**\n   * fileName with extension\n   */\n  fileName: string\n): Promise<string | undefined> => {\n  if (!fs.existsSync(folderPath)) return;\n\n  const results = await fs.readdir(folderPath);\n\n  const foundPath = results\n    .map((fileName) => {\n      const absolutePath = path.join(folderPath, fileName);\n      return absolutePath;\n    })\n    .find((absolutePath) => {\n      const parsedPath = path.parse(absolutePath);\n      const isMatchCaseInsensitive =\n        parsedPath.base.toLowerCase() === fileName.toLowerCase();\n\n      return isMatchCaseInsensitive;\n    });\n\n  return foundPath;\n}",
      "name": "findFileNameCaseInsensitive",
      "slug": "find-file-name-case-insensitive",
      "parameters": [
        {
          "name": "folderPath",
          "schema": {
            "type": "string"
          },
          "simplifiedSchema": {
            "type": "string"
          },
          "required": true
        },
        {
          "name": "fileName",
          "schema": {
            "type": "string",
            "description": "fileName with extension"
          },
          "simplifiedSchema": {
            "fullComment": "fileName with extension",
            "type": "string"
          },
          "required": true
        }
      ],
      "description": "returns a path of a fileName",
      "returnType": {
        "rawType": "Promise<string | undefined>",
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": false,
        "isPrimitive": false,
        "isEnumLiteral": false
      },
      "maxIndentationDepth": 4,
      "size": {
        "characters": 646,
        "lines": 26,
        "bytes": 646,
        "bytesPerCharacter": 1,
        "charactersPerLine": 25,
        "linesPerFile": 26,
        "numberOfFiles": 1
      },
      "id": "oqmbvfyibyvfnrcwxhomwizt",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-functions/find-file-name-case-insensitive.json",
      "operationRelativePath": "/db/ts-functions/find-file-name-case-insensitive.json"
    },
    "externalDependantFiles": []
  },
  {
    "tsFunction": {
      "createdAt": 1667378790178,
      "updatedAt": 1667378790178,
      "deletedAt": 0,
      "createdFirstAt": 1667378790178,
      "publicAuthorization": [
        "read-docs",
        "search"
      ],
      "isApiExposed": false,
      "isPostApi": false,
      "isGetApi": false,
      "isExported": true,
      "operationRelativeTypescriptFilePath": "src/deprecated.ts",
      "commentsInside": [],
      "rawText": " ({\n  match,\n  basePath,\n  relativePath,\n  onlyInSubFolders,\n  onlyInCurrentFolder,\n}: {\n  match: (fileName: string, extension: string) => boolean;\n  basePath: Path;\n  relativePath?: string;\n  /**\n   * only find files in folders of this location, not in this location itself\n   */\n  onlyInSubFolders?: boolean;\n  onlyInCurrentFolder?: boolean;\n}): FolderPath[] => {\n  const location = relativePath ? path.join(basePath, relativePath) : basePath;\n\n  const contents = readdirSync(location, { withFileTypes: true });\n\n  return contents.reduce((all, fileOrFolder) => {\n    if (fileOrFolder.isDirectory() && !onlyInCurrentFolder) {\n      const folder = fileOrFolder;\n      const thisFolder = findFilesRecursively({\n        basePath,\n        relativePath: relativePath\n          ? `${relativePath}/${folder.name}`\n          : folder.name,\n        match,\n        onlyInSubFolders: false,\n      });\n      const allWithThisFolder = all.concat(thisFolder);\n      return allWithThisFolder;\n    } else if (!onlyInSubFolders) {\n      const file = fileOrFolder;\n      const filePath: Path = path.join(location, file.name);\n      const allWithMatchedFile = match(\n        withoutExtension(file.name),\n        path.parse(file.name).ext\n      )\n        ? all.concat([{ relativeFolder: relativePath, path: filePath }])\n        : all;\n      return allWithMatchedFile;\n    }\n    return all;\n  }, [] as FolderPath[]);\n}",
      "name": "findFilesRecursively",
      "slug": "find-files-recursively",
      "parameters": [],
      "description": "DEPRECATED: in favour of `explore` from \"k-explore\"",
      "returnType": {
        "rawType": "import(\"/Users/king/King/operations/tools/control-fs/fs-util/src/types\").FolderPath[]",
        "typeDefinition": {
          "optional": false,
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "relativeFolder": {
                "type": "string",
                "allOf": [
                  {
                    "transform": [
                      "trim"
                    ]
                  },
                  {
                    "minLength": 1
                  }
                ]
              },
              "path": {
                "type": "string",
                "allOf": [
                  {
                    "transform": [
                      "trim"
                    ]
                  },
                  {
                    "minLength": 1
                  }
                ]
              }
            },
            "required": [
              "path"
            ]
          }
        },
        "typeCoverage": 0,
        "isArray": true,
        "isEnum": false,
        "isObject": true,
        "isPrimitive": false,
        "isEnumLiteral": false,
        "simplifiedSchema": {
          "items": [
            {
              "schema": {
                "properties": [
                  {
                    "name": "relativeFolder",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "path",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "type": "object"
              },
              "name": null
            }
          ],
          "type": "array"
        }
      },
      "maxIndentationDepth": 5,
      "size": {
        "characters": 1449,
        "lines": 47,
        "bytes": 1449,
        "bytesPerCharacter": 1,
        "charactersPerLine": 31,
        "linesPerFile": 47,
        "numberOfFiles": 1
      },
      "id": "lxnfvottmoxmqjdzstbigdsk",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-functions/find-files-recursively.json",
      "operationRelativePath": "/db/ts-functions/find-files-recursively.json"
    },
    "externalDependantFiles": []
  },
  {
    "tsFunction": {
      "createdAt": 1667378790178,
      "updatedAt": 1667378790178,
      "deletedAt": 0,
      "createdFirstAt": 1667378790178,
      "publicAuthorization": [
        "read-docs",
        "search"
      ],
      "isApiExposed": false,
      "isPostApi": false,
      "isGetApi": false,
      "isExported": true,
      "operationRelativeTypescriptFilePath": "src/deprecated.ts",
      "commentsInside": [],
      "rawText": " (\n  slug: string,\n  basePath: string\n): FolderPath[] => {\n  return findFilesRecursively({\n    basePath,\n    match: (fileName) =>\n      fileName === slug ||\n      fileName === slug + \"s\" ||\n      fileName.endsWith(`.${slug}`) ||\n      fileName.endsWith(`.${slug}s`),\n  });\n}",
      "name": "findSensibleFiles",
      "slug": "find-sensible-files",
      "parameters": [],
      "description": "DEPRECATED:\n\nthis is sensible-specific",
      "returnType": {
        "rawType": "import(\"/Users/king/King/operations/tools/control-fs/fs-util/src/types\").FolderPath[]",
        "typeDefinition": {
          "optional": false,
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "relativeFolder": {
                "type": "string",
                "allOf": [
                  {
                    "transform": [
                      "trim"
                    ]
                  },
                  {
                    "minLength": 1
                  }
                ]
              },
              "path": {
                "type": "string",
                "allOf": [
                  {
                    "transform": [
                      "trim"
                    ]
                  },
                  {
                    "minLength": 1
                  }
                ]
              }
            },
            "required": [
              "path"
            ]
          }
        },
        "typeCoverage": 0,
        "isArray": true,
        "isEnum": false,
        "isObject": true,
        "isPrimitive": false,
        "isEnumLiteral": false,
        "simplifiedSchema": {
          "items": [
            {
              "schema": {
                "properties": [
                  {
                    "name": "relativeFolder",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "path",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "type": "object"
              },
              "name": null
            }
          ],
          "type": "array"
        }
      },
      "maxIndentationDepth": 3,
      "size": {
        "characters": 312,
        "lines": 15,
        "bytes": 312,
        "bytesPerCharacter": 1,
        "charactersPerLine": 21,
        "linesPerFile": 15,
        "numberOfFiles": 1
      },
      "id": "rkvhfsqothwyptpeejyfzxoh",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-functions/find-sensible-files.json",
      "operationRelativePath": "/db/ts-functions/find-sensible-files.json"
    },
    "externalDependantFiles": []
  },
  {
    "tsFunction": {
      "createdAt": 1667378803634,
      "updatedAt": 1667378803634,
      "deletedAt": 0,
      "createdFirstAt": 1667378803634,
      "publicAuthorization": [
        "read-docs",
        "search"
      ],
      "isApiExposed": false,
      "isPostApi": false,
      "isGetApi": false,
      "isExported": true,
      "operationRelativeTypescriptFilePath": "src/js.ts",
      "commentsInside": [],
      "rawText": " (\n  ...chunksSegments: (string[] | string)[]\n): string[] => {\n  return (\n    chunksSegments\n      .map((x) => makeArray(x))\n      // small check to prevent crashes in case there is an invalid type given (not a string)\n      .map((chunks) => chunks.filter(notEmpty))\n      .reduce((cumSegments, chunks) => {\n        // first chunk is the combination of itself\n        if (cumSegments.length === 0) return chunks;\n        // all next chunks use the accummualted segments and reduce them\n        const nextCumSegments = cumSegments.reduce((all, segment) => {\n          // for every segment add all the chunks to that segment\n          const newChunks = chunks.map((chunk) => path.join(segment, chunk));\n          //add them to all new cumSegments\n          return all.concat(newChunks);\n        }, [] as string[]);\n        return nextCumSegments;\n      }, [] as string[])\n  );\n}",
      "name": "getPathCombinations",
      "slug": "get-path-combinations",
      "parameters": [
        {
          "name": "chunksSegments",
          "schema": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            }
          },
          "simplifiedSchema": {
            "items": [
              {
                "schema": {
                  "properties": [],
                  "type": "object"
                },
                "name": null
              }
            ],
            "type": "array"
          },
          "required": true
        }
      ],
      "description": "gets combinations for paths\n\ninput: [[\"operation1\",\"operation2\"], \"db/value-export\", [\"index.ts\",\"test.ts\",\"cli.ts\"]]\noutput: [\"operation1/db/value-export/index.ts\",\"operation2/db/value-export/index.ts\",\"operation1/db/value-export/test.ts\",\"operation2/db/value-export/test.ts\",\"operation1/db/value-export/cli.ts\",\"operation2/db/value-export/cli.ts\"]",
      "returnType": {
        "rawType": "string[]",
        "typeDefinition": {
          "optional": false,
          "type": "array",
          "items": {
            "type": "string",
            "allOf": [
              {
                "transform": [
                  "trim"
                ]
              },
              {
                "minLength": 1
              }
            ]
          }
        },
        "typeCoverage": 0,
        "isArray": true,
        "isEnum": false,
        "isObject": true,
        "isPrimitive": false,
        "isEnumLiteral": false,
        "simplifiedSchema": {
          "items": [
            {
              "schema": {
                "type": "string"
              },
              "name": null
            }
          ],
          "type": "array"
        }
      },
      "maxIndentationDepth": 5,
      "size": {
        "characters": 1225,
        "lines": 25,
        "bytes": 1225,
        "bytesPerCharacter": 1,
        "charactersPerLine": 49,
        "linesPerFile": 25,
        "numberOfFiles": 1
      },
      "id": "mmvtwbeprfszladhyvutizmq",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-functions/get-path-combinations.json",
      "operationRelativePath": "/db/ts-functions/get-path-combinations.json"
    },
    "externalDependantFiles": []
  },
  {
    "tsFunction": {
      "createdAt": 1667378801227,
      "updatedAt": 1667378801227,
      "deletedAt": 0,
      "createdFirstAt": 1667378801227,
      "publicAuthorization": [
        "read-docs",
        "search"
      ],
      "isApiExposed": false,
      "isPostApi": false,
      "isGetApi": false,
      "isExported": true,
      "operationRelativeTypescriptFilePath": "src/getFirstAvailableFilename.ts",
      "commentsInside": [],
      "rawText": " (filename: string): string => {\n  const lastNumber = filename.match(/\\d+$/)?.[0];\n  const newNumber = lastNumber ? String(Number(lastNumber) + 1) : \"1\";\n  return `${filename}${newNumber}`;\n}",
      "name": "oneUp",
      "slug": "one-up",
      "parameters": [
        {
          "name": "filename",
          "schema": {
            "type": "string"
          },
          "simplifiedSchema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "description": "Finds the number at the end of a filename and increases it\nIf there is no number yet, concatenates '1' to a string\n\nE.g.\n\n- `hello-world` becomes `hello-world1`\n- `hello36` becomes `hello37`",
      "returnType": {
        "rawType": "String",
        "typeDefinition": {
          "optional": false,
          "$ref": "#/definitions/String"
        },
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": true,
        "isPrimitive": false,
        "isEnumLiteral": false
      },
      "maxIndentationDepth": 1,
      "size": {
        "characters": 381,
        "lines": 11,
        "bytes": 381,
        "bytesPerCharacter": 1,
        "charactersPerLine": 35,
        "linesPerFile": 11,
        "numberOfFiles": 1
      },
      "id": "dxhrrccwanqsjpzqztihdwgv",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-functions/one-up.json",
      "operationRelativePath": "/db/ts-functions/one-up.json"
    },
    "externalDependantFiles": []
  },
  {
    "tsFunction": {
      "createdAt": 1667378792418,
      "updatedAt": 1667378792418,
      "deletedAt": 0,
      "createdFirstAt": 1667378792418,
      "publicAuthorization": [
        "read-docs",
        "search"
      ],
      "isApiExposed": false,
      "isPostApi": false,
      "isGetApi": false,
      "isExported": true,
      "operationRelativeTypescriptFilePath": "src/files.ts",
      "commentsInside": [],
      "rawText": " async (fileObject: { [filePath: string]: any }) => {\n  let s = 0;\n  let e = 0;\n  const writePromises = Object.keys(fileObject).map(async (filePath) => {\n    const value = fileObject[filePath];\n    const success = await writeJsonToFile(filePath, value);\n    if (success) s++;\n    if (!success) e++;\n\n    return success;\n  });\n  await Promise.all(writePromises);\n}",
      "name": "writeToFiles",
      "slug": "write-to-files",
      "parameters": [],
      "description": "writes all values in an object to the file that should be specified as key of that value",
      "returnType": {
        "rawType": "any",
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": false,
        "isPrimitive": false,
        "isEnumLiteral": false
      },
      "maxIndentationDepth": 2,
      "size": {
        "characters": 451,
        "lines": 13,
        "bytes": 451,
        "bytesPerCharacter": 1,
        "charactersPerLine": 35,
        "linesPerFile": 13,
        "numberOfFiles": 1
      },
      "id": "qwawgvpibvtnsnwrpglyxlvc",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-functions/write-to-files.json",
      "operationRelativePath": "/db/ts-functions/write-to-files.json"
    },
    "externalDependantFiles": []
  },
  {
    "tsInterface": {
      "createdAt": 1664524971647,
      "updatedAt": 1664524971647,
      "deletedAt": 0,
      "createdFirstAt": 1664524971647,
      "id": "folder-path",
      "name": "FolderPath",
      "slug": "folder-path",
      "operationRelativeTypescriptFilePath": "src/types.ts",
      "hasGeneric": false,
      "isExported": true,
      "rawText": "\n/**\n * DEPRECATED: just use ParsedPath\n */\nexport type FolderPath = { relativeFolder: string | undefined; path: Path };",
      "extensions": [],
      "isOperationIndex": false,
      "description": "DEPRECATED: just use ParsedPath",
      "isDbModel": false,
      "commentsInside": [],
      "type": {
        "typeDefinition": {
          "type": "object",
          "properties": {
            "relativeFolder": {
              "type": "string"
            },
            "path": {
              "$ref": "#/definitions/Path"
            }
          },
          "required": [
            "path"
          ],
          "additionalProperties": false,
          "description": "DEPRECATED: just use ParsedPath"
        },
        "simplifiedSchema": {
          "description": "DEPRECATED: just use ParsedPath",
          "properties": [
            {
              "name": "relativeFolder",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "path",
              "required": true,
              "schema": {
                "description": "unlike PathLike, this is only a string\n\nFor now, we don't have a clear convention whether or not this string should be absolute or anything.",
                "type": "string"
              }
            }
          ],
          "type": "object"
        },
        "typeCoverage": 0,
        "rawType": "FolderPath",
        "isArray": false,
        "isEnum": false,
        "isEnumLiteral": false,
        "isObject": false,
        "isPrimitive": false
      },
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-interfaces/folder-path.json",
      "operationRelativePath": "/db/ts-interfaces/folder-path.json"
    },
    "externalDependantFiles": []
  },
  {
    "tsInterface": {
      "createdAt": 1667378809243,
      "updatedAt": 1667378809243,
      "deletedAt": 0,
      "createdFirstAt": 1667378809243,
      "id": "folderpath",
      "name": "FolderPath",
      "slug": "folderpath",
      "operationRelativeTypescriptFilePath": "src/types.ts",
      "hasGeneric": false,
      "isExported": true,
      "rawText": "\n/**\n * DEPRECATED: just use ParsedPath\n */\nexport type FolderPath = { relativeFolder: string | undefined; path: Path };",
      "extensions": [],
      "isOperationIndex": false,
      "description": "DEPRECATED: just use ParsedPath",
      "isDbModel": false,
      "commentsInside": [],
      "type": {
        "typeDefinition": {
          "type": "object",
          "properties": {
            "relativeFolder": {
              "type": "string"
            },
            "path": {
              "$ref": "#/definitions/Path"
            }
          },
          "required": [
            "path"
          ],
          "additionalProperties": false,
          "description": "DEPRECATED: just use ParsedPath"
        },
        "simplifiedSchema": {
          "fullComment": "DEPRECATED: just use ParsedPath",
          "properties": [
            {
              "name": "relativeFolder",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "path",
              "required": true,
              "schema": {
                "fullComment": "unlike PathLike, this is only a string\n\nFor now, we don't have a clear convention whether or not this string should be absolute or anything.",
                "type": "string"
              }
            }
          ],
          "type": "object"
        },
        "typeCoverage": 0,
        "rawType": "FolderPath",
        "isArray": false,
        "isEnum": false,
        "isEnumLiteral": false,
        "isObject": false,
        "isPrimitive": false
      },
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-interfaces/folderpath.json",
      "operationRelativePath": "/db/ts-interfaces/folderpath.json"
    },
    "externalDependantFiles": []
  },
  {
    "tsInterface": {
      "createdAt": 1667378796351,
      "updatedAt": 1667378796351,
      "deletedAt": 0,
      "createdFirstAt": 1667378796351,
      "id": "fs",
      "name": "Fs",
      "slug": "fs",
      "operationRelativeTypescriptFilePath": "src/fs.ts",
      "hasGeneric": false,
      "isExported": true,
      "rawText": "\n\n/**\n * all handy Fs types\n */\nexport type Fs = {\n  PathLike: PathLike;\n  Stats: Stats;\n  Dir: Dir;\n  Dirent: Dirent;\n};",
      "extensions": [],
      "isOperationIndex": false,
      "description": "all handy Fs types",
      "isDbModel": false,
      "commentsInside": [],
      "type": {
        "typeDefinition": {
          "type": "object",
          "properties": {
            "PathLike": {
              "$ref": "#/definitions/PathLike"
            },
            "Stats": {
              "$ref": "#/definitions/Stats"
            },
            "Dir": {
              "$ref": "#/definitions/Dir"
            },
            "Dirent": {
              "$ref": "#/definitions/Dirent"
            }
          },
          "required": [
            "PathLike",
            "Stats",
            "Dir",
            "Dirent"
          ],
          "additionalProperties": false,
          "description": "all handy Fs types"
        },
        "simplifiedSchema": {
          "fullComment": "all handy Fs types",
          "properties": [
            {
              "name": "PathLike",
              "required": true,
              "schema": {
                "fullComment": "Valid types for path values in \"fs\".",
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "Stats",
              "required": true,
              "schema": {
                "fullComment": "A `fs.Stats` object provides information about a file.\n\nObjects returned from  {@link  stat } ,  {@link  lstat }  and  {@link  fstat }  and their synchronous counterparts are of this type. If `bigint` in the `options` passed to those methods is true, the numeric values will be `bigint` instead of `number`, and the object will contain additional nanosecond-precision properties suffixed with `Ns`.\n\n```console Stats {   dev: 2114,   ino: 48064969,   mode: 33188,   nlink: 1,   uid: 85,   gid: 100,   rdev: 0,   size: 527,   blksize: 4096,   blocks: 8,   atimeMs: 1318289051000.1,   mtimeMs: 1318289051000.1,   ctimeMs: 1318289051000.1,   birthtimeMs: 1318289051000.1,   atime: Mon, 10 Oct 2011 23:24:11 GMT,   mtime: Mon, 10 Oct 2011 23:24:11 GMT,   ctime: Mon, 10 Oct 2011 23:24:11 GMT,   birthtime: Mon, 10 Oct 2011 23:24:11 GMT } ```\n\n`bigint` version:\n\n```console BigIntStats {   dev: 2114n,   ino: 48064969n,   mode: 33188n,   nlink: 1n,   uid: 85n,   gid: 100n,   rdev: 0n,   size: 527n,   blksize: 4096n,   blocks: 8n,   atimeMs: 1318289051000n,   mtimeMs: 1318289051000n,   ctimeMs: 1318289051000n,   birthtimeMs: 1318289051000n,   atimeNs: 1318289051000000000n,   mtimeNs: 1318289051000000000n,   ctimeNs: 1318289051000000000n,   birthtimeNs: 1318289051000000000n,   atime: Mon, 10 Oct 2011 23:24:11 GMT,   mtime: Mon, 10 Oct 2011 23:24:11 GMT,   ctime: Mon, 10 Oct 2011 23:24:11 GMT,   birthtime: Mon, 10 Oct 2011 23:24:11 GMT } ```",
                "properties": [
                  {
                    "name": "dev",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "ino",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "mode",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "nlink",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "uid",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "gid",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "rdev",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "size",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "blksize",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "blocks",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "atimeMs",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "mtimeMs",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "ctimeMs",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "birthtimeMs",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "atime",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "mtime",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "ctime",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "birthtime",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "type": "object"
              }
            },
            {
              "name": "Dir",
              "required": true,
              "schema": {
                "fullComment": "A class representing a directory stream.\n\nCreated by  {@link  opendir } ,  {@link  opendirSync } , or `fsPromises.opendir()`.\n\n```js import { opendir } from 'fs/promises';\n\ntry {   const dir = await opendir('./');   for await (const dirent of dir)     console.log(dirent.name); } catch (err) {   console.error(err); } ```\n\nWhen using the async iterator, the `fs.Dir` object will be automatically closed after the iterator exits.",
                "properties": [
                  {
                    "name": "path",
                    "required": true,
                    "schema": {
                      "fullComment": "The read-only path of this directory as was provided to  {@link  opendir } , {@link  opendirSync } , or `fsPromises.opendir()`.",
                      "type": "string"
                    }
                  }
                ],
                "type": "object"
              }
            },
            {
              "name": "Dirent",
              "required": true,
              "schema": {
                "fullComment": "A representation of a directory entry, which can be a file or a subdirectory within the directory, as returned by reading from an `fs.Dir`. The directory entry is a combination of the file name and file type pairs.\n\nAdditionally, when  {@link  readdir }  or  {@link  readdirSync }  is called with the `withFileTypes` option set to `true`, the resulting array is filled with `fs.Dirent` objects, rather than strings or `Buffer` s.",
                "properties": [
                  {
                    "name": "name",
                    "required": true,
                    "schema": {
                      "fullComment": "The file name that this `fs.Dirent` object refers to. The type of this value is determined by the `options.encoding` passed to  {@link  readdir }  or  {@link  readdirSync } .",
                      "type": "string"
                    }
                  }
                ],
                "type": "object"
              }
            }
          ],
          "type": "object"
        },
        "typeCoverage": 0,
        "rawType": "Fs",
        "isArray": false,
        "isEnum": false,
        "isEnumLiteral": false,
        "isObject": false,
        "isPrimitive": false
      },
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-interfaces/fs.json",
      "operationRelativePath": "/db/ts-interfaces/fs.json"
    },
    "externalDependantFiles": []
  },
  {
    "tsInterface": {
      "createdAt": 1664524971647,
      "updatedAt": 1664524971647,
      "deletedAt": 0,
      "createdFirstAt": 1664524971647,
      "id": "markdown-content",
      "name": "MarkdownContent",
      "slug": "markdown-content",
      "operationRelativeTypescriptFilePath": "src/types.ts",
      "hasGeneric": false,
      "isExported": true,
      "rawText": "\n\nexport type MarkdownContent = string;",
      "extensions": [],
      "isOperationIndex": false,
      "description": "",
      "isDbModel": false,
      "commentsInside": [],
      "type": {
        "typeDefinition": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "typeCoverage": 0,
        "rawType": "MarkdownContent",
        "isArray": false,
        "isEnum": false,
        "isEnumLiteral": false,
        "isObject": false,
        "isPrimitive": false
      },
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-interfaces/markdown-content.json",
      "operationRelativePath": "/db/ts-interfaces/markdown-content.json"
    },
    "externalDependantFiles": []
  },
  {
    "tsInterface": {
      "createdAt": 1667378809243,
      "updatedAt": 1667378809243,
      "deletedAt": 0,
      "createdFirstAt": 1667378809243,
      "id": "markdowncontent",
      "name": "MarkdownContent",
      "slug": "markdowncontent",
      "operationRelativeTypescriptFilePath": "src/types.ts",
      "hasGeneric": false,
      "isExported": true,
      "rawText": "\n\nexport type MarkdownContent = string;",
      "extensions": [],
      "isOperationIndex": false,
      "description": "",
      "isDbModel": false,
      "commentsInside": [],
      "type": {
        "typeDefinition": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "typeCoverage": 0,
        "rawType": "MarkdownContent",
        "isArray": false,
        "isEnum": false,
        "isEnumLiteral": false,
        "isObject": false,
        "isPrimitive": false
      },
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-interfaces/markdowncontent.json",
      "operationRelativePath": "/db/ts-interfaces/markdowncontent.json"
    },
    "externalDependantFiles": []
  },
  {
    "tsInterface": {
      "createdAt": 1664524971647,
      "updatedAt": 1664524971647,
      "deletedAt": 0,
      "createdFirstAt": 1664524971647,
      "id": "unix-timestamp",
      "name": "UnixTimestamp",
      "slug": "unix-timestamp",
      "operationRelativeTypescriptFilePath": "src/types.ts",
      "hasGeneric": false,
      "isExported": true,
      "rawText": "export type UnixTimestamp = number;",
      "extensions": [],
      "isOperationIndex": false,
      "description": "",
      "isDbModel": false,
      "commentsInside": [],
      "type": {
        "typeDefinition": {
          "type": "number"
        },
        "simplifiedSchema": {
          "type": "number"
        },
        "typeCoverage": 0,
        "rawType": "UnixTimestamp",
        "isArray": false,
        "isEnum": false,
        "isEnumLiteral": false,
        "isObject": false,
        "isPrimitive": false
      },
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-interfaces/unix-timestamp.json",
      "operationRelativePath": "/db/ts-interfaces/unix-timestamp.json"
    },
    "externalDependantFiles": []
  },
  {
    "tsInterface": {
      "createdAt": 1667378809243,
      "updatedAt": 1667378809243,
      "deletedAt": 0,
      "createdFirstAt": 1667378809243,
      "id": "unixtimestamp",
      "name": "UnixTimestamp",
      "slug": "unixtimestamp",
      "operationRelativeTypescriptFilePath": "src/types.ts",
      "hasGeneric": false,
      "isExported": true,
      "rawText": "export type UnixTimestamp = number;",
      "extensions": [],
      "isOperationIndex": false,
      "description": "",
      "isDbModel": false,
      "commentsInside": [],
      "type": {
        "typeDefinition": {
          "type": "number"
        },
        "simplifiedSchema": {
          "type": "number"
        },
        "typeCoverage": 0,
        "rawType": "UnixTimestamp",
        "isArray": false,
        "isEnum": false,
        "isEnumLiteral": false,
        "isObject": false,
        "isPrimitive": false
      },
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-interfaces/unixtimestamp.json",
      "operationRelativePath": "/db/ts-interfaces/unixtimestamp.json"
    },
    "externalDependantFiles": []
  },
  {
    "tsVariable": {
      "createdAt": 1667378793208,
      "updatedAt": 1667378793208,
      "deletedAt": 0,
      "createdFirstAt": 1667378793208,
      "classification": "const",
      "comments": [],
      "isExported": true,
      "name": "canAccessSync",
      "slug": "can-access-sync",
      "operationRelativeTypescriptFilePath": "src/files.ts",
      "type": {
        "rawType": "(p: import(\"fs\").PathLike, mode: number) => boolean",
        "typeDefinition": {
          "type": "object",
          "properties": {},
          "optional": false
        },
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": true,
        "isPrimitive": false,
        "isEnumLiteral": false,
        "simplifiedSchema": {
          "properties": [],
          "type": "object"
        }
      },
      "value": "(p: PathLike, mode: number): boolean => {\n  try {\n    fs.accessSync(p, mode);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}",
      "description": "uses fs.access to determine if something can be accessed\n\nCheck File access constants for possible values of mode. It is possible to create a mask consisting of the bitwise OR of two or more values (e.g. fs.constants.W_OK | fs.constants.R_OK).",
      "id": "xjoxglrtkzgyuduyifzrnfgr",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-variables/can-access-sync.json",
      "operationRelativePath": "/db/ts-variables/can-access-sync.json"
    },
    "externalDependantFiles": []
  },
  {
    "tsVariable": {
      "createdAt": 1667378793208,
      "updatedAt": 1667378793208,
      "deletedAt": 0,
      "createdFirstAt": 1667378793208,
      "classification": "const",
      "comments": [],
      "isExported": true,
      "name": "canAccess",
      "slug": "can-access",
      "operationRelativeTypescriptFilePath": "src/files.ts",
      "type": {
        "rawType": "(p: import(\"fs\").PathLike, mode: number) => Promise<boolean>",
        "typeDefinition": {
          "type": "object",
          "properties": {},
          "optional": false
        },
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": true,
        "isPrimitive": false,
        "isEnumLiteral": false,
        "simplifiedSchema": {
          "properties": [],
          "type": "object"
        }
      },
      "value": "async (\n  p: PathLike,\n  mode: number\n): Promise<boolean> => {\n  try {\n    await fs.access(p, mode);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}",
      "description": "uses fs.access to determine if something can be accessed\n\nCheck File access constants for possible values of mode. It is possible to create a mask consisting of the bitwise OR of two or more values (e.g. fs.constants.W_OK | fs.constants.R_OK).",
      "id": "ooyarqnlujlflyvzuipxgfmh",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-variables/can-access.json",
      "operationRelativePath": "/db/ts-variables/can-access.json"
    },
    "externalDependantFiles": []
  },
  {
    "tsVariable": {
      "createdAt": 1667378793209,
      "updatedAt": 1667378793209,
      "deletedAt": 0,
      "createdFirstAt": 1667378793209,
      "classification": "const",
      "comments": [],
      "isExported": true,
      "name": "canExecuteSync",
      "slug": "can-execute-sync",
      "operationRelativeTypescriptFilePath": "src/files.ts",
      "type": {
        "rawType": "(p: import(\"fs\").PathLike) => boolean",
        "typeDefinition": {
          "type": "object",
          "properties": {},
          "optional": false
        },
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": true,
        "isPrimitive": false,
        "isEnumLiteral": false,
        "simplifiedSchema": {
          "properties": [],
          "type": "object"
        }
      },
      "value": "(p: PathLike) =>\n  canAccessSync(p, fs.constants.X_OK)",
      "description": "File is executable to the calling process",
      "id": "etvatrgjpqvujwbgtywvvoeo",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-variables/can-execute-sync.json",
      "operationRelativePath": "/db/ts-variables/can-execute-sync.json"
    },
    "externalDependantFiles": []
  },
  {
    "tsVariable": {
      "createdAt": 1667378793208,
      "updatedAt": 1667378793208,
      "deletedAt": 0,
      "createdFirstAt": 1667378793208,
      "classification": "const",
      "comments": [],
      "isExported": true,
      "name": "canExecute",
      "slug": "can-execute",
      "operationRelativeTypescriptFilePath": "src/files.ts",
      "type": {
        "rawType": "(p: import(\"fs\").PathLike) => unknown",
        "typeDefinition": {
          "type": "object",
          "properties": {},
          "optional": false
        },
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": true,
        "isPrimitive": false,
        "isEnumLiteral": false,
        "simplifiedSchema": {
          "properties": [],
          "type": "object"
        }
      },
      "value": "async (p: PathLike) =>\n  canAccess(p, fs.constants.X_OK)",
      "description": "File is executable to the calling process",
      "id": "hnvfbelbwezxupzpkumvdbmh",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-variables/can-execute.json",
      "operationRelativePath": "/db/ts-variables/can-execute.json"
    },
    "externalDependantFiles": []
  },
  {
    "tsVariable": {
      "createdAt": 1667378793209,
      "updatedAt": 1667378793209,
      "deletedAt": 0,
      "createdFirstAt": 1667378793209,
      "classification": "const",
      "comments": [],
      "isExported": true,
      "name": "canSeeSync",
      "slug": "can-see-sync",
      "operationRelativeTypescriptFilePath": "src/files.ts",
      "type": {
        "rawType": "(p: import(\"fs\").PathLike) => unknown",
        "typeDefinition": {
          "type": "object",
          "properties": {},
          "optional": false
        },
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": true,
        "isPrimitive": false,
        "isEnumLiteral": false,
        "simplifiedSchema": {
          "properties": [],
          "type": "object"
        }
      },
      "value": "async (p: PathLike) =>\n  canAccessSync(p, fs.constants.F_OK)",
      "description": "File is visible to the calling process",
      "id": "ayqxlbpvqjnhihpdnzfofsus",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-variables/can-see-sync.json",
      "operationRelativePath": "/db/ts-variables/can-see-sync.json"
    },
    "externalDependantFiles": []
  },
  {
    "tsVariable": {
      "createdAt": 1667378793208,
      "updatedAt": 1667378793208,
      "deletedAt": 0,
      "createdFirstAt": 1667378793208,
      "classification": "const",
      "comments": [],
      "isExported": true,
      "name": "canWrite",
      "slug": "can-write",
      "operationRelativeTypescriptFilePath": "src/files.ts",
      "type": {
        "rawType": "(p: import(\"fs\").PathLike) => unknown",
        "typeDefinition": {
          "type": "object",
          "properties": {},
          "optional": false
        },
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": true,
        "isPrimitive": false,
        "isEnumLiteral": false,
        "simplifiedSchema": {
          "properties": [],
          "type": "object"
        }
      },
      "value": "async (p: PathLike) => canAccess(p, fs.constants.W_OK)",
      "description": "File is writable to the calling process",
      "id": "qrmcuegpwffmqxrkojidvzmb",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-variables/can-write.json",
      "operationRelativePath": "/db/ts-variables/can-write.json"
    },
    "externalDependantFiles": []
  },
  {
    "tsVariable": {
      "createdAt": 1667378795572,
      "updatedAt": 1667378795572,
      "deletedAt": 0,
      "createdFirstAt": 1667378795572,
      "classification": "const",
      "comments": [],
      "isExported": true,
      "name": "findFileNameCaseInsensitive",
      "slug": "find-file-name-case-insensitive",
      "operationRelativeTypescriptFilePath": "src/findFileNameCaseInsensitive.ts",
      "type": {
        "rawType": "(folderPath: string, fileName: string) => Promise<string | undefined>",
        "typeDefinition": {
          "type": "object",
          "properties": {},
          "optional": false
        },
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": true,
        "isPrimitive": false,
        "isEnumLiteral": false,
        "simplifiedSchema": {
          "properties": [],
          "type": "object"
        }
      },
      "value": "async (\n  folderPath: string,\n  /**\n   * fileName with extension\n   */\n  fileName: string\n): Promise<string | undefined> => {\n  if (!fs.existsSync(folderPath)) return;\n\n  const results = await fs.readdir(folderPath);\n\n  const foundPath = results\n    .map((fileName) => {\n      const absolutePath = path.join(folderPath, fileName);\n      return absolutePath;\n    })\n    .find((absolutePath) => {\n      const parsedPath = path.parse(absolutePath);\n      const isMatchCaseInsensitive =\n        parsedPath.base.toLowerCase() === fileName.toLowerCase();\n\n      return isMatchCaseInsensitive;\n    });\n\n  return foundPath;\n}",
      "description": "returns a path of a fileName",
      "id": "itzhiwqconufgxapcemiimzi",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-variables/find-file-name-case-insensitive.json",
      "operationRelativePath": "/db/ts-variables/find-file-name-case-insensitive.json"
    },
    "externalDependantFiles": []
  },
  {
    "tsVariable": {
      "createdAt": 1667378790552,
      "updatedAt": 1667378790552,
      "deletedAt": 0,
      "createdFirstAt": 1667378790552,
      "classification": "const",
      "comments": [],
      "isExported": true,
      "name": "findFilesRecursively",
      "slug": "find-files-recursively",
      "operationRelativeTypescriptFilePath": "src/deprecated.ts",
      "type": {
        "rawType": "({ match, basePath, relativePath, onlyInSubFolders, onlyInCurrentFolder, }: { match: (fileName: string, extension: string) => boolean; basePath: string; relativePath?: string | undefined; onlyInSubFolders?: boolean | undefined; onlyInCurrentFolder?: boolean | undefined; }) => import(\"/Users/king/King/operations/tools/control-fs/fs-util/src/types\").FolderPath[]",
        "typeDefinition": {
          "type": "object",
          "properties": {},
          "optional": false
        },
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": true,
        "isPrimitive": false,
        "isEnumLiteral": false,
        "simplifiedSchema": {
          "properties": [],
          "type": "object"
        }
      },
      "value": "({\n  match,\n  basePath,\n  relativePath,\n  onlyInSubFolders,\n  onlyInCurrentFolder,\n}: {\n  match: (fileName: string, extension: string) => boolean;\n  basePath: Path;\n  relativePath?: string;\n  /**\n   * only find files in folders of this location, not in this location itself\n   */\n  onlyInSubFolders?: boolean;\n  onlyInCurrentFolder?: boolean;\n}): FolderPath[] => {\n  const location = relativePath ? path.join(basePath, relativePath) : basePath;\n\n  const contents = readdirSync(location, { withFileTypes: true });\n\n  return contents.reduce((all, fileOrFolder) => {\n    if (fileOrFolder.isDirectory() && !onlyInCurrentFolder) {\n      const folder = fileOrFolder;\n      const thisFolder = findFilesRecursively({\n        basePath,\n        relativePath: relativePath\n          ? `${relativePath}/${folder.name}`\n          : folder.name,\n        match,\n        onlyInSubFolders: false,\n      });\n      const allWithThisFolder = all.concat(thisFolder);\n      return allWithThisFolder;\n    } else if (!onlyInSubFolders) {\n      const file = fileOrFolder;\n      const filePath: Path = path.join(location, file.name);\n      const allWithMatchedFile = match(\n        withoutExtension(file.name),\n        path.parse(file.name).ext\n      )\n        ? all.concat([{ relativeFolder: relativePath, path: filePath }])\n        : all;\n      return allWithMatchedFile;\n    }\n    return all;\n  }, [] as FolderPath[]);\n}",
      "description": "DEPRECATED: in favour of `explore` from \"k-explore\"",
      "id": "lcblirjynznzxfelxlfkmqjg",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-variables/find-files-recursively.json",
      "operationRelativePath": "/db/ts-variables/find-files-recursively.json"
    },
    "externalDependantFiles": []
  },
  {
    "tsVariable": {
      "createdAt": 1667378790551,
      "updatedAt": 1667378790551,
      "deletedAt": 0,
      "createdFirstAt": 1667378790551,
      "classification": "const",
      "comments": [],
      "isExported": true,
      "name": "findFiles",
      "slug": "find-files",
      "operationRelativeTypescriptFilePath": "src/deprecated.ts",
      "type": {
        "rawType": "(slug: string, basePath: string) => import(\"/Users/king/King/operations/tools/control-fs/fs-util/src/types\").FolderPath[]",
        "typeDefinition": {
          "type": "object",
          "properties": {},
          "optional": false
        },
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": true,
        "isPrimitive": false,
        "isEnumLiteral": false,
        "simplifiedSchema": {
          "properties": [],
          "type": "object"
        }
      },
      "value": "findSensibleFiles",
      "description": "DEPRECATED:\n\nSHOULD BE REPLACED\n\nthis is sensible-specific",
      "id": "vqoymwjzxhqmvdsmzclhrmfx",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-variables/find-files.json",
      "operationRelativePath": "/db/ts-variables/find-files.json"
    },
    "externalDependantFiles": []
  },
  {
    "tsVariable": {
      "createdAt": 1667378790551,
      "updatedAt": 1667378790551,
      "deletedAt": 0,
      "createdFirstAt": 1667378790551,
      "classification": "const",
      "comments": [],
      "isExported": true,
      "name": "findSensibleFiles",
      "slug": "find-sensible-files",
      "operationRelativeTypescriptFilePath": "src/deprecated.ts",
      "type": {
        "rawType": "(slug: string, basePath: string) => import(\"/Users/king/King/operations/tools/control-fs/fs-util/src/types\").FolderPath[]",
        "typeDefinition": {
          "type": "object",
          "properties": {},
          "optional": false
        },
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": true,
        "isPrimitive": false,
        "isEnumLiteral": false,
        "simplifiedSchema": {
          "properties": [],
          "type": "object"
        }
      },
      "value": "(\n  slug: string,\n  basePath: string\n): FolderPath[] => {\n  return findFilesRecursively({\n    basePath,\n    match: (fileName) =>\n      fileName === slug ||\n      fileName === slug + \"s\" ||\n      fileName.endsWith(`.${slug}`) ||\n      fileName.endsWith(`.${slug}s`),\n  });\n}",
      "description": "DEPRECATED:\n\nthis is sensible-specific",
      "id": "vpbuidvyynovqukrxzdyzzyk",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-variables/find-sensible-files.json",
      "operationRelativePath": "/db/ts-variables/find-sensible-files.json"
    },
    "externalDependantFiles": []
  },
  {
    "tsVariable": {
      "createdAt": 1667378803944,
      "updatedAt": 1667378803944,
      "deletedAt": 0,
      "createdFirstAt": 1667378803944,
      "classification": "const",
      "comments": [],
      "isExported": true,
      "name": "getPathCombinations",
      "slug": "get-path-combinations",
      "operationRelativeTypescriptFilePath": "src/js.ts",
      "type": {
        "rawType": "(...chunksSegments: (string | string[])[]) => string[]",
        "typeDefinition": {
          "type": "object",
          "properties": {},
          "optional": false
        },
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": true,
        "isPrimitive": false,
        "isEnumLiteral": false,
        "simplifiedSchema": {
          "properties": [],
          "type": "object"
        }
      },
      "value": "(\n  ...chunksSegments: (string[] | string)[]\n): string[] => {\n  return (\n    chunksSegments\n      .map((x) => makeArray(x))\n      // small check to prevent crashes in case there is an invalid type given (not a string)\n      .map((chunks) => chunks.filter(notEmpty))\n      .reduce((cumSegments, chunks) => {\n        // first chunk is the combination of itself\n        if (cumSegments.length === 0) return chunks;\n        // all next chunks use the accummualted segments and reduce them\n        const nextCumSegments = cumSegments.reduce((all, segment) => {\n          // for every segment add all the chunks to that segment\n          const newChunks = chunks.map((chunk) => path.join(segment, chunk));\n          //add them to all new cumSegments\n          return all.concat(newChunks);\n        }, [] as string[]);\n        return nextCumSegments;\n      }, [] as string[])\n  );\n}",
      "description": "gets combinations for paths\n\ninput: [[\"operation1\",\"operation2\"], \"db/value-export\", [\"index.ts\",\"test.ts\",\"cli.ts\"]]\noutput: [\"operation1/db/value-export/index.ts\",\"operation2/db/value-export/index.ts\",\"operation1/db/value-export/test.ts\",\"operation2/db/value-export/test.ts\",\"operation1/db/value-export/cli.ts\",\"operation2/db/value-export/cli.ts\"]",
      "id": "eslazfbxqqaqzuqzasehepxx",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-variables/get-path-combinations.json",
      "operationRelativePath": "/db/ts-variables/get-path-combinations.json"
    },
    "externalDependantFiles": []
  },
  {
    "tsVariable": {
      "createdAt": 1667378801484,
      "updatedAt": 1667378801484,
      "deletedAt": 0,
      "createdFirstAt": 1667378801484,
      "classification": "const",
      "comments": [],
      "isExported": true,
      "name": "oneUp",
      "slug": "one-up",
      "operationRelativeTypescriptFilePath": "src/getFirstAvailableFilename.ts",
      "type": {
        "rawType": "(filename: string) => string",
        "typeDefinition": {
          "type": "object",
          "properties": {},
          "optional": false
        },
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": true,
        "isPrimitive": false,
        "isEnumLiteral": false,
        "simplifiedSchema": {
          "properties": [],
          "type": "object"
        }
      },
      "value": "(filename: string): string => {\n  const lastNumber = filename.match(/\\d+$/)?.[0];\n  const newNumber = lastNumber ? String(Number(lastNumber) + 1) : \"1\";\n  return `${filename}${newNumber}`;\n}",
      "description": "Finds the number at the end of a filename and increases it\nIf there is no number yet, concatenates '1' to a string\n\nE.g.\n\n- `hello-world` becomes `hello-world1`\n- `hello36` becomes `hello37`",
      "id": "oxezzvrzdaigcohbvnmocibs",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-variables/one-up.json",
      "operationRelativePath": "/db/ts-variables/one-up.json"
    },
    "externalDependantFiles": []
  },
  {
    "tsVariable": {
      "createdAt": 1667378793208,
      "updatedAt": 1667378793208,
      "deletedAt": 0,
      "createdFirstAt": 1667378793208,
      "classification": "const",
      "comments": [],
      "isExported": true,
      "name": "writeToFiles",
      "slug": "write-to-files",
      "operationRelativeTypescriptFilePath": "src/files.ts",
      "type": {
        "rawType": "(fileObject: { [filePath: string]: any; }) => any",
        "typeDefinition": {
          "type": "object",
          "properties": {},
          "optional": false
        },
        "typeCoverage": 0,
        "isArray": false,
        "isEnum": false,
        "isObject": true,
        "isPrimitive": false,
        "isEnumLiteral": false,
        "simplifiedSchema": {
          "properties": [],
          "type": "object"
        }
      },
      "value": "async (fileObject: { [filePath: string]: any }) => {\n  let s = 0;\n  let e = 0;\n  const writePromises = Object.keys(fileObject).map(async (filePath) => {\n    const value = fileObject[filePath];\n    const success = await writeJsonToFile(filePath, value);\n    if (success) s++;\n    if (!success) e++;\n\n    return success;\n  });\n  await Promise.all(writePromises);\n}",
      "description": "writes all values in an object to the file that should be specified as key of that value",
      "id": "ktzybaazrsierqtvjzsfeutd",
      "operationName": "fs-util",
      "projectRelativePath": "/operations/tools/control-fs/fs-util/db/ts-variables/write-to-files.json",
      "operationRelativePath": "/db/ts-variables/write-to-files.json"
    },
    "externalDependantFiles": []
  }
]