[{"id":"YjmFNhODnUjsvQOf","name":"SimplifiedSchemaType","slug":"simplified-schema-type","relativePathFromProjectRoot":"/tools/types/code-types/src/SimplifiedSchema.ts","srcFileId":"/SimplifiedSchema","operationFolderName":"code-types","relativeFilePathFromSrc":"/SimplifiedSchema.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","rawText":"\n\nexport type SimplifiedSchemaType =\n  | \"string\"\n  | \"number\"\n  | \"boolean\"\n  | \"object\"\n  | \"array\"\n  | \"null\";","extensions":[],"description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"string","enum":["string","number","boolean","object","array","null"]},"simplifiedSchema":{"enum":["string","number","boolean","object","array","null"],"type":"string"},"typeCoverage":0,"rawType":"SimplifiedSchemaType","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"sgTHmrWTPvzhxLRX","name":"SimplifiedSchema","slug":"simplified-schema","relativePathFromProjectRoot":"/tools/types/code-types/src/SimplifiedSchema.ts","srcFileId":"/SimplifiedSchema","operationFolderName":"code-types","relativeFilePathFromSrc":"/SimplifiedSchema.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","rawText":"\n/**\nJSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form\n */\nexport type SimplifiedSchema = {\n  /**\n   * - string\n   * - number\n   * - boolean\n   * - object\n   * - array\n   * - null\n   *\n   * NB: Omit doesn't work for the indexer! This would be the type: Omit<JSONSchema7TypeName, \"integer\">;\n   */\n  type: SimplifiedSchemaType;\n\n  description?: string;\n  /** sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here */\n  circularRefName?: string;\n  /** in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think */\n  enum?: JSONSchema7Type[];\n  /** in case of object, this will always appear */\n  properties?: SimplifiedSchemaProperty[];\n  /** in case of arrays, this will always appear */\n  items?: SimplifiedSchemaItem[];\n};","extensions":[],"description":"JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"type":{"$ref":"#/definitions/SimplifiedSchemaType","description":"- string\n- number\n- boolean\n- object\n- array\n- null\n\nNB: Omit doesn't work for the indexer! This would be the type: Omit<JSONSchema7TypeName, \"integer\">;"},"description":{"type":"string"},"circularRefName":{"type":"string","description":"sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here"},"enum":{"type":"array","items":{"$ref":"#/definitions/JSONSchema7Type"},"description":"in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think"},"properties":{"type":"array","items":{"$ref":"#/definitions/SimplifiedSchemaProperty"},"description":"in case of object, this will always appear"},"items":{"type":"array","items":{"$ref":"#/definitions/SimplifiedSchemaItem"},"description":"in case of arrays, this will always appear"}},"required":["type"],"additionalProperties":false,"description":"JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form"},"simplifiedSchema":{"description":"JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form","properties":[{"name":"type","required":true,"schema":{"enum":["string","number","boolean","object","array","null"],"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"circularRefName","required":false,"schema":{"description":"sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here","type":"string"}},{"name":"enum","required":false,"schema":{"description":"in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think","items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"properties","required":false,"schema":{"description":"in case of object, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}},{"name":"required","required":true,"schema":{"description":"NB: can't we put this in the SimplifiedSchema itself?","type":"boolean"}}],"type":"object"},"name":"SimplifiedSchemaProperty"}],"type":"array"}},{"name":"items","required":false,"schema":{"description":"in case of arrays, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"description":"name in case of it being a reference, otherwise null","type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}}],"type":"object"},"name":"SimplifiedSchemaItem"}],"type":"array"}}],"type":"object"},"typeCoverage":0,"rawType":"SimplifiedSchema","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"RxalmIGDMjiauvLW","name":"JSONSchema7Type","slug":"jsonschema-7type","relativePathFromProjectRoot":"/tools/types/code-types/src/SimplifiedSchema.ts","srcFileId":"/SimplifiedSchema","operationFolderName":"code-types","relativeFilePathFromSrc":"/SimplifiedSchema.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","description":"Primitive type","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"anyOf":[{"type":"string"},{"type":"number"},{"type":"boolean"},{"$ref":"#/definitions/JSONSchema7Object"},{"$ref":"#/definitions/JSONSchema7Array"},{"type":"null"}],"description":"Primitive type"},"simplifiedSchema":{"description":"Primitive type","properties":[],"type":"object"},"typeCoverage":0,"rawType":"JSONSchema7Type","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"IOuybByWWKQJDhLg","name":"JSONSchema7Object","slug":"jsonschema-7object","relativePathFromProjectRoot":"/tools/types/code-types/src/SimplifiedSchema.ts","srcFileId":"/SimplifiedSchema","operationFolderName":"code-types","relativeFilePathFromSrc":"/SimplifiedSchema.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","additionalProperties":{"$ref":"#/definitions/JSONSchema7Type"}},"simplifiedSchema":{"properties":[],"type":"object"},"typeCoverage":0,"rawType":"JSONSchema7Object","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"CfePXqsGVdBbUqCu","name":"JSONSchema7Array","slug":"jsonschema-7array","relativePathFromProjectRoot":"/tools/types/code-types/src/SimplifiedSchema.ts","srcFileId":"/SimplifiedSchema","operationFolderName":"code-types","relativeFilePathFromSrc":"/SimplifiedSchema.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"array","items":{"$ref":"#/definitions/JSONSchema7Type"}},"simplifiedSchema":{"items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"},"typeCoverage":0,"rawType":"JSONSchema7Array","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"OlzUtoojVkVLHcYJ","name":"SimplifiedSchemaProperty","slug":"simplified-schema-property","relativePathFromProjectRoot":"/tools/types/code-types/src/SimplifiedSchema.ts","srcFileId":"/SimplifiedSchema","operationFolderName":"code-types","relativeFilePathFromSrc":"/SimplifiedSchema.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","rawText":"\n\nexport type SimplifiedSchemaProperty = {\n  name: string;\n  schema: SimplifiedSchema;\n  /** NB: can't we put this in the SimplifiedSchema itself? */\n  required: boolean;\n};","extensions":[],"description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"name":{"type":"string"},"schema":{"$ref":"#/definitions/SimplifiedSchema"},"required":{"type":"boolean","description":"NB: can't we put this in the SimplifiedSchema itself?"}},"required":["name","schema","required"],"additionalProperties":false},"simplifiedSchema":{"properties":[{"name":"name","required":true,"schema":{"type":"string"}},{"name":"schema","required":true,"schema":{"description":"JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form","properties":[{"name":"type","required":true,"schema":{"enum":["string","number","boolean","object","array","null"],"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"circularRefName","required":false,"schema":{"description":"sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here","type":"string"}},{"name":"enum","required":false,"schema":{"description":"in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think","items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"properties","required":false,"schema":{"description":"in case of object, this will always appear","items":[{"schema":{"circularRefName":"SimplifiedSchemaProperty","properties":[],"type":"object"},"name":"SimplifiedSchemaProperty"}],"type":"array"}},{"name":"items","required":false,"schema":{"description":"in case of arrays, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"description":"name in case of it being a reference, otherwise null","type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}}],"type":"object"},"name":"SimplifiedSchemaItem"}],"type":"array"}}],"type":"object"}},{"name":"required","required":true,"schema":{"description":"NB: can't we put this in the SimplifiedSchema itself?","type":"boolean"}}],"type":"object"},"typeCoverage":0,"rawType":"SimplifiedSchemaProperty","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"eFoiMpogRTwerhtx","name":"SimplifiedSchemaItem","slug":"simplified-schema-item","relativePathFromProjectRoot":"/tools/types/code-types/src/SimplifiedSchema.ts","srcFileId":"/SimplifiedSchema","operationFolderName":"code-types","relativeFilePathFromSrc":"/SimplifiedSchema.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","rawText":"\n\nexport type SimplifiedSchemaItem = {\n  /**\n   * name in case of it being a reference, otherwise null\n   */\n  name: string | null;\n  schema: SimplifiedSchema;\n};","extensions":[],"description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"name":{"type":["string","null"],"description":"name in case of it being a reference, otherwise null"},"schema":{"$ref":"#/definitions/SimplifiedSchema"}},"required":["name","schema"],"additionalProperties":false},"simplifiedSchema":{"properties":[{"name":"name","required":true,"schema":{"description":"name in case of it being a reference, otherwise null","type":"string"}},{"name":"schema","required":true,"schema":{"description":"JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form","properties":[{"name":"type","required":true,"schema":{"enum":["string","number","boolean","object","array","null"],"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"circularRefName","required":false,"schema":{"description":"sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here","type":"string"}},{"name":"enum","required":false,"schema":{"description":"in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think","items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"properties","required":false,"schema":{"description":"in case of object, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}},{"name":"required","required":true,"schema":{"description":"NB: can't we put this in the SimplifiedSchema itself?","type":"boolean"}}],"type":"object"},"name":"SimplifiedSchemaProperty"}],"type":"array"}},{"name":"items","required":false,"schema":{"description":"in case of arrays, this will always appear","items":[{"schema":{"circularRefName":"SimplifiedSchemaItem","properties":[],"type":"object"},"name":"SimplifiedSchemaItem"}],"type":"array"}}],"type":"object"}}],"type":"object"},"typeCoverage":0,"rawType":"SimplifiedSchemaItem","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}}]