[{"id":"WDsVpriJaszbhDfi","name":"TypescriptIndex","slug":"typescript-index","relativePathFromProjectRoot":"/tools/types/code-types/src/TypescriptIndex.ts","srcFileId":"/TypescriptIndex","operationFolderName":"code-types","relativeFilePathFromSrc":"/TypescriptIndex.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","rawText":"\n/**\n * TODO:\n *\n * Any interface/type\n * - should be able to have default values\n * - should be able to have validation functions\n * - should be able to have casting functions\n * - some parameters should be hidden upon creation\n * - some should be hidden on updating\n * - some should even be hidden when listing\n *\n * This is mainly for the admin panel, but it could be integrated on the db level as well.\n * The problem is that this behavior may be app-specific, so this becomes rather opinionated if we do it on the OS level\n * Come up with an exact requirement and implementation plan.\n *\n * There are many more functionalities possible here to speed up development, not only for admin use-case.\n */\n\n/**\n * ---\n * isDbModel: false\n * ---\n *\n * Typescript file metadata (all indexes from typescript files, together)\n */\nexport type TypescriptIndex = {\n  tsBuildErrors: TsBuildError[];\n  tsLintWarnings: TsLintWarning[];\n  tsFunctions: TsFunction[];\n  tsVariables: TsVariable[];\n  tsInterfaces: TsInterface[];\n  tsComments: TsComment[];\n  tsImports: TsImport[];\n  tsExports: TsExport[];\n};","extensions":[],"description":"\nTypescript file metadata (all indexes from typescript files, together)","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"tsBuildErrors":{"type":"array","items":{"$ref":"#/definitions/TsBuildError"}},"tsLintWarnings":{"type":"array","items":{"$ref":"#/definitions/TsLintWarning"}},"tsFunctions":{"type":"array","items":{"$ref":"#/definitions/TsFunction"}},"tsVariables":{"type":"array","items":{"$ref":"#/definitions/TsVariable"}},"tsInterfaces":{"type":"array","items":{"$ref":"#/definitions/TsInterface"}},"tsComments":{"type":"array","items":{"$ref":"#/definitions/TsComment"}},"tsImports":{"type":"array","items":{"$ref":"#/definitions/TsImport"}},"tsExports":{"type":"array","items":{"$ref":"#/definitions/TsExport"}}},"required":["tsBuildErrors","tsLintWarnings","tsFunctions","tsVariables","tsInterfaces","tsComments","tsImports","tsExports"],"additionalProperties":false,"description":"--- isDbModel: false\n---\n\nTypescript file metadata (all indexes from typescript files, together)"},"simplifiedSchema":{"description":"--- isDbModel: false\n---\n\nTypescript file metadata (all indexes from typescript files, together)","properties":[{"name":"tsBuildErrors","required":true,"schema":{"items":[{"schema":{"properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"line","required":false,"schema":{"type":"number"}},{"name":"character","required":false,"schema":{"type":"number"}},{"name":"message","required":true,"schema":{"type":"string"}}],"type":"object"},"name":"TsBuildError"}],"type":"array"}},{"name":"tsLintWarnings","required":true,"schema":{"items":[{"schema":{"properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"line","required":true,"schema":{"type":"number"}},{"name":"character","required":true,"schema":{"type":"number"}},{"name":"message","required":true,"schema":{"type":"string"}}],"type":"object"},"name":"TsLintWarning"}],"type":"array"}},{"name":"tsFunctions","required":true,"schema":{"items":[{"schema":{"description":"Interface for arrow functions and normal functions","properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"description","required":false,"schema":{"description":"a string that is known to contain markdown.","type":"string"}},{"name":"rawText","required":false,"schema":{"description":"raw text of the function","type":"string"}},{"name":"commentsInside","required":true,"schema":{"description":"all comments found in a function and the node that they belong to","items":[{"schema":{"description":"comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\nspecial line prefixes:\n- TODO:\n- DISCUSSION:\n- IDEA:\n- LATER:\n- NB:\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!","properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"comment","required":true,"schema":{"description":"a string that is known to contain markdown.","type":"string"}},{"name":"parameters","required":true,"schema":{"properties":[],"type":"object"}},{"name":"types","required":true,"schema":{"description":"These are the type indicators that were found in this single or multiline comment. Can be multiple.","items":[{"schema":{"enum":["todo","discussion","idea","later","nb"],"type":"string"},"name":"CommentType"}],"type":"array"}},{"name":"firstLine","required":true,"schema":{"description":"first line of the comment","type":"number"}},{"name":"lastLine","required":true,"schema":{"description":"last line of the comment","type":"number"}},{"name":"statementName","required":false,"schema":{"description":"statement name the comment belongs to","type":"string"}},{"name":"rawStatement","required":false,"schema":{"description":"raw statement text the comment belongs to","type":"string"}}],"type":"object"},"name":"TsComment"}],"type":"array"}},{"name":"returnType","required":true,"schema":{"description":"all info that should always be collected when indexing any type interface","properties":[{"name":"typeDefinition","required":false,"schema":{"properties":[{"name":"$id","required":false,"schema":{"type":"string"}},{"name":"$ref","required":false,"schema":{"type":"string"}},{"name":"$schema","required":false,"schema":{"description":"Meta schema\n\nRecommended values:\n- 'http://json-schema.org/schema#'\n- 'http://json-schema.org/hyper-schema#'\n- 'http://json-schema.org/draft-07/schema#'\n- 'http://json-schema.org/draft-07/hyper-schema#'","type":"string"}},{"name":"$comment","required":false,"schema":{"type":"string"}},{"name":"$defs","required":false,"schema":{"properties":[],"type":"object"}},{"name":"type","required":false,"schema":{"properties":[],"type":"object"}},{"name":"enum","required":false,"schema":{"items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"const","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"multipleOf","required":false,"schema":{"type":"number"}},{"name":"maximum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMaximum","required":false,"schema":{"type":"number"}},{"name":"minimum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMinimum","required":false,"schema":{"type":"number"}},{"name":"maxLength","required":false,"schema":{"type":"number"}},{"name":"minLength","required":false,"schema":{"type":"number"}},{"name":"pattern","required":false,"schema":{"type":"string"}},{"name":"items","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalItems","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"maxItems","required":false,"schema":{"type":"number"}},{"name":"minItems","required":false,"schema":{"type":"number"}},{"name":"uniqueItems","required":false,"schema":{"type":"boolean"}},{"name":"contains","required":false,"schema":{"circularRefName":"JSONSchema7","properties":[],"type":"object"}},{"name":"maxProperties","required":false,"schema":{"type":"number"}},{"name":"minProperties","required":false,"schema":{"type":"number"}},{"name":"required","required":false,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"properties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"patternProperties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalProperties","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"dependencies","required":false,"schema":{"properties":[],"type":"object"}},{"name":"propertyNames","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"if","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"then","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"else","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"allOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"anyOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"oneOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"not","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"format","required":false,"schema":{"type":"string"}},{"name":"contentMediaType","required":false,"schema":{"type":"string"}},{"name":"contentEncoding","required":false,"schema":{"type":"string"}},{"name":"definitions","required":false,"schema":{"properties":[],"type":"object"}},{"name":"title","required":false,"schema":{"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"default","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"readOnly","required":false,"schema":{"type":"boolean"}},{"name":"writeOnly","required":false,"schema":{"type":"boolean"}},{"name":"examples","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}}],"type":"object"}},{"name":"simplifiedSchema","required":false,"schema":{"description":"JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form","properties":[{"name":"type","required":true,"schema":{"enum":["string","number","boolean","object","array","null"],"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"circularRefName","required":false,"schema":{"description":"sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here","type":"string"}},{"name":"enum","required":false,"schema":{"description":"in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think","items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"properties","required":false,"schema":{"description":"in case of object, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}},{"name":"required","required":true,"schema":{"description":"NB: can't we put this in the SimplifiedSchema itself?","type":"boolean"}}],"type":"object"},"name":"SimplifiedSchemaProperty"}],"type":"array"}},{"name":"items","required":false,"schema":{"description":"in case of arrays, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"description":"name in case of it being a reference, otherwise null","type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}}],"type":"object"},"name":"SimplifiedSchemaItem"}],"type":"array"}}],"type":"object"}},{"name":"isObject","required":true,"schema":{"description":"if the type is an object, this is true. false if it's an array","type":"boolean"}},{"name":"isArray","required":true,"schema":{"description":"if the type is an array, this is true","type":"boolean"}},{"name":"isPrimitive","required":true,"schema":{"description":"if it's a primitive type like \"string\", \"number\", \"boolean\", \"null\" | \"undefined\"","type":"boolean"}},{"name":"isEnum","required":true,"schema":{"description":"will be true for any primitive conjunction types","type":"boolean"}},{"name":"isEnumLiteral","required":true,"schema":{"description":"will be true for string conjunction types","type":"boolean"}},{"name":"typeCoverage","required":true,"schema":{"description":"quantification of coverage of the specified type or subtypes in our database.","type":"number"}},{"name":"rawType","required":true,"schema":{"description":"raw type string","type":"string"}}],"type":"object"}},{"name":"parameters","required":false,"schema":{"description":"parameters the function takes as its arguments, if any","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"type":"string"}},{"name":"schema","required":false,"schema":{"properties":[{"name":"$id","required":false,"schema":{"type":"string"}},{"name":"$ref","required":false,"schema":{"type":"string"}},{"name":"$schema","required":false,"schema":{"description":"Meta schema\n\nRecommended values:\n- 'http://json-schema.org/schema#'\n- 'http://json-schema.org/hyper-schema#'\n- 'http://json-schema.org/draft-07/schema#'\n- 'http://json-schema.org/draft-07/hyper-schema#'","type":"string"}},{"name":"$comment","required":false,"schema":{"type":"string"}},{"name":"$defs","required":false,"schema":{"properties":[],"type":"object"}},{"name":"type","required":false,"schema":{"properties":[],"type":"object"}},{"name":"enum","required":false,"schema":{"items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"const","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"multipleOf","required":false,"schema":{"type":"number"}},{"name":"maximum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMaximum","required":false,"schema":{"type":"number"}},{"name":"minimum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMinimum","required":false,"schema":{"type":"number"}},{"name":"maxLength","required":false,"schema":{"type":"number"}},{"name":"minLength","required":false,"schema":{"type":"number"}},{"name":"pattern","required":false,"schema":{"type":"string"}},{"name":"items","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalItems","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"maxItems","required":false,"schema":{"type":"number"}},{"name":"minItems","required":false,"schema":{"type":"number"}},{"name":"uniqueItems","required":false,"schema":{"type":"boolean"}},{"name":"contains","required":false,"schema":{"circularRefName":"JSONSchema7","properties":[],"type":"object"}},{"name":"maxProperties","required":false,"schema":{"type":"number"}},{"name":"minProperties","required":false,"schema":{"type":"number"}},{"name":"required","required":false,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"properties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"patternProperties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalProperties","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"dependencies","required":false,"schema":{"properties":[],"type":"object"}},{"name":"propertyNames","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"if","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"then","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"else","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"allOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"anyOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"oneOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"not","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"format","required":false,"schema":{"type":"string"}},{"name":"contentMediaType","required":false,"schema":{"type":"string"}},{"name":"contentEncoding","required":false,"schema":{"type":"string"}},{"name":"definitions","required":false,"schema":{"properties":[],"type":"object"}},{"name":"title","required":false,"schema":{"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"default","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"readOnly","required":false,"schema":{"type":"boolean"}},{"name":"writeOnly","required":false,"schema":{"type":"boolean"}},{"name":"examples","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}}],"type":"object"}},{"name":"simplifiedSchema","required":false,"schema":{"description":"JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form","properties":[{"name":"type","required":true,"schema":{"enum":["string","number","boolean","object","array","null"],"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"circularRefName","required":false,"schema":{"description":"sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here","type":"string"}},{"name":"enum","required":false,"schema":{"description":"in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think","items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"properties","required":false,"schema":{"description":"in case of object, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}},{"name":"required","required":true,"schema":{"description":"NB: can't we put this in the SimplifiedSchema itself?","type":"boolean"}}],"type":"object"},"name":"SimplifiedSchemaProperty"}],"type":"array"}},{"name":"items","required":false,"schema":{"description":"in case of arrays, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"description":"name in case of it being a reference, otherwise null","type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}}],"type":"object"},"name":"SimplifiedSchemaItem"}],"type":"array"}}],"type":"object"}},{"name":"required","required":true,"schema":{"type":"boolean"}}],"type":"object"},"name":"FunctionParameter"}],"type":"array"}},{"name":"size","required":true,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"commentSize","required":false,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"codeSize","required":false,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"cumulativeSize","required":false,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"cumulativeCommentSize","required":false,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"cumulativeCodeSize","required":false,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"maxIndentationDepth","required":true,"schema":{"description":"maximum amount of times indedented in this function\n\ngood for determining the complexity and finding code that can be simplified/destructured into smaller pieces","type":"number"}},{"name":"dependantFiles","required":false,"schema":{"description":"finds all files that import this function\n\nNB: this is not indexed because this information has nothing to do with the operation itself, but the exposure to the broader monorepo. This is calculated on the fly.","items":[{"schema":{"type":"string"},"name":null}],"type":"array"}}],"type":"object"},"name":"TsFunction"}],"type":"array"}},{"name":"tsVariables","required":true,"schema":{"items":[{"schema":{"properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"value","required":true,"schema":{"type":"string"}},{"name":"classification","required":true,"schema":{"enum":["const","var","let"],"type":"string"}},{"name":"type","required":true,"schema":{"description":"all info that should always be collected when indexing any type interface","properties":[{"name":"typeDefinition","required":false,"schema":{"properties":[{"name":"$id","required":false,"schema":{"type":"string"}},{"name":"$ref","required":false,"schema":{"type":"string"}},{"name":"$schema","required":false,"schema":{"description":"Meta schema\n\nRecommended values:\n- 'http://json-schema.org/schema#'\n- 'http://json-schema.org/hyper-schema#'\n- 'http://json-schema.org/draft-07/schema#'\n- 'http://json-schema.org/draft-07/hyper-schema#'","type":"string"}},{"name":"$comment","required":false,"schema":{"type":"string"}},{"name":"$defs","required":false,"schema":{"properties":[],"type":"object"}},{"name":"type","required":false,"schema":{"properties":[],"type":"object"}},{"name":"enum","required":false,"schema":{"items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"const","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"multipleOf","required":false,"schema":{"type":"number"}},{"name":"maximum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMaximum","required":false,"schema":{"type":"number"}},{"name":"minimum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMinimum","required":false,"schema":{"type":"number"}},{"name":"maxLength","required":false,"schema":{"type":"number"}},{"name":"minLength","required":false,"schema":{"type":"number"}},{"name":"pattern","required":false,"schema":{"type":"string"}},{"name":"items","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalItems","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"maxItems","required":false,"schema":{"type":"number"}},{"name":"minItems","required":false,"schema":{"type":"number"}},{"name":"uniqueItems","required":false,"schema":{"type":"boolean"}},{"name":"contains","required":false,"schema":{"circularRefName":"JSONSchema7","properties":[],"type":"object"}},{"name":"maxProperties","required":false,"schema":{"type":"number"}},{"name":"minProperties","required":false,"schema":{"type":"number"}},{"name":"required","required":false,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"properties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"patternProperties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalProperties","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"dependencies","required":false,"schema":{"properties":[],"type":"object"}},{"name":"propertyNames","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"if","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"then","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"else","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"allOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"anyOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"oneOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"not","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"format","required":false,"schema":{"type":"string"}},{"name":"contentMediaType","required":false,"schema":{"type":"string"}},{"name":"contentEncoding","required":false,"schema":{"type":"string"}},{"name":"definitions","required":false,"schema":{"properties":[],"type":"object"}},{"name":"title","required":false,"schema":{"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"default","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"readOnly","required":false,"schema":{"type":"boolean"}},{"name":"writeOnly","required":false,"schema":{"type":"boolean"}},{"name":"examples","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}}],"type":"object"}},{"name":"simplifiedSchema","required":false,"schema":{"description":"JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form","properties":[{"name":"type","required":true,"schema":{"enum":["string","number","boolean","object","array","null"],"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"circularRefName","required":false,"schema":{"description":"sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here","type":"string"}},{"name":"enum","required":false,"schema":{"description":"in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think","items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"properties","required":false,"schema":{"description":"in case of object, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}},{"name":"required","required":true,"schema":{"description":"NB: can't we put this in the SimplifiedSchema itself?","type":"boolean"}}],"type":"object"},"name":"SimplifiedSchemaProperty"}],"type":"array"}},{"name":"items","required":false,"schema":{"description":"in case of arrays, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"description":"name in case of it being a reference, otherwise null","type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}}],"type":"object"},"name":"SimplifiedSchemaItem"}],"type":"array"}}],"type":"object"}},{"name":"isObject","required":true,"schema":{"description":"if the type is an object, this is true. false if it's an array","type":"boolean"}},{"name":"isArray","required":true,"schema":{"description":"if the type is an array, this is true","type":"boolean"}},{"name":"isPrimitive","required":true,"schema":{"description":"if it's a primitive type like \"string\", \"number\", \"boolean\", \"null\" | \"undefined\"","type":"boolean"}},{"name":"isEnum","required":true,"schema":{"description":"will be true for any primitive conjunction types","type":"boolean"}},{"name":"isEnumLiteral","required":true,"schema":{"description":"will be true for string conjunction types","type":"boolean"}},{"name":"typeCoverage","required":true,"schema":{"description":"quantification of coverage of the specified type or subtypes in our database.","type":"number"}},{"name":"rawType","required":true,"schema":{"description":"raw type string","type":"string"}}],"type":"object"}},{"name":"comments","required":true,"schema":{"description":"surrounding comments and comments inside of the variable","items":[{"schema":{"description":"comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\nspecial line prefixes:\n- TODO:\n- DISCUSSION:\n- IDEA:\n- LATER:\n- NB:\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!","properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"comment","required":true,"schema":{"description":"a string that is known to contain markdown.","type":"string"}},{"name":"parameters","required":true,"schema":{"properties":[],"type":"object"}},{"name":"types","required":true,"schema":{"description":"These are the type indicators that were found in this single or multiline comment. Can be multiple.","items":[{"schema":{"enum":["todo","discussion","idea","later","nb"],"type":"string"},"name":"CommentType"}],"type":"array"}},{"name":"firstLine","required":true,"schema":{"description":"first line of the comment","type":"number"}},{"name":"lastLine","required":true,"schema":{"description":"last line of the comment","type":"number"}},{"name":"statementName","required":false,"schema":{"description":"statement name the comment belongs to","type":"string"}},{"name":"rawStatement","required":false,"schema":{"description":"raw statement text the comment belongs to","type":"string"}}],"type":"object"},"name":"TsComment"}],"type":"array"}}],"type":"object"},"name":"TsVariable"}],"type":"array"}},{"name":"tsInterfaces","required":true,"schema":{"items":[{"schema":{"description":"TODO: Just like parameters, this should be linted for. If you define an interface that's not declared here, that should ring a bell.","properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"type","required":true,"schema":{"description":"all info that should always be collected when indexing any type interface","properties":[{"name":"typeDefinition","required":false,"schema":{"properties":[{"name":"$id","required":false,"schema":{"type":"string"}},{"name":"$ref","required":false,"schema":{"type":"string"}},{"name":"$schema","required":false,"schema":{"description":"Meta schema\n\nRecommended values:\n- 'http://json-schema.org/schema#'\n- 'http://json-schema.org/hyper-schema#'\n- 'http://json-schema.org/draft-07/schema#'\n- 'http://json-schema.org/draft-07/hyper-schema#'","type":"string"}},{"name":"$comment","required":false,"schema":{"type":"string"}},{"name":"$defs","required":false,"schema":{"properties":[],"type":"object"}},{"name":"type","required":false,"schema":{"properties":[],"type":"object"}},{"name":"enum","required":false,"schema":{"items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"const","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"multipleOf","required":false,"schema":{"type":"number"}},{"name":"maximum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMaximum","required":false,"schema":{"type":"number"}},{"name":"minimum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMinimum","required":false,"schema":{"type":"number"}},{"name":"maxLength","required":false,"schema":{"type":"number"}},{"name":"minLength","required":false,"schema":{"type":"number"}},{"name":"pattern","required":false,"schema":{"type":"string"}},{"name":"items","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalItems","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"maxItems","required":false,"schema":{"type":"number"}},{"name":"minItems","required":false,"schema":{"type":"number"}},{"name":"uniqueItems","required":false,"schema":{"type":"boolean"}},{"name":"contains","required":false,"schema":{"circularRefName":"JSONSchema7","properties":[],"type":"object"}},{"name":"maxProperties","required":false,"schema":{"type":"number"}},{"name":"minProperties","required":false,"schema":{"type":"number"}},{"name":"required","required":false,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"properties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"patternProperties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalProperties","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"dependencies","required":false,"schema":{"properties":[],"type":"object"}},{"name":"propertyNames","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"if","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"then","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"else","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"allOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"anyOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"oneOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"not","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"format","required":false,"schema":{"type":"string"}},{"name":"contentMediaType","required":false,"schema":{"type":"string"}},{"name":"contentEncoding","required":false,"schema":{"type":"string"}},{"name":"definitions","required":false,"schema":{"properties":[],"type":"object"}},{"name":"title","required":false,"schema":{"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"default","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"readOnly","required":false,"schema":{"type":"boolean"}},{"name":"writeOnly","required":false,"schema":{"type":"boolean"}},{"name":"examples","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}}],"type":"object"}},{"name":"simplifiedSchema","required":false,"schema":{"description":"JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form","properties":[{"name":"type","required":true,"schema":{"enum":["string","number","boolean","object","array","null"],"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"circularRefName","required":false,"schema":{"description":"sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here","type":"string"}},{"name":"enum","required":false,"schema":{"description":"in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think","items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"properties","required":false,"schema":{"description":"in case of object, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}},{"name":"required","required":true,"schema":{"description":"NB: can't we put this in the SimplifiedSchema itself?","type":"boolean"}}],"type":"object"},"name":"SimplifiedSchemaProperty"}],"type":"array"}},{"name":"items","required":false,"schema":{"description":"in case of arrays, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"description":"name in case of it being a reference, otherwise null","type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}}],"type":"object"},"name":"SimplifiedSchemaItem"}],"type":"array"}}],"type":"object"}},{"name":"isObject","required":true,"schema":{"description":"if the type is an object, this is true. false if it's an array","type":"boolean"}},{"name":"isArray","required":true,"schema":{"description":"if the type is an array, this is true","type":"boolean"}},{"name":"isPrimitive","required":true,"schema":{"description":"if it's a primitive type like \"string\", \"number\", \"boolean\", \"null\" | \"undefined\"","type":"boolean"}},{"name":"isEnum","required":true,"schema":{"description":"will be true for any primitive conjunction types","type":"boolean"}},{"name":"isEnumLiteral","required":true,"schema":{"description":"will be true for string conjunction types","type":"boolean"}},{"name":"typeCoverage","required":true,"schema":{"description":"quantification of coverage of the specified type or subtypes in our database.","type":"number"}},{"name":"rawType","required":true,"schema":{"description":"raw type string","type":"string"}}],"type":"object"}},{"name":"description","required":false,"schema":{"description":"a string that is known to contain markdown.","type":"string"}},{"name":"commentsInside","required":true,"schema":{"items":[{"schema":{"description":"comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\nspecial line prefixes:\n- TODO:\n- DISCUSSION:\n- IDEA:\n- LATER:\n- NB:\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!","properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"comment","required":true,"schema":{"description":"a string that is known to contain markdown.","type":"string"}},{"name":"parameters","required":true,"schema":{"properties":[],"type":"object"}},{"name":"types","required":true,"schema":{"description":"These are the type indicators that were found in this single or multiline comment. Can be multiple.","items":[{"schema":{"enum":["todo","discussion","idea","later","nb"],"type":"string"},"name":"CommentType"}],"type":"array"}},{"name":"firstLine","required":true,"schema":{"description":"first line of the comment","type":"number"}},{"name":"lastLine","required":true,"schema":{"description":"last line of the comment","type":"number"}},{"name":"statementName","required":false,"schema":{"description":"statement name the comment belongs to","type":"string"}},{"name":"rawStatement","required":false,"schema":{"description":"raw statement text the comment belongs to","type":"string"}}],"type":"object"},"name":"TsComment"}],"type":"array"}},{"name":"rawText","required":false,"schema":{"description":"raw interface text, coming from ts-morph","type":"string"}},{"name":"extensions","required":false,"schema":{"description":"if the interface extends anything, names will be specified here","items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"isDbModel","required":true,"schema":{"description":"if true, this interface is marked as a db model, which means it will be included in the db function autocompletion so it's easy to store and fetch data in this format.\n\nis automatically set to true when indexing and when one of the following statements holds true\n- if the doc-comment contains frontmatter with `isDbModel` or `defaultDbStorageMethod` specified\n- if the interface last word is \"db\" or \"model\" and if there are minimum 2 words\n- if the interface extends some other special interface","type":"boolean"}},{"name":"defaultDbStorageMethod","required":false,"schema":{"enum":["jsonMultiple","jsonSingle","markdown","keyValueMarkdown","csv"],"type":"string"}}],"type":"object"},"name":"TsInterface"}],"type":"array"}},{"name":"tsComments","required":true,"schema":{"items":[{"schema":{"description":"comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\nspecial line prefixes:\n- TODO:\n- DISCUSSION:\n- IDEA:\n- LATER:\n- NB:\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!","properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"comment","required":true,"schema":{"description":"a string that is known to contain markdown.","type":"string"}},{"name":"parameters","required":true,"schema":{"properties":[],"type":"object"}},{"name":"types","required":true,"schema":{"description":"These are the type indicators that were found in this single or multiline comment. Can be multiple.","items":[{"schema":{"enum":["todo","discussion","idea","later","nb"],"type":"string"},"name":"CommentType"}],"type":"array"}},{"name":"firstLine","required":true,"schema":{"description":"first line of the comment","type":"number"}},{"name":"lastLine","required":true,"schema":{"description":"last line of the comment","type":"number"}},{"name":"statementName","required":false,"schema":{"description":"statement name the comment belongs to","type":"string"}},{"name":"rawStatement","required":false,"schema":{"description":"raw statement text the comment belongs to","type":"string"}}],"type":"object"},"name":"TsComment"}],"type":"array"}},{"name":"tsImports","required":true,"schema":{"items":[{"schema":{"properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"comments","required":true,"schema":{"description":"surrounding comments and comments inside of the import","items":[{"schema":{"description":"comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\nspecial line prefixes:\n- TODO:\n- DISCUSSION:\n- IDEA:\n- LATER:\n- NB:\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!","properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"comment","required":true,"schema":{"description":"a string that is known to contain markdown.","type":"string"}},{"name":"parameters","required":true,"schema":{"properties":[],"type":"object"}},{"name":"types","required":true,"schema":{"description":"These are the type indicators that were found in this single or multiline comment. Can be multiple.","items":[{"schema":{"enum":["todo","discussion","idea","later","nb"],"type":"string"},"name":"CommentType"}],"type":"array"}},{"name":"firstLine","required":true,"schema":{"description":"first line of the comment","type":"number"}},{"name":"lastLine","required":true,"schema":{"description":"last line of the comment","type":"number"}},{"name":"statementName","required":false,"schema":{"description":"statement name the comment belongs to","type":"string"}},{"name":"rawStatement","required":false,"schema":{"description":"raw statement text the comment belongs to","type":"string"}}],"type":"object"},"name":"TsComment"}],"type":"array"}},{"name":"module","required":true,"schema":{"type":"string"}},{"name":"alias","required":false,"schema":{"description":"TODO: not sure, but I believe alias should be defined at the import, not at the export, right?","type":"string"}},{"name":"classification","required":true,"schema":{"description":"node: node core packages like fs and path\n\nreact: react standard packages like react, react-native, expo, react-dom, etc.\n\npackage: packages from npm that are not classified as operations\n\noperation: operations from our monorepo\n\ninternal: imports from other places in the same operation\n\nNB: don't confuse this with OperationClassification","enum":["node","react","package","operation","internal"],"type":"string"}},{"name":"type","required":false,"schema":{"description":"sometimes the import statement module referenced cannot be found, in that case it cannot be known whether the import should contain a type or value, so it will be undefined.","enum":["value","type"],"type":"string"}},{"name":"hasGeneric","required":false,"schema":{"description":"only for type exports. tells you whether or not the type has one or more generic parameter(s)","type":"boolean"}},{"name":"isAbsolute","required":true,"schema":{"type":"boolean"}},{"name":"isModuleResolved","required":true,"schema":{"type":"boolean"}},{"name":"isModuleFromMonorepo","required":true,"schema":{"type":"boolean"}}],"type":"object"},"name":"TsImport"}],"type":"array"}},{"name":"tsExports","required":true,"schema":{"items":[{"schema":{"properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"comments","required":true,"schema":{"description":"surrounding comments and comments inside of the import","items":[{"schema":{"description":"comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\nspecial line prefixes:\n- TODO:\n- DISCUSSION:\n- IDEA:\n- LATER:\n- NB:\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!","properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"comment","required":true,"schema":{"description":"a string that is known to contain markdown.","type":"string"}},{"name":"parameters","required":true,"schema":{"properties":[],"type":"object"}},{"name":"types","required":true,"schema":{"description":"These are the type indicators that were found in this single or multiline comment. Can be multiple.","items":[{"schema":{"enum":["todo","discussion","idea","later","nb"],"type":"string"},"name":"CommentType"}],"type":"array"}},{"name":"firstLine","required":true,"schema":{"description":"first line of the comment","type":"number"}},{"name":"lastLine","required":true,"schema":{"description":"last line of the comment","type":"number"}},{"name":"statementName","required":false,"schema":{"description":"statement name the comment belongs to","type":"string"}},{"name":"rawStatement","required":false,"schema":{"description":"raw statement text the comment belongs to","type":"string"}}],"type":"object"},"name":"TsComment"}],"type":"array"}},{"name":"type","required":false,"schema":{"enum":["value","type"],"type":"string"}},{"name":"alias","required":false,"schema":{"description":"used for duplicate export names","type":"string"}},{"name":"hasGeneric","required":false,"schema":{"description":"only for type exports. tells you whether or not the type has one or more generic parameter(s)","type":"boolean"}}],"type":"object"},"name":"TsExport"}],"type":"array"}}],"type":"object"},"typeCoverage":0,"rawType":"TypescriptIndex","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"nOdPUstrCFaYhVFZ","name":"TsBuildError","slug":"ts-build-error","relativePathFromProjectRoot":"/tools/types/code-types/src/TypescriptIndex.ts","srcFileId":"/TypescriptIndex","operationFolderName":"code-types","relativeFilePathFromSrc":"/TypescriptIndex.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","rawText":"\n\nexport interface TsBuildError extends IndexId {\n  line?: number;\n  character?: number;\n  message: string;\n}","extensions":["IndexId"],"description":"","defaultDbStorageMethod":"jsonMultiple","isDbModel":true,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"relativeOperationBasePathFromProjectRoot":{"type":"string","description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript"},"relativeFilePathFromSrc":{"type":"string","description":"relative file path from the operation src\n\ne.g. general.ts"},"srcFileId":{"type":"string","description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\""},"operationName":{"type":"string","description":"operation package.json name"},"operationFolderName":{"type":"string","description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)"},"relativePathFromProjectRoot":{"type":"string","description":"relative file or folder path from the project root"},"id":{"type":"string","description":"unique id of the model"},"name":{"type":"string","description":"name (identifier) of the model"},"slug":{"type":"string","description":"kebab-case variant of the name"},"line":{"type":"number"},"character":{"type":"number"},"message":{"type":"string"}},"required":["id","message","name","operationFolderName","relativeFilePathFromSrc","relativeOperationBasePathFromProjectRoot","relativePathFromProjectRoot","slug","srcFileId"],"additionalProperties":false},"simplifiedSchema":{"properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"line","required":false,"schema":{"type":"number"}},{"name":"character","required":false,"schema":{"type":"number"}},{"name":"message","required":true,"schema":{"type":"string"}}],"type":"object"},"typeCoverage":0,"rawType":"TsBuildError","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"hhmbrXjzLxeaJRUc","name":"IndexId","slug":"index-id","relativePathFromProjectRoot":"/tools/types/code-types/src/TypescriptIndex.ts","srcFileId":"/TypescriptIndex","operationFolderName":"code-types","relativeFilePathFromSrc":"/TypescriptIndex.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","description":"identifier of any index type interface\n\nTODO: should rename to OperationIndexModelType","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","additionalProperties":false,"properties":{"relativeOperationBasePathFromProjectRoot":{"type":"string","description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript"},"relativeFilePathFromSrc":{"type":"string","description":"relative file path from the operation src\n\ne.g. general.ts"},"srcFileId":{"type":"string","description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\""},"operationName":{"type":"string","description":"operation package.json name"},"operationFolderName":{"type":"string","description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)"},"relativePathFromProjectRoot":{"type":"string","description":"relative file or folder path from the project root"},"id":{"type":"string","description":"unique id of the model"},"name":{"type":"string","description":"name (identifier) of the model"},"slug":{"type":"string","description":"kebab-case variant of the name"}},"required":["id","name","operationFolderName","relativeFilePathFromSrc","relativeOperationBasePathFromProjectRoot","relativePathFromProjectRoot","slug","srcFileId"],"description":"identifier of any index type interface\n\nTODO: should rename to OperationIndexModelType"},"simplifiedSchema":{"description":"identifier of any index type interface\n\nTODO: should rename to OperationIndexModelType","properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}}],"type":"object"},"typeCoverage":0,"rawType":"IndexId","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"MrvshJAUHlCywgYT","name":"OperationPathParse","slug":"operation-path-parse","relativePathFromProjectRoot":"/tools/types/code-types/src/TypescriptIndex.ts","srcFileId":"/TypescriptIndex","operationFolderName":"code-types","relativeFilePathFromSrc":"/TypescriptIndex.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","additionalProperties":false,"properties":{"relativeOperationBasePathFromProjectRoot":{"type":"string","description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript"},"relativeFilePathFromSrc":{"type":"string","description":"relative file path from the operation src\n\ne.g. general.ts"},"srcFileId":{"type":"string","description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\""},"operationName":{"type":"string","description":"operation package.json name"},"operationFolderName":{"type":"string","description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)"},"relativePathFromProjectRoot":{"type":"string","description":"relative file or folder path from the project root"}},"required":["operationFolderName","relativeFilePathFromSrc","relativeOperationBasePathFromProjectRoot","relativePathFromProjectRoot","srcFileId"]},"simplifiedSchema":{"properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}}],"type":"object"},"typeCoverage":0,"rawType":"OperationPathParse","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"oiaMeKrbwQoFTVrD","name":"PathParse","slug":"path-parse","relativePathFromProjectRoot":"/tools/types/code-types/src/TypescriptIndex.ts","srcFileId":"/TypescriptIndex","operationFolderName":"code-types","relativeFilePathFromSrc":"/TypescriptIndex.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","description":"object to represent a folder or file path in different ways\n\nNB: doesn't include the absolute path so the indexes can be exported easily witout creating incorrect paths","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"relativePathFromProjectRoot":{"type":"string","description":"relative file or folder path from the project root"}},"required":["relativePathFromProjectRoot"],"additionalProperties":false,"description":"object to represent a folder or file path in different ways\n\nNB: doesn't include the absolute path so the indexes can be exported easily witout creating incorrect paths"},"simplifiedSchema":{"description":"object to represent a folder or file path in different ways\n\nNB: doesn't include the absolute path so the indexes can be exported easily witout creating incorrect paths","properties":[{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}}],"type":"object"},"typeCoverage":0,"rawType":"PathParse","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"EWkJzvlbmaUnGFmZ","name":"TsLintWarning","slug":"ts-lint-warning","relativePathFromProjectRoot":"/tools/types/code-types/src/TypescriptIndex.ts","srcFileId":"/TypescriptIndex","operationFolderName":"code-types","relativeFilePathFromSrc":"/TypescriptIndex.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","rawText":"\n\nexport interface TsLintWarning extends IndexId {\n  line: number;\n  character: number;\n  message: string;\n}","extensions":["IndexId"],"description":"","defaultDbStorageMethod":"jsonMultiple","isDbModel":true,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"relativeOperationBasePathFromProjectRoot":{"type":"string","description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript"},"relativeFilePathFromSrc":{"type":"string","description":"relative file path from the operation src\n\ne.g. general.ts"},"srcFileId":{"type":"string","description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\""},"operationName":{"type":"string","description":"operation package.json name"},"operationFolderName":{"type":"string","description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)"},"relativePathFromProjectRoot":{"type":"string","description":"relative file or folder path from the project root"},"id":{"type":"string","description":"unique id of the model"},"name":{"type":"string","description":"name (identifier) of the model"},"slug":{"type":"string","description":"kebab-case variant of the name"},"line":{"type":"number"},"character":{"type":"number"},"message":{"type":"string"}},"required":["character","id","line","message","name","operationFolderName","relativeFilePathFromSrc","relativeOperationBasePathFromProjectRoot","relativePathFromProjectRoot","slug","srcFileId"],"additionalProperties":false},"simplifiedSchema":{"properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"line","required":true,"schema":{"type":"number"}},{"name":"character","required":true,"schema":{"type":"number"}},{"name":"message","required":true,"schema":{"type":"string"}}],"type":"object"},"typeCoverage":0,"rawType":"TsLintWarning","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"SWQepuNYMIQFznof","name":"TsFunction","slug":"ts-function","relativePathFromProjectRoot":"/tools/types/code-types/src/TypescriptIndex.ts","srcFileId":"/TypescriptIndex","operationFolderName":"code-types","relativeFilePathFromSrc":"/TypescriptIndex.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","description":"Interface for arrow functions and normal functions","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"relativeOperationBasePathFromProjectRoot":{"type":"string","description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript"},"relativeFilePathFromSrc":{"type":"string","description":"relative file path from the operation src\n\ne.g. general.ts"},"srcFileId":{"type":"string","description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\""},"operationName":{"type":"string","description":"operation package.json name"},"operationFolderName":{"type":"string","description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)"},"relativePathFromProjectRoot":{"type":"string","description":"relative file or folder path from the project root"},"id":{"type":"string","description":"unique id of the model"},"name":{"type":"string","description":"name (identifier) of the model"},"slug":{"type":"string","description":"kebab-case variant of the name"},"description":{"$ref":"#/definitions/Markdown","description":"parsed comment from doc-comment"},"rawText":{"type":"string","description":"raw text of the function"},"commentsInside":{"type":"array","items":{"$ref":"#/definitions/TsComment"},"description":"all comments found in a function and the node that they belong to"},"returnType":{"$ref":"#/definitions/TypeInfo","description":"return type JSON Schema definition"},"parameters":{"type":"array","items":{"$ref":"#/definitions/FunctionParameter"},"description":"parameters the function takes as its arguments, if any"},"size":{"$ref":"#/definitions/SizeSummary","description":"size of this function (comments + code)"},"commentSize":{"$ref":"#/definitions/SizeSummary","description":"size of the comments of this function (including surrounding comments)"},"codeSize":{"$ref":"#/definitions/SizeSummary","description":"size of the code inside the function (without comments)"},"cumulativeSize":{"$ref":"#/definitions/SizeSummary","description":"tells you the size of itself and all its dependencies that are used that are also part of an operation, recursively"},"cumulativeCommentSize":{"$ref":"#/definitions/SizeSummary"},"cumulativeCodeSize":{"$ref":"#/definitions/SizeSummary"},"maxIndentationDepth":{"type":"number","description":"maximum amount of times indedented in this function\n\ngood for determining the complexity and finding code that can be simplified/destructured into smaller pieces"},"dependantFiles":{"type":"array","items":{"type":"string"},"description":"finds all files that import this function\n\nNB: this is not indexed because this information has nothing to do with the operation itself, but the exposure to the broader monorepo. This is calculated on the fly."}},"required":["commentsInside","id","maxIndentationDepth","name","operationFolderName","relativeFilePathFromSrc","relativeOperationBasePathFromProjectRoot","relativePathFromProjectRoot","returnType","size","slug","srcFileId"],"additionalProperties":false,"description":"Interface for arrow functions and normal functions"},"simplifiedSchema":{"description":"Interface for arrow functions and normal functions","properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"description","required":false,"schema":{"description":"a string that is known to contain markdown.","type":"string"}},{"name":"rawText","required":false,"schema":{"description":"raw text of the function","type":"string"}},{"name":"commentsInside","required":true,"schema":{"description":"all comments found in a function and the node that they belong to","items":[{"schema":{"description":"comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\nspecial line prefixes:\n- TODO:\n- DISCUSSION:\n- IDEA:\n- LATER:\n- NB:\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!","properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"comment","required":true,"schema":{"description":"a string that is known to contain markdown.","type":"string"}},{"name":"parameters","required":true,"schema":{"properties":[],"type":"object"}},{"name":"types","required":true,"schema":{"description":"These are the type indicators that were found in this single or multiline comment. Can be multiple.","items":[{"schema":{"enum":["todo","discussion","idea","later","nb"],"type":"string"},"name":"CommentType"}],"type":"array"}},{"name":"firstLine","required":true,"schema":{"description":"first line of the comment","type":"number"}},{"name":"lastLine","required":true,"schema":{"description":"last line of the comment","type":"number"}},{"name":"statementName","required":false,"schema":{"description":"statement name the comment belongs to","type":"string"}},{"name":"rawStatement","required":false,"schema":{"description":"raw statement text the comment belongs to","type":"string"}}],"type":"object"},"name":"TsComment"}],"type":"array"}},{"name":"returnType","required":true,"schema":{"description":"all info that should always be collected when indexing any type interface","properties":[{"name":"typeDefinition","required":false,"schema":{"properties":[{"name":"$id","required":false,"schema":{"type":"string"}},{"name":"$ref","required":false,"schema":{"type":"string"}},{"name":"$schema","required":false,"schema":{"description":"Meta schema\n\nRecommended values:\n- 'http://json-schema.org/schema#'\n- 'http://json-schema.org/hyper-schema#'\n- 'http://json-schema.org/draft-07/schema#'\n- 'http://json-schema.org/draft-07/hyper-schema#'","type":"string"}},{"name":"$comment","required":false,"schema":{"type":"string"}},{"name":"$defs","required":false,"schema":{"properties":[],"type":"object"}},{"name":"type","required":false,"schema":{"properties":[],"type":"object"}},{"name":"enum","required":false,"schema":{"items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"const","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"multipleOf","required":false,"schema":{"type":"number"}},{"name":"maximum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMaximum","required":false,"schema":{"type":"number"}},{"name":"minimum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMinimum","required":false,"schema":{"type":"number"}},{"name":"maxLength","required":false,"schema":{"type":"number"}},{"name":"minLength","required":false,"schema":{"type":"number"}},{"name":"pattern","required":false,"schema":{"type":"string"}},{"name":"items","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalItems","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"maxItems","required":false,"schema":{"type":"number"}},{"name":"minItems","required":false,"schema":{"type":"number"}},{"name":"uniqueItems","required":false,"schema":{"type":"boolean"}},{"name":"contains","required":false,"schema":{"circularRefName":"JSONSchema7","properties":[],"type":"object"}},{"name":"maxProperties","required":false,"schema":{"type":"number"}},{"name":"minProperties","required":false,"schema":{"type":"number"}},{"name":"required","required":false,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"properties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"patternProperties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalProperties","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"dependencies","required":false,"schema":{"properties":[],"type":"object"}},{"name":"propertyNames","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"if","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"then","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"else","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"allOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"anyOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"oneOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"not","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"format","required":false,"schema":{"type":"string"}},{"name":"contentMediaType","required":false,"schema":{"type":"string"}},{"name":"contentEncoding","required":false,"schema":{"type":"string"}},{"name":"definitions","required":false,"schema":{"properties":[],"type":"object"}},{"name":"title","required":false,"schema":{"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"default","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"readOnly","required":false,"schema":{"type":"boolean"}},{"name":"writeOnly","required":false,"schema":{"type":"boolean"}},{"name":"examples","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}}],"type":"object"}},{"name":"simplifiedSchema","required":false,"schema":{"description":"JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form","properties":[{"name":"type","required":true,"schema":{"enum":["string","number","boolean","object","array","null"],"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"circularRefName","required":false,"schema":{"description":"sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here","type":"string"}},{"name":"enum","required":false,"schema":{"description":"in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think","items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"properties","required":false,"schema":{"description":"in case of object, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}},{"name":"required","required":true,"schema":{"description":"NB: can't we put this in the SimplifiedSchema itself?","type":"boolean"}}],"type":"object"},"name":"SimplifiedSchemaProperty"}],"type":"array"}},{"name":"items","required":false,"schema":{"description":"in case of arrays, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"description":"name in case of it being a reference, otherwise null","type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}}],"type":"object"},"name":"SimplifiedSchemaItem"}],"type":"array"}}],"type":"object"}},{"name":"isObject","required":true,"schema":{"description":"if the type is an object, this is true. false if it's an array","type":"boolean"}},{"name":"isArray","required":true,"schema":{"description":"if the type is an array, this is true","type":"boolean"}},{"name":"isPrimitive","required":true,"schema":{"description":"if it's a primitive type like \"string\", \"number\", \"boolean\", \"null\" | \"undefined\"","type":"boolean"}},{"name":"isEnum","required":true,"schema":{"description":"will be true for any primitive conjunction types","type":"boolean"}},{"name":"isEnumLiteral","required":true,"schema":{"description":"will be true for string conjunction types","type":"boolean"}},{"name":"typeCoverage","required":true,"schema":{"description":"quantification of coverage of the specified type or subtypes in our database.","type":"number"}},{"name":"rawType","required":true,"schema":{"description":"raw type string","type":"string"}}],"type":"object"}},{"name":"parameters","required":false,"schema":{"description":"parameters the function takes as its arguments, if any","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"type":"string"}},{"name":"schema","required":false,"schema":{"properties":[{"name":"$id","required":false,"schema":{"type":"string"}},{"name":"$ref","required":false,"schema":{"type":"string"}},{"name":"$schema","required":false,"schema":{"description":"Meta schema\n\nRecommended values:\n- 'http://json-schema.org/schema#'\n- 'http://json-schema.org/hyper-schema#'\n- 'http://json-schema.org/draft-07/schema#'\n- 'http://json-schema.org/draft-07/hyper-schema#'","type":"string"}},{"name":"$comment","required":false,"schema":{"type":"string"}},{"name":"$defs","required":false,"schema":{"properties":[],"type":"object"}},{"name":"type","required":false,"schema":{"properties":[],"type":"object"}},{"name":"enum","required":false,"schema":{"items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"const","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"multipleOf","required":false,"schema":{"type":"number"}},{"name":"maximum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMaximum","required":false,"schema":{"type":"number"}},{"name":"minimum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMinimum","required":false,"schema":{"type":"number"}},{"name":"maxLength","required":false,"schema":{"type":"number"}},{"name":"minLength","required":false,"schema":{"type":"number"}},{"name":"pattern","required":false,"schema":{"type":"string"}},{"name":"items","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalItems","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"maxItems","required":false,"schema":{"type":"number"}},{"name":"minItems","required":false,"schema":{"type":"number"}},{"name":"uniqueItems","required":false,"schema":{"type":"boolean"}},{"name":"contains","required":false,"schema":{"circularRefName":"JSONSchema7","properties":[],"type":"object"}},{"name":"maxProperties","required":false,"schema":{"type":"number"}},{"name":"minProperties","required":false,"schema":{"type":"number"}},{"name":"required","required":false,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"properties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"patternProperties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalProperties","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"dependencies","required":false,"schema":{"properties":[],"type":"object"}},{"name":"propertyNames","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"if","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"then","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"else","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"allOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"anyOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"oneOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"not","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"format","required":false,"schema":{"type":"string"}},{"name":"contentMediaType","required":false,"schema":{"type":"string"}},{"name":"contentEncoding","required":false,"schema":{"type":"string"}},{"name":"definitions","required":false,"schema":{"properties":[],"type":"object"}},{"name":"title","required":false,"schema":{"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"default","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"readOnly","required":false,"schema":{"type":"boolean"}},{"name":"writeOnly","required":false,"schema":{"type":"boolean"}},{"name":"examples","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}}],"type":"object"}},{"name":"simplifiedSchema","required":false,"schema":{"description":"JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form","properties":[{"name":"type","required":true,"schema":{"enum":["string","number","boolean","object","array","null"],"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"circularRefName","required":false,"schema":{"description":"sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here","type":"string"}},{"name":"enum","required":false,"schema":{"description":"in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think","items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"properties","required":false,"schema":{"description":"in case of object, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}},{"name":"required","required":true,"schema":{"description":"NB: can't we put this in the SimplifiedSchema itself?","type":"boolean"}}],"type":"object"},"name":"SimplifiedSchemaProperty"}],"type":"array"}},{"name":"items","required":false,"schema":{"description":"in case of arrays, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"description":"name in case of it being a reference, otherwise null","type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}}],"type":"object"},"name":"SimplifiedSchemaItem"}],"type":"array"}}],"type":"object"}},{"name":"required","required":true,"schema":{"type":"boolean"}}],"type":"object"},"name":"FunctionParameter"}],"type":"array"}},{"name":"size","required":true,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"commentSize","required":false,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"codeSize","required":false,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"cumulativeSize","required":false,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"cumulativeCommentSize","required":false,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"cumulativeCodeSize","required":false,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"maxIndentationDepth","required":true,"schema":{"description":"maximum amount of times indedented in this function\n\ngood for determining the complexity and finding code that can be simplified/destructured into smaller pieces","type":"number"}},{"name":"dependantFiles","required":false,"schema":{"description":"finds all files that import this function\n\nNB: this is not indexed because this information has nothing to do with the operation itself, but the exposure to the broader monorepo. This is calculated on the fly.","items":[{"schema":{"type":"string"},"name":null}],"type":"array"}}],"type":"object"},"typeCoverage":0,"rawType":"TsFunction","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"uoLLqejePlAIbfao","name":"Markdown","slug":"markdown","relativePathFromProjectRoot":"/tools/types/code-types/src/TypescriptIndex.ts","srcFileId":"/TypescriptIndex","operationFolderName":"code-types","relativeFilePathFromSrc":"/TypescriptIndex.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","description":"a string that is known to contain markdown.","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"string","description":"a string that is known to contain markdown."},"simplifiedSchema":{"description":"a string that is known to contain markdown.","type":"string"},"typeCoverage":0,"rawType":"Markdown","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"JOXHkBOScMlhFCoW","name":"TsComment","slug":"ts-comment","relativePathFromProjectRoot":"/tools/types/code-types/src/TypescriptIndex.ts","srcFileId":"/TypescriptIndex","operationFolderName":"code-types","relativeFilePathFromSrc":"/TypescriptIndex.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","description":"comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\nspecial line prefixes:\n- TODO:\n- DISCUSSION:\n- IDEA:\n- LATER:\n- NB:\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"relativeOperationBasePathFromProjectRoot":{"type":"string","description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript"},"relativeFilePathFromSrc":{"type":"string","description":"relative file path from the operation src\n\ne.g. general.ts"},"srcFileId":{"type":"string","description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\""},"operationName":{"type":"string","description":"operation package.json name"},"operationFolderName":{"type":"string","description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)"},"relativePathFromProjectRoot":{"type":"string","description":"relative file or folder path from the project root"},"id":{"type":"string","description":"unique id of the model"},"name":{"type":"string","description":"name (identifier) of the model"},"slug":{"type":"string","description":"kebab-case variant of the name"},"comment":{"$ref":"#/definitions/Markdown","description":"the content of the comment in markdown, without frontmatter"},"parameters":{"$ref":"#/definitions/FrontMatter","description":"parameters destructured from the frontmatter of the parsed markdown (if comment is not a oneliner, otherwise it'll be empty)"},"types":{"type":"array","items":{"$ref":"#/definitions/CommentType"},"description":"These are the type indicators that were found in this single or multiline comment. Can be multiple."},"firstLine":{"type":"number","description":"first line of the comment"},"lastLine":{"type":"number","description":"last line of the comment"},"statementName":{"type":"string","description":"statement name the comment belongs to"},"rawStatement":{"type":"string","description":"raw statement text the comment belongs to"}},"required":["comment","firstLine","id","lastLine","name","operationFolderName","parameters","relativeFilePathFromSrc","relativeOperationBasePathFromProjectRoot","relativePathFromProjectRoot","slug","srcFileId","types"],"additionalProperties":false,"description":"comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\nspecial line prefixes:\n- TODO:\n- DISCUSSION:\n- IDEA:\n- LATER:\n- NB:\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!"},"simplifiedSchema":{"description":"comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\nspecial line prefixes:\n- TODO:\n- DISCUSSION:\n- IDEA:\n- LATER:\n- NB:\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!","properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"comment","required":true,"schema":{"description":"a string that is known to contain markdown.","type":"string"}},{"name":"parameters","required":true,"schema":{"properties":[],"type":"object"}},{"name":"types","required":true,"schema":{"description":"These are the type indicators that were found in this single or multiline comment. Can be multiple.","items":[{"schema":{"enum":["todo","discussion","idea","later","nb"],"type":"string"},"name":"CommentType"}],"type":"array"}},{"name":"firstLine","required":true,"schema":{"description":"first line of the comment","type":"number"}},{"name":"lastLine","required":true,"schema":{"description":"last line of the comment","type":"number"}},{"name":"statementName","required":false,"schema":{"description":"statement name the comment belongs to","type":"string"}},{"name":"rawStatement","required":false,"schema":{"description":"raw statement text the comment belongs to","type":"string"}}],"type":"object"},"typeCoverage":0,"rawType":"TsComment","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"roBzbIBpTMLmWTxq","name":"FrontMatter","slug":"front-matter","relativePathFromProjectRoot":"/tools/types/code-types/src/TypescriptIndex.ts","srcFileId":"/TypescriptIndex","operationFolderName":"code-types","relativeFilePathFromSrc":"/TypescriptIndex.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","additionalProperties":{"anyOf":[{"type":"string"},{"type":"number"},{"type":"null"},{"type":"boolean"},{"not":{}}]}},"simplifiedSchema":{"properties":[],"type":"object"},"typeCoverage":0,"rawType":"FrontMatter","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"bizVnySwATZIJVDU","name":"CommentType","slug":"comment-type","relativePathFromProjectRoot":"/tools/types/code-types/src/TypescriptIndex.ts","srcFileId":"/TypescriptIndex","operationFolderName":"code-types","relativeFilePathFromSrc":"/TypescriptIndex.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"string","enum":["todo","discussion","idea","later","nb"]},"simplifiedSchema":{"enum":["todo","discussion","idea","later","nb"],"type":"string"},"typeCoverage":0,"rawType":"CommentType","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"kKMblTeDkkLXtjwn","name":"TypeInfo","slug":"type-info","relativePathFromProjectRoot":"/tools/types/code-types/src/TypescriptIndex.ts","srcFileId":"/TypescriptIndex","operationFolderName":"code-types","relativeFilePathFromSrc":"/TypescriptIndex.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","description":"all info that should always be collected when indexing any type interface","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"typeDefinition":{"$ref":"#/definitions/Schema","description":"JSON schema definition of a type interface\n\n\nSome info about the Schema:\n\n- if the type is an object, there should be properties\n- if the type is an array, there should be items"},"simplifiedSchema":{"$ref":"#/definitions/SimplifiedSchema"},"isObject":{"type":"boolean","description":"if the type is an object, this is true. false if it's an array"},"isArray":{"type":"boolean","description":"if the type is an array, this is true"},"isPrimitive":{"type":"boolean","description":"if it's a primitive type like \"string\", \"number\", \"boolean\", \"null\" | \"undefined\""},"isEnum":{"type":"boolean","description":"will be true for any primitive conjunction types"},"isEnumLiteral":{"type":"boolean","description":"will be true for string conjunction types"},"typeCoverage":{"$ref":"#/definitions/TypeCoverage"},"rawType":{"type":"string","description":"raw type string"}},"required":["isObject","isArray","isPrimitive","isEnum","isEnumLiteral","typeCoverage","rawType"],"additionalProperties":false,"description":"all info that should always be collected when indexing any type interface"},"simplifiedSchema":{"description":"all info that should always be collected when indexing any type interface","properties":[{"name":"typeDefinition","required":false,"schema":{"properties":[{"name":"$id","required":false,"schema":{"type":"string"}},{"name":"$ref","required":false,"schema":{"type":"string"}},{"name":"$schema","required":false,"schema":{"description":"Meta schema\n\nRecommended values:\n- 'http://json-schema.org/schema#'\n- 'http://json-schema.org/hyper-schema#'\n- 'http://json-schema.org/draft-07/schema#'\n- 'http://json-schema.org/draft-07/hyper-schema#'","type":"string"}},{"name":"$comment","required":false,"schema":{"type":"string"}},{"name":"$defs","required":false,"schema":{"properties":[],"type":"object"}},{"name":"type","required":false,"schema":{"properties":[],"type":"object"}},{"name":"enum","required":false,"schema":{"items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"const","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"multipleOf","required":false,"schema":{"type":"number"}},{"name":"maximum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMaximum","required":false,"schema":{"type":"number"}},{"name":"minimum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMinimum","required":false,"schema":{"type":"number"}},{"name":"maxLength","required":false,"schema":{"type":"number"}},{"name":"minLength","required":false,"schema":{"type":"number"}},{"name":"pattern","required":false,"schema":{"type":"string"}},{"name":"items","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalItems","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"maxItems","required":false,"schema":{"type":"number"}},{"name":"minItems","required":false,"schema":{"type":"number"}},{"name":"uniqueItems","required":false,"schema":{"type":"boolean"}},{"name":"contains","required":false,"schema":{"circularRefName":"JSONSchema7","properties":[],"type":"object"}},{"name":"maxProperties","required":false,"schema":{"type":"number"}},{"name":"minProperties","required":false,"schema":{"type":"number"}},{"name":"required","required":false,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"properties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"patternProperties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalProperties","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"dependencies","required":false,"schema":{"properties":[],"type":"object"}},{"name":"propertyNames","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"if","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"then","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"else","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"allOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"anyOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"oneOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"not","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"format","required":false,"schema":{"type":"string"}},{"name":"contentMediaType","required":false,"schema":{"type":"string"}},{"name":"contentEncoding","required":false,"schema":{"type":"string"}},{"name":"definitions","required":false,"schema":{"properties":[],"type":"object"}},{"name":"title","required":false,"schema":{"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"default","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"readOnly","required":false,"schema":{"type":"boolean"}},{"name":"writeOnly","required":false,"schema":{"type":"boolean"}},{"name":"examples","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}}],"type":"object"}},{"name":"simplifiedSchema","required":false,"schema":{"description":"JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form","properties":[{"name":"type","required":true,"schema":{"enum":["string","number","boolean","object","array","null"],"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"circularRefName","required":false,"schema":{"description":"sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here","type":"string"}},{"name":"enum","required":false,"schema":{"description":"in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think","items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"properties","required":false,"schema":{"description":"in case of object, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}},{"name":"required","required":true,"schema":{"description":"NB: can't we put this in the SimplifiedSchema itself?","type":"boolean"}}],"type":"object"},"name":"SimplifiedSchemaProperty"}],"type":"array"}},{"name":"items","required":false,"schema":{"description":"in case of arrays, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"description":"name in case of it being a reference, otherwise null","type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}}],"type":"object"},"name":"SimplifiedSchemaItem"}],"type":"array"}}],"type":"object"}},{"name":"isObject","required":true,"schema":{"description":"if the type is an object, this is true. false if it's an array","type":"boolean"}},{"name":"isArray","required":true,"schema":{"description":"if the type is an array, this is true","type":"boolean"}},{"name":"isPrimitive","required":true,"schema":{"description":"if it's a primitive type like \"string\", \"number\", \"boolean\", \"null\" | \"undefined\"","type":"boolean"}},{"name":"isEnum","required":true,"schema":{"description":"will be true for any primitive conjunction types","type":"boolean"}},{"name":"isEnumLiteral","required":true,"schema":{"description":"will be true for string conjunction types","type":"boolean"}},{"name":"typeCoverage","required":true,"schema":{"description":"quantification of coverage of the specified type or subtypes in our database.","type":"number"}},{"name":"rawType","required":true,"schema":{"description":"raw type string","type":"string"}}],"type":"object"},"typeCoverage":0,"rawType":"TypeInfo","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"DpPXlSazlNLvTFLi","name":"Schema","slug":"schema","relativePathFromProjectRoot":"/tools/types/code-types/src/TypescriptIndex.ts","srcFileId":"/TypescriptIndex","operationFolderName":"code-types","relativeFilePathFromSrc":"/TypescriptIndex.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"$ref":"#/definitions/JSONSchema7"},"simplifiedSchema":{"properties":[{"name":"$id","required":false,"schema":{"type":"string"}},{"name":"$ref","required":false,"schema":{"type":"string"}},{"name":"$schema","required":false,"schema":{"description":"Meta schema\n\nRecommended values:\n- 'http://json-schema.org/schema#'\n- 'http://json-schema.org/hyper-schema#'\n- 'http://json-schema.org/draft-07/schema#'\n- 'http://json-schema.org/draft-07/hyper-schema#'","type":"string"}},{"name":"$comment","required":false,"schema":{"type":"string"}},{"name":"$defs","required":false,"schema":{"properties":[],"type":"object"}},{"name":"type","required":false,"schema":{"properties":[],"type":"object"}},{"name":"enum","required":false,"schema":{"items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"const","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"multipleOf","required":false,"schema":{"type":"number"}},{"name":"maximum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMaximum","required":false,"schema":{"type":"number"}},{"name":"minimum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMinimum","required":false,"schema":{"type":"number"}},{"name":"maxLength","required":false,"schema":{"type":"number"}},{"name":"minLength","required":false,"schema":{"type":"number"}},{"name":"pattern","required":false,"schema":{"type":"string"}},{"name":"items","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalItems","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"maxItems","required":false,"schema":{"type":"number"}},{"name":"minItems","required":false,"schema":{"type":"number"}},{"name":"uniqueItems","required":false,"schema":{"type":"boolean"}},{"name":"contains","required":false,"schema":{"circularRefName":"JSONSchema7","properties":[],"type":"object"}},{"name":"maxProperties","required":false,"schema":{"type":"number"}},{"name":"minProperties","required":false,"schema":{"type":"number"}},{"name":"required","required":false,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"properties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"patternProperties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalProperties","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"dependencies","required":false,"schema":{"properties":[],"type":"object"}},{"name":"propertyNames","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"if","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"then","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"else","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"allOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"anyOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"oneOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"not","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"format","required":false,"schema":{"type":"string"}},{"name":"contentMediaType","required":false,"schema":{"type":"string"}},{"name":"contentEncoding","required":false,"schema":{"type":"string"}},{"name":"definitions","required":false,"schema":{"properties":[],"type":"object"}},{"name":"title","required":false,"schema":{"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"default","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"readOnly","required":false,"schema":{"type":"boolean"}},{"name":"writeOnly","required":false,"schema":{"type":"boolean"}},{"name":"examples","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}}],"type":"object"},"typeCoverage":0,"rawType":"Schema","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"rdFcazUhWexroJer","name":"JSONSchema7","slug":"jsonschema-7","relativePathFromProjectRoot":"/tools/types/code-types/src/TypescriptIndex.ts","srcFileId":"/TypescriptIndex","operationFolderName":"code-types","relativeFilePathFromSrc":"/TypescriptIndex.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"$id":{"type":"string"},"$ref":{"type":"string"},"$schema":{"$ref":"#/definitions/JSONSchema7Version"},"$comment":{"type":"string"},"$defs":{"type":"object","additionalProperties":{"$ref":"#/definitions/JSONSchema7Definition"}},"type":{"anyOf":[{"$ref":"#/definitions/JSONSchema7TypeName"},{"type":"array","items":{"$ref":"#/definitions/JSONSchema7TypeName"}}]},"enum":{"type":"array","items":{"$ref":"#/definitions/JSONSchema7Type"}},"const":{"$ref":"#/definitions/JSONSchema7Type"},"multipleOf":{"type":"number"},"maximum":{"type":"number"},"exclusiveMaximum":{"type":"number"},"minimum":{"type":"number"},"exclusiveMinimum":{"type":"number"},"maxLength":{"type":"number"},"minLength":{"type":"number"},"pattern":{"type":"string"},"items":{"anyOf":[{"$ref":"#/definitions/JSONSchema7Definition"},{"type":"array","items":{"$ref":"#/definitions/JSONSchema7Definition"}}]},"additionalItems":{"$ref":"#/definitions/JSONSchema7Definition"},"maxItems":{"type":"number"},"minItems":{"type":"number"},"uniqueItems":{"type":"boolean"},"contains":{"$ref":"#/definitions/JSONSchema7"},"maxProperties":{"type":"number"},"minProperties":{"type":"number"},"required":{"type":"array","items":{"type":"string"}},"properties":{"type":"object","additionalProperties":{"$ref":"#/definitions/JSONSchema7Definition"}},"patternProperties":{"type":"object","additionalProperties":{"$ref":"#/definitions/JSONSchema7Definition"}},"additionalProperties":{"$ref":"#/definitions/JSONSchema7Definition"},"dependencies":{"type":"object","additionalProperties":{"anyOf":[{"$ref":"#/definitions/JSONSchema7Definition"},{"type":"array","items":{"type":"string"}}]}},"propertyNames":{"$ref":"#/definitions/JSONSchema7Definition"},"if":{"$ref":"#/definitions/JSONSchema7Definition"},"then":{"$ref":"#/definitions/JSONSchema7Definition"},"else":{"$ref":"#/definitions/JSONSchema7Definition"},"allOf":{"type":"array","items":{"$ref":"#/definitions/JSONSchema7Definition"}},"anyOf":{"type":"array","items":{"$ref":"#/definitions/JSONSchema7Definition"}},"oneOf":{"type":"array","items":{"$ref":"#/definitions/JSONSchema7Definition"}},"not":{"$ref":"#/definitions/JSONSchema7Definition"},"format":{"type":"string"},"contentMediaType":{"type":"string"},"contentEncoding":{"type":"string"},"definitions":{"type":"object","additionalProperties":{"$ref":"#/definitions/JSONSchema7Definition"}},"title":{"type":"string"},"description":{"type":"string"},"default":{"$ref":"#/definitions/JSONSchema7Type"},"readOnly":{"type":"boolean"},"writeOnly":{"type":"boolean"},"examples":{"$ref":"#/definitions/JSONSchema7Type"}},"additionalProperties":false},"simplifiedSchema":{"properties":[{"name":"$id","required":false,"schema":{"type":"string"}},{"name":"$ref","required":false,"schema":{"type":"string"}},{"name":"$schema","required":false,"schema":{"description":"Meta schema\n\nRecommended values:\n- 'http://json-schema.org/schema#'\n- 'http://json-schema.org/hyper-schema#'\n- 'http://json-schema.org/draft-07/schema#'\n- 'http://json-schema.org/draft-07/hyper-schema#'","type":"string"}},{"name":"$comment","required":false,"schema":{"type":"string"}},{"name":"$defs","required":false,"schema":{"properties":[],"type":"object"}},{"name":"type","required":false,"schema":{"properties":[],"type":"object"}},{"name":"enum","required":false,"schema":{"items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"const","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"multipleOf","required":false,"schema":{"type":"number"}},{"name":"maximum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMaximum","required":false,"schema":{"type":"number"}},{"name":"minimum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMinimum","required":false,"schema":{"type":"number"}},{"name":"maxLength","required":false,"schema":{"type":"number"}},{"name":"minLength","required":false,"schema":{"type":"number"}},{"name":"pattern","required":false,"schema":{"type":"string"}},{"name":"items","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalItems","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"maxItems","required":false,"schema":{"type":"number"}},{"name":"minItems","required":false,"schema":{"type":"number"}},{"name":"uniqueItems","required":false,"schema":{"type":"boolean"}},{"name":"contains","required":false,"schema":{"circularRefName":"JSONSchema7","properties":[],"type":"object"}},{"name":"maxProperties","required":false,"schema":{"type":"number"}},{"name":"minProperties","required":false,"schema":{"type":"number"}},{"name":"required","required":false,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"properties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"patternProperties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalProperties","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"dependencies","required":false,"schema":{"properties":[],"type":"object"}},{"name":"propertyNames","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"if","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"then","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"else","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"allOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"anyOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"oneOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"not","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"format","required":false,"schema":{"type":"string"}},{"name":"contentMediaType","required":false,"schema":{"type":"string"}},{"name":"contentEncoding","required":false,"schema":{"type":"string"}},{"name":"definitions","required":false,"schema":{"properties":[],"type":"object"}},{"name":"title","required":false,"schema":{"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"default","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"readOnly","required":false,"schema":{"type":"boolean"}},{"name":"writeOnly","required":false,"schema":{"type":"boolean"}},{"name":"examples","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}}],"type":"object"},"typeCoverage":0,"rawType":"JSONSchema7","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"RmswaEvNgxfXKHpW","name":"JSONSchema7Version","slug":"jsonschema-7version","relativePathFromProjectRoot":"/tools/types/code-types/src/TypescriptIndex.ts","srcFileId":"/TypescriptIndex","operationFolderName":"code-types","relativeFilePathFromSrc":"/TypescriptIndex.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","description":"Meta schema\n\nRecommended values:\n- 'http://json-schema.org/schema#'\n- 'http://json-schema.org/hyper-schema#'\n- 'http://json-schema.org/draft-07/schema#'\n- 'http://json-schema.org/draft-07/hyper-schema#'","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"string","description":"Meta schema\n\nRecommended values:\n- 'http://json-schema.org/schema#'\n- 'http://json-schema.org/hyper-schema#'\n- 'http://json-schema.org/draft-07/schema#'\n- 'http://json-schema.org/draft-07/hyper-schema#'"},"simplifiedSchema":{"description":"Meta schema\n\nRecommended values:\n- 'http://json-schema.org/schema#'\n- 'http://json-schema.org/hyper-schema#'\n- 'http://json-schema.org/draft-07/schema#'\n- 'http://json-schema.org/draft-07/hyper-schema#'","type":"string"},"typeCoverage":0,"rawType":"JSONSchema7Version","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"ONPHpZlsQQsnJBDX","name":"JSONSchema7Definition","slug":"jsonschema-7definition","relativePathFromProjectRoot":"/tools/types/code-types/src/TypescriptIndex.ts","srcFileId":"/TypescriptIndex","operationFolderName":"code-types","relativeFilePathFromSrc":"/TypescriptIndex.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","description":"JSON Schema v7","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"anyOf":[{"$ref":"#/definitions/JSONSchema7"},{"type":"boolean"}],"description":"JSON Schema v7"},"simplifiedSchema":{"description":"JSON Schema v7","properties":[],"type":"object"},"typeCoverage":0,"rawType":"JSONSchema7Definition","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"CoPeQCeomtXYstrg","name":"JSONSchema7TypeName","slug":"jsonschema-7type-name","relativePathFromProjectRoot":"/tools/types/code-types/src/TypescriptIndex.ts","srcFileId":"/TypescriptIndex","operationFolderName":"code-types","relativeFilePathFromSrc":"/TypescriptIndex.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","description":"Primitive type","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"string","enum":["string","number","integer","boolean","object","array","null"],"description":"Primitive type"},"simplifiedSchema":{"description":"Primitive type","enum":["string","number","integer","boolean","object","array","null"],"type":"string"},"typeCoverage":0,"rawType":"JSONSchema7TypeName","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"bTOGUsOviXhrjBZT","name":"JSONSchema7Type","slug":"jsonschema-7type","relativePathFromProjectRoot":"/tools/types/code-types/src/TypescriptIndex.ts","srcFileId":"/TypescriptIndex","operationFolderName":"code-types","relativeFilePathFromSrc":"/TypescriptIndex.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","description":"Primitive type","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"anyOf":[{"type":"string"},{"type":"number"},{"type":"boolean"},{"$ref":"#/definitions/JSONSchema7Object"},{"$ref":"#/definitions/JSONSchema7Array"},{"type":"null"}],"description":"Primitive type"},"simplifiedSchema":{"description":"Primitive type","properties":[],"type":"object"},"typeCoverage":0,"rawType":"JSONSchema7Type","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"KRIZopxQoAXxHLEo","name":"JSONSchema7Object","slug":"jsonschema-7object","relativePathFromProjectRoot":"/tools/types/code-types/src/TypescriptIndex.ts","srcFileId":"/TypescriptIndex","operationFolderName":"code-types","relativeFilePathFromSrc":"/TypescriptIndex.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","additionalProperties":{"$ref":"#/definitions/JSONSchema7Type"}},"simplifiedSchema":{"properties":[],"type":"object"},"typeCoverage":0,"rawType":"JSONSchema7Object","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"baBvbrNsHuPOLMCu","name":"JSONSchema7Array","slug":"jsonschema-7array","relativePathFromProjectRoot":"/tools/types/code-types/src/TypescriptIndex.ts","srcFileId":"/TypescriptIndex","operationFolderName":"code-types","relativeFilePathFromSrc":"/TypescriptIndex.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"array","items":{"$ref":"#/definitions/JSONSchema7Type"}},"simplifiedSchema":{"items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"},"typeCoverage":0,"rawType":"JSONSchema7Array","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"TUsSNfaiDOMworkd","name":"SimplifiedSchema","slug":"simplified-schema","relativePathFromProjectRoot":"/tools/types/code-types/src/TypescriptIndex.ts","srcFileId":"/TypescriptIndex","operationFolderName":"code-types","relativeFilePathFromSrc":"/TypescriptIndex.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","description":"JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"type":{"$ref":"#/definitions/SimplifiedSchemaType","description":"- string\n- number\n- boolean\n- object\n- array\n- null\n\nNB: Omit doesn't work for the indexer! This would be the type: Omit<JSONSchema7TypeName, \"integer\">;"},"description":{"type":"string"},"circularRefName":{"type":"string","description":"sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here"},"enum":{"type":"array","items":{"$ref":"#/definitions/JSONSchema7Type"},"description":"in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think"},"properties":{"type":"array","items":{"$ref":"#/definitions/SimplifiedSchemaProperty"},"description":"in case of object, this will always appear"},"items":{"type":"array","items":{"$ref":"#/definitions/SimplifiedSchemaItem"},"description":"in case of arrays, this will always appear"}},"required":["type"],"additionalProperties":false,"description":"JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form"},"simplifiedSchema":{"description":"JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form","properties":[{"name":"type","required":true,"schema":{"enum":["string","number","boolean","object","array","null"],"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"circularRefName","required":false,"schema":{"description":"sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here","type":"string"}},{"name":"enum","required":false,"schema":{"description":"in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think","items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"properties","required":false,"schema":{"description":"in case of object, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}},{"name":"required","required":true,"schema":{"description":"NB: can't we put this in the SimplifiedSchema itself?","type":"boolean"}}],"type":"object"},"name":"SimplifiedSchemaProperty"}],"type":"array"}},{"name":"items","required":false,"schema":{"description":"in case of arrays, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"description":"name in case of it being a reference, otherwise null","type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}}],"type":"object"},"name":"SimplifiedSchemaItem"}],"type":"array"}}],"type":"object"},"typeCoverage":0,"rawType":"SimplifiedSchema","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"uaCFbBtxuKELukTF","name":"SimplifiedSchemaType","slug":"simplified-schema-type","relativePathFromProjectRoot":"/tools/types/code-types/src/TypescriptIndex.ts","srcFileId":"/TypescriptIndex","operationFolderName":"code-types","relativeFilePathFromSrc":"/TypescriptIndex.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"string","enum":["string","number","boolean","object","array","null"]},"simplifiedSchema":{"enum":["string","number","boolean","object","array","null"],"type":"string"},"typeCoverage":0,"rawType":"SimplifiedSchemaType","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"RSCYPBueZBHzaEfH","name":"SimplifiedSchemaProperty","slug":"simplified-schema-property","relativePathFromProjectRoot":"/tools/types/code-types/src/TypescriptIndex.ts","srcFileId":"/TypescriptIndex","operationFolderName":"code-types","relativeFilePathFromSrc":"/TypescriptIndex.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"name":{"type":"string"},"schema":{"$ref":"#/definitions/SimplifiedSchema"},"required":{"type":"boolean","description":"NB: can't we put this in the SimplifiedSchema itself?"}},"required":["name","schema","required"],"additionalProperties":false},"simplifiedSchema":{"properties":[{"name":"name","required":true,"schema":{"type":"string"}},{"name":"schema","required":true,"schema":{"description":"JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form","properties":[{"name":"type","required":true,"schema":{"enum":["string","number","boolean","object","array","null"],"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"circularRefName","required":false,"schema":{"description":"sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here","type":"string"}},{"name":"enum","required":false,"schema":{"description":"in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think","items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"properties","required":false,"schema":{"description":"in case of object, this will always appear","items":[{"schema":{"circularRefName":"SimplifiedSchemaProperty","properties":[],"type":"object"},"name":"SimplifiedSchemaProperty"}],"type":"array"}},{"name":"items","required":false,"schema":{"description":"in case of arrays, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"description":"name in case of it being a reference, otherwise null","type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}}],"type":"object"},"name":"SimplifiedSchemaItem"}],"type":"array"}}],"type":"object"}},{"name":"required","required":true,"schema":{"description":"NB: can't we put this in the SimplifiedSchema itself?","type":"boolean"}}],"type":"object"},"typeCoverage":0,"rawType":"SimplifiedSchemaProperty","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"JObRbjLZqgjImIzR","name":"SimplifiedSchemaItem","slug":"simplified-schema-item","relativePathFromProjectRoot":"/tools/types/code-types/src/TypescriptIndex.ts","srcFileId":"/TypescriptIndex","operationFolderName":"code-types","relativeFilePathFromSrc":"/TypescriptIndex.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"name":{"type":["string","null"],"description":"name in case of it being a reference, otherwise null"},"schema":{"$ref":"#/definitions/SimplifiedSchema"}},"required":["name","schema"],"additionalProperties":false},"simplifiedSchema":{"properties":[{"name":"name","required":true,"schema":{"description":"name in case of it being a reference, otherwise null","type":"string"}},{"name":"schema","required":true,"schema":{"description":"JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form","properties":[{"name":"type","required":true,"schema":{"enum":["string","number","boolean","object","array","null"],"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"circularRefName","required":false,"schema":{"description":"sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here","type":"string"}},{"name":"enum","required":false,"schema":{"description":"in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think","items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"properties","required":false,"schema":{"description":"in case of object, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}},{"name":"required","required":true,"schema":{"description":"NB: can't we put this in the SimplifiedSchema itself?","type":"boolean"}}],"type":"object"},"name":"SimplifiedSchemaProperty"}],"type":"array"}},{"name":"items","required":false,"schema":{"description":"in case of arrays, this will always appear","items":[{"schema":{"circularRefName":"SimplifiedSchemaItem","properties":[],"type":"object"},"name":"SimplifiedSchemaItem"}],"type":"array"}}],"type":"object"}}],"type":"object"},"typeCoverage":0,"rawType":"SimplifiedSchemaItem","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"seJluOVDgHnJRNnS","name":"TypeCoverage","slug":"type-coverage","relativePathFromProjectRoot":"/tools/types/code-types/src/TypescriptIndex.ts","srcFileId":"/TypescriptIndex","operationFolderName":"code-types","relativeFilePathFromSrc":"/TypescriptIndex.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","description":"quantification of coverage of the specified type or subtypes in our database.","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"number","description":"quantification of coverage of the specified type or subtypes in our database."},"simplifiedSchema":{"description":"quantification of coverage of the specified type or subtypes in our database.","type":"number"},"typeCoverage":0,"rawType":"TypeCoverage","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"HsbatRZYTquWNTrB","name":"FunctionParameter","slug":"function-parameter","relativePathFromProjectRoot":"/tools/types/code-types/src/TypescriptIndex.ts","srcFileId":"/TypescriptIndex","operationFolderName":"code-types","relativeFilePathFromSrc":"/TypescriptIndex.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"name":{"type":"string"},"schema":{"$ref":"#/definitions/Schema"},"simplifiedSchema":{"$ref":"#/definitions/SimplifiedSchema"},"required":{"type":"boolean"}},"required":["name","required"],"additionalProperties":false},"simplifiedSchema":{"properties":[{"name":"name","required":true,"schema":{"type":"string"}},{"name":"schema","required":false,"schema":{"properties":[{"name":"$id","required":false,"schema":{"type":"string"}},{"name":"$ref","required":false,"schema":{"type":"string"}},{"name":"$schema","required":false,"schema":{"description":"Meta schema\n\nRecommended values:\n- 'http://json-schema.org/schema#'\n- 'http://json-schema.org/hyper-schema#'\n- 'http://json-schema.org/draft-07/schema#'\n- 'http://json-schema.org/draft-07/hyper-schema#'","type":"string"}},{"name":"$comment","required":false,"schema":{"type":"string"}},{"name":"$defs","required":false,"schema":{"properties":[],"type":"object"}},{"name":"type","required":false,"schema":{"properties":[],"type":"object"}},{"name":"enum","required":false,"schema":{"items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"const","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"multipleOf","required":false,"schema":{"type":"number"}},{"name":"maximum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMaximum","required":false,"schema":{"type":"number"}},{"name":"minimum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMinimum","required":false,"schema":{"type":"number"}},{"name":"maxLength","required":false,"schema":{"type":"number"}},{"name":"minLength","required":false,"schema":{"type":"number"}},{"name":"pattern","required":false,"schema":{"type":"string"}},{"name":"items","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalItems","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"maxItems","required":false,"schema":{"type":"number"}},{"name":"minItems","required":false,"schema":{"type":"number"}},{"name":"uniqueItems","required":false,"schema":{"type":"boolean"}},{"name":"contains","required":false,"schema":{"circularRefName":"JSONSchema7","properties":[],"type":"object"}},{"name":"maxProperties","required":false,"schema":{"type":"number"}},{"name":"minProperties","required":false,"schema":{"type":"number"}},{"name":"required","required":false,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"properties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"patternProperties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalProperties","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"dependencies","required":false,"schema":{"properties":[],"type":"object"}},{"name":"propertyNames","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"if","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"then","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"else","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"allOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"anyOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"oneOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"not","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"format","required":false,"schema":{"type":"string"}},{"name":"contentMediaType","required":false,"schema":{"type":"string"}},{"name":"contentEncoding","required":false,"schema":{"type":"string"}},{"name":"definitions","required":false,"schema":{"properties":[],"type":"object"}},{"name":"title","required":false,"schema":{"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"default","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"readOnly","required":false,"schema":{"type":"boolean"}},{"name":"writeOnly","required":false,"schema":{"type":"boolean"}},{"name":"examples","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}}],"type":"object"}},{"name":"simplifiedSchema","required":false,"schema":{"description":"JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form","properties":[{"name":"type","required":true,"schema":{"enum":["string","number","boolean","object","array","null"],"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"circularRefName","required":false,"schema":{"description":"sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here","type":"string"}},{"name":"enum","required":false,"schema":{"description":"in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think","items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"properties","required":false,"schema":{"description":"in case of object, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}},{"name":"required","required":true,"schema":{"description":"NB: can't we put this in the SimplifiedSchema itself?","type":"boolean"}}],"type":"object"},"name":"SimplifiedSchemaProperty"}],"type":"array"}},{"name":"items","required":false,"schema":{"description":"in case of arrays, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"description":"name in case of it being a reference, otherwise null","type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}}],"type":"object"},"name":"SimplifiedSchemaItem"}],"type":"array"}}],"type":"object"}},{"name":"required","required":true,"schema":{"type":"boolean"}}],"type":"object"},"typeCoverage":0,"rawType":"FunctionParameter","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"yyokiMVrUdFzUdCP","name":"SizeSummary","slug":"size-summary","relativePathFromProjectRoot":"/tools/types/code-types/src/TypescriptIndex.ts","srcFileId":"/TypescriptIndex","operationFolderName":"code-types","relativeFilePathFromSrc":"/TypescriptIndex.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","description":"type interface that can be used to summarize multiple files","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"numberOfFiles":{"type":"number","description":"if this is about multiple files, the number of files is specified here"},"characters":{"type":"number","description":"amount of characters"},"lines":{"type":"number","description":"amount of lines"},"bytes":{"type":"number","description":"amount of bytes"},"linesPerFile":{"type":"number","description":"rounded, amount of lines per file (averaged)"},"charactersPerfLine":{"type":"number","description":"rounded, amount of characters per line (averaged)"},"bytesPerCharacter":{"type":"number","description":"rounded, amount of bytes per character"}},"required":["characters","lines","bytes","linesPerFile","charactersPerfLine","bytesPerCharacter"],"additionalProperties":false,"description":"type interface that can be used to summarize multiple files"},"simplifiedSchema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"},"typeCoverage":0,"rawType":"SizeSummary","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"iwnhpiPzxvzdQDvT","name":"TsVariable","slug":"ts-variable","relativePathFromProjectRoot":"/tools/types/code-types/src/TypescriptIndex.ts","srcFileId":"/TypescriptIndex","operationFolderName":"code-types","relativeFilePathFromSrc":"/TypescriptIndex.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","rawText":"\n\n/**\n */\nexport interface TsVariable extends IndexId {\n  value: string;\n  classification: \"const\" | \"var\" | \"let\";\n  type: TypeInfo;\n  /**\n   * surrounding comments and comments inside of the variable\n   */\n  comments: TsComment[];\n}","extensions":["IndexId"],"description":"","defaultDbStorageMethod":"jsonMultiple","isDbModel":true,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"relativeOperationBasePathFromProjectRoot":{"type":"string","description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript"},"relativeFilePathFromSrc":{"type":"string","description":"relative file path from the operation src\n\ne.g. general.ts"},"srcFileId":{"type":"string","description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\""},"operationName":{"type":"string","description":"operation package.json name"},"operationFolderName":{"type":"string","description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)"},"relativePathFromProjectRoot":{"type":"string","description":"relative file or folder path from the project root"},"id":{"type":"string","description":"unique id of the model"},"name":{"type":"string","description":"name (identifier) of the model"},"slug":{"type":"string","description":"kebab-case variant of the name"},"value":{"type":"string"},"classification":{"type":"string","enum":["const","var","let"]},"type":{"$ref":"#/definitions/TypeInfo"},"comments":{"type":"array","items":{"$ref":"#/definitions/TsComment"},"description":"surrounding comments and comments inside of the variable"}},"required":["classification","comments","id","name","operationFolderName","relativeFilePathFromSrc","relativeOperationBasePathFromProjectRoot","relativePathFromProjectRoot","slug","srcFileId","type","value"],"additionalProperties":false},"simplifiedSchema":{"properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"value","required":true,"schema":{"type":"string"}},{"name":"classification","required":true,"schema":{"enum":["const","var","let"],"type":"string"}},{"name":"type","required":true,"schema":{"description":"all info that should always be collected when indexing any type interface","properties":[{"name":"typeDefinition","required":false,"schema":{"properties":[{"name":"$id","required":false,"schema":{"type":"string"}},{"name":"$ref","required":false,"schema":{"type":"string"}},{"name":"$schema","required":false,"schema":{"description":"Meta schema\n\nRecommended values:\n- 'http://json-schema.org/schema#'\n- 'http://json-schema.org/hyper-schema#'\n- 'http://json-schema.org/draft-07/schema#'\n- 'http://json-schema.org/draft-07/hyper-schema#'","type":"string"}},{"name":"$comment","required":false,"schema":{"type":"string"}},{"name":"$defs","required":false,"schema":{"properties":[],"type":"object"}},{"name":"type","required":false,"schema":{"properties":[],"type":"object"}},{"name":"enum","required":false,"schema":{"items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"const","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"multipleOf","required":false,"schema":{"type":"number"}},{"name":"maximum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMaximum","required":false,"schema":{"type":"number"}},{"name":"minimum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMinimum","required":false,"schema":{"type":"number"}},{"name":"maxLength","required":false,"schema":{"type":"number"}},{"name":"minLength","required":false,"schema":{"type":"number"}},{"name":"pattern","required":false,"schema":{"type":"string"}},{"name":"items","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalItems","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"maxItems","required":false,"schema":{"type":"number"}},{"name":"minItems","required":false,"schema":{"type":"number"}},{"name":"uniqueItems","required":false,"schema":{"type":"boolean"}},{"name":"contains","required":false,"schema":{"circularRefName":"JSONSchema7","properties":[],"type":"object"}},{"name":"maxProperties","required":false,"schema":{"type":"number"}},{"name":"minProperties","required":false,"schema":{"type":"number"}},{"name":"required","required":false,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"properties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"patternProperties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalProperties","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"dependencies","required":false,"schema":{"properties":[],"type":"object"}},{"name":"propertyNames","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"if","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"then","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"else","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"allOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"anyOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"oneOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"not","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"format","required":false,"schema":{"type":"string"}},{"name":"contentMediaType","required":false,"schema":{"type":"string"}},{"name":"contentEncoding","required":false,"schema":{"type":"string"}},{"name":"definitions","required":false,"schema":{"properties":[],"type":"object"}},{"name":"title","required":false,"schema":{"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"default","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"readOnly","required":false,"schema":{"type":"boolean"}},{"name":"writeOnly","required":false,"schema":{"type":"boolean"}},{"name":"examples","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}}],"type":"object"}},{"name":"simplifiedSchema","required":false,"schema":{"description":"JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form","properties":[{"name":"type","required":true,"schema":{"enum":["string","number","boolean","object","array","null"],"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"circularRefName","required":false,"schema":{"description":"sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here","type":"string"}},{"name":"enum","required":false,"schema":{"description":"in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think","items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"properties","required":false,"schema":{"description":"in case of object, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}},{"name":"required","required":true,"schema":{"description":"NB: can't we put this in the SimplifiedSchema itself?","type":"boolean"}}],"type":"object"},"name":"SimplifiedSchemaProperty"}],"type":"array"}},{"name":"items","required":false,"schema":{"description":"in case of arrays, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"description":"name in case of it being a reference, otherwise null","type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}}],"type":"object"},"name":"SimplifiedSchemaItem"}],"type":"array"}}],"type":"object"}},{"name":"isObject","required":true,"schema":{"description":"if the type is an object, this is true. false if it's an array","type":"boolean"}},{"name":"isArray","required":true,"schema":{"description":"if the type is an array, this is true","type":"boolean"}},{"name":"isPrimitive","required":true,"schema":{"description":"if it's a primitive type like \"string\", \"number\", \"boolean\", \"null\" | \"undefined\"","type":"boolean"}},{"name":"isEnum","required":true,"schema":{"description":"will be true for any primitive conjunction types","type":"boolean"}},{"name":"isEnumLiteral","required":true,"schema":{"description":"will be true for string conjunction types","type":"boolean"}},{"name":"typeCoverage","required":true,"schema":{"description":"quantification of coverage of the specified type or subtypes in our database.","type":"number"}},{"name":"rawType","required":true,"schema":{"description":"raw type string","type":"string"}}],"type":"object"}},{"name":"comments","required":true,"schema":{"description":"surrounding comments and comments inside of the variable","items":[{"schema":{"description":"comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\nspecial line prefixes:\n- TODO:\n- DISCUSSION:\n- IDEA:\n- LATER:\n- NB:\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!","properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"comment","required":true,"schema":{"description":"a string that is known to contain markdown.","type":"string"}},{"name":"parameters","required":true,"schema":{"properties":[],"type":"object"}},{"name":"types","required":true,"schema":{"description":"These are the type indicators that were found in this single or multiline comment. Can be multiple.","items":[{"schema":{"enum":["todo","discussion","idea","later","nb"],"type":"string"},"name":"CommentType"}],"type":"array"}},{"name":"firstLine","required":true,"schema":{"description":"first line of the comment","type":"number"}},{"name":"lastLine","required":true,"schema":{"description":"last line of the comment","type":"number"}},{"name":"statementName","required":false,"schema":{"description":"statement name the comment belongs to","type":"string"}},{"name":"rawStatement","required":false,"schema":{"description":"raw statement text the comment belongs to","type":"string"}}],"type":"object"},"name":"TsComment"}],"type":"array"}}],"type":"object"},"typeCoverage":0,"rawType":"TsVariable","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"kUvyAwGWaWZEvwnj","name":"TsInterface","slug":"ts-interface","relativePathFromProjectRoot":"/tools/types/code-types/src/TypescriptIndex.ts","srcFileId":"/TypescriptIndex","operationFolderName":"code-types","relativeFilePathFromSrc":"/TypescriptIndex.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","description":"TODO: Just like parameters, this should be linted for. If you define an interface that's not declared here, that should ring a bell.","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"relativeOperationBasePathFromProjectRoot":{"type":"string","description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript"},"relativeFilePathFromSrc":{"type":"string","description":"relative file path from the operation src\n\ne.g. general.ts"},"srcFileId":{"type":"string","description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\""},"operationName":{"type":"string","description":"operation package.json name"},"operationFolderName":{"type":"string","description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)"},"relativePathFromProjectRoot":{"type":"string","description":"relative file or folder path from the project root"},"id":{"type":"string","description":"unique id of the model"},"name":{"type":"string","description":"name (identifier) of the model"},"slug":{"type":"string","description":"kebab-case variant of the name"},"type":{"$ref":"#/definitions/TypeInfo"},"description":{"$ref":"#/definitions/Markdown","description":"jsdoc comment above the interface, if any"},"commentsInside":{"type":"array","items":{"$ref":"#/definitions/TsComment"}},"rawText":{"type":"string","description":"raw interface text, coming from ts-morph"},"extensions":{"type":"array","items":{"type":"string"},"description":"if the interface extends anything, names will be specified here"},"isDbModel":{"type":"boolean","description":"if true, this interface is marked as a db model, which means it will be included in the db function autocompletion so it's easy to store and fetch data in this format.\n\nis automatically set to true when indexing and when one of the following statements holds true\n- if the doc-comment contains frontmatter with `isDbModel` or `defaultDbStorageMethod` specified\n- if the interface last word is \"db\" or \"model\" and if there are minimum 2 words\n- if the interface extends some other special interface"},"defaultDbStorageMethod":{"$ref":"#/definitions/DbStorageMethod","description":"if this interface is a db model, you can also specify the default db storage method for it. You can do this by specifying it in the frontmatter of the doccomment of the interface.\n\nWhen storing something into the database, this value can be overwritten in your query configuration. When fetching something from the database, it will always try all methods (unless specified otherwise). The following strategies are available to store the data.\n\njsonMultiple (default): stores the data in a json file which is an array of this data structure\n\nTODO: jsonSingle: stores the data in a json file which is of this data structure (single object)\n\nTODO: markdown: stores the data in a markdown file. Takes \"markdown\" or \"description\" parameter as the main markdown. The other parameters are stored as front-matter\n\nTODO: keyValueMarkdown: stores the data in key value markdown format. Still need to determine how and if this is possible. Probably only for very simple datamodels\n\nTODO: csv: stores the data in a csv file (only possible for flat object datastructures)"}},"required":["commentsInside","id","isDbModel","name","operationFolderName","relativeFilePathFromSrc","relativeOperationBasePathFromProjectRoot","relativePathFromProjectRoot","slug","srcFileId","type"],"additionalProperties":false,"description":"TODO: Just like parameters, this should be linted for. If you define an interface that's not declared here, that should ring a bell."},"simplifiedSchema":{"description":"TODO: Just like parameters, this should be linted for. If you define an interface that's not declared here, that should ring a bell.","properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"type","required":true,"schema":{"description":"all info that should always be collected when indexing any type interface","properties":[{"name":"typeDefinition","required":false,"schema":{"properties":[{"name":"$id","required":false,"schema":{"type":"string"}},{"name":"$ref","required":false,"schema":{"type":"string"}},{"name":"$schema","required":false,"schema":{"description":"Meta schema\n\nRecommended values:\n- 'http://json-schema.org/schema#'\n- 'http://json-schema.org/hyper-schema#'\n- 'http://json-schema.org/draft-07/schema#'\n- 'http://json-schema.org/draft-07/hyper-schema#'","type":"string"}},{"name":"$comment","required":false,"schema":{"type":"string"}},{"name":"$defs","required":false,"schema":{"properties":[],"type":"object"}},{"name":"type","required":false,"schema":{"properties":[],"type":"object"}},{"name":"enum","required":false,"schema":{"items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"const","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"multipleOf","required":false,"schema":{"type":"number"}},{"name":"maximum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMaximum","required":false,"schema":{"type":"number"}},{"name":"minimum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMinimum","required":false,"schema":{"type":"number"}},{"name":"maxLength","required":false,"schema":{"type":"number"}},{"name":"minLength","required":false,"schema":{"type":"number"}},{"name":"pattern","required":false,"schema":{"type":"string"}},{"name":"items","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalItems","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"maxItems","required":false,"schema":{"type":"number"}},{"name":"minItems","required":false,"schema":{"type":"number"}},{"name":"uniqueItems","required":false,"schema":{"type":"boolean"}},{"name":"contains","required":false,"schema":{"circularRefName":"JSONSchema7","properties":[],"type":"object"}},{"name":"maxProperties","required":false,"schema":{"type":"number"}},{"name":"minProperties","required":false,"schema":{"type":"number"}},{"name":"required","required":false,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"properties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"patternProperties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalProperties","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"dependencies","required":false,"schema":{"properties":[],"type":"object"}},{"name":"propertyNames","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"if","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"then","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"else","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"allOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"anyOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"oneOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"not","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"format","required":false,"schema":{"type":"string"}},{"name":"contentMediaType","required":false,"schema":{"type":"string"}},{"name":"contentEncoding","required":false,"schema":{"type":"string"}},{"name":"definitions","required":false,"schema":{"properties":[],"type":"object"}},{"name":"title","required":false,"schema":{"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"default","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"readOnly","required":false,"schema":{"type":"boolean"}},{"name":"writeOnly","required":false,"schema":{"type":"boolean"}},{"name":"examples","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}}],"type":"object"}},{"name":"simplifiedSchema","required":false,"schema":{"description":"JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form","properties":[{"name":"type","required":true,"schema":{"enum":["string","number","boolean","object","array","null"],"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"circularRefName","required":false,"schema":{"description":"sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here","type":"string"}},{"name":"enum","required":false,"schema":{"description":"in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think","items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"properties","required":false,"schema":{"description":"in case of object, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}},{"name":"required","required":true,"schema":{"description":"NB: can't we put this in the SimplifiedSchema itself?","type":"boolean"}}],"type":"object"},"name":"SimplifiedSchemaProperty"}],"type":"array"}},{"name":"items","required":false,"schema":{"description":"in case of arrays, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"description":"name in case of it being a reference, otherwise null","type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}}],"type":"object"},"name":"SimplifiedSchemaItem"}],"type":"array"}}],"type":"object"}},{"name":"isObject","required":true,"schema":{"description":"if the type is an object, this is true. false if it's an array","type":"boolean"}},{"name":"isArray","required":true,"schema":{"description":"if the type is an array, this is true","type":"boolean"}},{"name":"isPrimitive","required":true,"schema":{"description":"if it's a primitive type like \"string\", \"number\", \"boolean\", \"null\" | \"undefined\"","type":"boolean"}},{"name":"isEnum","required":true,"schema":{"description":"will be true for any primitive conjunction types","type":"boolean"}},{"name":"isEnumLiteral","required":true,"schema":{"description":"will be true for string conjunction types","type":"boolean"}},{"name":"typeCoverage","required":true,"schema":{"description":"quantification of coverage of the specified type or subtypes in our database.","type":"number"}},{"name":"rawType","required":true,"schema":{"description":"raw type string","type":"string"}}],"type":"object"}},{"name":"description","required":false,"schema":{"description":"a string that is known to contain markdown.","type":"string"}},{"name":"commentsInside","required":true,"schema":{"items":[{"schema":{"description":"comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\nspecial line prefixes:\n- TODO:\n- DISCUSSION:\n- IDEA:\n- LATER:\n- NB:\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!","properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"comment","required":true,"schema":{"description":"a string that is known to contain markdown.","type":"string"}},{"name":"parameters","required":true,"schema":{"properties":[],"type":"object"}},{"name":"types","required":true,"schema":{"description":"These are the type indicators that were found in this single or multiline comment. Can be multiple.","items":[{"schema":{"enum":["todo","discussion","idea","later","nb"],"type":"string"},"name":"CommentType"}],"type":"array"}},{"name":"firstLine","required":true,"schema":{"description":"first line of the comment","type":"number"}},{"name":"lastLine","required":true,"schema":{"description":"last line of the comment","type":"number"}},{"name":"statementName","required":false,"schema":{"description":"statement name the comment belongs to","type":"string"}},{"name":"rawStatement","required":false,"schema":{"description":"raw statement text the comment belongs to","type":"string"}}],"type":"object"},"name":"TsComment"}],"type":"array"}},{"name":"rawText","required":false,"schema":{"description":"raw interface text, coming from ts-morph","type":"string"}},{"name":"extensions","required":false,"schema":{"description":"if the interface extends anything, names will be specified here","items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"isDbModel","required":true,"schema":{"description":"if true, this interface is marked as a db model, which means it will be included in the db function autocompletion so it's easy to store and fetch data in this format.\n\nis automatically set to true when indexing and when one of the following statements holds true\n- if the doc-comment contains frontmatter with `isDbModel` or `defaultDbStorageMethod` specified\n- if the interface last word is \"db\" or \"model\" and if there are minimum 2 words\n- if the interface extends some other special interface","type":"boolean"}},{"name":"defaultDbStorageMethod","required":false,"schema":{"enum":["jsonMultiple","jsonSingle","markdown","keyValueMarkdown","csv"],"type":"string"}}],"type":"object"},"typeCoverage":0,"rawType":"TsInterface","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"DsFqsIkWanqQDtoE","name":"DbStorageMethod","slug":"db-storage-method","relativePathFromProjectRoot":"/tools/types/code-types/src/TypescriptIndex.ts","srcFileId":"/TypescriptIndex","operationFolderName":"code-types","relativeFilePathFromSrc":"/TypescriptIndex.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"string","enum":["jsonMultiple","jsonSingle","markdown","keyValueMarkdown","csv"]},"simplifiedSchema":{"enum":["jsonMultiple","jsonSingle","markdown","keyValueMarkdown","csv"],"type":"string"},"typeCoverage":0,"rawType":"DbStorageMethod","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"yajNuwgKQKRfRrBN","name":"TsImport","slug":"ts-import","relativePathFromProjectRoot":"/tools/types/code-types/src/TypescriptIndex.ts","srcFileId":"/TypescriptIndex","operationFolderName":"code-types","relativeFilePathFromSrc":"/TypescriptIndex.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","rawText":"\n\n/**\n */\nexport interface TsImport extends IndexId {\n  /**\n   * surrounding comments and comments inside of the import\n   */\n  comments: TsComment[];\n\n  module: string;\n  /**\n   * TODO: not sure, but I believe alias should be defined at the import, not at the export, right?\n   */\n  alias?: string;\n\n  classification: ImportClassification;\n  /**\n   * sometimes the import statement module referenced cannot be found, in that case it cannot be known whether the import should contain a type or value, so it will be undefined.\n   */\n  type: \"value\" | \"type\" | undefined;\n  /**\n   * only for type exports. tells you whether or not the type has one or more generic parameter(s)\n   */\n  hasGeneric?: boolean;\n  isAbsolute: boolean;\n  isModuleResolved: boolean;\n  isModuleFromMonorepo: boolean;\n}","extensions":["IndexId"],"description":"","defaultDbStorageMethod":"jsonMultiple","isDbModel":true,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"relativeOperationBasePathFromProjectRoot":{"type":"string","description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript"},"relativeFilePathFromSrc":{"type":"string","description":"relative file path from the operation src\n\ne.g. general.ts"},"srcFileId":{"type":"string","description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\""},"operationName":{"type":"string","description":"operation package.json name"},"operationFolderName":{"type":"string","description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)"},"relativePathFromProjectRoot":{"type":"string","description":"relative file or folder path from the project root"},"id":{"type":"string","description":"unique id of the model"},"name":{"type":"string","description":"name (identifier) of the model"},"slug":{"type":"string","description":"kebab-case variant of the name"},"comments":{"type":"array","items":{"$ref":"#/definitions/TsComment"},"description":"surrounding comments and comments inside of the import"},"module":{"type":"string"},"alias":{"type":"string","description":"TODO: not sure, but I believe alias should be defined at the import, not at the export, right?"},"classification":{"$ref":"#/definitions/ImportClassification"},"type":{"type":"string","enum":["value","type"],"description":"sometimes the import statement module referenced cannot be found, in that case it cannot be known whether the import should contain a type or value, so it will be undefined."},"hasGeneric":{"type":"boolean","description":"only for type exports. tells you whether or not the type has one or more generic parameter(s)"},"isAbsolute":{"type":"boolean"},"isModuleResolved":{"type":"boolean"},"isModuleFromMonorepo":{"type":"boolean"}},"required":["classification","comments","id","isAbsolute","isModuleFromMonorepo","isModuleResolved","module","name","operationFolderName","relativeFilePathFromSrc","relativeOperationBasePathFromProjectRoot","relativePathFromProjectRoot","slug","srcFileId"],"additionalProperties":false},"simplifiedSchema":{"properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"comments","required":true,"schema":{"description":"surrounding comments and comments inside of the import","items":[{"schema":{"description":"comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\nspecial line prefixes:\n- TODO:\n- DISCUSSION:\n- IDEA:\n- LATER:\n- NB:\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!","properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"comment","required":true,"schema":{"description":"a string that is known to contain markdown.","type":"string"}},{"name":"parameters","required":true,"schema":{"properties":[],"type":"object"}},{"name":"types","required":true,"schema":{"description":"These are the type indicators that were found in this single or multiline comment. Can be multiple.","items":[{"schema":{"enum":["todo","discussion","idea","later","nb"],"type":"string"},"name":"CommentType"}],"type":"array"}},{"name":"firstLine","required":true,"schema":{"description":"first line of the comment","type":"number"}},{"name":"lastLine","required":true,"schema":{"description":"last line of the comment","type":"number"}},{"name":"statementName","required":false,"schema":{"description":"statement name the comment belongs to","type":"string"}},{"name":"rawStatement","required":false,"schema":{"description":"raw statement text the comment belongs to","type":"string"}}],"type":"object"},"name":"TsComment"}],"type":"array"}},{"name":"module","required":true,"schema":{"type":"string"}},{"name":"alias","required":false,"schema":{"description":"TODO: not sure, but I believe alias should be defined at the import, not at the export, right?","type":"string"}},{"name":"classification","required":true,"schema":{"description":"node: node core packages like fs and path\n\nreact: react standard packages like react, react-native, expo, react-dom, etc.\n\npackage: packages from npm that are not classified as operations\n\noperation: operations from our monorepo\n\ninternal: imports from other places in the same operation\n\nNB: don't confuse this with OperationClassification","enum":["node","react","package","operation","internal"],"type":"string"}},{"name":"type","required":false,"schema":{"description":"sometimes the import statement module referenced cannot be found, in that case it cannot be known whether the import should contain a type or value, so it will be undefined.","enum":["value","type"],"type":"string"}},{"name":"hasGeneric","required":false,"schema":{"description":"only for type exports. tells you whether or not the type has one or more generic parameter(s)","type":"boolean"}},{"name":"isAbsolute","required":true,"schema":{"type":"boolean"}},{"name":"isModuleResolved","required":true,"schema":{"type":"boolean"}},{"name":"isModuleFromMonorepo","required":true,"schema":{"type":"boolean"}}],"type":"object"},"typeCoverage":0,"rawType":"TsImport","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"sdaatvIDZUStbBNe","name":"ImportClassification","slug":"import-classification","relativePathFromProjectRoot":"/tools/types/code-types/src/TypescriptIndex.ts","srcFileId":"/TypescriptIndex","operationFolderName":"code-types","relativeFilePathFromSrc":"/TypescriptIndex.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","rawText":"\n\n/**\n * node: node core packages like fs and path\n *\n * react: react standard packages like react, react-native, expo, react-dom, etc.\n *\n * package: packages from npm that are not classified as operations\n *\n * operation: operations from our monorepo\n *\n * internal: imports from other places in the same operation\n *\n * NB: don't confuse this with OperationClassification\n */\nexport type ImportClassification =\n  | \"node\"\n  | \"react\"\n  | \"package\"\n  | \"operation\"\n  | \"internal\";","extensions":[],"description":"node: node core packages like fs and path\n\nreact: react standard packages like react, react-native, expo, react-dom, etc.\n\npackage: packages from npm that are not classified as operations\n\noperation: operations from our monorepo\n\ninternal: imports from other places in the same operation\n\nNB: don't confuse this with OperationClassification","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"string","enum":["node","react","package","operation","internal"],"description":"node: node core packages like fs and path\n\nreact: react standard packages like react, react-native, expo, react-dom, etc.\n\npackage: packages from npm that are not classified as operations\n\noperation: operations from our monorepo\n\ninternal: imports from other places in the same operation\n\nNB: don't confuse this with OperationClassification"},"simplifiedSchema":{"description":"node: node core packages like fs and path\n\nreact: react standard packages like react, react-native, expo, react-dom, etc.\n\npackage: packages from npm that are not classified as operations\n\noperation: operations from our monorepo\n\ninternal: imports from other places in the same operation\n\nNB: don't confuse this with OperationClassification","enum":["node","react","package","operation","internal"],"type":"string"},"typeCoverage":0,"rawType":"ImportClassification","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"RCpJYlFpupiNOGvL","name":"TsExport","slug":"ts-export","relativePathFromProjectRoot":"/tools/types/code-types/src/TypescriptIndex.ts","srcFileId":"/TypescriptIndex","operationFolderName":"code-types","relativeFilePathFromSrc":"/TypescriptIndex.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","rawText":"\n\n/**\n */\nexport interface TsExport extends IndexId {\n  /**\n   * surrounding comments and comments inside of the import\n   */\n  comments: TsComment[];\n\n  type: \"value\" | \"type\" | undefined;\n  /**\n   * used for duplicate export names\n   */\n  alias?: string;\n  /**\n   * only for type exports. tells you whether or not the type has one or more generic parameter(s)\n   */\n  hasGeneric?: boolean;\n}","extensions":["IndexId"],"description":"","defaultDbStorageMethod":"jsonMultiple","isDbModel":true,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"relativeOperationBasePathFromProjectRoot":{"type":"string","description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript"},"relativeFilePathFromSrc":{"type":"string","description":"relative file path from the operation src\n\ne.g. general.ts"},"srcFileId":{"type":"string","description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\""},"operationName":{"type":"string","description":"operation package.json name"},"operationFolderName":{"type":"string","description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)"},"relativePathFromProjectRoot":{"type":"string","description":"relative file or folder path from the project root"},"id":{"type":"string","description":"unique id of the model"},"name":{"type":"string","description":"name (identifier) of the model"},"slug":{"type":"string","description":"kebab-case variant of the name"},"comments":{"type":"array","items":{"$ref":"#/definitions/TsComment"},"description":"surrounding comments and comments inside of the import"},"type":{"type":"string","enum":["value","type"]},"alias":{"type":"string","description":"used for duplicate export names"},"hasGeneric":{"type":"boolean","description":"only for type exports. tells you whether or not the type has one or more generic parameter(s)"}},"required":["comments","id","name","operationFolderName","relativeFilePathFromSrc","relativeOperationBasePathFromProjectRoot","relativePathFromProjectRoot","slug","srcFileId"],"additionalProperties":false},"simplifiedSchema":{"properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"comments","required":true,"schema":{"description":"surrounding comments and comments inside of the import","items":[{"schema":{"description":"comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\nspecial line prefixes:\n- TODO:\n- DISCUSSION:\n- IDEA:\n- LATER:\n- NB:\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!","properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"comment","required":true,"schema":{"description":"a string that is known to contain markdown.","type":"string"}},{"name":"parameters","required":true,"schema":{"properties":[],"type":"object"}},{"name":"types","required":true,"schema":{"description":"These are the type indicators that were found in this single or multiline comment. Can be multiple.","items":[{"schema":{"enum":["todo","discussion","idea","later","nb"],"type":"string"},"name":"CommentType"}],"type":"array"}},{"name":"firstLine","required":true,"schema":{"description":"first line of the comment","type":"number"}},{"name":"lastLine","required":true,"schema":{"description":"last line of the comment","type":"number"}},{"name":"statementName","required":false,"schema":{"description":"statement name the comment belongs to","type":"string"}},{"name":"rawStatement","required":false,"schema":{"description":"raw statement text the comment belongs to","type":"string"}}],"type":"object"},"name":"TsComment"}],"type":"array"}},{"name":"type","required":false,"schema":{"enum":["value","type"],"type":"string"}},{"name":"alias","required":false,"schema":{"description":"used for duplicate export names","type":"string"}},{"name":"hasGeneric","required":false,"schema":{"description":"only for type exports. tells you whether or not the type has one or more generic parameter(s)","type":"boolean"}}],"type":"object"},"typeCoverage":0,"rawType":"TsExport","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"PVRIZBJMIsYUMBov","name":"IndexModels","slug":"index-models","relativePathFromProjectRoot":"/tools/types/code-types/src/TypescriptIndex.ts","srcFileId":"/TypescriptIndex","operationFolderName":"code-types","relativeFilePathFromSrc":"/TypescriptIndex.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","rawText":"\n\nexport type IndexModels = {\n  TsBuildError: TsBuildError;\n  TsLintWarning: TsLintWarning;\n  TsFunction: TsFunction;\n  TsVariable: TsVariable;\n  TsInterface: TsInterface;\n  TsComment: TsComment;\n  TsImport: TsImport;\n  TsExport: TsExport;\n};","extensions":[],"description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"TsBuildError":{"$ref":"#/definitions/TsBuildError"},"TsLintWarning":{"$ref":"#/definitions/TsLintWarning"},"TsFunction":{"$ref":"#/definitions/TsFunction"},"TsVariable":{"$ref":"#/definitions/TsVariable"},"TsInterface":{"$ref":"#/definitions/TsInterface"},"TsComment":{"$ref":"#/definitions/TsComment"},"TsImport":{"$ref":"#/definitions/TsImport"},"TsExport":{"$ref":"#/definitions/TsExport"}},"required":["TsBuildError","TsLintWarning","TsFunction","TsVariable","TsInterface","TsComment","TsImport","TsExport"],"additionalProperties":false},"simplifiedSchema":{"properties":[{"name":"TsBuildError","required":true,"schema":{"properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"line","required":false,"schema":{"type":"number"}},{"name":"character","required":false,"schema":{"type":"number"}},{"name":"message","required":true,"schema":{"type":"string"}}],"type":"object"}},{"name":"TsLintWarning","required":true,"schema":{"properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"line","required":true,"schema":{"type":"number"}},{"name":"character","required":true,"schema":{"type":"number"}},{"name":"message","required":true,"schema":{"type":"string"}}],"type":"object"}},{"name":"TsFunction","required":true,"schema":{"description":"Interface for arrow functions and normal functions","properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"description","required":false,"schema":{"description":"a string that is known to contain markdown.","type":"string"}},{"name":"rawText","required":false,"schema":{"description":"raw text of the function","type":"string"}},{"name":"commentsInside","required":true,"schema":{"description":"all comments found in a function and the node that they belong to","items":[{"schema":{"description":"comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\nspecial line prefixes:\n- TODO:\n- DISCUSSION:\n- IDEA:\n- LATER:\n- NB:\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!","properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"comment","required":true,"schema":{"description":"a string that is known to contain markdown.","type":"string"}},{"name":"parameters","required":true,"schema":{"properties":[],"type":"object"}},{"name":"types","required":true,"schema":{"description":"These are the type indicators that were found in this single or multiline comment. Can be multiple.","items":[{"schema":{"enum":["todo","discussion","idea","later","nb"],"type":"string"},"name":"CommentType"}],"type":"array"}},{"name":"firstLine","required":true,"schema":{"description":"first line of the comment","type":"number"}},{"name":"lastLine","required":true,"schema":{"description":"last line of the comment","type":"number"}},{"name":"statementName","required":false,"schema":{"description":"statement name the comment belongs to","type":"string"}},{"name":"rawStatement","required":false,"schema":{"description":"raw statement text the comment belongs to","type":"string"}}],"type":"object"},"name":"TsComment"}],"type":"array"}},{"name":"returnType","required":true,"schema":{"description":"all info that should always be collected when indexing any type interface","properties":[{"name":"typeDefinition","required":false,"schema":{"properties":[{"name":"$id","required":false,"schema":{"type":"string"}},{"name":"$ref","required":false,"schema":{"type":"string"}},{"name":"$schema","required":false,"schema":{"description":"Meta schema\n\nRecommended values:\n- 'http://json-schema.org/schema#'\n- 'http://json-schema.org/hyper-schema#'\n- 'http://json-schema.org/draft-07/schema#'\n- 'http://json-schema.org/draft-07/hyper-schema#'","type":"string"}},{"name":"$comment","required":false,"schema":{"type":"string"}},{"name":"$defs","required":false,"schema":{"properties":[],"type":"object"}},{"name":"type","required":false,"schema":{"properties":[],"type":"object"}},{"name":"enum","required":false,"schema":{"items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"const","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"multipleOf","required":false,"schema":{"type":"number"}},{"name":"maximum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMaximum","required":false,"schema":{"type":"number"}},{"name":"minimum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMinimum","required":false,"schema":{"type":"number"}},{"name":"maxLength","required":false,"schema":{"type":"number"}},{"name":"minLength","required":false,"schema":{"type":"number"}},{"name":"pattern","required":false,"schema":{"type":"string"}},{"name":"items","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalItems","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"maxItems","required":false,"schema":{"type":"number"}},{"name":"minItems","required":false,"schema":{"type":"number"}},{"name":"uniqueItems","required":false,"schema":{"type":"boolean"}},{"name":"contains","required":false,"schema":{"circularRefName":"JSONSchema7","properties":[],"type":"object"}},{"name":"maxProperties","required":false,"schema":{"type":"number"}},{"name":"minProperties","required":false,"schema":{"type":"number"}},{"name":"required","required":false,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"properties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"patternProperties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalProperties","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"dependencies","required":false,"schema":{"properties":[],"type":"object"}},{"name":"propertyNames","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"if","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"then","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"else","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"allOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"anyOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"oneOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"not","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"format","required":false,"schema":{"type":"string"}},{"name":"contentMediaType","required":false,"schema":{"type":"string"}},{"name":"contentEncoding","required":false,"schema":{"type":"string"}},{"name":"definitions","required":false,"schema":{"properties":[],"type":"object"}},{"name":"title","required":false,"schema":{"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"default","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"readOnly","required":false,"schema":{"type":"boolean"}},{"name":"writeOnly","required":false,"schema":{"type":"boolean"}},{"name":"examples","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}}],"type":"object"}},{"name":"simplifiedSchema","required":false,"schema":{"description":"JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form","properties":[{"name":"type","required":true,"schema":{"enum":["string","number","boolean","object","array","null"],"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"circularRefName","required":false,"schema":{"description":"sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here","type":"string"}},{"name":"enum","required":false,"schema":{"description":"in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think","items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"properties","required":false,"schema":{"description":"in case of object, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}},{"name":"required","required":true,"schema":{"description":"NB: can't we put this in the SimplifiedSchema itself?","type":"boolean"}}],"type":"object"},"name":"SimplifiedSchemaProperty"}],"type":"array"}},{"name":"items","required":false,"schema":{"description":"in case of arrays, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"description":"name in case of it being a reference, otherwise null","type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}}],"type":"object"},"name":"SimplifiedSchemaItem"}],"type":"array"}}],"type":"object"}},{"name":"isObject","required":true,"schema":{"description":"if the type is an object, this is true. false if it's an array","type":"boolean"}},{"name":"isArray","required":true,"schema":{"description":"if the type is an array, this is true","type":"boolean"}},{"name":"isPrimitive","required":true,"schema":{"description":"if it's a primitive type like \"string\", \"number\", \"boolean\", \"null\" | \"undefined\"","type":"boolean"}},{"name":"isEnum","required":true,"schema":{"description":"will be true for any primitive conjunction types","type":"boolean"}},{"name":"isEnumLiteral","required":true,"schema":{"description":"will be true for string conjunction types","type":"boolean"}},{"name":"typeCoverage","required":true,"schema":{"description":"quantification of coverage of the specified type or subtypes in our database.","type":"number"}},{"name":"rawType","required":true,"schema":{"description":"raw type string","type":"string"}}],"type":"object"}},{"name":"parameters","required":false,"schema":{"description":"parameters the function takes as its arguments, if any","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"type":"string"}},{"name":"schema","required":false,"schema":{"properties":[{"name":"$id","required":false,"schema":{"type":"string"}},{"name":"$ref","required":false,"schema":{"type":"string"}},{"name":"$schema","required":false,"schema":{"description":"Meta schema\n\nRecommended values:\n- 'http://json-schema.org/schema#'\n- 'http://json-schema.org/hyper-schema#'\n- 'http://json-schema.org/draft-07/schema#'\n- 'http://json-schema.org/draft-07/hyper-schema#'","type":"string"}},{"name":"$comment","required":false,"schema":{"type":"string"}},{"name":"$defs","required":false,"schema":{"properties":[],"type":"object"}},{"name":"type","required":false,"schema":{"properties":[],"type":"object"}},{"name":"enum","required":false,"schema":{"items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"const","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"multipleOf","required":false,"schema":{"type":"number"}},{"name":"maximum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMaximum","required":false,"schema":{"type":"number"}},{"name":"minimum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMinimum","required":false,"schema":{"type":"number"}},{"name":"maxLength","required":false,"schema":{"type":"number"}},{"name":"minLength","required":false,"schema":{"type":"number"}},{"name":"pattern","required":false,"schema":{"type":"string"}},{"name":"items","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalItems","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"maxItems","required":false,"schema":{"type":"number"}},{"name":"minItems","required":false,"schema":{"type":"number"}},{"name":"uniqueItems","required":false,"schema":{"type":"boolean"}},{"name":"contains","required":false,"schema":{"circularRefName":"JSONSchema7","properties":[],"type":"object"}},{"name":"maxProperties","required":false,"schema":{"type":"number"}},{"name":"minProperties","required":false,"schema":{"type":"number"}},{"name":"required","required":false,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"properties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"patternProperties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalProperties","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"dependencies","required":false,"schema":{"properties":[],"type":"object"}},{"name":"propertyNames","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"if","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"then","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"else","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"allOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"anyOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"oneOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"not","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"format","required":false,"schema":{"type":"string"}},{"name":"contentMediaType","required":false,"schema":{"type":"string"}},{"name":"contentEncoding","required":false,"schema":{"type":"string"}},{"name":"definitions","required":false,"schema":{"properties":[],"type":"object"}},{"name":"title","required":false,"schema":{"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"default","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"readOnly","required":false,"schema":{"type":"boolean"}},{"name":"writeOnly","required":false,"schema":{"type":"boolean"}},{"name":"examples","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}}],"type":"object"}},{"name":"simplifiedSchema","required":false,"schema":{"description":"JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form","properties":[{"name":"type","required":true,"schema":{"enum":["string","number","boolean","object","array","null"],"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"circularRefName","required":false,"schema":{"description":"sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here","type":"string"}},{"name":"enum","required":false,"schema":{"description":"in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think","items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"properties","required":false,"schema":{"description":"in case of object, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}},{"name":"required","required":true,"schema":{"description":"NB: can't we put this in the SimplifiedSchema itself?","type":"boolean"}}],"type":"object"},"name":"SimplifiedSchemaProperty"}],"type":"array"}},{"name":"items","required":false,"schema":{"description":"in case of arrays, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"description":"name in case of it being a reference, otherwise null","type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}}],"type":"object"},"name":"SimplifiedSchemaItem"}],"type":"array"}}],"type":"object"}},{"name":"required","required":true,"schema":{"type":"boolean"}}],"type":"object"},"name":"FunctionParameter"}],"type":"array"}},{"name":"size","required":true,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"commentSize","required":false,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"codeSize","required":false,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"cumulativeSize","required":false,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"cumulativeCommentSize","required":false,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"cumulativeCodeSize","required":false,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"maxIndentationDepth","required":true,"schema":{"description":"maximum amount of times indedented in this function\n\ngood for determining the complexity and finding code that can be simplified/destructured into smaller pieces","type":"number"}},{"name":"dependantFiles","required":false,"schema":{"description":"finds all files that import this function\n\nNB: this is not indexed because this information has nothing to do with the operation itself, but the exposure to the broader monorepo. This is calculated on the fly.","items":[{"schema":{"type":"string"},"name":null}],"type":"array"}}],"type":"object"}},{"name":"TsVariable","required":true,"schema":{"properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"value","required":true,"schema":{"type":"string"}},{"name":"classification","required":true,"schema":{"enum":["const","var","let"],"type":"string"}},{"name":"type","required":true,"schema":{"description":"all info that should always be collected when indexing any type interface","properties":[{"name":"typeDefinition","required":false,"schema":{"properties":[{"name":"$id","required":false,"schema":{"type":"string"}},{"name":"$ref","required":false,"schema":{"type":"string"}},{"name":"$schema","required":false,"schema":{"description":"Meta schema\n\nRecommended values:\n- 'http://json-schema.org/schema#'\n- 'http://json-schema.org/hyper-schema#'\n- 'http://json-schema.org/draft-07/schema#'\n- 'http://json-schema.org/draft-07/hyper-schema#'","type":"string"}},{"name":"$comment","required":false,"schema":{"type":"string"}},{"name":"$defs","required":false,"schema":{"properties":[],"type":"object"}},{"name":"type","required":false,"schema":{"properties":[],"type":"object"}},{"name":"enum","required":false,"schema":{"items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"const","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"multipleOf","required":false,"schema":{"type":"number"}},{"name":"maximum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMaximum","required":false,"schema":{"type":"number"}},{"name":"minimum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMinimum","required":false,"schema":{"type":"number"}},{"name":"maxLength","required":false,"schema":{"type":"number"}},{"name":"minLength","required":false,"schema":{"type":"number"}},{"name":"pattern","required":false,"schema":{"type":"string"}},{"name":"items","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalItems","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"maxItems","required":false,"schema":{"type":"number"}},{"name":"minItems","required":false,"schema":{"type":"number"}},{"name":"uniqueItems","required":false,"schema":{"type":"boolean"}},{"name":"contains","required":false,"schema":{"circularRefName":"JSONSchema7","properties":[],"type":"object"}},{"name":"maxProperties","required":false,"schema":{"type":"number"}},{"name":"minProperties","required":false,"schema":{"type":"number"}},{"name":"required","required":false,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"properties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"patternProperties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalProperties","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"dependencies","required":false,"schema":{"properties":[],"type":"object"}},{"name":"propertyNames","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"if","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"then","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"else","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"allOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"anyOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"oneOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"not","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"format","required":false,"schema":{"type":"string"}},{"name":"contentMediaType","required":false,"schema":{"type":"string"}},{"name":"contentEncoding","required":false,"schema":{"type":"string"}},{"name":"definitions","required":false,"schema":{"properties":[],"type":"object"}},{"name":"title","required":false,"schema":{"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"default","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"readOnly","required":false,"schema":{"type":"boolean"}},{"name":"writeOnly","required":false,"schema":{"type":"boolean"}},{"name":"examples","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}}],"type":"object"}},{"name":"simplifiedSchema","required":false,"schema":{"description":"JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form","properties":[{"name":"type","required":true,"schema":{"enum":["string","number","boolean","object","array","null"],"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"circularRefName","required":false,"schema":{"description":"sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here","type":"string"}},{"name":"enum","required":false,"schema":{"description":"in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think","items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"properties","required":false,"schema":{"description":"in case of object, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}},{"name":"required","required":true,"schema":{"description":"NB: can't we put this in the SimplifiedSchema itself?","type":"boolean"}}],"type":"object"},"name":"SimplifiedSchemaProperty"}],"type":"array"}},{"name":"items","required":false,"schema":{"description":"in case of arrays, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"description":"name in case of it being a reference, otherwise null","type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}}],"type":"object"},"name":"SimplifiedSchemaItem"}],"type":"array"}}],"type":"object"}},{"name":"isObject","required":true,"schema":{"description":"if the type is an object, this is true. false if it's an array","type":"boolean"}},{"name":"isArray","required":true,"schema":{"description":"if the type is an array, this is true","type":"boolean"}},{"name":"isPrimitive","required":true,"schema":{"description":"if it's a primitive type like \"string\", \"number\", \"boolean\", \"null\" | \"undefined\"","type":"boolean"}},{"name":"isEnum","required":true,"schema":{"description":"will be true for any primitive conjunction types","type":"boolean"}},{"name":"isEnumLiteral","required":true,"schema":{"description":"will be true for string conjunction types","type":"boolean"}},{"name":"typeCoverage","required":true,"schema":{"description":"quantification of coverage of the specified type or subtypes in our database.","type":"number"}},{"name":"rawType","required":true,"schema":{"description":"raw type string","type":"string"}}],"type":"object"}},{"name":"comments","required":true,"schema":{"description":"surrounding comments and comments inside of the variable","items":[{"schema":{"description":"comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\nspecial line prefixes:\n- TODO:\n- DISCUSSION:\n- IDEA:\n- LATER:\n- NB:\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!","properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"comment","required":true,"schema":{"description":"a string that is known to contain markdown.","type":"string"}},{"name":"parameters","required":true,"schema":{"properties":[],"type":"object"}},{"name":"types","required":true,"schema":{"description":"These are the type indicators that were found in this single or multiline comment. Can be multiple.","items":[{"schema":{"enum":["todo","discussion","idea","later","nb"],"type":"string"},"name":"CommentType"}],"type":"array"}},{"name":"firstLine","required":true,"schema":{"description":"first line of the comment","type":"number"}},{"name":"lastLine","required":true,"schema":{"description":"last line of the comment","type":"number"}},{"name":"statementName","required":false,"schema":{"description":"statement name the comment belongs to","type":"string"}},{"name":"rawStatement","required":false,"schema":{"description":"raw statement text the comment belongs to","type":"string"}}],"type":"object"},"name":"TsComment"}],"type":"array"}}],"type":"object"}},{"name":"TsInterface","required":true,"schema":{"description":"TODO: Just like parameters, this should be linted for. If you define an interface that's not declared here, that should ring a bell.","properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"type","required":true,"schema":{"description":"all info that should always be collected when indexing any type interface","properties":[{"name":"typeDefinition","required":false,"schema":{"properties":[{"name":"$id","required":false,"schema":{"type":"string"}},{"name":"$ref","required":false,"schema":{"type":"string"}},{"name":"$schema","required":false,"schema":{"description":"Meta schema\n\nRecommended values:\n- 'http://json-schema.org/schema#'\n- 'http://json-schema.org/hyper-schema#'\n- 'http://json-schema.org/draft-07/schema#'\n- 'http://json-schema.org/draft-07/hyper-schema#'","type":"string"}},{"name":"$comment","required":false,"schema":{"type":"string"}},{"name":"$defs","required":false,"schema":{"properties":[],"type":"object"}},{"name":"type","required":false,"schema":{"properties":[],"type":"object"}},{"name":"enum","required":false,"schema":{"items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"const","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"multipleOf","required":false,"schema":{"type":"number"}},{"name":"maximum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMaximum","required":false,"schema":{"type":"number"}},{"name":"minimum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMinimum","required":false,"schema":{"type":"number"}},{"name":"maxLength","required":false,"schema":{"type":"number"}},{"name":"minLength","required":false,"schema":{"type":"number"}},{"name":"pattern","required":false,"schema":{"type":"string"}},{"name":"items","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalItems","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"maxItems","required":false,"schema":{"type":"number"}},{"name":"minItems","required":false,"schema":{"type":"number"}},{"name":"uniqueItems","required":false,"schema":{"type":"boolean"}},{"name":"contains","required":false,"schema":{"circularRefName":"JSONSchema7","properties":[],"type":"object"}},{"name":"maxProperties","required":false,"schema":{"type":"number"}},{"name":"minProperties","required":false,"schema":{"type":"number"}},{"name":"required","required":false,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"properties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"patternProperties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalProperties","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"dependencies","required":false,"schema":{"properties":[],"type":"object"}},{"name":"propertyNames","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"if","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"then","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"else","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"allOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"anyOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"oneOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"not","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"format","required":false,"schema":{"type":"string"}},{"name":"contentMediaType","required":false,"schema":{"type":"string"}},{"name":"contentEncoding","required":false,"schema":{"type":"string"}},{"name":"definitions","required":false,"schema":{"properties":[],"type":"object"}},{"name":"title","required":false,"schema":{"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"default","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"readOnly","required":false,"schema":{"type":"boolean"}},{"name":"writeOnly","required":false,"schema":{"type":"boolean"}},{"name":"examples","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}}],"type":"object"}},{"name":"simplifiedSchema","required":false,"schema":{"description":"JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form","properties":[{"name":"type","required":true,"schema":{"enum":["string","number","boolean","object","array","null"],"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"circularRefName","required":false,"schema":{"description":"sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here","type":"string"}},{"name":"enum","required":false,"schema":{"description":"in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think","items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"properties","required":false,"schema":{"description":"in case of object, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}},{"name":"required","required":true,"schema":{"description":"NB: can't we put this in the SimplifiedSchema itself?","type":"boolean"}}],"type":"object"},"name":"SimplifiedSchemaProperty"}],"type":"array"}},{"name":"items","required":false,"schema":{"description":"in case of arrays, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"description":"name in case of it being a reference, otherwise null","type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}}],"type":"object"},"name":"SimplifiedSchemaItem"}],"type":"array"}}],"type":"object"}},{"name":"isObject","required":true,"schema":{"description":"if the type is an object, this is true. false if it's an array","type":"boolean"}},{"name":"isArray","required":true,"schema":{"description":"if the type is an array, this is true","type":"boolean"}},{"name":"isPrimitive","required":true,"schema":{"description":"if it's a primitive type like \"string\", \"number\", \"boolean\", \"null\" | \"undefined\"","type":"boolean"}},{"name":"isEnum","required":true,"schema":{"description":"will be true for any primitive conjunction types","type":"boolean"}},{"name":"isEnumLiteral","required":true,"schema":{"description":"will be true for string conjunction types","type":"boolean"}},{"name":"typeCoverage","required":true,"schema":{"description":"quantification of coverage of the specified type or subtypes in our database.","type":"number"}},{"name":"rawType","required":true,"schema":{"description":"raw type string","type":"string"}}],"type":"object"}},{"name":"description","required":false,"schema":{"description":"a string that is known to contain markdown.","type":"string"}},{"name":"commentsInside","required":true,"schema":{"items":[{"schema":{"description":"comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\nspecial line prefixes:\n- TODO:\n- DISCUSSION:\n- IDEA:\n- LATER:\n- NB:\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!","properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"comment","required":true,"schema":{"description":"a string that is known to contain markdown.","type":"string"}},{"name":"parameters","required":true,"schema":{"properties":[],"type":"object"}},{"name":"types","required":true,"schema":{"description":"These are the type indicators that were found in this single or multiline comment. Can be multiple.","items":[{"schema":{"enum":["todo","discussion","idea","later","nb"],"type":"string"},"name":"CommentType"}],"type":"array"}},{"name":"firstLine","required":true,"schema":{"description":"first line of the comment","type":"number"}},{"name":"lastLine","required":true,"schema":{"description":"last line of the comment","type":"number"}},{"name":"statementName","required":false,"schema":{"description":"statement name the comment belongs to","type":"string"}},{"name":"rawStatement","required":false,"schema":{"description":"raw statement text the comment belongs to","type":"string"}}],"type":"object"},"name":"TsComment"}],"type":"array"}},{"name":"rawText","required":false,"schema":{"description":"raw interface text, coming from ts-morph","type":"string"}},{"name":"extensions","required":false,"schema":{"description":"if the interface extends anything, names will be specified here","items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"isDbModel","required":true,"schema":{"description":"if true, this interface is marked as a db model, which means it will be included in the db function autocompletion so it's easy to store and fetch data in this format.\n\nis automatically set to true when indexing and when one of the following statements holds true\n- if the doc-comment contains frontmatter with `isDbModel` or `defaultDbStorageMethod` specified\n- if the interface last word is \"db\" or \"model\" and if there are minimum 2 words\n- if the interface extends some other special interface","type":"boolean"}},{"name":"defaultDbStorageMethod","required":false,"schema":{"enum":["jsonMultiple","jsonSingle","markdown","keyValueMarkdown","csv"],"type":"string"}}],"type":"object"}},{"name":"TsComment","required":true,"schema":{"description":"comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\nspecial line prefixes:\n- TODO:\n- DISCUSSION:\n- IDEA:\n- LATER:\n- NB:\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!","properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"comment","required":true,"schema":{"description":"a string that is known to contain markdown.","type":"string"}},{"name":"parameters","required":true,"schema":{"properties":[],"type":"object"}},{"name":"types","required":true,"schema":{"description":"These are the type indicators that were found in this single or multiline comment. Can be multiple.","items":[{"schema":{"enum":["todo","discussion","idea","later","nb"],"type":"string"},"name":"CommentType"}],"type":"array"}},{"name":"firstLine","required":true,"schema":{"description":"first line of the comment","type":"number"}},{"name":"lastLine","required":true,"schema":{"description":"last line of the comment","type":"number"}},{"name":"statementName","required":false,"schema":{"description":"statement name the comment belongs to","type":"string"}},{"name":"rawStatement","required":false,"schema":{"description":"raw statement text the comment belongs to","type":"string"}}],"type":"object"}},{"name":"TsImport","required":true,"schema":{"properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"comments","required":true,"schema":{"description":"surrounding comments and comments inside of the import","items":[{"schema":{"description":"comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\nspecial line prefixes:\n- TODO:\n- DISCUSSION:\n- IDEA:\n- LATER:\n- NB:\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!","properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"comment","required":true,"schema":{"description":"a string that is known to contain markdown.","type":"string"}},{"name":"parameters","required":true,"schema":{"properties":[],"type":"object"}},{"name":"types","required":true,"schema":{"description":"These are the type indicators that were found in this single or multiline comment. Can be multiple.","items":[{"schema":{"enum":["todo","discussion","idea","later","nb"],"type":"string"},"name":"CommentType"}],"type":"array"}},{"name":"firstLine","required":true,"schema":{"description":"first line of the comment","type":"number"}},{"name":"lastLine","required":true,"schema":{"description":"last line of the comment","type":"number"}},{"name":"statementName","required":false,"schema":{"description":"statement name the comment belongs to","type":"string"}},{"name":"rawStatement","required":false,"schema":{"description":"raw statement text the comment belongs to","type":"string"}}],"type":"object"},"name":"TsComment"}],"type":"array"}},{"name":"module","required":true,"schema":{"type":"string"}},{"name":"alias","required":false,"schema":{"description":"TODO: not sure, but I believe alias should be defined at the import, not at the export, right?","type":"string"}},{"name":"classification","required":true,"schema":{"description":"node: node core packages like fs and path\n\nreact: react standard packages like react, react-native, expo, react-dom, etc.\n\npackage: packages from npm that are not classified as operations\n\noperation: operations from our monorepo\n\ninternal: imports from other places in the same operation\n\nNB: don't confuse this with OperationClassification","enum":["node","react","package","operation","internal"],"type":"string"}},{"name":"type","required":false,"schema":{"description":"sometimes the import statement module referenced cannot be found, in that case it cannot be known whether the import should contain a type or value, so it will be undefined.","enum":["value","type"],"type":"string"}},{"name":"hasGeneric","required":false,"schema":{"description":"only for type exports. tells you whether or not the type has one or more generic parameter(s)","type":"boolean"}},{"name":"isAbsolute","required":true,"schema":{"type":"boolean"}},{"name":"isModuleResolved","required":true,"schema":{"type":"boolean"}},{"name":"isModuleFromMonorepo","required":true,"schema":{"type":"boolean"}}],"type":"object"}},{"name":"TsExport","required":true,"schema":{"properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"comments","required":true,"schema":{"description":"surrounding comments and comments inside of the import","items":[{"schema":{"description":"comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\nspecial line prefixes:\n- TODO:\n- DISCUSSION:\n- IDEA:\n- LATER:\n- NB:\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!","properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"comment","required":true,"schema":{"description":"a string that is known to contain markdown.","type":"string"}},{"name":"parameters","required":true,"schema":{"properties":[],"type":"object"}},{"name":"types","required":true,"schema":{"description":"These are the type indicators that were found in this single or multiline comment. Can be multiple.","items":[{"schema":{"enum":["todo","discussion","idea","later","nb"],"type":"string"},"name":"CommentType"}],"type":"array"}},{"name":"firstLine","required":true,"schema":{"description":"first line of the comment","type":"number"}},{"name":"lastLine","required":true,"schema":{"description":"last line of the comment","type":"number"}},{"name":"statementName","required":false,"schema":{"description":"statement name the comment belongs to","type":"string"}},{"name":"rawStatement","required":false,"schema":{"description":"raw statement text the comment belongs to","type":"string"}}],"type":"object"},"name":"TsComment"}],"type":"array"}},{"name":"type","required":false,"schema":{"enum":["value","type"],"type":"string"}},{"name":"alias","required":false,"schema":{"description":"used for duplicate export names","type":"string"}},{"name":"hasGeneric","required":false,"schema":{"description":"only for type exports. tells you whether or not the type has one or more generic parameter(s)","type":"boolean"}}],"type":"object"}}],"type":"object"},"typeCoverage":0,"rawType":"IndexModels","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}}]