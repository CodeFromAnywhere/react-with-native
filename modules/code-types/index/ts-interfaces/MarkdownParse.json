[{"id":"PfcvjTZdPatuKpzg","name":"ImageMarkdownJson","slug":"image-markdown-json","relativePathFromProjectRoot":"/tools/types/code-types/src/MarkdownParse.ts","srcFileId":"/MarkdownParse","operationFolderName":"code-types","relativeFilePathFromSrc":"/MarkdownParse.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","rawText":"\n\nexport type ImageMarkdownJson = {\n  alt: string;\n  url: string;\n};","extensions":[],"description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"alt":{"type":"string"},"url":{"type":"string"}},"required":["alt","url"],"additionalProperties":false},"simplifiedSchema":{"properties":[{"name":"alt","required":true,"schema":{"type":"string"}},{"name":"url","required":true,"schema":{"type":"string"}}],"type":"object"},"typeCoverage":0,"rawType":"ImageMarkdownJson","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"DGWlsMKbWLcNMAqq","name":"MarkdownContentLevel","slug":"markdown-content-level","relativePathFromProjectRoot":"/tools/types/code-types/src/MarkdownParse.ts","srcFileId":"/MarkdownParse","operationFolderName":"code-types","relativeFilePathFromSrc":"/MarkdownParse.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","rawText":"\n\n/**\n * 0 is a paragraph\n * 1-6 is h1 until h6\n */\nexport type MarkdownContentLevel = number;","extensions":[],"description":"0 is a paragraph\n1-6 is h1 until h6","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"number","description":"0 is a paragraph 1-6 is h1 until h6"},"simplifiedSchema":{"description":"0 is a paragraph 1-6 is h1 until h6","type":"number"},"typeCoverage":0,"rawType":"MarkdownContentLevel","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"dnluKghYIqAjEYgX","name":"MarkdownParagraph","slug":"markdown-paragraph","relativePathFromProjectRoot":"/tools/types/code-types/src/MarkdownParse.ts","srcFileId":"/MarkdownParse","operationFolderName":"code-types","relativeFilePathFromSrc":"/MarkdownParse.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","rawText":"\n\nexport type MarkdownParagraph = {\n  paragraph: string;\n  categoryStack: CategoryStack;\n};","extensions":[],"description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"paragraph":{"type":"string"},"categoryStack":{"$ref":"#/definitions/CategoryStack"}},"required":["paragraph","categoryStack"],"additionalProperties":false},"simplifiedSchema":{"properties":[{"name":"paragraph","required":true,"schema":{"type":"string"}},{"name":"categoryStack","required":true,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}}],"type":"object"},"typeCoverage":0,"rawType":"MarkdownParagraph","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"hJqQRezGQJKSwxFP","name":"CategoryStack","slug":"category-stack","relativePathFromProjectRoot":"/tools/types/code-types/src/MarkdownParse.ts","srcFileId":"/MarkdownParse","operationFolderName":"code-types","relativeFilePathFromSrc":"/MarkdownParse.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"array","items":{"type":"string"}},"simplifiedSchema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"},"typeCoverage":0,"rawType":"CategoryStack","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"qvEdYVXJzmyyHkcP","name":"MarkdownChunk","slug":"markdown-chunk","relativePathFromProjectRoot":"/tools/types/code-types/src/MarkdownParse.ts","srcFileId":"/MarkdownParse","operationFolderName":"code-types","relativeFilePathFromSrc":"/MarkdownParse.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","rawText":"\n\nexport type MarkdownChunk = {\n  level: MarkdownContentLevel;\n  content?: string;\n  /**\n   * NB: title can also be an empty string (\"\")\n   */\n  title?: string;\n  /**\n   * all content until the next title. it's either a content array if there's any titles found, or a string[] if it's paragraphs\n   */\n  children?: MarkdownChunk[];\n};","extensions":[],"description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"level":{"$ref":"#/definitions/MarkdownContentLevel"},"content":{"type":"string"},"title":{"type":"string","description":"NB: title can also be an empty string (\"\")"},"children":{"type":"array","items":{"$ref":"#/definitions/MarkdownChunk"},"description":"all content until the next title. it's either a content array if there's any titles found, or a string[] if it's paragraphs"}},"required":["level"],"additionalProperties":false},"simplifiedSchema":{"properties":[{"name":"level","required":true,"schema":{"description":"0 is a paragraph 1-6 is h1 until h6","type":"number"}},{"name":"content","required":false,"schema":{"type":"string"}},{"name":"title","required":false,"schema":{"description":"NB: title can also be an empty string (\"\")","type":"string"}},{"name":"children","required":false,"schema":{"description":"all content until the next title. it's either a content array if there's any titles found, or a string[] if it's paragraphs","items":[{"schema":{"circularRefName":"MarkdownChunk","properties":[],"type":"object"},"name":"MarkdownChunk"}],"type":"array"}}],"type":"object"},"typeCoverage":0,"rawType":"MarkdownChunk","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"ToSbCNbeByxNSIeK","name":"MarkdownFileParse","slug":"markdown-file-parse","relativePathFromProjectRoot":"/tools/types/code-types/src/MarkdownParse.ts","srcFileId":"/MarkdownParse","operationFolderName":"code-types","relativeFilePathFromSrc":"/MarkdownParse.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","rawText":"\n\nexport type MarkdownFileParse = MarkdownParse & {\n  fileName: string;\n  createdAt: number;\n  openedAt: number;\n  updatedAt: number;\n  modifiedAt: number;\n};","extensions":[],"description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","additionalProperties":false,"properties":{"fileName":{"type":"string","description":"if available, this can be the filename of the markdown in this markdownparse. Can be used for things like merging"},"createdAt":{"type":"number"},"openedAt":{"type":"number"},"updatedAt":{"type":"number"},"modifiedAt":{"type":"number"},"parameters":{"$ref":"#/definitions/FrontMatter","description":"parameters found in frontmatter"},"content":{"type":"array","items":{"$ref":"#/definitions/MarkdownChunk"},"description":"structured content based on h1, h2, h3, etc (paragraphs, recursive)"},"raw":{"type":"string","description":"raw markdown without frontmatter"}},"required":["createdAt","fileName","modifiedAt","openedAt","parameters","raw","updatedAt"]},"simplifiedSchema":{"properties":[{"name":"fileName","required":true,"schema":{"description":"if available, this can be the filename of the markdown in this markdownparse. Can be used for things like merging","type":"string"}},{"name":"createdAt","required":true,"schema":{"type":"number"}},{"name":"openedAt","required":true,"schema":{"type":"number"}},{"name":"updatedAt","required":true,"schema":{"type":"number"}},{"name":"modifiedAt","required":true,"schema":{"type":"number"}},{"name":"parameters","required":true,"schema":{"properties":[],"type":"object"}},{"name":"content","required":false,"schema":{"description":"structured content based on h1, h2, h3, etc (paragraphs, recursive)","items":[{"schema":{"properties":[{"name":"level","required":true,"schema":{"description":"0 is a paragraph 1-6 is h1 until h6","type":"number"}},{"name":"content","required":false,"schema":{"type":"string"}},{"name":"title","required":false,"schema":{"description":"NB: title can also be an empty string (\"\")","type":"string"}},{"name":"children","required":false,"schema":{"description":"all content until the next title. it's either a content array if there's any titles found, or a string[] if it's paragraphs","items":[{"schema":{"circularRefName":"MarkdownChunk","properties":[],"type":"object"},"name":"MarkdownChunk"}],"type":"array"}}],"type":"object"},"name":"MarkdownChunk"}],"type":"array"}},{"name":"raw","required":true,"schema":{"description":"raw markdown without frontmatter","type":"string"}}],"type":"object"},"typeCoverage":0,"rawType":"MarkdownFileParse","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"CeRreXSXfKliRozp","name":"MarkdownParse","slug":"markdown-parse","relativePathFromProjectRoot":"/tools/types/code-types/src/MarkdownParse.ts","srcFileId":"/MarkdownParse","operationFolderName":"code-types","relativeFilePathFromSrc":"/MarkdownParse.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","rawText":"\n\nexport type MarkdownParse = {\n  /**\n   * if available, this can be the filename of the markdown in this markdownparse. Can be used for things like merging\n   */\n  fileName?: string;\n  /**\n   * parameters found in frontmatter\n   */\n  parameters: FrontMatter;\n  /**\n   * structured content based on h1, h2, h3, etc (paragraphs, recursive)\n   */\n  content?: MarkdownChunk[];\n  /**\n   * raw markdown without frontmatter\n   */\n  raw: string;\n};","extensions":[],"description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"fileName":{"type":"string","description":"if available, this can be the filename of the markdown in this markdownparse. Can be used for things like merging"},"parameters":{"$ref":"#/definitions/FrontMatter","description":"parameters found in frontmatter"},"content":{"type":"array","items":{"$ref":"#/definitions/MarkdownChunk"},"description":"structured content based on h1, h2, h3, etc (paragraphs, recursive)"},"raw":{"type":"string","description":"raw markdown without frontmatter"}},"required":["parameters","raw"],"additionalProperties":false},"simplifiedSchema":{"properties":[{"name":"fileName","required":false,"schema":{"description":"if available, this can be the filename of the markdown in this markdownparse. Can be used for things like merging","type":"string"}},{"name":"parameters","required":true,"schema":{"properties":[],"type":"object"}},{"name":"content","required":false,"schema":{"description":"structured content based on h1, h2, h3, etc (paragraphs, recursive)","items":[{"schema":{"properties":[{"name":"level","required":true,"schema":{"description":"0 is a paragraph 1-6 is h1 until h6","type":"number"}},{"name":"content","required":false,"schema":{"type":"string"}},{"name":"title","required":false,"schema":{"description":"NB: title can also be an empty string (\"\")","type":"string"}},{"name":"children","required":false,"schema":{"description":"all content until the next title. it's either a content array if there's any titles found, or a string[] if it's paragraphs","items":[{"schema":{"circularRefName":"MarkdownChunk","properties":[],"type":"object"},"name":"MarkdownChunk"}],"type":"array"}}],"type":"object"},"name":"MarkdownChunk"}],"type":"array"}},{"name":"raw","required":true,"schema":{"description":"raw markdown without frontmatter","type":"string"}}],"type":"object"},"typeCoverage":0,"rawType":"MarkdownParse","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"BWwisguHTzAuEgWE","name":"FrontMatter","slug":"front-matter","relativePathFromProjectRoot":"/tools/types/code-types/src/MarkdownParse.ts","srcFileId":"/MarkdownParse","operationFolderName":"code-types","relativeFilePathFromSrc":"/MarkdownParse.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","additionalProperties":{"anyOf":[{"type":"string"},{"type":"number"},{"type":"null"},{"type":"boolean"},{"not":{}}]}},"simplifiedSchema":{"properties":[],"type":"object"},"typeCoverage":0,"rawType":"FrontMatter","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"lqOXWBqLZMDBMuDR","name":"MarkdownHeader","slug":"markdown-header","relativePathFromProjectRoot":"/tools/types/code-types/src/MarkdownParse.ts","srcFileId":"/MarkdownParse","operationFolderName":"code-types","relativeFilePathFromSrc":"/MarkdownParse.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","rawText":"\n\nexport type MarkdownHeader = {\n  level: MarkdownContentLevel;\n  title: string;\n};","extensions":[],"description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"level":{"$ref":"#/definitions/MarkdownContentLevel"},"title":{"type":"string"}},"required":["level","title"],"additionalProperties":false},"simplifiedSchema":{"properties":[{"name":"level","required":true,"schema":{"description":"0 is a paragraph 1-6 is h1 until h6","type":"number"}},{"name":"title","required":true,"schema":{"type":"string"}}],"type":"object"},"typeCoverage":0,"rawType":"MarkdownHeader","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}}]