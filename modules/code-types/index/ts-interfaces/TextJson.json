[{"id":"HEyPQFuOrqRIghqQ","name":"TextJson","slug":"text-json","relativePathFromProjectRoot":"/tools/types/code-types/src/TextJson.ts","srcFileId":"/TextJson","operationFolderName":"code-types","relativeFilePathFromSrc":"/TextJson.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","rawText":"\n\nexport interface TextJson {\n  /**\n   * only available if it's a json file\n   */\n  json?: any;\n  /**\n   * only available if it's a typescript file\n   */\n  typescriptJson?: unknown;\n  /**\n   * only available if it's a markdown file\n   */\n  markdownJson?: MarkdownParse;\n  /**\n   * full path to the file or folder\n   */\n  path: string;\n  /**\n   * DEPRECATED: to be replaced with metaData\n   *\n   * only returned if this is requested\n   */\n  stats?: Stats;\n  /**\n   * replaces stats. only returned if `includeMetaData` is set to true\n   */\n  metaData?: PathMetaData;\n  /** if true, this means this path is given back because it was the last opened base path that searching was canceled on because of the cancelRecursionOn prop */\n  isCancelRecursionResult?: boolean;\n}","extensions":[],"description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"json":{"description":"only available if it's a json file"},"typescriptJson":{"description":"only available if it's a typescript file"},"markdownJson":{"$ref":"#/definitions/MarkdownParse","description":"only available if it's a markdown file"},"path":{"type":"string","description":"full path to the file or folder"},"stats":{"$ref":"#/definitions/Stats","description":"DEPRECATED: to be replaced with metaData\n\nonly returned if this is requested"},"metaData":{"$ref":"#/definitions/PathMetaData","description":"replaces stats. only returned if `includeMetaData` is set to true"},"isCancelRecursionResult":{"type":"boolean","description":"if true, this means this path is given back because it was the last opened base path that searching was canceled on because of the cancelRecursionOn prop"}},"required":["path"],"additionalProperties":false},"simplifiedSchema":{"properties":[{"name":"json","required":false,"schema":{"description":"only available if it's a json file","properties":[],"type":"object"}},{"name":"typescriptJson","required":false,"schema":{"description":"only available if it's a typescript file","properties":[],"type":"object"}},{"name":"markdownJson","required":false,"schema":{"properties":[{"name":"fileName","required":false,"schema":{"description":"if available, this can be the filename of the markdown in this markdownparse. Can be used for things like merging","type":"string"}},{"name":"parameters","required":true,"schema":{"properties":[],"type":"object"}},{"name":"content","required":false,"schema":{"description":"structured content based on h1, h2, h3, etc (paragraphs, recursive)","items":[{"schema":{"properties":[{"name":"level","required":true,"schema":{"description":"0 is a paragraph 1-6 is h1 until h6","type":"number"}},{"name":"content","required":false,"schema":{"type":"string"}},{"name":"title","required":false,"schema":{"description":"NB: title can also be an empty string (\"\")","type":"string"}},{"name":"children","required":false,"schema":{"description":"all content until the next title. it's either a content array if there's any titles found, or a string[] if it's paragraphs","items":[{"schema":{"circularRefName":"MarkdownChunk","properties":[],"type":"object"},"name":"MarkdownChunk"}],"type":"array"}}],"type":"object"},"name":"MarkdownChunk"}],"type":"array"}},{"name":"raw","required":true,"schema":{"description":"raw markdown without frontmatter","type":"string"}}],"type":"object"}},{"name":"path","required":true,"schema":{"description":"full path to the file or folder","type":"string"}},{"name":"stats","required":false,"schema":{"description":"A `fs.Stats` object provides information about a file.\n\nObjects returned from  {@link  stat } ,  {@link  lstat }  and  {@link  fstat }  and their synchronous counterparts are of this type. If `bigint` in the `options` passed to those methods is true, the numeric values will be `bigint` instead of `number`, and the object will contain additional nanosecond-precision properties suffixed with `Ns`.\n\n```console Stats {   dev: 2114,   ino: 48064969,   mode: 33188,   nlink: 1,   uid: 85,   gid: 100,   rdev: 0,   size: 527,   blksize: 4096,   blocks: 8,   atimeMs: 1318289051000.1,   mtimeMs: 1318289051000.1,   ctimeMs: 1318289051000.1,   birthtimeMs: 1318289051000.1,   atime: Mon, 10 Oct 2011 23:24:11 GMT,   mtime: Mon, 10 Oct 2011 23:24:11 GMT,   ctime: Mon, 10 Oct 2011 23:24:11 GMT,   birthtime: Mon, 10 Oct 2011 23:24:11 GMT } ```\n\n`bigint` version:\n\n```console BigIntStats {   dev: 2114n,   ino: 48064969n,   mode: 33188n,   nlink: 1n,   uid: 85n,   gid: 100n,   rdev: 0n,   size: 527n,   blksize: 4096n,   blocks: 8n,   atimeMs: 1318289051000n,   mtimeMs: 1318289051000n,   ctimeMs: 1318289051000n,   birthtimeMs: 1318289051000n,   atimeNs: 1318289051000000000n,   mtimeNs: 1318289051000000000n,   ctimeNs: 1318289051000000000n,   birthtimeNs: 1318289051000000000n,   atime: Mon, 10 Oct 2011 23:24:11 GMT,   mtime: Mon, 10 Oct 2011 23:24:11 GMT,   ctime: Mon, 10 Oct 2011 23:24:11 GMT,   birthtime: Mon, 10 Oct 2011 23:24:11 GMT } ```","properties":[{"name":"dev","required":true,"schema":{"type":"number"}},{"name":"ino","required":true,"schema":{"type":"number"}},{"name":"mode","required":true,"schema":{"type":"number"}},{"name":"nlink","required":true,"schema":{"type":"number"}},{"name":"uid","required":true,"schema":{"type":"number"}},{"name":"gid","required":true,"schema":{"type":"number"}},{"name":"rdev","required":true,"schema":{"type":"number"}},{"name":"size","required":true,"schema":{"type":"number"}},{"name":"blksize","required":true,"schema":{"type":"number"}},{"name":"blocks","required":true,"schema":{"type":"number"}},{"name":"atimeMs","required":true,"schema":{"type":"number"}},{"name":"mtimeMs","required":true,"schema":{"type":"number"}},{"name":"ctimeMs","required":true,"schema":{"type":"number"}},{"name":"birthtimeMs","required":true,"schema":{"type":"number"}},{"name":"atime","required":true,"schema":{"type":"string"}},{"name":"mtime","required":true,"schema":{"type":"string"}},{"name":"ctime","required":true,"schema":{"type":"string"}},{"name":"birthtime","required":true,"schema":{"type":"string"}}],"type":"object"}},{"name":"metaData","required":false,"schema":{"description":"All interesting metadata about any path (files and folders)","properties":[{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"mainComment","required":false,"schema":{"description":"comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\nspecial line prefixes:\n- TODO:\n- DISCUSSION:\n- IDEA:\n- LATER:\n- NB:\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!","properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"comment","required":true,"schema":{"description":"a string that is known to contain markdown.","type":"string"}},{"name":"parameters","required":true,"schema":{"properties":[],"type":"object"}},{"name":"types","required":true,"schema":{"description":"These are the type indicators that were found in this single or multiline comment. Can be multiple.","items":[{"schema":{"enum":["todo","discussion","idea","later","nb"],"type":"string"},"name":"CommentType"}],"type":"array"}},{"name":"firstLine","required":true,"schema":{"description":"first line of the comment","type":"number"}},{"name":"lastLine","required":true,"schema":{"description":"last line of the comment","type":"number"}},{"name":"statementName","required":false,"schema":{"description":"statement name the comment belongs to","type":"string"}},{"name":"rawStatement","required":false,"schema":{"description":"raw statement text the comment belongs to","type":"string"}}],"type":"object"}},{"name":"fullFileName","required":false,"schema":{"description":"filename including extension, if the path is not a folder","type":"string"}},{"name":"isFolder","required":true,"schema":{"type":"boolean"}},{"name":"updatedAt","required":true,"schema":{"description":"unix time this file was last updated (or for folders: unix time of last modifiation of any file in this folder, recursively)\n\nTODO: renames also count as updates, I guess. Needs to be clear!","type":"number"}},{"name":"createdAt","required":true,"schema":{"description":"unix time this file was created (or for folders: unix time of creation of the first file in this folder)\n\nTODO: figure out if we can get the creation date of the folder itself?","type":"number"}},{"name":"sizes","required":true,"schema":{"description":"objective size measurements of all files in a folder\n\nsummary for a folder should contain file-summaries for different filetypes and an overal file summary","properties":[{"name":"size","required":true,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"textSize","required":true,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"dataSize","required":true,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"codeSize","required":true,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}}],"type":"object"}}],"type":"object"}},{"name":"isCancelRecursionResult","required":false,"schema":{"description":"if true, this means this path is given back because it was the last opened base path that searching was canceled on because of the cancelRecursionOn prop","type":"boolean"}}],"type":"object"},"typeCoverage":0,"rawType":"TextJson","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"NWXqaYsPPvrhUmCX","name":"MarkdownParse","slug":"markdown-parse","relativePathFromProjectRoot":"/tools/types/code-types/src/TextJson.ts","srcFileId":"/TextJson","operationFolderName":"code-types","relativeFilePathFromSrc":"/TextJson.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"fileName":{"type":"string","description":"if available, this can be the filename of the markdown in this markdownparse. Can be used for things like merging"},"parameters":{"$ref":"#/definitions/FrontMatter","description":"parameters found in frontmatter"},"content":{"type":"array","items":{"$ref":"#/definitions/MarkdownChunk"},"description":"structured content based on h1, h2, h3, etc (paragraphs, recursive)"},"raw":{"type":"string","description":"raw markdown without frontmatter"}},"required":["parameters","raw"],"additionalProperties":false},"simplifiedSchema":{"properties":[{"name":"fileName","required":false,"schema":{"description":"if available, this can be the filename of the markdown in this markdownparse. Can be used for things like merging","type":"string"}},{"name":"parameters","required":true,"schema":{"properties":[],"type":"object"}},{"name":"content","required":false,"schema":{"description":"structured content based on h1, h2, h3, etc (paragraphs, recursive)","items":[{"schema":{"properties":[{"name":"level","required":true,"schema":{"description":"0 is a paragraph 1-6 is h1 until h6","type":"number"}},{"name":"content","required":false,"schema":{"type":"string"}},{"name":"title","required":false,"schema":{"description":"NB: title can also be an empty string (\"\")","type":"string"}},{"name":"children","required":false,"schema":{"description":"all content until the next title. it's either a content array if there's any titles found, or a string[] if it's paragraphs","items":[{"schema":{"circularRefName":"MarkdownChunk","properties":[],"type":"object"},"name":"MarkdownChunk"}],"type":"array"}}],"type":"object"},"name":"MarkdownChunk"}],"type":"array"}},{"name":"raw","required":true,"schema":{"description":"raw markdown without frontmatter","type":"string"}}],"type":"object"},"typeCoverage":0,"rawType":"MarkdownParse","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"NFRGkOznwvINoyfx","name":"FrontMatter","slug":"front-matter","relativePathFromProjectRoot":"/tools/types/code-types/src/TextJson.ts","srcFileId":"/TextJson","operationFolderName":"code-types","relativeFilePathFromSrc":"/TextJson.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","additionalProperties":{"anyOf":[{"type":"string"},{"type":"number"},{"type":"null"},{"type":"boolean"},{"not":{}}]}},"simplifiedSchema":{"properties":[],"type":"object"},"typeCoverage":0,"rawType":"FrontMatter","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"WcpAVwfhbkMODbsR","name":"MarkdownChunk","slug":"markdown-chunk","relativePathFromProjectRoot":"/tools/types/code-types/src/TextJson.ts","srcFileId":"/TextJson","operationFolderName":"code-types","relativeFilePathFromSrc":"/TextJson.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"level":{"$ref":"#/definitions/MarkdownContentLevel"},"content":{"type":"string"},"title":{"type":"string","description":"NB: title can also be an empty string (\"\")"},"children":{"type":"array","items":{"$ref":"#/definitions/MarkdownChunk"},"description":"all content until the next title. it's either a content array if there's any titles found, or a string[] if it's paragraphs"}},"required":["level"],"additionalProperties":false},"simplifiedSchema":{"properties":[{"name":"level","required":true,"schema":{"description":"0 is a paragraph 1-6 is h1 until h6","type":"number"}},{"name":"content","required":false,"schema":{"type":"string"}},{"name":"title","required":false,"schema":{"description":"NB: title can also be an empty string (\"\")","type":"string"}},{"name":"children","required":false,"schema":{"description":"all content until the next title. it's either a content array if there's any titles found, or a string[] if it's paragraphs","items":[{"schema":{"circularRefName":"MarkdownChunk","properties":[],"type":"object"},"name":"MarkdownChunk"}],"type":"array"}}],"type":"object"},"typeCoverage":0,"rawType":"MarkdownChunk","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"XSmbtGEhRcKgaUIM","name":"MarkdownContentLevel","slug":"markdown-content-level","relativePathFromProjectRoot":"/tools/types/code-types/src/TextJson.ts","srcFileId":"/TextJson","operationFolderName":"code-types","relativeFilePathFromSrc":"/TextJson.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","description":"0 is a paragraph 1-6 is h1 until h6","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"number","description":"0 is a paragraph 1-6 is h1 until h6"},"simplifiedSchema":{"description":"0 is a paragraph 1-6 is h1 until h6","type":"number"},"typeCoverage":0,"rawType":"MarkdownContentLevel","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"iDCZfIJFgRSPAeQi","name":"Stats","slug":"stats","relativePathFromProjectRoot":"/tools/types/code-types/src/TextJson.ts","srcFileId":"/TextJson","operationFolderName":"code-types","relativeFilePathFromSrc":"/TextJson.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","description":"A `fs.Stats` object provides information about a file.\n\nObjects returned from  {@link  stat } ,  {@link  lstat }  and  {@link  fstat }  and their synchronous counterparts are of this type. If `bigint` in the `options` passed to those methods is true, the numeric values will be `bigint` instead of `number`, and the object will contain additional nanosecond-precision properties suffixed with `Ns`.\n\n```console Stats {   dev: 2114,   ino: 48064969,   mode: 33188,   nlink: 1,   uid: 85,   gid: 100,   rdev: 0,   size: 527,   blksize: 4096,   blocks: 8,   atimeMs: 1318289051000.1,   mtimeMs: 1318289051000.1,   ctimeMs: 1318289051000.1,   birthtimeMs: 1318289051000.1,   atime: Mon, 10 Oct 2011 23:24:11 GMT,   mtime: Mon, 10 Oct 2011 23:24:11 GMT,   ctime: Mon, 10 Oct 2011 23:24:11 GMT,   birthtime: Mon, 10 Oct 2011 23:24:11 GMT } ```\n\n`bigint` version:\n\n```console BigIntStats {   dev: 2114n,   ino: 48064969n,   mode: 33188n,   nlink: 1n,   uid: 85n,   gid: 100n,   rdev: 0n,   size: 527n,   blksize: 4096n,   blocks: 8n,   atimeMs: 1318289051000n,   mtimeMs: 1318289051000n,   ctimeMs: 1318289051000n,   birthtimeMs: 1318289051000n,   atimeNs: 1318289051000000000n,   mtimeNs: 1318289051000000000n,   ctimeNs: 1318289051000000000n,   birthtimeNs: 1318289051000000000n,   atime: Mon, 10 Oct 2011 23:24:11 GMT,   mtime: Mon, 10 Oct 2011 23:24:11 GMT,   ctime: Mon, 10 Oct 2011 23:24:11 GMT,   birthtime: Mon, 10 Oct 2011 23:24:11 GMT } ```","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","additionalProperties":false,"properties":{"dev":{"type":"number"},"ino":{"type":"number"},"mode":{"type":"number"},"nlink":{"type":"number"},"uid":{"type":"number"},"gid":{"type":"number"},"rdev":{"type":"number"},"size":{"type":"number"},"blksize":{"type":"number"},"blocks":{"type":"number"},"atimeMs":{"type":"number"},"mtimeMs":{"type":"number"},"ctimeMs":{"type":"number"},"birthtimeMs":{"type":"number"},"atime":{"type":"string","format":"date-time"},"mtime":{"type":"string","format":"date-time"},"ctime":{"type":"string","format":"date-time"},"birthtime":{"type":"string","format":"date-time"}},"required":["atime","atimeMs","birthtime","birthtimeMs","blksize","blocks","ctime","ctimeMs","dev","gid","ino","mode","mtime","mtimeMs","nlink","rdev","size","uid"],"description":"A `fs.Stats` object provides information about a file.\n\nObjects returned from  {@link  stat } ,  {@link  lstat }  and  {@link  fstat }  and their synchronous counterparts are of this type. If `bigint` in the `options` passed to those methods is true, the numeric values will be `bigint` instead of `number`, and the object will contain additional nanosecond-precision properties suffixed with `Ns`.\n\n```console Stats {   dev: 2114,   ino: 48064969,   mode: 33188,   nlink: 1,   uid: 85,   gid: 100,   rdev: 0,   size: 527,   blksize: 4096,   blocks: 8,   atimeMs: 1318289051000.1,   mtimeMs: 1318289051000.1,   ctimeMs: 1318289051000.1,   birthtimeMs: 1318289051000.1,   atime: Mon, 10 Oct 2011 23:24:11 GMT,   mtime: Mon, 10 Oct 2011 23:24:11 GMT,   ctime: Mon, 10 Oct 2011 23:24:11 GMT,   birthtime: Mon, 10 Oct 2011 23:24:11 GMT } ```\n\n`bigint` version:\n\n```console BigIntStats {   dev: 2114n,   ino: 48064969n,   mode: 33188n,   nlink: 1n,   uid: 85n,   gid: 100n,   rdev: 0n,   size: 527n,   blksize: 4096n,   blocks: 8n,   atimeMs: 1318289051000n,   mtimeMs: 1318289051000n,   ctimeMs: 1318289051000n,   birthtimeMs: 1318289051000n,   atimeNs: 1318289051000000000n,   mtimeNs: 1318289051000000000n,   ctimeNs: 1318289051000000000n,   birthtimeNs: 1318289051000000000n,   atime: Mon, 10 Oct 2011 23:24:11 GMT,   mtime: Mon, 10 Oct 2011 23:24:11 GMT,   ctime: Mon, 10 Oct 2011 23:24:11 GMT,   birthtime: Mon, 10 Oct 2011 23:24:11 GMT } ```"},"simplifiedSchema":{"description":"A `fs.Stats` object provides information about a file.\n\nObjects returned from  {@link  stat } ,  {@link  lstat }  and  {@link  fstat }  and their synchronous counterparts are of this type. If `bigint` in the `options` passed to those methods is true, the numeric values will be `bigint` instead of `number`, and the object will contain additional nanosecond-precision properties suffixed with `Ns`.\n\n```console Stats {   dev: 2114,   ino: 48064969,   mode: 33188,   nlink: 1,   uid: 85,   gid: 100,   rdev: 0,   size: 527,   blksize: 4096,   blocks: 8,   atimeMs: 1318289051000.1,   mtimeMs: 1318289051000.1,   ctimeMs: 1318289051000.1,   birthtimeMs: 1318289051000.1,   atime: Mon, 10 Oct 2011 23:24:11 GMT,   mtime: Mon, 10 Oct 2011 23:24:11 GMT,   ctime: Mon, 10 Oct 2011 23:24:11 GMT,   birthtime: Mon, 10 Oct 2011 23:24:11 GMT } ```\n\n`bigint` version:\n\n```console BigIntStats {   dev: 2114n,   ino: 48064969n,   mode: 33188n,   nlink: 1n,   uid: 85n,   gid: 100n,   rdev: 0n,   size: 527n,   blksize: 4096n,   blocks: 8n,   atimeMs: 1318289051000n,   mtimeMs: 1318289051000n,   ctimeMs: 1318289051000n,   birthtimeMs: 1318289051000n,   atimeNs: 1318289051000000000n,   mtimeNs: 1318289051000000000n,   ctimeNs: 1318289051000000000n,   birthtimeNs: 1318289051000000000n,   atime: Mon, 10 Oct 2011 23:24:11 GMT,   mtime: Mon, 10 Oct 2011 23:24:11 GMT,   ctime: Mon, 10 Oct 2011 23:24:11 GMT,   birthtime: Mon, 10 Oct 2011 23:24:11 GMT } ```","properties":[{"name":"dev","required":true,"schema":{"type":"number"}},{"name":"ino","required":true,"schema":{"type":"number"}},{"name":"mode","required":true,"schema":{"type":"number"}},{"name":"nlink","required":true,"schema":{"type":"number"}},{"name":"uid","required":true,"schema":{"type":"number"}},{"name":"gid","required":true,"schema":{"type":"number"}},{"name":"rdev","required":true,"schema":{"type":"number"}},{"name":"size","required":true,"schema":{"type":"number"}},{"name":"blksize","required":true,"schema":{"type":"number"}},{"name":"blocks","required":true,"schema":{"type":"number"}},{"name":"atimeMs","required":true,"schema":{"type":"number"}},{"name":"mtimeMs","required":true,"schema":{"type":"number"}},{"name":"ctimeMs","required":true,"schema":{"type":"number"}},{"name":"birthtimeMs","required":true,"schema":{"type":"number"}},{"name":"atime","required":true,"schema":{"type":"string"}},{"name":"mtime","required":true,"schema":{"type":"string"}},{"name":"ctime","required":true,"schema":{"type":"string"}},{"name":"birthtime","required":true,"schema":{"type":"string"}}],"type":"object"},"typeCoverage":0,"rawType":"Stats","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"hDfzMRGltQCcUDHA","name":"PathMetaData","slug":"path-meta-data","relativePathFromProjectRoot":"/tools/types/code-types/src/TextJson.ts","srcFileId":"/TextJson","operationFolderName":"code-types","relativeFilePathFromSrc":"/TextJson.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","description":"All interesting metadata about any path (files and folders)","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","additionalProperties":false,"properties":{"relativePathFromProjectRoot":{"type":"string","description":"relative file or folder path from the project root"},"mainComment":{"$ref":"#/definitions/TsComment","description":"a comment about this file or folder. Can be parsed from:\n- an associated markdown file and/or the top of the file (If they're both there, they're concatenated)\n- for folders, looks for README.md"},"fullFileName":{"type":"string","description":"filename including extension, if the path is not a folder"},"isFolder":{"type":"boolean"},"updatedAt":{"type":"number","description":"unix time this file was last updated (or for folders: unix time of last modifiation of any file in this folder, recursively)\n\nTODO: renames also count as updates, I guess. Needs to be clear!"},"createdAt":{"type":"number","description":"unix time this file was created (or for folders: unix time of creation of the first file in this folder)\n\nTODO: figure out if we can get the creation date of the folder itself?"},"sizes":{"$ref":"#/definitions/FolderSummary","description":"categorized sizes for the file(s)"}},"required":["createdAt","isFolder","relativePathFromProjectRoot","sizes","updatedAt"],"description":"All interesting metadata about any path (files and folders)"},"simplifiedSchema":{"description":"All interesting metadata about any path (files and folders)","properties":[{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"mainComment","required":false,"schema":{"description":"comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\nspecial line prefixes:\n- TODO:\n- DISCUSSION:\n- IDEA:\n- LATER:\n- NB:\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!","properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"comment","required":true,"schema":{"description":"a string that is known to contain markdown.","type":"string"}},{"name":"parameters","required":true,"schema":{"properties":[],"type":"object"}},{"name":"types","required":true,"schema":{"description":"These are the type indicators that were found in this single or multiline comment. Can be multiple.","items":[{"schema":{"enum":["todo","discussion","idea","later","nb"],"type":"string"},"name":"CommentType"}],"type":"array"}},{"name":"firstLine","required":true,"schema":{"description":"first line of the comment","type":"number"}},{"name":"lastLine","required":true,"schema":{"description":"last line of the comment","type":"number"}},{"name":"statementName","required":false,"schema":{"description":"statement name the comment belongs to","type":"string"}},{"name":"rawStatement","required":false,"schema":{"description":"raw statement text the comment belongs to","type":"string"}}],"type":"object"}},{"name":"fullFileName","required":false,"schema":{"description":"filename including extension, if the path is not a folder","type":"string"}},{"name":"isFolder","required":true,"schema":{"type":"boolean"}},{"name":"updatedAt","required":true,"schema":{"description":"unix time this file was last updated (or for folders: unix time of last modifiation of any file in this folder, recursively)\n\nTODO: renames also count as updates, I guess. Needs to be clear!","type":"number"}},{"name":"createdAt","required":true,"schema":{"description":"unix time this file was created (or for folders: unix time of creation of the first file in this folder)\n\nTODO: figure out if we can get the creation date of the folder itself?","type":"number"}},{"name":"sizes","required":true,"schema":{"description":"objective size measurements of all files in a folder\n\nsummary for a folder should contain file-summaries for different filetypes and an overal file summary","properties":[{"name":"size","required":true,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"textSize","required":true,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"dataSize","required":true,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"codeSize","required":true,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}}],"type":"object"}}],"type":"object"},"typeCoverage":0,"rawType":"PathMetaData","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"phnGyYhYOkFdeHuJ","name":"TsComment","slug":"ts-comment","relativePathFromProjectRoot":"/tools/types/code-types/src/TextJson.ts","srcFileId":"/TextJson","operationFolderName":"code-types","relativeFilePathFromSrc":"/TextJson.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","description":"comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\nspecial line prefixes:\n- TODO:\n- DISCUSSION:\n- IDEA:\n- LATER:\n- NB:\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"relativeOperationBasePathFromProjectRoot":{"type":"string","description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript"},"relativeFilePathFromSrc":{"type":"string","description":"relative file path from the operation src\n\ne.g. general.ts"},"srcFileId":{"type":"string","description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\""},"operationName":{"type":"string","description":"operation package.json name"},"operationFolderName":{"type":"string","description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)"},"relativePathFromProjectRoot":{"type":"string","description":"relative file or folder path from the project root"},"id":{"type":"string","description":"unique id of the model"},"name":{"type":"string","description":"name (identifier) of the model"},"slug":{"type":"string","description":"kebab-case variant of the name"},"comment":{"$ref":"#/definitions/Markdown","description":"the content of the comment in markdown, without frontmatter"},"parameters":{"$ref":"#/definitions/FrontMatter","description":"parameters destructured from the frontmatter of the parsed markdown (if comment is not a oneliner, otherwise it'll be empty)"},"types":{"type":"array","items":{"$ref":"#/definitions/CommentType"},"description":"These are the type indicators that were found in this single or multiline comment. Can be multiple."},"firstLine":{"type":"number","description":"first line of the comment"},"lastLine":{"type":"number","description":"last line of the comment"},"statementName":{"type":"string","description":"statement name the comment belongs to"},"rawStatement":{"type":"string","description":"raw statement text the comment belongs to"}},"required":["comment","firstLine","id","lastLine","name","operationFolderName","parameters","relativeFilePathFromSrc","relativeOperationBasePathFromProjectRoot","relativePathFromProjectRoot","slug","srcFileId","types"],"additionalProperties":false,"description":"comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\nspecial line prefixes:\n- TODO:\n- DISCUSSION:\n- IDEA:\n- LATER:\n- NB:\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!"},"simplifiedSchema":{"description":"comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\nspecial line prefixes:\n- TODO:\n- DISCUSSION:\n- IDEA:\n- LATER:\n- NB:\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!","properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"comment","required":true,"schema":{"description":"a string that is known to contain markdown.","type":"string"}},{"name":"parameters","required":true,"schema":{"properties":[],"type":"object"}},{"name":"types","required":true,"schema":{"description":"These are the type indicators that were found in this single or multiline comment. Can be multiple.","items":[{"schema":{"enum":["todo","discussion","idea","later","nb"],"type":"string"},"name":"CommentType"}],"type":"array"}},{"name":"firstLine","required":true,"schema":{"description":"first line of the comment","type":"number"}},{"name":"lastLine","required":true,"schema":{"description":"last line of the comment","type":"number"}},{"name":"statementName","required":false,"schema":{"description":"statement name the comment belongs to","type":"string"}},{"name":"rawStatement","required":false,"schema":{"description":"raw statement text the comment belongs to","type":"string"}}],"type":"object"},"typeCoverage":0,"rawType":"TsComment","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"KmJJBArUJHGPNHxk","name":"Markdown","slug":"markdown","relativePathFromProjectRoot":"/tools/types/code-types/src/TextJson.ts","srcFileId":"/TextJson","operationFolderName":"code-types","relativeFilePathFromSrc":"/TextJson.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","description":"a string that is known to contain markdown.","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"string","description":"a string that is known to contain markdown."},"simplifiedSchema":{"description":"a string that is known to contain markdown.","type":"string"},"typeCoverage":0,"rawType":"Markdown","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"PqtgfnHBkxdVajrl","name":"CommentType","slug":"comment-type","relativePathFromProjectRoot":"/tools/types/code-types/src/TextJson.ts","srcFileId":"/TextJson","operationFolderName":"code-types","relativeFilePathFromSrc":"/TextJson.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"string","enum":["todo","discussion","idea","later","nb"]},"simplifiedSchema":{"enum":["todo","discussion","idea","later","nb"],"type":"string"},"typeCoverage":0,"rawType":"CommentType","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"XWCZgGgyvqbrGBey","name":"FolderSummary","slug":"folder-summary","relativePathFromProjectRoot":"/tools/types/code-types/src/TextJson.ts","srcFileId":"/TextJson","operationFolderName":"code-types","relativeFilePathFromSrc":"/TextJson.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","description":"objective size measurements of all files in a folder\n\nsummary for a folder should contain file-summaries for different filetypes and an overal file summary","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"size":{"$ref":"#/definitions/SizeSummary"},"textSize":{"$ref":"#/definitions/SizeSummary"},"dataSize":{"$ref":"#/definitions/SizeSummary"},"codeSize":{"$ref":"#/definitions/SizeSummary"}},"required":["size","textSize","dataSize","codeSize"],"additionalProperties":false,"description":"objective size measurements of all files in a folder\n\nsummary for a folder should contain file-summaries for different filetypes and an overal file summary"},"simplifiedSchema":{"description":"objective size measurements of all files in a folder\n\nsummary for a folder should contain file-summaries for different filetypes and an overal file summary","properties":[{"name":"size","required":true,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"textSize","required":true,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"dataSize","required":true,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"codeSize","required":true,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}}],"type":"object"},"typeCoverage":0,"rawType":"FolderSummary","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"KPixjOIYsVAvAyQZ","name":"SizeSummary","slug":"size-summary","relativePathFromProjectRoot":"/tools/types/code-types/src/TextJson.ts","srcFileId":"/TextJson","operationFolderName":"code-types","relativeFilePathFromSrc":"/TextJson.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","description":"type interface that can be used to summarize multiple files","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"numberOfFiles":{"type":"number","description":"if this is about multiple files, the number of files is specified here"},"characters":{"type":"number","description":"amount of characters"},"lines":{"type":"number","description":"amount of lines"},"bytes":{"type":"number","description":"amount of bytes"},"linesPerFile":{"type":"number","description":"rounded, amount of lines per file (averaged)"},"charactersPerfLine":{"type":"number","description":"rounded, amount of characters per line (averaged)"},"bytesPerCharacter":{"type":"number","description":"rounded, amount of bytes per character"}},"required":["characters","lines","bytes","linesPerFile","charactersPerfLine","bytesPerCharacter"],"additionalProperties":false,"description":"type interface that can be used to summarize multiple files"},"simplifiedSchema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"},"typeCoverage":0,"rawType":"SizeSummary","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}}]