[{"id":"ZEyhmXBsAWORPsWS","commentsInside":[],"rawText":" (parameterName: string) => {\n  const generatedPatterns = parameterNames\n    .filter(\n      (x) => x.contentType.length === 1 && x.contentType[0] === \"generated\"\n    )\n    .map((x) => x.pattern);\n  // TODO: match the patterns against the name to find match\n}","name":"isGeneratedParameterName","slug":"is-generated-parameter-name","parameters":[{"name":"parameterName","schema":{"type":"string"},"simplifiedSchema":{"type":"string"},"required":true}],"description":"","returnType":{"rawType":"void","typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":false,"isEnumLiteral":false},"maxIndentationDepth":3,"relativePathFromProjectRoot":"/tools/types/code-types/src/ParameterName.ts","srcFileId":"/ParameterName","operationFolderName":"code-types","relativeFilePathFromSrc":"/ParameterName.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","size":{"characters":258,"lines":8,"bytes":258,"bytesPerCharacter":1,"charactersPerfLine":32.25,"linesPerFile":8,"numberOfFiles":1}},{"id":"ebgTDspktqicAMsV","commentsInside":[],"rawText":" (parameterName: string) => {\n  // todo: Match parameterName against all patterns in the ParameterName array until it finds one that matches\n  // 1) replace all patternmatch words with the %x\n  // 2) whatever's left, make sure to distinguish the descriptor from the type indicator (e.g. authorName indicates a nametype which is a string, while the descriptor is an author)\n  // 3) return some object that describes all the different parts individually and with that the whole name together. It can then be used in the admin UI to explain any type interface\n}","name":"getParameterContentType","slug":"get-parameter-content-type","parameters":[{"name":"parameterName","schema":{"type":"string"},"simplifiedSchema":{"type":"string"},"required":true}],"description":"","returnType":{"rawType":"void","typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":false,"isEnumLiteral":false},"maxIndentationDepth":1,"relativePathFromProjectRoot":"/tools/types/code-types/src/ParameterName.ts","srcFileId":"/ParameterName","operationFolderName":"code-types","relativeFilePathFromSrc":"/ParameterName.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","size":{"characters":558,"lines":6,"bytes":558,"bytesPerCharacter":1,"charactersPerfLine":93,"linesPerFile":6,"numberOfFiles":1}}]