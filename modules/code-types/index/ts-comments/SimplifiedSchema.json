[{"id":"IeMYYcBKHawyQIUH","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/tools/types/code-types/src/SimplifiedSchema.ts","srcFileId":"/SimplifiedSchema","operationFolderName":"code-types","relativeFilePathFromSrc":"/SimplifiedSchema.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/code-types","operationName":"code-types","comment":"JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form","rawStatement":"export type SimplifiedSchema = {\n  /**\n   * - string\n   * - number\n   * - boolean\n   * - object\n   * - array\n   * - null\n   *\n   * NB: Omit doesn't work for the indexer! This would be the type: Omit<JSONSchema7TypeName, \"integer\">;\n   */\n  type: SimplifiedSchemaType;\n\n  description?: string;\n  /** sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here */\n  circularRefName?: string;\n  /** in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think */\n  enum?: JSONSchema7Type[];\n  /** in case of object, this will always appear */\n  properties?: SimplifiedSchemaProperty[];\n  /** in case of arrays, this will always appear */\n  items?: SimplifiedSchemaItem[];\n};","parameters":{},"types":[],"firstLine":10,"lastLine":19}]