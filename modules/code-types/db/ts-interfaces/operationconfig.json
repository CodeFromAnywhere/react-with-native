{
  "createdAt": 1667684667123,
  "updatedAt": 1667684667123,
  "deletedAt": 0,
  "createdFirstAt": 1667684667123,
  "id": "operationconfig",
  "name": "OperationConfig",
  "slug": "operationconfig",
  "operationRelativeTypescriptFilePath": "src/OperationConfig.ts",
  "hasGeneric": false,
  "isExported": true,
  "rawText": "\n\n/**\n * ---\n * operationRelativePath: OPERATION.md\n * isOperationIndex: true\n * ---\n *\n * anything configurable about the operation.\n *\n * Of course we could make this live in operation.json or as a prop in package.json, but it would be better to make it work with a markdown file.\n *\n * Let's try to use OPERATION.md\n *\n * TODO: Make this work and make sure the operationconfig is parsed from this file using `db.get(\"OperationConfig\")` as per convention.\n *\n */\nexport interface OperationConfig extends MarkdownModelType {\n  /**\n   *\n   * Sometimes you are using function in a UI, which cannot be inferred with imports because they are used indirectly via an api. Here you can specify which operations on the backend are needed for an operation (ui mostly)\n   *\n   * This array is simply a list of operation names needed for this operation that are not imported.\n   *\n   * NB: no need to specify things here that you also import in this operation, because these are already automatically detected.\n   *\n   */\n  indirectDependencies?: string[];\n\n  /**\n   * A list of authors\n   *\n   * Should be used to create bundle AUTHORS.md\n   */\n  authors?: string[];\n\n  /**\n   * A list of contributors\n   *\n   * Can be used to create bundle CONTRIBUTORS.md\n   */\n  contributors?: string[];\n\n  /**\n   * one-line explanation of what the operation does (no markdown)\n   */\n  shortDescriptionText?: string;\n\n  /**\n   * Any descriptions in markdown format\n   *\n   * - Markdown description of what the operation does.\n   * - Installation instructions, if it is possible\n   * - Usage instructions (with example), if available\n   *\n   * This is the main content of the markdown file\n   */\n  markdown: string;\n}",
  "extensions": [
    "MarkdownModelType"
  ],
  "isOperationIndex": true,
  "operationStorageLocationRelativeFilePath": "OPERATION.md",
  "description": "\nanything configurable about the operation.\n\nOf course we could make this live in operation.json or as a prop in package.json, but it would be better to make it work with a markdown file.\n\nLet's try to use OPERATION.md\n\nTODO: Make this work and make sure the operationconfig is parsed from this file using `db.get(\"OperationConfig\")` as per convention.",
  "dbStorageMethod": "markdown",
  "isDbModel": true,
  "commentsInside": [],
  "type": {
    "typeDefinition": {
      "type": "object",
      "properties": {
        "createdAt": {
          "$ref": "#/definitions/CreatedAt"
        },
        "updatedAt": {
          "$ref": "#/definitions/UpdatedAt"
        },
        "deletedAt": {
          "$ref": "#/definitions/DeletedAt"
        },
        "createdFirstAt": {
          "$ref": "#/definitions/CreatedFirstAt"
        },
        "operationName": {
          "type": [
            "null",
            "string"
          ],
          "description": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you"
        },
        "projectRelativePath": {
          "type": "string",
          "description": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you"
        },
        "operationRelativePath": {
          "type": "string",
          "description": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you"
        },
        "id": {
          "$ref": "#/definitions/Id"
        },
        "name": {
          "type": "string",
          "description": "filename (slugified)"
        },
        "slug": {
          "type": "string",
          "description": "filename (slugified)"
        },
        "markdown": {
          "type": "string",
          "description": "Any descriptions in markdown format\n\n- Markdown description of what the operation does.\n- Installation instructions, if it is possible\n- Usage instructions (with example), if available\n\nThis is the main content of the markdown file"
        },
        "categoryStackCalculated": {
          "$ref": "#/definitions/CategoryStack",
          "description": "Taken from the location in the folder of the db-model.\n\nNB: Changing this value when updating/upserting, changes where the item is located!"
        },
        "indirectDependencies": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Sometimes you are using function in a UI, which cannot be inferred with imports because they are used indirectly via an api. Here you can specify which operations on the backend are needed for an operation (ui mostly)\n\nThis array is simply a list of operation names needed for this operation that are not imported.\n\nNB: no need to specify things here that you also import in this operation, because these are already automatically detected."
        },
        "authors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of authors\n\nShould be used to create bundle AUTHORS.md"
        },
        "contributors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of contributors\n\nCan be used to create bundle CONTRIBUTORS.md"
        },
        "shortDescriptionText": {
          "type": "string",
          "description": "one-line explanation of what the operation does (no markdown)"
        }
      },
      "required": [
        "categoryStackCalculated",
        "createdAt",
        "createdFirstAt",
        "deletedAt",
        "id",
        "markdown",
        "name",
        "operationName",
        "projectRelativePath",
        "slug",
        "updatedAt"
      ],
      "additionalProperties": {
        "anyOf": [
          {
            "description": "This kind of overwrites frontmatter, but it is needed because there need to be models attached to the markdown model sometimes."
          },
          {
            "not": {}
          },
          {
            "$ref": "#/definitions/Id"
          },
          {
            "not": {}
          },
          {
            "type": [
              "string",
              "number",
              "null",
              "boolean",
              "array"
            ]
          }
        ]
      },
      "description": "--- operationRelativePath: OPERATION.md isOperationIndex: true\n---\n\nanything configurable about the operation.\n\nOf course we could make this live in operation.json or as a prop in package.json, but it would be better to make it work with a markdown file.\n\nLet's try to use OPERATION.md\n\nTODO: Make this work and make sure the operationconfig is parsed from this file using `db.get(\"OperationConfig\")` as per convention."
    },
    "simplifiedSchema": {
      "fullComment": "--- operationRelativePath: OPERATION.md isOperationIndex: true\n---\n\nanything configurable about the operation.\n\nOf course we could make this live in operation.json or as a prop in package.json, but it would be better to make it work with a markdown file.\n\nLet's try to use OPERATION.md\n\nTODO: Make this work and make sure the operationconfig is parsed from this file using `db.get(\"OperationConfig\")` as per convention.",
      "todo": "Make this work and make sure the operationconfig is parsed from this file using `db.get(\"OperationConfig\")` as per convention.",
      "properties": [
        {
          "name": "createdAt",
          "required": true,
          "schema": {
            "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
            "type": "number"
          }
        },
        {
          "name": "updatedAt",
          "required": true,
          "schema": {
            "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
            "type": "number"
          }
        },
        {
          "name": "deletedAt",
          "required": true,
          "schema": {
            "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
            "type": "number"
          }
        },
        {
          "name": "createdFirstAt",
          "required": true,
          "schema": {
            "fullComment": "in some cases, data can be created before it was created in our system. In this case, use CreatedFirstAt if this information is important.\n\nTime\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
            "type": "number"
          }
        },
        {
          "name": "operationName",
          "required": true,
          "schema": {
            "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
            "type": "null"
          }
        },
        {
          "name": "projectRelativePath",
          "required": true,
          "schema": {
            "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
            "type": "string"
          }
        },
        {
          "name": "operationRelativePath",
          "required": false,
          "schema": {
            "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
            "type": "string"
          }
        },
        {
          "name": "id",
          "required": true,
          "schema": {
            "fullComment": "Should be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
            "type": "string"
          }
        },
        {
          "name": "name",
          "required": true,
          "schema": {
            "fullComment": "filename (slugified)",
            "type": "string"
          }
        },
        {
          "name": "slug",
          "required": true,
          "schema": {
            "fullComment": "filename (slugified)",
            "type": "string"
          }
        },
        {
          "name": "markdown",
          "required": true,
          "schema": {
            "fullComment": "Any descriptions in markdown format\n\n- Markdown description of what the operation does.\n- Installation instructions, if it is possible\n- Usage instructions (with example), if available\n\nThis is the main content of the markdown file",
            "type": "string"
          }
        },
        {
          "name": "categoryStackCalculated",
          "required": true,
          "schema": {
            "fullComment": "Taken from the location in the folder of the db-model.\n\nNB: Changing this value when updating/upserting, changes where the item is located!\n\n",
            "nb": "Changing this value when updating/upserting, changes where the item is located!",
            "items": [
              {
                "schema": {
                  "type": "string"
                },
                "name": null
              }
            ],
            "type": "array"
          }
        },
        {
          "name": "indirectDependencies",
          "required": false,
          "schema": {
            "fullComment": "Sometimes you are using function in a UI, which cannot be inferred with imports because they are used indirectly via an api. Here you can specify which operations on the backend are needed for an operation (ui mostly)\n\nThis array is simply a list of operation names needed for this operation that are not imported.\n\nNB: no need to specify things here that you also import in this operation, because these are already automatically detected.",
            "nb": "no need to specify things here that you also import in this operation, because these are already automatically detected.",
            "items": [
              {
                "schema": {
                  "type": "string"
                },
                "name": null
              }
            ],
            "type": "array"
          }
        },
        {
          "name": "authors",
          "required": false,
          "schema": {
            "fullComment": "A list of authors\n\nShould be used to create bundle AUTHORS.md",
            "items": [
              {
                "schema": {
                  "type": "string"
                },
                "name": null
              }
            ],
            "type": "array"
          }
        },
        {
          "name": "contributors",
          "required": false,
          "schema": {
            "fullComment": "A list of contributors\n\nCan be used to create bundle CONTRIBUTORS.md",
            "items": [
              {
                "schema": {
                  "type": "string"
                },
                "name": null
              }
            ],
            "type": "array"
          }
        },
        {
          "name": "shortDescriptionText",
          "required": false,
          "schema": {
            "fullComment": "one-line explanation of what the operation does (no markdown)",
            "type": "string"
          }
        }
      ],
      "type": "object"
    },
    "typeCoverage": 0,
    "rawType": "OperationConfig",
    "isArray": false,
    "isEnum": false,
    "isEnumLiteral": false,
    "isObject": false,
    "isPrimitive": false
  }
}