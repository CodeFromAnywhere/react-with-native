{
  "createdAt": 1667684660519,
  "updatedAt": 1667684660519,
  "deletedAt": 0,
  "createdFirstAt": 1667684660519,
  "id": "explorationdetails",
  "name": "ExplorationDetails",
  "slug": "explorationdetails",
  "operationRelativeTypescriptFilePath": "src/FolderExploration.ts",
  "hasGeneric": false,
  "isExported": true,
  "rawText": "\n\nexport type ExplorationDetails = {\n  success?: boolean;\n  response?: string;\n  //\n  markdown?: MarkdownParse;\n  pathMetaData?: PathMetaData;\n  operationIndexes?: OperationIndex[];\n  index: TsInterface[];\n} & Partial<TypescriptIndex>;",
  "extensions": [],
  "isOperationIndex": false,
  "description": "",
  "isDbModel": false,
  "commentsInside": [],
  "type": {
    "typeDefinition": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "tsBuildErrors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TsBuildError"
          }
        },
        "tsLintWarnings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TsLintWarning"
          }
        },
        "tsFunctions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TsFunction"
          }
        },
        "tsVariables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TsVariable"
          }
        },
        "tsInterfaces": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TsInterface"
          }
        },
        "tsComments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TsComment"
          }
        },
        "tsImports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TsImport"
          }
        },
        "tsExports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TsExport"
          }
        },
        "success": {
          "type": "boolean"
        },
        "response": {
          "type": "string"
        },
        "markdown": {
          "$ref": "#/definitions/MarkdownParse"
        },
        "pathMetaData": {
          "$ref": "#/definitions/PathMetaData"
        },
        "operationIndexes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OperationIndex"
          }
        },
        "index": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TsInterface"
          }
        }
      },
      "required": [
        "index"
      ]
    },
    "simplifiedSchema": {
      "properties": [
        {
          "name": "tsBuildErrors",
          "required": false,
          "schema": {
            "items": [
              {
                "schema": {
                  "fullComment": "",
                  "properties": [
                    {
                      "name": "operationName",
                      "required": true,
                      "schema": {
                        "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
                        "type": "null"
                      }
                    },
                    {
                      "name": "projectRelativePath",
                      "required": true,
                      "schema": {
                        "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
                        "type": "string"
                      }
                    },
                    {
                      "name": "operationRelativePath",
                      "required": false,
                      "schema": {
                        "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
                        "type": "string"
                      }
                    },
                    {
                      "name": "id",
                      "required": true,
                      "schema": {
                        "fullComment": "unique id of the model",
                        "type": "string"
                      }
                    },
                    {
                      "name": "name",
                      "required": true,
                      "schema": {
                        "fullComment": "name (identifier) of the model",
                        "type": "string"
                      }
                    },
                    {
                      "name": "slug",
                      "required": true,
                      "schema": {
                        "fullComment": "kebab-case variant of the name",
                        "type": "string"
                      }
                    },
                    {
                      "name": "operationRelativeTypescriptFilePath",
                      "required": true,
                      "schema": {
                        "fullComment": "relative file path from the operation that this indexed instance is referencing to\n\ne.g. src/general.ts\n\n(no preceding slash)",
                        "type": "string"
                      }
                    },
                    {
                      "name": "line",
                      "required": false,
                      "schema": {
                        "type": "number"
                      }
                    },
                    {
                      "name": "character",
                      "required": false,
                      "schema": {
                        "type": "number"
                      }
                    },
                    {
                      "name": "message",
                      "required": true,
                      "schema": {
                        "type": "string"
                      }
                    }
                  ],
                  "type": "object"
                },
                "name": "TsBuildError"
              }
            ],
            "type": "array"
          }
        },
        {
          "name": "tsLintWarnings",
          "required": false,
          "schema": {
            "items": [
              {
                "schema": {
                  "fullComment": "",
                  "properties": [
                    {
                      "name": "operationName",
                      "required": true,
                      "schema": {
                        "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
                        "type": "null"
                      }
                    },
                    {
                      "name": "projectRelativePath",
                      "required": true,
                      "schema": {
                        "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
                        "type": "string"
                      }
                    },
                    {
                      "name": "operationRelativePath",
                      "required": false,
                      "schema": {
                        "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
                        "type": "string"
                      }
                    },
                    {
                      "name": "id",
                      "required": true,
                      "schema": {
                        "fullComment": "unique id of the model",
                        "type": "string"
                      }
                    },
                    {
                      "name": "name",
                      "required": true,
                      "schema": {
                        "fullComment": "name (identifier) of the model",
                        "type": "string"
                      }
                    },
                    {
                      "name": "slug",
                      "required": true,
                      "schema": {
                        "fullComment": "kebab-case variant of the name",
                        "type": "string"
                      }
                    },
                    {
                      "name": "operationRelativeTypescriptFilePath",
                      "required": true,
                      "schema": {
                        "fullComment": "relative file path from the operation that this indexed instance is referencing to\n\ne.g. src/general.ts\n\n(no preceding slash)",
                        "type": "string"
                      }
                    },
                    {
                      "name": "line",
                      "required": true,
                      "schema": {
                        "type": "number"
                      }
                    },
                    {
                      "name": "character",
                      "required": true,
                      "schema": {
                        "type": "number"
                      }
                    },
                    {
                      "name": "message",
                      "required": true,
                      "schema": {
                        "type": "string"
                      }
                    }
                  ],
                  "type": "object"
                },
                "name": "TsLintWarning"
              }
            ],
            "type": "array"
          }
        },
        {
          "name": "tsFunctions",
          "required": false,
          "schema": {
            "items": [
              {
                "schema": {
                  "fullComment": "--- dbStorageMethod: jsonSingle\n---\n\nInterface for arrow functions and normal functions",
                  "properties": [
                    {
                      "name": "operationName",
                      "required": true,
                      "schema": {
                        "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
                        "type": "null"
                      }
                    },
                    {
                      "name": "projectRelativePath",
                      "required": true,
                      "schema": {
                        "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
                        "type": "string"
                      }
                    },
                    {
                      "name": "operationRelativePath",
                      "required": false,
                      "schema": {
                        "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
                        "type": "string"
                      }
                    },
                    {
                      "name": "id",
                      "required": true,
                      "schema": {
                        "fullComment": "unique id of the model",
                        "type": "string"
                      }
                    },
                    {
                      "name": "name",
                      "required": true,
                      "schema": {
                        "fullComment": "name (identifier) of the model",
                        "type": "string"
                      }
                    },
                    {
                      "name": "slug",
                      "required": true,
                      "schema": {
                        "fullComment": "kebab-case variant of the name",
                        "type": "string"
                      }
                    },
                    {
                      "name": "operationRelativeTypescriptFilePath",
                      "required": true,
                      "schema": {
                        "fullComment": "relative file path from the operation that this indexed instance is referencing to\n\ne.g. src/general.ts\n\n(no preceding slash)",
                        "type": "string"
                      }
                    },
                    {
                      "name": "canCache",
                      "required": false,
                      "schema": {
                        "fullComment": "whether or not the function is can be cached (relies on cache invalidation)",
                        "type": "boolean"
                      }
                    },
                    {
                      "name": "isGetApi",
                      "required": false,
                      "schema": {
                        "fullComment": "if true, the function will get the `server`.js context as its only argument, and it's directly exposed as GET api. Endpoint path will be inferred from the function name\n\nFor this to be indexed to `true`, you need to call the function `abcXyzGetApi` whhere `abcXyz` can be anything.",
                        "type": "boolean"
                      }
                    },
                    {
                      "name": "isPostApi",
                      "required": false,
                      "schema": {
                        "fullComment": "If true, the function will get the `server`.js context as its only argument, and it's directly exposed as POST api. Endpoint path will be inferred from the function name\n\nFor this to be indexed to `true`, you need to call the function `abcXyzPostApi` where `abcXyz` can be anything.",
                        "type": "boolean"
                      }
                    },
                    {
                      "name": "isExported",
                      "required": true,
                      "schema": {
                        "fullComment": "The function is immediately exported upon creation. If the os dev tools are being used, this means it is also exported from the operation",
                        "type": "boolean"
                      }
                    },
                    {
                      "name": "isApiExposed",
                      "required": true,
                      "schema": {
                        "fullComment": "for all exported functions in node operations, true by default false for others\n\ncan be overwritten using frontmatter",
                        "type": "boolean"
                      }
                    },
                    {
                      "name": "publicAuthorization",
                      "required": true,
                      "schema": {
                        "fullComment": "The default authorization that is set level applies to users without any specific authorization (granted to everyone).\n\nshould be indexed based on doccomment containing `AUTH-PUBLIC: [execute], [read], [search]`",
                        "items": [
                          {
                            "schema": {
                              "enum": [
                                "execute",
                                "write-create",
                                "write-update",
                                "write-delete",
                                "read",
                                "search"
                              ],
                              "fullComment": "`AuthorizationLevel` is a single Enum that can apply to privacy and authorization of text, functions, and data.\n\nFor files (ts, md, json, etc...):\n\n- write-create\n- write-update\n- write-delete\n- read\n- search (only search index)\n\nFor db model data subsets:\n\n- write-update\n- write-create\n- write-delete\n- read\n- search (only search index)\n\nFor functions:\n- execute\n\nFor functions, interfaces, variables:\n\n- read (reading docs only. for source, you need to provide the file auth)\n- search (only search index)",
                              "type": "string"
                            },
                            "name": "AuthorizationLevel"
                          }
                        ],
                        "type": "array"
                      }
                    },
                    {
                      "name": "runEveryPeriod",
                      "required": false,
                      "schema": {
                        "enum": [
                          "minute",
                          "5-minutes",
                          "quarter-hour",
                          "hour",
                          "6-hours",
                          "midnight",
                          "week",
                          "month",
                          "3-months",
                          "year"
                        ],
                        "fullComment": "You can specify `runEveryPeriod` in your frontmatter of a function. This will set `runEveryPeriod` for the TsFunction. This is used by `function-server`: it will execute CRON-jobs that run these things on those periods.\n\nWill only work if the function takes no arguments.\n\nUsed to specify functions that need to run every time with a specific interval\n\nAll times are at at the server timezone time\n\n- `minute`: every minute at 0 seconds\n- `5-mintues`: every 5 minutes, starting at the first minute of the hour\n- `quarter-hour`: every 15 minutes, starting at the first minute of the hour\n- `hour`: every hour, starting at the first minute of the hour\n- `6-hours`: every 6 hours, starting at midnight\n- `midnight`: every midnight (00:00:00)\n- `week`: every week at sundaynight (sunday, 1 second after 23:59:59 PM)\n- `month`: at the first second of the first day of the month (0:00:00)\n- `3-months`: every start of the quarter: january 1st (0:00:00), april 1st, july 1st, october 1st\n- `year`: every new year at january 1st at 0:00:00",
                        "type": "string"
                      }
                    },
                    {
                      "name": "description",
                      "required": false,
                      "schema": {
                        "fullComment": "parsed comment from doc-comment\n\na string that is known to contain markdown.",
                        "type": "string"
                      }
                    },
                    {
                      "name": "rawText",
                      "required": false,
                      "schema": {
                        "fullComment": "raw text of the function",
                        "type": "string"
                      }
                    },
                    {
                      "name": "commentsInside",
                      "required": true,
                      "schema": {
                        "fullComment": "all comments found in a function and the node that they belong to",
                        "items": [
                          {
                            "schema": {
                              "fullComment": "comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!",
                              "nb": "with the current setup we can also parse `.md` files as being a TsComment, keep it that way!",
                              "properties": [
                                {
                                  "name": "operationName",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
                                    "type": "null"
                                  }
                                },
                                {
                                  "name": "projectRelativePath",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "operationRelativePath",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "id",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "unique id of the model",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "name",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "name (identifier) of the model",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "slug",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "kebab-case variant of the name",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "operationRelativeTypescriptFilePath",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "relative file path from the operation that this indexed instance is referencing to\n\ne.g. src/general.ts\n\n(no preceding slash)",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "comment",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "the content of the comment in markdown, without frontmatter\n\na string that is known to contain markdown.",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "parameters",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "parameters destructured from the frontmatter of the parsed markdown (if comment is not a oneliner, otherwise it'll be empty)\n\nOur version of frontmatter is a bit simpler than regular frontmatter\n\nNot sure if this is a good idea, but it keeps it simple for our OS\n\nall values parse in a similar way to csv\n\nmake sure that you use quotes if you want to store a string with commas, because commas in a parameter indicate that it is a string array\n\nNB: string arrays are comma separated values, where you can put values with special characters in between quotes",
                                    "nb": "string arrays are comma separated values, where you can put values with special characters in between quotes",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "types",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "These are the type indicators that were found in this single or multiline comment. Can be multiple.",
                                    "items": [
                                      {
                                        "schema": {
                                          "enum": [
                                            "todo",
                                            "discussion",
                                            "idea",
                                            "later",
                                            "nb",
                                            "title",
                                            "section",
                                            "description"
                                          ],
                                          "fullComment": "special line prefixes:\n\n**Developer related comments**\n\n- TODO: for developer to know what to do\n- DISCUSSION: for developer to state that discussion is needed\n- IDEA: for developer to state ideas\n- LATER: for developer to mark as thing that needs to be done later\n- NB: for developer to add a note\n\n**Form related comments**\n\n- TITLE: if available, will be used as title of form input (overwrites humanCase version of the property-name itself in that case)\n- SECTION: start a new section in the form from this point, the value behind here can be the title\n- DESCRIPTION: if available, will be used as description of the form input",
                                          "type": "string"
                                        },
                                        "name": "CommentType"
                                      }
                                    ],
                                    "type": "array"
                                  }
                                },
                                {
                                  "name": "firstLine",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "first line of the comment",
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "lastLine",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "last line of the comment",
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "statementName",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "statement name the comment belongs to",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "rawStatement",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "raw statement text the comment belongs to",
                                    "type": "string"
                                  }
                                }
                              ],
                              "type": "object"
                            },
                            "name": "TsComment"
                          }
                        ],
                        "type": "array"
                      }
                    },
                    {
                      "name": "returnType",
                      "required": true,
                      "schema": {
                        "fullComment": "return type JSON Schema definition\n\nall info that should always be collected when indexing any type interface",
                        "properties": [
                          {
                            "name": "typeDefinition",
                            "required": false,
                            "schema": {
                              "fullComment": "JSON schema definition of a type interface\n\n\nSome info about the Schema:\n\n- if the type is an object, there should be properties\n- if the type is an array, there should be items\n\n\n\n",
                              "properties": [
                                {
                                  "name": "$id",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "$ref",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "$schema",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Meta schema\n\nRecommended values:\n- 'http://json-schema.org/schema#'\n- 'http://json-schema.org/hyper-schema#'\n- 'http://json-schema.org/draft-07/schema#'\n- 'http://json-schema.org/draft-07/hyper-schema#'",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "$comment",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "$defs",
                                  "required": false,
                                  "schema": {
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "type",
                                  "required": false,
                                  "schema": {
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "enum",
                                  "required": false,
                                  "schema": {
                                    "items": [
                                      {
                                        "schema": {
                                          "fullComment": "Primitive type",
                                          "properties": [],
                                          "type": "object"
                                        },
                                        "name": "JSONSchema7Type"
                                      }
                                    ],
                                    "type": "array"
                                  }
                                },
                                {
                                  "name": "const",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Primitive type",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "multipleOf",
                                  "required": false,
                                  "schema": {
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "maximum",
                                  "required": false,
                                  "schema": {
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "exclusiveMaximum",
                                  "required": false,
                                  "schema": {
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "minimum",
                                  "required": false,
                                  "schema": {
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "exclusiveMinimum",
                                  "required": false,
                                  "schema": {
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "maxLength",
                                  "required": false,
                                  "schema": {
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "minLength",
                                  "required": false,
                                  "schema": {
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "pattern",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "items",
                                  "required": false,
                                  "schema": {
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "additionalItems",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "JSON Schema v7",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "maxItems",
                                  "required": false,
                                  "schema": {
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "minItems",
                                  "required": false,
                                  "schema": {
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "uniqueItems",
                                  "required": false,
                                  "schema": {
                                    "type": "boolean"
                                  }
                                },
                                {
                                  "name": "contains",
                                  "required": false,
                                  "schema": {
                                    "circularRefName": "JSONSchema7",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "maxProperties",
                                  "required": false,
                                  "schema": {
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "minProperties",
                                  "required": false,
                                  "schema": {
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "required",
                                  "required": false,
                                  "schema": {
                                    "items": [
                                      {
                                        "schema": {
                                          "type": "string"
                                        },
                                        "name": null
                                      }
                                    ],
                                    "type": "array"
                                  }
                                },
                                {
                                  "name": "properties",
                                  "required": false,
                                  "schema": {
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "patternProperties",
                                  "required": false,
                                  "schema": {
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "additionalProperties",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "JSON Schema v7",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "dependencies",
                                  "required": false,
                                  "schema": {
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "propertyNames",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "JSON Schema v7",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "if",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "JSON Schema v7",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "then",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "JSON Schema v7",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "else",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "JSON Schema v7",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "allOf",
                                  "required": false,
                                  "schema": {
                                    "items": [
                                      {
                                        "schema": {
                                          "fullComment": "JSON Schema v7",
                                          "properties": [],
                                          "type": "object"
                                        },
                                        "name": "JSONSchema7Definition"
                                      }
                                    ],
                                    "type": "array"
                                  }
                                },
                                {
                                  "name": "anyOf",
                                  "required": false,
                                  "schema": {
                                    "items": [
                                      {
                                        "schema": {
                                          "fullComment": "JSON Schema v7",
                                          "properties": [],
                                          "type": "object"
                                        },
                                        "name": "JSONSchema7Definition"
                                      }
                                    ],
                                    "type": "array"
                                  }
                                },
                                {
                                  "name": "oneOf",
                                  "required": false,
                                  "schema": {
                                    "items": [
                                      {
                                        "schema": {
                                          "fullComment": "JSON Schema v7",
                                          "properties": [],
                                          "type": "object"
                                        },
                                        "name": "JSONSchema7Definition"
                                      }
                                    ],
                                    "type": "array"
                                  }
                                },
                                {
                                  "name": "not",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "JSON Schema v7",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "format",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "contentMediaType",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "contentEncoding",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "definitions",
                                  "required": false,
                                  "schema": {
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "title",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "description",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "default",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Primitive type",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "readOnly",
                                  "required": false,
                                  "schema": {
                                    "type": "boolean"
                                  }
                                },
                                {
                                  "name": "writeOnly",
                                  "required": false,
                                  "schema": {
                                    "type": "boolean"
                                  }
                                },
                                {
                                  "name": "examples",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Primitive type",
                                    "properties": [],
                                    "type": "object"
                                  }
                                }
                              ],
                              "type": "object"
                            }
                          },
                          {
                            "name": "simplifiedSchema",
                            "required": false,
                            "schema": {
                              "fullComment": "JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form",
                              "properties": [
                                {
                                  "name": "todo",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "discussion",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "idea",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "later",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "nb",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "title",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "section",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "description",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "type",
                                  "required": true,
                                  "schema": {
                                    "enum": [
                                      "string",
                                      "number",
                                      "boolean",
                                      "object",
                                      "array",
                                      "null"
                                    ],
                                    "fullComment": "- string\n- number\n- boolean\n- object\n- array\n- null\n\nNB: Omit doesn't work for the indexer! This would be the type: Omit<JSONSchema7TypeName, \"integer\">;\n\n",
                                    "nb": "Omit doesn't work for the indexer! This would be the type: Omit<JSONSchema7TypeName, \"integer\">;",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "circularRefName",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "enum",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think",
                                    "items": [
                                      {
                                        "schema": {
                                          "fullComment": "Primitive type",
                                          "properties": [],
                                          "type": "object"
                                        },
                                        "name": "JSONSchema7Type"
                                      }
                                    ],
                                    "type": "array"
                                  }
                                },
                                {
                                  "name": "properties",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "in case of object, this will always appear",
                                    "items": [
                                      {
                                        "schema": {
                                          "fullComment": "",
                                          "properties": [
                                            {
                                              "name": "name",
                                              "required": true,
                                              "schema": {
                                                "type": "string"
                                              }
                                            },
                                            {
                                              "name": "schema",
                                              "required": true,
                                              "schema": {
                                                "circularRefName": "SimplifiedSchema",
                                                "properties": [],
                                                "type": "object"
                                              }
                                            },
                                            {
                                              "name": "required",
                                              "required": true,
                                              "schema": {
                                                "fullComment": "NB: can't we put this in the SimplifiedSchema itself?",
                                                "nb": "can't we put this in the SimplifiedSchema itself?",
                                                "type": "boolean"
                                              }
                                            }
                                          ],
                                          "type": "object"
                                        },
                                        "name": "SimplifiedSchemaProperty"
                                      }
                                    ],
                                    "type": "array"
                                  }
                                },
                                {
                                  "name": "items",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "in case of arrays, this will always appear",
                                    "items": [
                                      {
                                        "schema": {
                                          "fullComment": "",
                                          "properties": [
                                            {
                                              "name": "name",
                                              "required": true,
                                              "schema": {
                                                "fullComment": "name in case of it being a reference, otherwise null",
                                                "type": "string"
                                              }
                                            },
                                            {
                                              "name": "schema",
                                              "required": true,
                                              "schema": {
                                                "circularRefName": "SimplifiedSchema",
                                                "properties": [],
                                                "type": "object"
                                              }
                                            }
                                          ],
                                          "type": "object"
                                        },
                                        "name": "SimplifiedSchemaItem"
                                      }
                                    ],
                                    "type": "array"
                                  }
                                },
                                {
                                  "name": "fullComment",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Full doccomment, parsed without all stars syntax.\n\nNB: besides this, every `CommentType` can optionally also be found as a property on the `SimplifiedSchema`",
                                    "nb": "besides this, every `CommentType` can optionally also be found as a property on the `SimplifiedSchema`",
                                    "type": "string"
                                  }
                                }
                              ],
                              "type": "object"
                            }
                          },
                          {
                            "name": "isObject",
                            "required": true,
                            "schema": {
                              "fullComment": "if the type is an object, this is true. false if it's an array",
                              "type": "boolean"
                            }
                          },
                          {
                            "name": "isArray",
                            "required": true,
                            "schema": {
                              "fullComment": "if the type is an array, this is true",
                              "type": "boolean"
                            }
                          },
                          {
                            "name": "isPrimitive",
                            "required": true,
                            "schema": {
                              "fullComment": "if it's a primitive type like \"string\", \"number\", \"boolean\", \"null\" | \"undefined\"",
                              "type": "boolean"
                            }
                          },
                          {
                            "name": "isEnum",
                            "required": true,
                            "schema": {
                              "fullComment": "will be true for any primitive conjunction types",
                              "type": "boolean"
                            }
                          },
                          {
                            "name": "isEnumLiteral",
                            "required": true,
                            "schema": {
                              "fullComment": "will be true for string conjunction types",
                              "type": "boolean"
                            }
                          },
                          {
                            "name": "typeCoverage",
                            "required": true,
                            "schema": {
                              "fullComment": "quantification of coverage of the specified type or subtypes in our database.",
                              "type": "number"
                            }
                          },
                          {
                            "name": "rawType",
                            "required": true,
                            "schema": {
                              "fullComment": "raw type string",
                              "type": "string"
                            }
                          }
                        ],
                        "type": "object"
                      }
                    },
                    {
                      "name": "parameters",
                      "required": false,
                      "schema": {
                        "fullComment": "parameters the function takes as its arguments, if any",
                        "items": [
                          {
                            "schema": {
                              "fullComment": "",
                              "properties": [
                                {
                                  "name": "name",
                                  "required": true,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "schema",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "",
                                    "properties": [
                                      {
                                        "name": "$id",
                                        "required": false,
                                        "schema": {
                                          "type": "string"
                                        }
                                      },
                                      {
                                        "name": "$ref",
                                        "required": false,
                                        "schema": {
                                          "type": "string"
                                        }
                                      },
                                      {
                                        "name": "$schema",
                                        "required": false,
                                        "schema": {
                                          "fullComment": "Meta schema\n\nRecommended values:\n- 'http://json-schema.org/schema#'\n- 'http://json-schema.org/hyper-schema#'\n- 'http://json-schema.org/draft-07/schema#'\n- 'http://json-schema.org/draft-07/hyper-schema#'",
                                          "type": "string"
                                        }
                                      },
                                      {
                                        "name": "$comment",
                                        "required": false,
                                        "schema": {
                                          "type": "string"
                                        }
                                      },
                                      {
                                        "name": "$defs",
                                        "required": false,
                                        "schema": {
                                          "properties": [],
                                          "type": "object"
                                        }
                                      },
                                      {
                                        "name": "type",
                                        "required": false,
                                        "schema": {
                                          "properties": [],
                                          "type": "object"
                                        }
                                      },
                                      {
                                        "name": "enum",
                                        "required": false,
                                        "schema": {
                                          "items": [
                                            {
                                              "schema": {
                                                "fullComment": "Primitive type",
                                                "properties": [],
                                                "type": "object"
                                              },
                                              "name": "JSONSchema7Type"
                                            }
                                          ],
                                          "type": "array"
                                        }
                                      },
                                      {
                                        "name": "const",
                                        "required": false,
                                        "schema": {
                                          "fullComment": "Primitive type",
                                          "properties": [],
                                          "type": "object"
                                        }
                                      },
                                      {
                                        "name": "multipleOf",
                                        "required": false,
                                        "schema": {
                                          "type": "number"
                                        }
                                      },
                                      {
                                        "name": "maximum",
                                        "required": false,
                                        "schema": {
                                          "type": "number"
                                        }
                                      },
                                      {
                                        "name": "exclusiveMaximum",
                                        "required": false,
                                        "schema": {
                                          "type": "number"
                                        }
                                      },
                                      {
                                        "name": "minimum",
                                        "required": false,
                                        "schema": {
                                          "type": "number"
                                        }
                                      },
                                      {
                                        "name": "exclusiveMinimum",
                                        "required": false,
                                        "schema": {
                                          "type": "number"
                                        }
                                      },
                                      {
                                        "name": "maxLength",
                                        "required": false,
                                        "schema": {
                                          "type": "number"
                                        }
                                      },
                                      {
                                        "name": "minLength",
                                        "required": false,
                                        "schema": {
                                          "type": "number"
                                        }
                                      },
                                      {
                                        "name": "pattern",
                                        "required": false,
                                        "schema": {
                                          "type": "string"
                                        }
                                      },
                                      {
                                        "name": "items",
                                        "required": false,
                                        "schema": {
                                          "properties": [],
                                          "type": "object"
                                        }
                                      },
                                      {
                                        "name": "additionalItems",
                                        "required": false,
                                        "schema": {
                                          "fullComment": "JSON Schema v7",
                                          "properties": [],
                                          "type": "object"
                                        }
                                      },
                                      {
                                        "name": "maxItems",
                                        "required": false,
                                        "schema": {
                                          "type": "number"
                                        }
                                      },
                                      {
                                        "name": "minItems",
                                        "required": false,
                                        "schema": {
                                          "type": "number"
                                        }
                                      },
                                      {
                                        "name": "uniqueItems",
                                        "required": false,
                                        "schema": {
                                          "type": "boolean"
                                        }
                                      },
                                      {
                                        "name": "contains",
                                        "required": false,
                                        "schema": {
                                          "circularRefName": "JSONSchema7",
                                          "properties": [],
                                          "type": "object"
                                        }
                                      },
                                      {
                                        "name": "maxProperties",
                                        "required": false,
                                        "schema": {
                                          "type": "number"
                                        }
                                      },
                                      {
                                        "name": "minProperties",
                                        "required": false,
                                        "schema": {
                                          "type": "number"
                                        }
                                      },
                                      {
                                        "name": "required",
                                        "required": false,
                                        "schema": {
                                          "items": [
                                            {
                                              "schema": {
                                                "type": "string"
                                              },
                                              "name": null
                                            }
                                          ],
                                          "type": "array"
                                        }
                                      },
                                      {
                                        "name": "properties",
                                        "required": false,
                                        "schema": {
                                          "properties": [],
                                          "type": "object"
                                        }
                                      },
                                      {
                                        "name": "patternProperties",
                                        "required": false,
                                        "schema": {
                                          "properties": [],
                                          "type": "object"
                                        }
                                      },
                                      {
                                        "name": "additionalProperties",
                                        "required": false,
                                        "schema": {
                                          "fullComment": "JSON Schema v7",
                                          "properties": [],
                                          "type": "object"
                                        }
                                      },
                                      {
                                        "name": "dependencies",
                                        "required": false,
                                        "schema": {
                                          "properties": [],
                                          "type": "object"
                                        }
                                      },
                                      {
                                        "name": "propertyNames",
                                        "required": false,
                                        "schema": {
                                          "fullComment": "JSON Schema v7",
                                          "properties": [],
                                          "type": "object"
                                        }
                                      },
                                      {
                                        "name": "if",
                                        "required": false,
                                        "schema": {
                                          "fullComment": "JSON Schema v7",
                                          "properties": [],
                                          "type": "object"
                                        }
                                      },
                                      {
                                        "name": "then",
                                        "required": false,
                                        "schema": {
                                          "fullComment": "JSON Schema v7",
                                          "properties": [],
                                          "type": "object"
                                        }
                                      },
                                      {
                                        "name": "else",
                                        "required": false,
                                        "schema": {
                                          "fullComment": "JSON Schema v7",
                                          "properties": [],
                                          "type": "object"
                                        }
                                      },
                                      {
                                        "name": "allOf",
                                        "required": false,
                                        "schema": {
                                          "items": [
                                            {
                                              "schema": {
                                                "fullComment": "JSON Schema v7",
                                                "properties": [],
                                                "type": "object"
                                              },
                                              "name": "JSONSchema7Definition"
                                            }
                                          ],
                                          "type": "array"
                                        }
                                      },
                                      {
                                        "name": "anyOf",
                                        "required": false,
                                        "schema": {
                                          "items": [
                                            {
                                              "schema": {
                                                "fullComment": "JSON Schema v7",
                                                "properties": [],
                                                "type": "object"
                                              },
                                              "name": "JSONSchema7Definition"
                                            }
                                          ],
                                          "type": "array"
                                        }
                                      },
                                      {
                                        "name": "oneOf",
                                        "required": false,
                                        "schema": {
                                          "items": [
                                            {
                                              "schema": {
                                                "fullComment": "JSON Schema v7",
                                                "properties": [],
                                                "type": "object"
                                              },
                                              "name": "JSONSchema7Definition"
                                            }
                                          ],
                                          "type": "array"
                                        }
                                      },
                                      {
                                        "name": "not",
                                        "required": false,
                                        "schema": {
                                          "fullComment": "JSON Schema v7",
                                          "properties": [],
                                          "type": "object"
                                        }
                                      },
                                      {
                                        "name": "format",
                                        "required": false,
                                        "schema": {
                                          "type": "string"
                                        }
                                      },
                                      {
                                        "name": "contentMediaType",
                                        "required": false,
                                        "schema": {
                                          "type": "string"
                                        }
                                      },
                                      {
                                        "name": "contentEncoding",
                                        "required": false,
                                        "schema": {
                                          "type": "string"
                                        }
                                      },
                                      {
                                        "name": "definitions",
                                        "required": false,
                                        "schema": {
                                          "properties": [],
                                          "type": "object"
                                        }
                                      },
                                      {
                                        "name": "title",
                                        "required": false,
                                        "schema": {
                                          "type": "string"
                                        }
                                      },
                                      {
                                        "name": "description",
                                        "required": false,
                                        "schema": {
                                          "type": "string"
                                        }
                                      },
                                      {
                                        "name": "default",
                                        "required": false,
                                        "schema": {
                                          "fullComment": "Primitive type",
                                          "properties": [],
                                          "type": "object"
                                        }
                                      },
                                      {
                                        "name": "readOnly",
                                        "required": false,
                                        "schema": {
                                          "type": "boolean"
                                        }
                                      },
                                      {
                                        "name": "writeOnly",
                                        "required": false,
                                        "schema": {
                                          "type": "boolean"
                                        }
                                      },
                                      {
                                        "name": "examples",
                                        "required": false,
                                        "schema": {
                                          "fullComment": "Primitive type",
                                          "properties": [],
                                          "type": "object"
                                        }
                                      }
                                    ],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "simplifiedSchema",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form",
                                    "properties": [
                                      {
                                        "name": "todo",
                                        "required": false,
                                        "schema": {
                                          "type": "string"
                                        }
                                      },
                                      {
                                        "name": "discussion",
                                        "required": false,
                                        "schema": {
                                          "type": "string"
                                        }
                                      },
                                      {
                                        "name": "idea",
                                        "required": false,
                                        "schema": {
                                          "type": "string"
                                        }
                                      },
                                      {
                                        "name": "later",
                                        "required": false,
                                        "schema": {
                                          "type": "string"
                                        }
                                      },
                                      {
                                        "name": "nb",
                                        "required": false,
                                        "schema": {
                                          "type": "string"
                                        }
                                      },
                                      {
                                        "name": "title",
                                        "required": false,
                                        "schema": {
                                          "type": "string"
                                        }
                                      },
                                      {
                                        "name": "section",
                                        "required": false,
                                        "schema": {
                                          "type": "string"
                                        }
                                      },
                                      {
                                        "name": "description",
                                        "required": false,
                                        "schema": {
                                          "type": "string"
                                        }
                                      },
                                      {
                                        "name": "type",
                                        "required": true,
                                        "schema": {
                                          "enum": [
                                            "string",
                                            "number",
                                            "boolean",
                                            "object",
                                            "array",
                                            "null"
                                          ],
                                          "fullComment": "- string\n- number\n- boolean\n- object\n- array\n- null\n\nNB: Omit doesn't work for the indexer! This would be the type: Omit<JSONSchema7TypeName, \"integer\">;\n\n",
                                          "nb": "Omit doesn't work for the indexer! This would be the type: Omit<JSONSchema7TypeName, \"integer\">;",
                                          "type": "string"
                                        }
                                      },
                                      {
                                        "name": "circularRefName",
                                        "required": false,
                                        "schema": {
                                          "fullComment": "sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here",
                                          "type": "string"
                                        }
                                      },
                                      {
                                        "name": "enum",
                                        "required": false,
                                        "schema": {
                                          "fullComment": "in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think",
                                          "items": [
                                            {
                                              "schema": {
                                                "fullComment": "Primitive type",
                                                "properties": [],
                                                "type": "object"
                                              },
                                              "name": "JSONSchema7Type"
                                            }
                                          ],
                                          "type": "array"
                                        }
                                      },
                                      {
                                        "name": "properties",
                                        "required": false,
                                        "schema": {
                                          "fullComment": "in case of object, this will always appear",
                                          "items": [
                                            {
                                              "schema": {
                                                "fullComment": "",
                                                "properties": [
                                                  {
                                                    "name": "name",
                                                    "required": true,
                                                    "schema": {
                                                      "type": "string"
                                                    }
                                                  },
                                                  {
                                                    "name": "schema",
                                                    "required": true,
                                                    "schema": {
                                                      "circularRefName": "SimplifiedSchema",
                                                      "properties": [],
                                                      "type": "object"
                                                    }
                                                  },
                                                  {
                                                    "name": "required",
                                                    "required": true,
                                                    "schema": {
                                                      "fullComment": "NB: can't we put this in the SimplifiedSchema itself?",
                                                      "nb": "can't we put this in the SimplifiedSchema itself?",
                                                      "type": "boolean"
                                                    }
                                                  }
                                                ],
                                                "type": "object"
                                              },
                                              "name": "SimplifiedSchemaProperty"
                                            }
                                          ],
                                          "type": "array"
                                        }
                                      },
                                      {
                                        "name": "items",
                                        "required": false,
                                        "schema": {
                                          "fullComment": "in case of arrays, this will always appear",
                                          "items": [
                                            {
                                              "schema": {
                                                "fullComment": "",
                                                "properties": [
                                                  {
                                                    "name": "name",
                                                    "required": true,
                                                    "schema": {
                                                      "fullComment": "name in case of it being a reference, otherwise null",
                                                      "type": "string"
                                                    }
                                                  },
                                                  {
                                                    "name": "schema",
                                                    "required": true,
                                                    "schema": {
                                                      "circularRefName": "SimplifiedSchema",
                                                      "properties": [],
                                                      "type": "object"
                                                    }
                                                  }
                                                ],
                                                "type": "object"
                                              },
                                              "name": "SimplifiedSchemaItem"
                                            }
                                          ],
                                          "type": "array"
                                        }
                                      },
                                      {
                                        "name": "fullComment",
                                        "required": false,
                                        "schema": {
                                          "fullComment": "Full doccomment, parsed without all stars syntax.\n\nNB: besides this, every `CommentType` can optionally also be found as a property on the `SimplifiedSchema`",
                                          "nb": "besides this, every `CommentType` can optionally also be found as a property on the `SimplifiedSchema`",
                                          "type": "string"
                                        }
                                      }
                                    ],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "required",
                                  "required": true,
                                  "schema": {
                                    "type": "boolean"
                                  }
                                }
                              ],
                              "type": "object"
                            },
                            "name": "FunctionParameter"
                          }
                        ],
                        "type": "array"
                      }
                    },
                    {
                      "name": "size",
                      "required": true,
                      "schema": {
                        "fullComment": "size of this function (comments + code)\n\ntype interface that can be used to summarize multiple files",
                        "properties": [
                          {
                            "name": "numberOfFiles",
                            "required": false,
                            "schema": {
                              "fullComment": "if this is about multiple files, the number of files is specified here",
                              "type": "number"
                            }
                          },
                          {
                            "name": "characters",
                            "required": true,
                            "schema": {
                              "fullComment": "amount of characters",
                              "type": "number"
                            }
                          },
                          {
                            "name": "lines",
                            "required": true,
                            "schema": {
                              "fullComment": "amount of lines",
                              "type": "number"
                            }
                          },
                          {
                            "name": "bytes",
                            "required": true,
                            "schema": {
                              "fullComment": "amount of bytes",
                              "type": "number"
                            }
                          },
                          {
                            "name": "linesPerFile",
                            "required": true,
                            "schema": {
                              "fullComment": "rounded, amount of lines per file (averaged)",
                              "type": "number"
                            }
                          },
                          {
                            "name": "charactersPerLine",
                            "required": true,
                            "schema": {
                              "fullComment": "rounded, amount of characters per line (averaged)",
                              "type": "number"
                            }
                          },
                          {
                            "name": "bytesPerCharacter",
                            "required": true,
                            "schema": {
                              "fullComment": "rounded, amount of bytes per character",
                              "type": "number"
                            }
                          }
                        ],
                        "type": "object"
                      }
                    },
                    {
                      "name": "commentSize",
                      "required": false,
                      "schema": {
                        "fullComment": "size of the comments of this function (including surrounding comments)\n\ntype interface that can be used to summarize multiple files",
                        "properties": [
                          {
                            "name": "numberOfFiles",
                            "required": false,
                            "schema": {
                              "fullComment": "if this is about multiple files, the number of files is specified here",
                              "type": "number"
                            }
                          },
                          {
                            "name": "characters",
                            "required": true,
                            "schema": {
                              "fullComment": "amount of characters",
                              "type": "number"
                            }
                          },
                          {
                            "name": "lines",
                            "required": true,
                            "schema": {
                              "fullComment": "amount of lines",
                              "type": "number"
                            }
                          },
                          {
                            "name": "bytes",
                            "required": true,
                            "schema": {
                              "fullComment": "amount of bytes",
                              "type": "number"
                            }
                          },
                          {
                            "name": "linesPerFile",
                            "required": true,
                            "schema": {
                              "fullComment": "rounded, amount of lines per file (averaged)",
                              "type": "number"
                            }
                          },
                          {
                            "name": "charactersPerLine",
                            "required": true,
                            "schema": {
                              "fullComment": "rounded, amount of characters per line (averaged)",
                              "type": "number"
                            }
                          },
                          {
                            "name": "bytesPerCharacter",
                            "required": true,
                            "schema": {
                              "fullComment": "rounded, amount of bytes per character",
                              "type": "number"
                            }
                          }
                        ],
                        "type": "object"
                      }
                    },
                    {
                      "name": "codeSize",
                      "required": false,
                      "schema": {
                        "fullComment": "size of the code inside the function (without comments)\n\ntype interface that can be used to summarize multiple files",
                        "properties": [
                          {
                            "name": "numberOfFiles",
                            "required": false,
                            "schema": {
                              "fullComment": "if this is about multiple files, the number of files is specified here",
                              "type": "number"
                            }
                          },
                          {
                            "name": "characters",
                            "required": true,
                            "schema": {
                              "fullComment": "amount of characters",
                              "type": "number"
                            }
                          },
                          {
                            "name": "lines",
                            "required": true,
                            "schema": {
                              "fullComment": "amount of lines",
                              "type": "number"
                            }
                          },
                          {
                            "name": "bytes",
                            "required": true,
                            "schema": {
                              "fullComment": "amount of bytes",
                              "type": "number"
                            }
                          },
                          {
                            "name": "linesPerFile",
                            "required": true,
                            "schema": {
                              "fullComment": "rounded, amount of lines per file (averaged)",
                              "type": "number"
                            }
                          },
                          {
                            "name": "charactersPerLine",
                            "required": true,
                            "schema": {
                              "fullComment": "rounded, amount of characters per line (averaged)",
                              "type": "number"
                            }
                          },
                          {
                            "name": "bytesPerCharacter",
                            "required": true,
                            "schema": {
                              "fullComment": "rounded, amount of bytes per character",
                              "type": "number"
                            }
                          }
                        ],
                        "type": "object"
                      }
                    },
                    {
                      "name": "cumulativeSize",
                      "required": false,
                      "schema": {
                        "fullComment": "tells you the size of itself and all its dependencies that are used that are also part of an operation, recursively\n\ntype interface that can be used to summarize multiple files",
                        "properties": [
                          {
                            "name": "numberOfFiles",
                            "required": false,
                            "schema": {
                              "fullComment": "if this is about multiple files, the number of files is specified here",
                              "type": "number"
                            }
                          },
                          {
                            "name": "characters",
                            "required": true,
                            "schema": {
                              "fullComment": "amount of characters",
                              "type": "number"
                            }
                          },
                          {
                            "name": "lines",
                            "required": true,
                            "schema": {
                              "fullComment": "amount of lines",
                              "type": "number"
                            }
                          },
                          {
                            "name": "bytes",
                            "required": true,
                            "schema": {
                              "fullComment": "amount of bytes",
                              "type": "number"
                            }
                          },
                          {
                            "name": "linesPerFile",
                            "required": true,
                            "schema": {
                              "fullComment": "rounded, amount of lines per file (averaged)",
                              "type": "number"
                            }
                          },
                          {
                            "name": "charactersPerLine",
                            "required": true,
                            "schema": {
                              "fullComment": "rounded, amount of characters per line (averaged)",
                              "type": "number"
                            }
                          },
                          {
                            "name": "bytesPerCharacter",
                            "required": true,
                            "schema": {
                              "fullComment": "rounded, amount of bytes per character",
                              "type": "number"
                            }
                          }
                        ],
                        "type": "object"
                      }
                    },
                    {
                      "name": "cumulativeCommentSize",
                      "required": false,
                      "schema": {
                        "fullComment": "type interface that can be used to summarize multiple files",
                        "properties": [
                          {
                            "name": "numberOfFiles",
                            "required": false,
                            "schema": {
                              "fullComment": "if this is about multiple files, the number of files is specified here",
                              "type": "number"
                            }
                          },
                          {
                            "name": "characters",
                            "required": true,
                            "schema": {
                              "fullComment": "amount of characters",
                              "type": "number"
                            }
                          },
                          {
                            "name": "lines",
                            "required": true,
                            "schema": {
                              "fullComment": "amount of lines",
                              "type": "number"
                            }
                          },
                          {
                            "name": "bytes",
                            "required": true,
                            "schema": {
                              "fullComment": "amount of bytes",
                              "type": "number"
                            }
                          },
                          {
                            "name": "linesPerFile",
                            "required": true,
                            "schema": {
                              "fullComment": "rounded, amount of lines per file (averaged)",
                              "type": "number"
                            }
                          },
                          {
                            "name": "charactersPerLine",
                            "required": true,
                            "schema": {
                              "fullComment": "rounded, amount of characters per line (averaged)",
                              "type": "number"
                            }
                          },
                          {
                            "name": "bytesPerCharacter",
                            "required": true,
                            "schema": {
                              "fullComment": "rounded, amount of bytes per character",
                              "type": "number"
                            }
                          }
                        ],
                        "type": "object"
                      }
                    },
                    {
                      "name": "cumulativeCodeSize",
                      "required": false,
                      "schema": {
                        "fullComment": "type interface that can be used to summarize multiple files",
                        "properties": [
                          {
                            "name": "numberOfFiles",
                            "required": false,
                            "schema": {
                              "fullComment": "if this is about multiple files, the number of files is specified here",
                              "type": "number"
                            }
                          },
                          {
                            "name": "characters",
                            "required": true,
                            "schema": {
                              "fullComment": "amount of characters",
                              "type": "number"
                            }
                          },
                          {
                            "name": "lines",
                            "required": true,
                            "schema": {
                              "fullComment": "amount of lines",
                              "type": "number"
                            }
                          },
                          {
                            "name": "bytes",
                            "required": true,
                            "schema": {
                              "fullComment": "amount of bytes",
                              "type": "number"
                            }
                          },
                          {
                            "name": "linesPerFile",
                            "required": true,
                            "schema": {
                              "fullComment": "rounded, amount of lines per file (averaged)",
                              "type": "number"
                            }
                          },
                          {
                            "name": "charactersPerLine",
                            "required": true,
                            "schema": {
                              "fullComment": "rounded, amount of characters per line (averaged)",
                              "type": "number"
                            }
                          },
                          {
                            "name": "bytesPerCharacter",
                            "required": true,
                            "schema": {
                              "fullComment": "rounded, amount of bytes per character",
                              "type": "number"
                            }
                          }
                        ],
                        "type": "object"
                      }
                    },
                    {
                      "name": "maxIndentationDepth",
                      "required": true,
                      "schema": {
                        "fullComment": "maximum amount of times indedented in this function\n\ngood for determining the complexity and finding code that can be simplified/destructured into smaller pieces",
                        "type": "number"
                      }
                    },
                    {
                      "name": "dependantFiles",
                      "required": false,
                      "schema": {
                        "fullComment": "finds all files that import this function\n\nNB: this is not indexed because this information has nothing to do with the operation itself, but the exposure to the broader monorepo. This is calculated on the fly.",
                        "nb": "this is not indexed because this information has nothing to do with the operation itself, but the exposure to the broader monorepo. This is calculated on the fly.",
                        "items": [
                          {
                            "schema": {
                              "type": "string"
                            },
                            "name": null
                          }
                        ],
                        "type": "array"
                      }
                    }
                  ],
                  "type": "object"
                },
                "name": "TsFunction"
              }
            ],
            "type": "array"
          }
        },
        {
          "name": "tsVariables",
          "required": false,
          "schema": {
            "items": [
              {
                "schema": {
                  "fullComment": "--- dbStorageMethod: jsonSingle\n---",
                  "properties": [
                    {
                      "name": "operationName",
                      "required": true,
                      "schema": {
                        "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
                        "type": "null"
                      }
                    },
                    {
                      "name": "projectRelativePath",
                      "required": true,
                      "schema": {
                        "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
                        "type": "string"
                      }
                    },
                    {
                      "name": "operationRelativePath",
                      "required": false,
                      "schema": {
                        "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
                        "type": "string"
                      }
                    },
                    {
                      "name": "id",
                      "required": true,
                      "schema": {
                        "fullComment": "unique id of the model",
                        "type": "string"
                      }
                    },
                    {
                      "name": "name",
                      "required": true,
                      "schema": {
                        "fullComment": "name (identifier) of the model",
                        "type": "string"
                      }
                    },
                    {
                      "name": "slug",
                      "required": true,
                      "schema": {
                        "fullComment": "kebab-case variant of the name",
                        "type": "string"
                      }
                    },
                    {
                      "name": "operationRelativeTypescriptFilePath",
                      "required": true,
                      "schema": {
                        "fullComment": "relative file path from the operation that this indexed instance is referencing to\n\ne.g. src/general.ts\n\n(no preceding slash)",
                        "type": "string"
                      }
                    },
                    {
                      "name": "description",
                      "required": false,
                      "schema": {
                        "fullComment": "if available , the parsed doccomment of the variable",
                        "type": "string"
                      }
                    },
                    {
                      "name": "value",
                      "required": true,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "classification",
                      "required": true,
                      "schema": {
                        "enum": [
                          "const",
                          "var",
                          "let"
                        ],
                        "type": "string"
                      }
                    },
                    {
                      "name": "type",
                      "required": true,
                      "schema": {
                        "fullComment": "all info that should always be collected when indexing any type interface",
                        "properties": [
                          {
                            "name": "typeDefinition",
                            "required": false,
                            "schema": {
                              "fullComment": "JSON schema definition of a type interface\n\n\nSome info about the Schema:\n\n- if the type is an object, there should be properties\n- if the type is an array, there should be items\n\n\n\n",
                              "properties": [
                                {
                                  "name": "$id",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "$ref",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "$schema",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Meta schema\n\nRecommended values:\n- 'http://json-schema.org/schema#'\n- 'http://json-schema.org/hyper-schema#'\n- 'http://json-schema.org/draft-07/schema#'\n- 'http://json-schema.org/draft-07/hyper-schema#'",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "$comment",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "$defs",
                                  "required": false,
                                  "schema": {
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "type",
                                  "required": false,
                                  "schema": {
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "enum",
                                  "required": false,
                                  "schema": {
                                    "items": [
                                      {
                                        "schema": {
                                          "fullComment": "Primitive type",
                                          "properties": [],
                                          "type": "object"
                                        },
                                        "name": "JSONSchema7Type"
                                      }
                                    ],
                                    "type": "array"
                                  }
                                },
                                {
                                  "name": "const",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Primitive type",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "multipleOf",
                                  "required": false,
                                  "schema": {
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "maximum",
                                  "required": false,
                                  "schema": {
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "exclusiveMaximum",
                                  "required": false,
                                  "schema": {
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "minimum",
                                  "required": false,
                                  "schema": {
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "exclusiveMinimum",
                                  "required": false,
                                  "schema": {
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "maxLength",
                                  "required": false,
                                  "schema": {
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "minLength",
                                  "required": false,
                                  "schema": {
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "pattern",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "items",
                                  "required": false,
                                  "schema": {
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "additionalItems",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "JSON Schema v7",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "maxItems",
                                  "required": false,
                                  "schema": {
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "minItems",
                                  "required": false,
                                  "schema": {
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "uniqueItems",
                                  "required": false,
                                  "schema": {
                                    "type": "boolean"
                                  }
                                },
                                {
                                  "name": "contains",
                                  "required": false,
                                  "schema": {
                                    "circularRefName": "JSONSchema7",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "maxProperties",
                                  "required": false,
                                  "schema": {
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "minProperties",
                                  "required": false,
                                  "schema": {
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "required",
                                  "required": false,
                                  "schema": {
                                    "items": [
                                      {
                                        "schema": {
                                          "type": "string"
                                        },
                                        "name": null
                                      }
                                    ],
                                    "type": "array"
                                  }
                                },
                                {
                                  "name": "properties",
                                  "required": false,
                                  "schema": {
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "patternProperties",
                                  "required": false,
                                  "schema": {
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "additionalProperties",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "JSON Schema v7",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "dependencies",
                                  "required": false,
                                  "schema": {
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "propertyNames",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "JSON Schema v7",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "if",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "JSON Schema v7",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "then",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "JSON Schema v7",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "else",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "JSON Schema v7",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "allOf",
                                  "required": false,
                                  "schema": {
                                    "items": [
                                      {
                                        "schema": {
                                          "fullComment": "JSON Schema v7",
                                          "properties": [],
                                          "type": "object"
                                        },
                                        "name": "JSONSchema7Definition"
                                      }
                                    ],
                                    "type": "array"
                                  }
                                },
                                {
                                  "name": "anyOf",
                                  "required": false,
                                  "schema": {
                                    "items": [
                                      {
                                        "schema": {
                                          "fullComment": "JSON Schema v7",
                                          "properties": [],
                                          "type": "object"
                                        },
                                        "name": "JSONSchema7Definition"
                                      }
                                    ],
                                    "type": "array"
                                  }
                                },
                                {
                                  "name": "oneOf",
                                  "required": false,
                                  "schema": {
                                    "items": [
                                      {
                                        "schema": {
                                          "fullComment": "JSON Schema v7",
                                          "properties": [],
                                          "type": "object"
                                        },
                                        "name": "JSONSchema7Definition"
                                      }
                                    ],
                                    "type": "array"
                                  }
                                },
                                {
                                  "name": "not",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "JSON Schema v7",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "format",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "contentMediaType",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "contentEncoding",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "definitions",
                                  "required": false,
                                  "schema": {
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "title",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "description",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "default",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Primitive type",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "readOnly",
                                  "required": false,
                                  "schema": {
                                    "type": "boolean"
                                  }
                                },
                                {
                                  "name": "writeOnly",
                                  "required": false,
                                  "schema": {
                                    "type": "boolean"
                                  }
                                },
                                {
                                  "name": "examples",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Primitive type",
                                    "properties": [],
                                    "type": "object"
                                  }
                                }
                              ],
                              "type": "object"
                            }
                          },
                          {
                            "name": "simplifiedSchema",
                            "required": false,
                            "schema": {
                              "fullComment": "JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form",
                              "properties": [
                                {
                                  "name": "todo",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "discussion",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "idea",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "later",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "nb",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "title",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "section",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "description",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "type",
                                  "required": true,
                                  "schema": {
                                    "enum": [
                                      "string",
                                      "number",
                                      "boolean",
                                      "object",
                                      "array",
                                      "null"
                                    ],
                                    "fullComment": "- string\n- number\n- boolean\n- object\n- array\n- null\n\nNB: Omit doesn't work for the indexer! This would be the type: Omit<JSONSchema7TypeName, \"integer\">;\n\n",
                                    "nb": "Omit doesn't work for the indexer! This would be the type: Omit<JSONSchema7TypeName, \"integer\">;",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "circularRefName",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "enum",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think",
                                    "items": [
                                      {
                                        "schema": {
                                          "fullComment": "Primitive type",
                                          "properties": [],
                                          "type": "object"
                                        },
                                        "name": "JSONSchema7Type"
                                      }
                                    ],
                                    "type": "array"
                                  }
                                },
                                {
                                  "name": "properties",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "in case of object, this will always appear",
                                    "items": [
                                      {
                                        "schema": {
                                          "fullComment": "",
                                          "properties": [
                                            {
                                              "name": "name",
                                              "required": true,
                                              "schema": {
                                                "type": "string"
                                              }
                                            },
                                            {
                                              "name": "schema",
                                              "required": true,
                                              "schema": {
                                                "circularRefName": "SimplifiedSchema",
                                                "properties": [],
                                                "type": "object"
                                              }
                                            },
                                            {
                                              "name": "required",
                                              "required": true,
                                              "schema": {
                                                "fullComment": "NB: can't we put this in the SimplifiedSchema itself?",
                                                "nb": "can't we put this in the SimplifiedSchema itself?",
                                                "type": "boolean"
                                              }
                                            }
                                          ],
                                          "type": "object"
                                        },
                                        "name": "SimplifiedSchemaProperty"
                                      }
                                    ],
                                    "type": "array"
                                  }
                                },
                                {
                                  "name": "items",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "in case of arrays, this will always appear",
                                    "items": [
                                      {
                                        "schema": {
                                          "fullComment": "",
                                          "properties": [
                                            {
                                              "name": "name",
                                              "required": true,
                                              "schema": {
                                                "fullComment": "name in case of it being a reference, otherwise null",
                                                "type": "string"
                                              }
                                            },
                                            {
                                              "name": "schema",
                                              "required": true,
                                              "schema": {
                                                "circularRefName": "SimplifiedSchema",
                                                "properties": [],
                                                "type": "object"
                                              }
                                            }
                                          ],
                                          "type": "object"
                                        },
                                        "name": "SimplifiedSchemaItem"
                                      }
                                    ],
                                    "type": "array"
                                  }
                                },
                                {
                                  "name": "fullComment",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Full doccomment, parsed without all stars syntax.\n\nNB: besides this, every `CommentType` can optionally also be found as a property on the `SimplifiedSchema`",
                                    "nb": "besides this, every `CommentType` can optionally also be found as a property on the `SimplifiedSchema`",
                                    "type": "string"
                                  }
                                }
                              ],
                              "type": "object"
                            }
                          },
                          {
                            "name": "isObject",
                            "required": true,
                            "schema": {
                              "fullComment": "if the type is an object, this is true. false if it's an array",
                              "type": "boolean"
                            }
                          },
                          {
                            "name": "isArray",
                            "required": true,
                            "schema": {
                              "fullComment": "if the type is an array, this is true",
                              "type": "boolean"
                            }
                          },
                          {
                            "name": "isPrimitive",
                            "required": true,
                            "schema": {
                              "fullComment": "if it's a primitive type like \"string\", \"number\", \"boolean\", \"null\" | \"undefined\"",
                              "type": "boolean"
                            }
                          },
                          {
                            "name": "isEnum",
                            "required": true,
                            "schema": {
                              "fullComment": "will be true for any primitive conjunction types",
                              "type": "boolean"
                            }
                          },
                          {
                            "name": "isEnumLiteral",
                            "required": true,
                            "schema": {
                              "fullComment": "will be true for string conjunction types",
                              "type": "boolean"
                            }
                          },
                          {
                            "name": "typeCoverage",
                            "required": true,
                            "schema": {
                              "fullComment": "quantification of coverage of the specified type or subtypes in our database.",
                              "type": "number"
                            }
                          },
                          {
                            "name": "rawType",
                            "required": true,
                            "schema": {
                              "fullComment": "raw type string",
                              "type": "string"
                            }
                          }
                        ],
                        "type": "object"
                      }
                    },
                    {
                      "name": "isExported",
                      "required": true,
                      "schema": {
                        "type": "boolean"
                      }
                    },
                    {
                      "name": "comments",
                      "required": true,
                      "schema": {
                        "fullComment": "surrounding comments and comments inside of the variable",
                        "items": [],
                        "type": "array"
                      }
                    }
                  ],
                  "type": "object"
                },
                "name": "TsVariable"
              }
            ],
            "type": "array"
          }
        },
        {
          "name": "tsInterfaces",
          "required": false,
          "schema": {
            "items": [
              {
                "schema": {
                  "fullComment": "--- dbStorageMethod: jsonSingle\n---\n\nTODO: Just like parameters, this should be linted for. If you define an interface that's not declared here, that should ring a bell.",
                  "todo": "Just like parameters, this should be linted for. If you define an interface that's not declared here, that should ring a bell.",
                  "properties": [
                    {
                      "name": "operationName",
                      "required": true,
                      "schema": {
                        "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
                        "type": "null"
                      }
                    },
                    {
                      "name": "projectRelativePath",
                      "required": true,
                      "schema": {
                        "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
                        "type": "string"
                      }
                    },
                    {
                      "name": "operationRelativePath",
                      "required": false,
                      "schema": {
                        "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
                        "type": "string"
                      }
                    },
                    {
                      "name": "id",
                      "required": true,
                      "schema": {
                        "fullComment": "unique id of the model",
                        "type": "string"
                      }
                    },
                    {
                      "name": "name",
                      "required": true,
                      "schema": {
                        "fullComment": "name (identifier) of the model",
                        "type": "string"
                      }
                    },
                    {
                      "name": "slug",
                      "required": true,
                      "schema": {
                        "fullComment": "kebab-case variant of the name",
                        "type": "string"
                      }
                    },
                    {
                      "name": "operationRelativeTypescriptFilePath",
                      "required": true,
                      "schema": {
                        "fullComment": "relative file path from the operation that this indexed instance is referencing to\n\ne.g. src/general.ts\n\n(no preceding slash)",
                        "type": "string"
                      }
                    },
                    {
                      "name": "type",
                      "required": true,
                      "schema": {
                        "fullComment": "all info that should always be collected when indexing any type interface",
                        "properties": [
                          {
                            "name": "typeDefinition",
                            "required": false,
                            "schema": {
                              "fullComment": "JSON schema definition of a type interface\n\n\nSome info about the Schema:\n\n- if the type is an object, there should be properties\n- if the type is an array, there should be items\n\n\n\n",
                              "properties": [
                                {
                                  "name": "$id",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "$ref",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "$schema",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Meta schema\n\nRecommended values:\n- 'http://json-schema.org/schema#'\n- 'http://json-schema.org/hyper-schema#'\n- 'http://json-schema.org/draft-07/schema#'\n- 'http://json-schema.org/draft-07/hyper-schema#'",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "$comment",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "$defs",
                                  "required": false,
                                  "schema": {
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "type",
                                  "required": false,
                                  "schema": {
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "enum",
                                  "required": false,
                                  "schema": {
                                    "items": [
                                      {
                                        "schema": {
                                          "fullComment": "Primitive type",
                                          "properties": [],
                                          "type": "object"
                                        },
                                        "name": "JSONSchema7Type"
                                      }
                                    ],
                                    "type": "array"
                                  }
                                },
                                {
                                  "name": "const",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Primitive type",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "multipleOf",
                                  "required": false,
                                  "schema": {
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "maximum",
                                  "required": false,
                                  "schema": {
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "exclusiveMaximum",
                                  "required": false,
                                  "schema": {
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "minimum",
                                  "required": false,
                                  "schema": {
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "exclusiveMinimum",
                                  "required": false,
                                  "schema": {
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "maxLength",
                                  "required": false,
                                  "schema": {
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "minLength",
                                  "required": false,
                                  "schema": {
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "pattern",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "items",
                                  "required": false,
                                  "schema": {
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "additionalItems",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "JSON Schema v7",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "maxItems",
                                  "required": false,
                                  "schema": {
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "minItems",
                                  "required": false,
                                  "schema": {
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "uniqueItems",
                                  "required": false,
                                  "schema": {
                                    "type": "boolean"
                                  }
                                },
                                {
                                  "name": "contains",
                                  "required": false,
                                  "schema": {
                                    "circularRefName": "JSONSchema7",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "maxProperties",
                                  "required": false,
                                  "schema": {
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "minProperties",
                                  "required": false,
                                  "schema": {
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "required",
                                  "required": false,
                                  "schema": {
                                    "items": [
                                      {
                                        "schema": {
                                          "type": "string"
                                        },
                                        "name": null
                                      }
                                    ],
                                    "type": "array"
                                  }
                                },
                                {
                                  "name": "properties",
                                  "required": false,
                                  "schema": {
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "patternProperties",
                                  "required": false,
                                  "schema": {
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "additionalProperties",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "JSON Schema v7",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "dependencies",
                                  "required": false,
                                  "schema": {
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "propertyNames",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "JSON Schema v7",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "if",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "JSON Schema v7",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "then",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "JSON Schema v7",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "else",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "JSON Schema v7",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "allOf",
                                  "required": false,
                                  "schema": {
                                    "items": [
                                      {
                                        "schema": {
                                          "fullComment": "JSON Schema v7",
                                          "properties": [],
                                          "type": "object"
                                        },
                                        "name": "JSONSchema7Definition"
                                      }
                                    ],
                                    "type": "array"
                                  }
                                },
                                {
                                  "name": "anyOf",
                                  "required": false,
                                  "schema": {
                                    "items": [
                                      {
                                        "schema": {
                                          "fullComment": "JSON Schema v7",
                                          "properties": [],
                                          "type": "object"
                                        },
                                        "name": "JSONSchema7Definition"
                                      }
                                    ],
                                    "type": "array"
                                  }
                                },
                                {
                                  "name": "oneOf",
                                  "required": false,
                                  "schema": {
                                    "items": [
                                      {
                                        "schema": {
                                          "fullComment": "JSON Schema v7",
                                          "properties": [],
                                          "type": "object"
                                        },
                                        "name": "JSONSchema7Definition"
                                      }
                                    ],
                                    "type": "array"
                                  }
                                },
                                {
                                  "name": "not",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "JSON Schema v7",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "format",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "contentMediaType",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "contentEncoding",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "definitions",
                                  "required": false,
                                  "schema": {
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "title",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "description",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "default",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Primitive type",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "readOnly",
                                  "required": false,
                                  "schema": {
                                    "type": "boolean"
                                  }
                                },
                                {
                                  "name": "writeOnly",
                                  "required": false,
                                  "schema": {
                                    "type": "boolean"
                                  }
                                },
                                {
                                  "name": "examples",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Primitive type",
                                    "properties": [],
                                    "type": "object"
                                  }
                                }
                              ],
                              "type": "object"
                            }
                          },
                          {
                            "name": "simplifiedSchema",
                            "required": false,
                            "schema": {
                              "fullComment": "JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form",
                              "properties": [
                                {
                                  "name": "todo",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "discussion",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "idea",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "later",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "nb",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "title",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "section",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "description",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "type",
                                  "required": true,
                                  "schema": {
                                    "enum": [
                                      "string",
                                      "number",
                                      "boolean",
                                      "object",
                                      "array",
                                      "null"
                                    ],
                                    "fullComment": "- string\n- number\n- boolean\n- object\n- array\n- null\n\nNB: Omit doesn't work for the indexer! This would be the type: Omit<JSONSchema7TypeName, \"integer\">;\n\n",
                                    "nb": "Omit doesn't work for the indexer! This would be the type: Omit<JSONSchema7TypeName, \"integer\">;",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "circularRefName",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "enum",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think",
                                    "items": [
                                      {
                                        "schema": {
                                          "fullComment": "Primitive type",
                                          "properties": [],
                                          "type": "object"
                                        },
                                        "name": "JSONSchema7Type"
                                      }
                                    ],
                                    "type": "array"
                                  }
                                },
                                {
                                  "name": "properties",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "in case of object, this will always appear",
                                    "items": [
                                      {
                                        "schema": {
                                          "fullComment": "",
                                          "properties": [
                                            {
                                              "name": "name",
                                              "required": true,
                                              "schema": {
                                                "type": "string"
                                              }
                                            },
                                            {
                                              "name": "schema",
                                              "required": true,
                                              "schema": {
                                                "circularRefName": "SimplifiedSchema",
                                                "properties": [],
                                                "type": "object"
                                              }
                                            },
                                            {
                                              "name": "required",
                                              "required": true,
                                              "schema": {
                                                "fullComment": "NB: can't we put this in the SimplifiedSchema itself?",
                                                "nb": "can't we put this in the SimplifiedSchema itself?",
                                                "type": "boolean"
                                              }
                                            }
                                          ],
                                          "type": "object"
                                        },
                                        "name": "SimplifiedSchemaProperty"
                                      }
                                    ],
                                    "type": "array"
                                  }
                                },
                                {
                                  "name": "items",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "in case of arrays, this will always appear",
                                    "items": [
                                      {
                                        "schema": {
                                          "fullComment": "",
                                          "properties": [
                                            {
                                              "name": "name",
                                              "required": true,
                                              "schema": {
                                                "fullComment": "name in case of it being a reference, otherwise null",
                                                "type": "string"
                                              }
                                            },
                                            {
                                              "name": "schema",
                                              "required": true,
                                              "schema": {
                                                "circularRefName": "SimplifiedSchema",
                                                "properties": [],
                                                "type": "object"
                                              }
                                            }
                                          ],
                                          "type": "object"
                                        },
                                        "name": "SimplifiedSchemaItem"
                                      }
                                    ],
                                    "type": "array"
                                  }
                                },
                                {
                                  "name": "fullComment",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Full doccomment, parsed without all stars syntax.\n\nNB: besides this, every `CommentType` can optionally also be found as a property on the `SimplifiedSchema`",
                                    "nb": "besides this, every `CommentType` can optionally also be found as a property on the `SimplifiedSchema`",
                                    "type": "string"
                                  }
                                }
                              ],
                              "type": "object"
                            }
                          },
                          {
                            "name": "isObject",
                            "required": true,
                            "schema": {
                              "fullComment": "if the type is an object, this is true. false if it's an array",
                              "type": "boolean"
                            }
                          },
                          {
                            "name": "isArray",
                            "required": true,
                            "schema": {
                              "fullComment": "if the type is an array, this is true",
                              "type": "boolean"
                            }
                          },
                          {
                            "name": "isPrimitive",
                            "required": true,
                            "schema": {
                              "fullComment": "if it's a primitive type like \"string\", \"number\", \"boolean\", \"null\" | \"undefined\"",
                              "type": "boolean"
                            }
                          },
                          {
                            "name": "isEnum",
                            "required": true,
                            "schema": {
                              "fullComment": "will be true for any primitive conjunction types",
                              "type": "boolean"
                            }
                          },
                          {
                            "name": "isEnumLiteral",
                            "required": true,
                            "schema": {
                              "fullComment": "will be true for string conjunction types",
                              "type": "boolean"
                            }
                          },
                          {
                            "name": "typeCoverage",
                            "required": true,
                            "schema": {
                              "fullComment": "quantification of coverage of the specified type or subtypes in our database.",
                              "type": "number"
                            }
                          },
                          {
                            "name": "rawType",
                            "required": true,
                            "schema": {
                              "fullComment": "raw type string",
                              "type": "string"
                            }
                          }
                        ],
                        "type": "object"
                      }
                    },
                    {
                      "name": "description",
                      "required": false,
                      "schema": {
                        "fullComment": "jsdoc comment above the interface, if any\n\na string that is known to contain markdown.",
                        "type": "string"
                      }
                    },
                    {
                      "name": "commentsInside",
                      "required": true,
                      "schema": {
                        "items": [
                          {
                            "schema": {
                              "fullComment": "comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!",
                              "nb": "with the current setup we can also parse `.md` files as being a TsComment, keep it that way!",
                              "properties": [
                                {
                                  "name": "operationName",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
                                    "type": "null"
                                  }
                                },
                                {
                                  "name": "projectRelativePath",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "operationRelativePath",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "id",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "unique id of the model",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "name",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "name (identifier) of the model",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "slug",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "kebab-case variant of the name",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "operationRelativeTypescriptFilePath",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "relative file path from the operation that this indexed instance is referencing to\n\ne.g. src/general.ts\n\n(no preceding slash)",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "comment",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "the content of the comment in markdown, without frontmatter\n\na string that is known to contain markdown.",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "parameters",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "parameters destructured from the frontmatter of the parsed markdown (if comment is not a oneliner, otherwise it'll be empty)\n\nOur version of frontmatter is a bit simpler than regular frontmatter\n\nNot sure if this is a good idea, but it keeps it simple for our OS\n\nall values parse in a similar way to csv\n\nmake sure that you use quotes if you want to store a string with commas, because commas in a parameter indicate that it is a string array\n\nNB: string arrays are comma separated values, where you can put values with special characters in between quotes",
                                    "nb": "string arrays are comma separated values, where you can put values with special characters in between quotes",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "types",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "These are the type indicators that were found in this single or multiline comment. Can be multiple.",
                                    "items": [
                                      {
                                        "schema": {
                                          "enum": [
                                            "todo",
                                            "discussion",
                                            "idea",
                                            "later",
                                            "nb",
                                            "title",
                                            "section",
                                            "description"
                                          ],
                                          "fullComment": "special line prefixes:\n\n**Developer related comments**\n\n- TODO: for developer to know what to do\n- DISCUSSION: for developer to state that discussion is needed\n- IDEA: for developer to state ideas\n- LATER: for developer to mark as thing that needs to be done later\n- NB: for developer to add a note\n\n**Form related comments**\n\n- TITLE: if available, will be used as title of form input (overwrites humanCase version of the property-name itself in that case)\n- SECTION: start a new section in the form from this point, the value behind here can be the title\n- DESCRIPTION: if available, will be used as description of the form input",
                                          "type": "string"
                                        },
                                        "name": "CommentType"
                                      }
                                    ],
                                    "type": "array"
                                  }
                                },
                                {
                                  "name": "firstLine",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "first line of the comment",
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "lastLine",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "last line of the comment",
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "statementName",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "statement name the comment belongs to",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "rawStatement",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "raw statement text the comment belongs to",
                                    "type": "string"
                                  }
                                }
                              ],
                              "type": "object"
                            },
                            "name": "TsComment"
                          }
                        ],
                        "type": "array"
                      }
                    },
                    {
                      "name": "isExported",
                      "required": true,
                      "schema": {
                        "fullComment": "boolean indicating whether or not this interface is exported from the file, and with that, from the operation",
                        "type": "boolean"
                      }
                    },
                    {
                      "name": "hasGeneric",
                      "required": true,
                      "schema": {
                        "fullComment": "boolean indicating whether or not this interface uses one or more generic variables",
                        "type": "boolean"
                      }
                    },
                    {
                      "name": "rawText",
                      "required": false,
                      "schema": {
                        "fullComment": "raw interface text, coming from ts-morph",
                        "type": "string"
                      }
                    },
                    {
                      "name": "extensions",
                      "required": false,
                      "schema": {
                        "fullComment": "if the interface extends anything, names will be specified here",
                        "items": [
                          {
                            "schema": {
                              "type": "string"
                            },
                            "name": null
                          }
                        ],
                        "type": "array"
                      }
                    },
                    {
                      "name": "isDbModel",
                      "required": true,
                      "schema": {
                        "fullComment": "If true, this interface is marked as a db model, which means it will be included in the db function autocompletion so it's easy to store and fetch data in this format.\n\nIs automatically set to true when indexing and when one of the following statements holds true\n\n- if the doc-comment contains frontmatter with `isDbModel` or `dbStorageMethod` specified\n- if the interface last word is \"db\" or \"model\" and if there are minimum 2 words\n- if the interface extends some other special interface",
                        "type": "boolean"
                      }
                    },
                    {
                      "name": "isOperationIndex",
                      "required": true,
                      "schema": {
                        "fullComment": "If this is true, this is a db-model that is ALWAYS attached to an operation.\n\nBy default this means it will get a folder in the `db` folder in the operation folder, where the interface will be stored linked to the file-id in specified folder.\n\nHowever, you can also specify a `storageLocationRelativeFilePath` if you want to store the model on an exact location relative to the operation root.",
                        "type": "boolean"
                      }
                    },
                    {
                      "name": "operationStorageLocationRelativeFilePath",
                      "required": false,
                      "schema": {
                        "fullComment": "If given, specify a file path here where the data should be stored. Must be an operation relative path.\n\nThis will map onto the \"operationRelativePath\" for that instance.\n\nNB: Since this is a single file per project or per operation, it will overwrite your data in case of `jsonSingle` or `markdown` storage.",
                        "nb": "Since this is a single file per project or per operation, it will overwrite your data in case of `jsonSingle` or `markdown` storage.",
                        "type": "string"
                      }
                    },
                    {
                      "name": "dbStorageMethod",
                      "required": false,
                      "schema": {
                        "enum": [
                          "jsonMultiple",
                          "jsonSingle",
                          "markdown",
                          "keyValueMarkdown",
                          "csv"
                        ],
                        "fullComment": "The DbStorageMethod for this inteface (only for db models, otherwise this will be undefined)\n\nIf this interface is a db model, you can also specify the default db storage method for it. You can do this by specifying it in the frontmatter of the doccomment of the interface. You can also extend a xxxModelType model which can have a dbStorageMethod attached.\n\nWhen storing something into the database, this value can be overwritten in your query configuration.\n\nThe following strategies are available to store the data.\n\n- **jsonMultiple *(default)***: stores the data in a json file which is an array of this data structure. This file will be located in `db/[pluralized-kebab-case-model-name].json`\n\n- **jsonSingle**: stores the data in a json file which is of this data structure (single object) These files will be located in `db/[pluralized-kebab-case-model-name]/[instance-slug-or-id].json`\n\n- **markdown**: stores the data in a markdown file. Takes \"markdown\" parameter as the main markdown. The other parameters are stored as front-matter. This these files will be located in `db/[pluralized-kebab-case-model-name]/[instance-slug-or-id].md`\n\n- **keyValueMarkdown**: stores the data in key value markdown format. This file will be located in `db/[pluralized-kebab-case-model-name].md`\n\n- **csv**: stores the data in a csv file (only possible for flat object datastructures). This file will be located in `db/[pluralized-kebab-case-model-name].csv`\n\n## Definitions:\n\n- [pluralized-kebab-case-model-name]: e.g. `StudentUser` becomes `student-users`\n- [instance-slug-or-id]: For all models with a slug parameter, the filename will be that slug of that instance. Otherwise, `id` will be used",
                        "type": "string"
                      }
                    }
                  ],
                  "type": "object"
                },
                "name": "TsInterface"
              }
            ],
            "type": "array"
          }
        },
        {
          "name": "tsComments",
          "required": false,
          "schema": {
            "items": [
              {
                "schema": {
                  "fullComment": "comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!",
                  "nb": "with the current setup we can also parse `.md` files as being a TsComment, keep it that way!",
                  "properties": [
                    {
                      "name": "operationName",
                      "required": true,
                      "schema": {
                        "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
                        "type": "null"
                      }
                    },
                    {
                      "name": "projectRelativePath",
                      "required": true,
                      "schema": {
                        "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
                        "type": "string"
                      }
                    },
                    {
                      "name": "operationRelativePath",
                      "required": false,
                      "schema": {
                        "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
                        "type": "string"
                      }
                    },
                    {
                      "name": "id",
                      "required": true,
                      "schema": {
                        "fullComment": "unique id of the model",
                        "type": "string"
                      }
                    },
                    {
                      "name": "name",
                      "required": true,
                      "schema": {
                        "fullComment": "name (identifier) of the model",
                        "type": "string"
                      }
                    },
                    {
                      "name": "slug",
                      "required": true,
                      "schema": {
                        "fullComment": "kebab-case variant of the name",
                        "type": "string"
                      }
                    },
                    {
                      "name": "operationRelativeTypescriptFilePath",
                      "required": true,
                      "schema": {
                        "fullComment": "relative file path from the operation that this indexed instance is referencing to\n\ne.g. src/general.ts\n\n(no preceding slash)",
                        "type": "string"
                      }
                    },
                    {
                      "name": "comment",
                      "required": true,
                      "schema": {
                        "fullComment": "the content of the comment in markdown, without frontmatter\n\na string that is known to contain markdown.",
                        "type": "string"
                      }
                    },
                    {
                      "name": "parameters",
                      "required": true,
                      "schema": {
                        "fullComment": "parameters destructured from the frontmatter of the parsed markdown (if comment is not a oneliner, otherwise it'll be empty)\n\nOur version of frontmatter is a bit simpler than regular frontmatter\n\nNot sure if this is a good idea, but it keeps it simple for our OS\n\nall values parse in a similar way to csv\n\nmake sure that you use quotes if you want to store a string with commas, because commas in a parameter indicate that it is a string array\n\nNB: string arrays are comma separated values, where you can put values with special characters in between quotes",
                        "nb": "string arrays are comma separated values, where you can put values with special characters in between quotes",
                        "properties": [],
                        "type": "object"
                      }
                    },
                    {
                      "name": "types",
                      "required": true,
                      "schema": {
                        "fullComment": "These are the type indicators that were found in this single or multiline comment. Can be multiple.",
                        "items": [
                          {
                            "schema": {
                              "enum": [
                                "todo",
                                "discussion",
                                "idea",
                                "later",
                                "nb",
                                "title",
                                "section",
                                "description"
                              ],
                              "fullComment": "special line prefixes:\n\n**Developer related comments**\n\n- TODO: for developer to know what to do\n- DISCUSSION: for developer to state that discussion is needed\n- IDEA: for developer to state ideas\n- LATER: for developer to mark as thing that needs to be done later\n- NB: for developer to add a note\n\n**Form related comments**\n\n- TITLE: if available, will be used as title of form input (overwrites humanCase version of the property-name itself in that case)\n- SECTION: start a new section in the form from this point, the value behind here can be the title\n- DESCRIPTION: if available, will be used as description of the form input",
                              "type": "string"
                            },
                            "name": "CommentType"
                          }
                        ],
                        "type": "array"
                      }
                    },
                    {
                      "name": "firstLine",
                      "required": true,
                      "schema": {
                        "fullComment": "first line of the comment",
                        "type": "number"
                      }
                    },
                    {
                      "name": "lastLine",
                      "required": true,
                      "schema": {
                        "fullComment": "last line of the comment",
                        "type": "number"
                      }
                    },
                    {
                      "name": "statementName",
                      "required": false,
                      "schema": {
                        "fullComment": "statement name the comment belongs to",
                        "type": "string"
                      }
                    },
                    {
                      "name": "rawStatement",
                      "required": false,
                      "schema": {
                        "fullComment": "raw statement text the comment belongs to",
                        "type": "string"
                      }
                    }
                  ],
                  "type": "object"
                },
                "name": "TsComment"
              }
            ],
            "type": "array"
          }
        },
        {
          "name": "tsImports",
          "required": false,
          "schema": {
            "items": [
              {
                "schema": {
                  "fullComment": "",
                  "properties": [
                    {
                      "name": "operationName",
                      "required": true,
                      "schema": {
                        "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
                        "type": "null"
                      }
                    },
                    {
                      "name": "projectRelativePath",
                      "required": true,
                      "schema": {
                        "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
                        "type": "string"
                      }
                    },
                    {
                      "name": "operationRelativePath",
                      "required": false,
                      "schema": {
                        "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
                        "type": "string"
                      }
                    },
                    {
                      "name": "id",
                      "required": true,
                      "schema": {
                        "fullComment": "unique id of the model",
                        "type": "string"
                      }
                    },
                    {
                      "name": "name",
                      "required": true,
                      "schema": {
                        "fullComment": "name (identifier) of the model",
                        "type": "string"
                      }
                    },
                    {
                      "name": "slug",
                      "required": true,
                      "schema": {
                        "fullComment": "kebab-case variant of the name",
                        "type": "string"
                      }
                    },
                    {
                      "name": "operationRelativeTypescriptFilePath",
                      "required": true,
                      "schema": {
                        "fullComment": "relative file path from the operation that this indexed instance is referencing to\n\ne.g. src/general.ts\n\n(no preceding slash)",
                        "type": "string"
                      }
                    },
                    {
                      "name": "comments",
                      "required": true,
                      "schema": {
                        "fullComment": "surrounding comments and comments inside of the import",
                        "items": [
                          {
                            "schema": {
                              "fullComment": "comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!",
                              "nb": "with the current setup we can also parse `.md` files as being a TsComment, keep it that way!",
                              "properties": [
                                {
                                  "name": "operationName",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
                                    "type": "null"
                                  }
                                },
                                {
                                  "name": "projectRelativePath",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "operationRelativePath",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "id",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "unique id of the model",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "name",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "name (identifier) of the model",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "slug",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "kebab-case variant of the name",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "operationRelativeTypescriptFilePath",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "relative file path from the operation that this indexed instance is referencing to\n\ne.g. src/general.ts\n\n(no preceding slash)",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "comment",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "the content of the comment in markdown, without frontmatter\n\na string that is known to contain markdown.",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "parameters",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "parameters destructured from the frontmatter of the parsed markdown (if comment is not a oneliner, otherwise it'll be empty)\n\nOur version of frontmatter is a bit simpler than regular frontmatter\n\nNot sure if this is a good idea, but it keeps it simple for our OS\n\nall values parse in a similar way to csv\n\nmake sure that you use quotes if you want to store a string with commas, because commas in a parameter indicate that it is a string array\n\nNB: string arrays are comma separated values, where you can put values with special characters in between quotes",
                                    "nb": "string arrays are comma separated values, where you can put values with special characters in between quotes",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "types",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "These are the type indicators that were found in this single or multiline comment. Can be multiple.",
                                    "items": [
                                      {
                                        "schema": {
                                          "enum": [
                                            "todo",
                                            "discussion",
                                            "idea",
                                            "later",
                                            "nb",
                                            "title",
                                            "section",
                                            "description"
                                          ],
                                          "fullComment": "special line prefixes:\n\n**Developer related comments**\n\n- TODO: for developer to know what to do\n- DISCUSSION: for developer to state that discussion is needed\n- IDEA: for developer to state ideas\n- LATER: for developer to mark as thing that needs to be done later\n- NB: for developer to add a note\n\n**Form related comments**\n\n- TITLE: if available, will be used as title of form input (overwrites humanCase version of the property-name itself in that case)\n- SECTION: start a new section in the form from this point, the value behind here can be the title\n- DESCRIPTION: if available, will be used as description of the form input",
                                          "type": "string"
                                        },
                                        "name": "CommentType"
                                      }
                                    ],
                                    "type": "array"
                                  }
                                },
                                {
                                  "name": "firstLine",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "first line of the comment",
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "lastLine",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "last line of the comment",
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "statementName",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "statement name the comment belongs to",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "rawStatement",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "raw statement text the comment belongs to",
                                    "type": "string"
                                  }
                                }
                              ],
                              "type": "object"
                            },
                            "name": "TsComment"
                          }
                        ],
                        "type": "array"
                      }
                    },
                    {
                      "name": "module",
                      "required": true,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "alias",
                      "required": false,
                      "schema": {
                        "fullComment": "TODO: not sure, but I believe alias should be defined at the import, not at the export, right?",
                        "todo": "not sure, but I believe alias should be defined at the import, not at the export, right?",
                        "type": "string"
                      }
                    },
                    {
                      "name": "classification",
                      "required": true,
                      "schema": {
                        "enum": [
                          "node",
                          "react",
                          "package",
                          "operation",
                          "internal"
                        ],
                        "fullComment": "node: node core packages like fs and path\n\nreact: react standard packages like react, react-native, expo, react-dom, etc.\n\npackage: packages from npm that are not classified as operations\n\noperation: operations from our monorepo\n\ninternal: imports from other places in the same operation\n\nNB: don't confuse this with OperationClassification",
                        "nb": "don't confuse this with OperationClassification",
                        "type": "string"
                      }
                    },
                    {
                      "name": "type",
                      "required": false,
                      "schema": {
                        "enum": [
                          "value",
                          "type"
                        ],
                        "fullComment": "sometimes the import statement module referenced cannot be found, in that case it cannot be known whether the import should contain a type or value, so it will be undefined.",
                        "type": "string"
                      }
                    },
                    {
                      "name": "hasGeneric",
                      "required": false,
                      "schema": {
                        "fullComment": "only for type exports. tells you whether or not the type has one or more generic parameter(s)",
                        "type": "boolean"
                      }
                    },
                    {
                      "name": "isAbsolute",
                      "required": true,
                      "schema": {
                        "type": "boolean"
                      }
                    },
                    {
                      "name": "isModuleResolved",
                      "required": true,
                      "schema": {
                        "type": "boolean"
                      }
                    },
                    {
                      "name": "isModuleFromMonorepo",
                      "required": true,
                      "schema": {
                        "type": "boolean"
                      }
                    }
                  ],
                  "type": "object"
                },
                "name": "TsImport"
              }
            ],
            "type": "array"
          }
        },
        {
          "name": "tsExports",
          "required": false,
          "schema": {
            "items": [
              {
                "schema": {
                  "fullComment": "",
                  "properties": [
                    {
                      "name": "operationName",
                      "required": true,
                      "schema": {
                        "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
                        "type": "null"
                      }
                    },
                    {
                      "name": "projectRelativePath",
                      "required": true,
                      "schema": {
                        "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
                        "type": "string"
                      }
                    },
                    {
                      "name": "operationRelativePath",
                      "required": false,
                      "schema": {
                        "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
                        "type": "string"
                      }
                    },
                    {
                      "name": "id",
                      "required": true,
                      "schema": {
                        "fullComment": "unique id of the model",
                        "type": "string"
                      }
                    },
                    {
                      "name": "name",
                      "required": true,
                      "schema": {
                        "fullComment": "name (identifier) of the model",
                        "type": "string"
                      }
                    },
                    {
                      "name": "slug",
                      "required": true,
                      "schema": {
                        "fullComment": "kebab-case variant of the name",
                        "type": "string"
                      }
                    },
                    {
                      "name": "operationRelativeTypescriptFilePath",
                      "required": true,
                      "schema": {
                        "fullComment": "relative file path from the operation that this indexed instance is referencing to\n\ne.g. src/general.ts\n\n(no preceding slash)",
                        "type": "string"
                      }
                    },
                    {
                      "name": "comments",
                      "required": true,
                      "schema": {
                        "fullComment": "surrounding comments and comments inside of the import",
                        "items": [],
                        "type": "array"
                      }
                    },
                    {
                      "name": "type",
                      "required": false,
                      "schema": {
                        "enum": [
                          "value",
                          "type"
                        ],
                        "type": "string"
                      }
                    },
                    {
                      "name": "alias",
                      "required": false,
                      "schema": {
                        "fullComment": "used for duplicate export names",
                        "type": "string"
                      }
                    },
                    {
                      "name": "hasGeneric",
                      "required": false,
                      "schema": {
                        "fullComment": "only for type exports. tells you whether or not the type has one or more generic parameter(s)",
                        "type": "boolean"
                      }
                    }
                  ],
                  "type": "object"
                },
                "name": "TsExport"
              }
            ],
            "type": "array"
          }
        },
        {
          "name": "success",
          "required": false,
          "schema": {
            "type": "boolean"
          }
        },
        {
          "name": "response",
          "required": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "markdown",
          "required": false,
          "schema": {
            "fullComment": "",
            "properties": [
              {
                "name": "fileName",
                "required": false,
                "schema": {
                  "fullComment": "if available, this can be the filename of the markdown in this markdown-parse. Can be used for things like merging",
                  "type": "string"
                }
              },
              {
                "name": "createdAt",
                "required": false,
                "schema": {
                  "type": "number"
                }
              },
              {
                "name": "openedAt",
                "required": false,
                "schema": {
                  "type": "number"
                }
              },
              {
                "name": "updatedAt",
                "required": false,
                "schema": {
                  "type": "number"
                }
              },
              {
                "name": "deletedAt",
                "required": false,
                "schema": {
                  "type": "number"
                }
              },
              {
                "name": "createdFirstAt",
                "required": false,
                "schema": {
                  "type": "number"
                }
              },
              {
                "name": "parameters",
                "required": true,
                "schema": {
                  "fullComment": "parameters found in frontmatter\n\nOur version of frontmatter is a bit simpler than regular frontmatter\n\nNot sure if this is a good idea, but it keeps it simple for our OS\n\nall values parse in a similar way to csv\n\nmake sure that you use quotes if you want to store a string with commas, because commas in a parameter indicate that it is a string array\n\nNB: string arrays are comma separated values, where you can put values with special characters in between quotes",
                  "nb": "string arrays are comma separated values, where you can put values with special characters in between quotes",
                  "properties": [],
                  "type": "object"
                }
              },
              {
                "name": "downmatterParameters",
                "required": false,
                "schema": {
                  "fullComment": "downmatter is the same as frontmatter, but it is to be found at the end of the file. It is supposed to be containing things that are not important for the user to know, yet it is important metadata that is connected to this file. This can be indexed things, for example.\n\n",
                  "properties": [
                    {
                      "name": "detectedLanguage",
                      "required": false,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "labels",
                      "required": false,
                      "schema": {
                        "items": [
                          {
                            "schema": {
                              "type": "string"
                            },
                            "name": null
                          }
                        ],
                        "type": "array"
                      }
                    }
                  ],
                  "type": "object"
                }
              },
              {
                "name": "content",
                "required": false,
                "schema": {
                  "fullComment": "structured content based on h1, h2, h3, etc (paragraphs, recursive)",
                  "items": [
                    {
                      "schema": {
                        "fullComment": "",
                        "properties": [
                          {
                            "name": "level",
                            "required": true,
                            "schema": {
                              "fullComment": "0 is a paragraph 1-6 is h1 until h6",
                              "type": "number"
                            }
                          },
                          {
                            "name": "content",
                            "required": false,
                            "schema": {
                              "type": "string"
                            }
                          },
                          {
                            "name": "markdownEmbed",
                            "required": false,
                            "schema": {
                              "fullComment": "Anything in the format `![alt](src)`\n\nNB: I need to be very clear how this one works",
                              "nb": "I need to be very clear how this one works",
                              "properties": [
                                {
                                  "name": "alt",
                                  "required": true,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "src",
                                  "required": true,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "type",
                                  "required": true,
                                  "schema": {
                                    "enum": [
                                      "youtube",
                                      "video",
                                      "image",
                                      "audio",
                                      "markdown",
                                      "json",
                                      "typescript",
                                      "file"
                                    ],
                                    "fullComment": "type of asset that is being embedded",
                                    "type": "string"
                                  }
                                }
                              ],
                              "type": "object"
                            }
                          },
                          {
                            "name": "markdownLink",
                            "required": false,
                            "schema": {
                              "fullComment": "Anything in the format `[alt](href)`\n\nIt needs to be clear how this works. There is a convention for this, and I should implement that as good as possible, and document it here",
                              "properties": [
                                {
                                  "name": "alt",
                                  "required": true,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "href",
                                  "required": true,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "type",
                                  "required": true,
                                  "schema": {
                                    "enum": [
                                      "youtube",
                                      "video",
                                      "image",
                                      "audio",
                                      "markdown",
                                      "json",
                                      "typescript",
                                      "file"
                                    ],
                                    "fullComment": "Can be inferred from href\n\ntype of asset that is being embedded",
                                    "type": "string"
                                  }
                                }
                              ],
                              "type": "object"
                            }
                          },
                          {
                            "name": "title",
                            "required": false,
                            "schema": {
                              "fullComment": "NB: title can also be an empty string (\"\")",
                              "nb": "title can also be an empty string (\"\")",
                              "type": "string"
                            }
                          },
                          {
                            "name": "children",
                            "required": false,
                            "schema": {
                              "fullComment": "all content until the next title. it's either a content array if there's any titles found, or a string[] if it's paragraphs",
                              "items": [
                                {
                                  "schema": {
                                    "circularRefName": "MarkdownChunk",
                                    "properties": [],
                                    "type": "object"
                                  },
                                  "name": "MarkdownChunk"
                                }
                              ],
                              "type": "array"
                            }
                          }
                        ],
                        "type": "object"
                      },
                      "name": "MarkdownChunk"
                    }
                  ],
                  "type": "array"
                }
              },
              {
                "name": "raw",
                "required": true,
                "schema": {
                  "fullComment": "raw markdown without frontmatter",
                  "type": "string"
                }
              }
            ],
            "type": "object"
          }
        },
        {
          "name": "pathMetaData",
          "required": false,
          "schema": {
            "fullComment": "All interesting metadata about any path (files and folders)",
            "properties": [
              {
                "name": "relativePathFromProjectRoot",
                "required": true,
                "schema": {
                  "fullComment": "relative file or folder path from the project root",
                  "type": "string"
                }
              },
              {
                "name": "mainComment",
                "required": false,
                "schema": {
                  "fullComment": "a comment about this file or folder. Can be parsed from:\n- an associated markdown file and/or the top of the file (If they're both there, they're concatenated)\n- for folders, looks for README.md\n\ncomments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!",
                  "nb": "with the current setup we can also parse `.md` files as being a TsComment, keep it that way!",
                  "properties": [
                    {
                      "name": "operationName",
                      "required": true,
                      "schema": {
                        "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
                        "type": "null"
                      }
                    },
                    {
                      "name": "projectRelativePath",
                      "required": true,
                      "schema": {
                        "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
                        "type": "string"
                      }
                    },
                    {
                      "name": "operationRelativePath",
                      "required": false,
                      "schema": {
                        "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
                        "type": "string"
                      }
                    },
                    {
                      "name": "id",
                      "required": true,
                      "schema": {
                        "fullComment": "unique id of the model",
                        "type": "string"
                      }
                    },
                    {
                      "name": "name",
                      "required": true,
                      "schema": {
                        "fullComment": "name (identifier) of the model",
                        "type": "string"
                      }
                    },
                    {
                      "name": "slug",
                      "required": true,
                      "schema": {
                        "fullComment": "kebab-case variant of the name",
                        "type": "string"
                      }
                    },
                    {
                      "name": "operationRelativeTypescriptFilePath",
                      "required": true,
                      "schema": {
                        "fullComment": "relative file path from the operation that this indexed instance is referencing to\n\ne.g. src/general.ts\n\n(no preceding slash)",
                        "type": "string"
                      }
                    },
                    {
                      "name": "comment",
                      "required": true,
                      "schema": {
                        "fullComment": "the content of the comment in markdown, without frontmatter\n\na string that is known to contain markdown.",
                        "type": "string"
                      }
                    },
                    {
                      "name": "parameters",
                      "required": true,
                      "schema": {
                        "fullComment": "parameters destructured from the frontmatter of the parsed markdown (if comment is not a oneliner, otherwise it'll be empty)\n\nOur version of frontmatter is a bit simpler than regular frontmatter\n\nNot sure if this is a good idea, but it keeps it simple for our OS\n\nall values parse in a similar way to csv\n\nmake sure that you use quotes if you want to store a string with commas, because commas in a parameter indicate that it is a string array\n\nNB: string arrays are comma separated values, where you can put values with special characters in between quotes",
                        "nb": "string arrays are comma separated values, where you can put values with special characters in between quotes",
                        "properties": [],
                        "type": "object"
                      }
                    },
                    {
                      "name": "types",
                      "required": true,
                      "schema": {
                        "fullComment": "These are the type indicators that were found in this single or multiline comment. Can be multiple.",
                        "items": [
                          {
                            "schema": {
                              "enum": [
                                "todo",
                                "discussion",
                                "idea",
                                "later",
                                "nb",
                                "title",
                                "section",
                                "description"
                              ],
                              "fullComment": "special line prefixes:\n\n**Developer related comments**\n\n- TODO: for developer to know what to do\n- DISCUSSION: for developer to state that discussion is needed\n- IDEA: for developer to state ideas\n- LATER: for developer to mark as thing that needs to be done later\n- NB: for developer to add a note\n\n**Form related comments**\n\n- TITLE: if available, will be used as title of form input (overwrites humanCase version of the property-name itself in that case)\n- SECTION: start a new section in the form from this point, the value behind here can be the title\n- DESCRIPTION: if available, will be used as description of the form input",
                              "type": "string"
                            },
                            "name": "CommentType"
                          }
                        ],
                        "type": "array"
                      }
                    },
                    {
                      "name": "firstLine",
                      "required": true,
                      "schema": {
                        "fullComment": "first line of the comment",
                        "type": "number"
                      }
                    },
                    {
                      "name": "lastLine",
                      "required": true,
                      "schema": {
                        "fullComment": "last line of the comment",
                        "type": "number"
                      }
                    },
                    {
                      "name": "statementName",
                      "required": false,
                      "schema": {
                        "fullComment": "statement name the comment belongs to",
                        "type": "string"
                      }
                    },
                    {
                      "name": "rawStatement",
                      "required": false,
                      "schema": {
                        "fullComment": "raw statement text the comment belongs to",
                        "type": "string"
                      }
                    }
                  ],
                  "type": "object"
                }
              },
              {
                "name": "fullFileName",
                "required": false,
                "schema": {
                  "fullComment": "filename including extension, if the path is not a folder",
                  "type": "string"
                }
              },
              {
                "name": "isFolder",
                "required": true,
                "schema": {
                  "type": "boolean"
                }
              },
              {
                "name": "updatedAt",
                "required": true,
                "schema": {
                  "fullComment": "unix time this file was last updated (or for folders: unix time of last modifiation of any file in this folder, recursively)\n\nTODO: renames also count as updates, I guess. Needs to be clear!",
                  "todo": "renames also count as updates, I guess. Needs to be clear!",
                  "type": "number"
                }
              },
              {
                "name": "createdAt",
                "required": true,
                "schema": {
                  "fullComment": "unix time this file was created (or for folders: unix time of creation of the first file in this folder)\n\nTODO: figure out if we can get the creation date of the folder itself?",
                  "todo": "figure out if we can get the creation date of the folder itself?",
                  "type": "number"
                }
              },
              {
                "name": "sizes",
                "required": true,
                "schema": {
                  "fullComment": "categorized sizes for the file(s)\n\nobjective size measurements of all files in a folder\n\nsummary for a folder should contain file-summaries for different filetypes and an overal file summary",
                  "properties": [
                    {
                      "name": "size",
                      "required": true,
                      "schema": {
                        "fullComment": "type interface that can be used to summarize multiple files",
                        "properties": [
                          {
                            "name": "numberOfFiles",
                            "required": false,
                            "schema": {
                              "fullComment": "if this is about multiple files, the number of files is specified here",
                              "type": "number"
                            }
                          },
                          {
                            "name": "characters",
                            "required": true,
                            "schema": {
                              "fullComment": "amount of characters",
                              "type": "number"
                            }
                          },
                          {
                            "name": "lines",
                            "required": true,
                            "schema": {
                              "fullComment": "amount of lines",
                              "type": "number"
                            }
                          },
                          {
                            "name": "bytes",
                            "required": true,
                            "schema": {
                              "fullComment": "amount of bytes",
                              "type": "number"
                            }
                          },
                          {
                            "name": "linesPerFile",
                            "required": true,
                            "schema": {
                              "fullComment": "rounded, amount of lines per file (averaged)",
                              "type": "number"
                            }
                          },
                          {
                            "name": "charactersPerLine",
                            "required": true,
                            "schema": {
                              "fullComment": "rounded, amount of characters per line (averaged)",
                              "type": "number"
                            }
                          },
                          {
                            "name": "bytesPerCharacter",
                            "required": true,
                            "schema": {
                              "fullComment": "rounded, amount of bytes per character",
                              "type": "number"
                            }
                          }
                        ],
                        "type": "object"
                      }
                    },
                    {
                      "name": "textSize",
                      "required": true,
                      "schema": {
                        "fullComment": "type interface that can be used to summarize multiple files",
                        "properties": [
                          {
                            "name": "numberOfFiles",
                            "required": false,
                            "schema": {
                              "fullComment": "if this is about multiple files, the number of files is specified here",
                              "type": "number"
                            }
                          },
                          {
                            "name": "characters",
                            "required": true,
                            "schema": {
                              "fullComment": "amount of characters",
                              "type": "number"
                            }
                          },
                          {
                            "name": "lines",
                            "required": true,
                            "schema": {
                              "fullComment": "amount of lines",
                              "type": "number"
                            }
                          },
                          {
                            "name": "bytes",
                            "required": true,
                            "schema": {
                              "fullComment": "amount of bytes",
                              "type": "number"
                            }
                          },
                          {
                            "name": "linesPerFile",
                            "required": true,
                            "schema": {
                              "fullComment": "rounded, amount of lines per file (averaged)",
                              "type": "number"
                            }
                          },
                          {
                            "name": "charactersPerLine",
                            "required": true,
                            "schema": {
                              "fullComment": "rounded, amount of characters per line (averaged)",
                              "type": "number"
                            }
                          },
                          {
                            "name": "bytesPerCharacter",
                            "required": true,
                            "schema": {
                              "fullComment": "rounded, amount of bytes per character",
                              "type": "number"
                            }
                          }
                        ],
                        "type": "object"
                      }
                    },
                    {
                      "name": "dataSize",
                      "required": true,
                      "schema": {
                        "fullComment": "type interface that can be used to summarize multiple files",
                        "properties": [
                          {
                            "name": "numberOfFiles",
                            "required": false,
                            "schema": {
                              "fullComment": "if this is about multiple files, the number of files is specified here",
                              "type": "number"
                            }
                          },
                          {
                            "name": "characters",
                            "required": true,
                            "schema": {
                              "fullComment": "amount of characters",
                              "type": "number"
                            }
                          },
                          {
                            "name": "lines",
                            "required": true,
                            "schema": {
                              "fullComment": "amount of lines",
                              "type": "number"
                            }
                          },
                          {
                            "name": "bytes",
                            "required": true,
                            "schema": {
                              "fullComment": "amount of bytes",
                              "type": "number"
                            }
                          },
                          {
                            "name": "linesPerFile",
                            "required": true,
                            "schema": {
                              "fullComment": "rounded, amount of lines per file (averaged)",
                              "type": "number"
                            }
                          },
                          {
                            "name": "charactersPerLine",
                            "required": true,
                            "schema": {
                              "fullComment": "rounded, amount of characters per line (averaged)",
                              "type": "number"
                            }
                          },
                          {
                            "name": "bytesPerCharacter",
                            "required": true,
                            "schema": {
                              "fullComment": "rounded, amount of bytes per character",
                              "type": "number"
                            }
                          }
                        ],
                        "type": "object"
                      }
                    },
                    {
                      "name": "codeSize",
                      "required": true,
                      "schema": {
                        "fullComment": "type interface that can be used to summarize multiple files",
                        "properties": [
                          {
                            "name": "numberOfFiles",
                            "required": false,
                            "schema": {
                              "fullComment": "if this is about multiple files, the number of files is specified here",
                              "type": "number"
                            }
                          },
                          {
                            "name": "characters",
                            "required": true,
                            "schema": {
                              "fullComment": "amount of characters",
                              "type": "number"
                            }
                          },
                          {
                            "name": "lines",
                            "required": true,
                            "schema": {
                              "fullComment": "amount of lines",
                              "type": "number"
                            }
                          },
                          {
                            "name": "bytes",
                            "required": true,
                            "schema": {
                              "fullComment": "amount of bytes",
                              "type": "number"
                            }
                          },
                          {
                            "name": "linesPerFile",
                            "required": true,
                            "schema": {
                              "fullComment": "rounded, amount of lines per file (averaged)",
                              "type": "number"
                            }
                          },
                          {
                            "name": "charactersPerLine",
                            "required": true,
                            "schema": {
                              "fullComment": "rounded, amount of characters per line (averaged)",
                              "type": "number"
                            }
                          },
                          {
                            "name": "bytesPerCharacter",
                            "required": true,
                            "schema": {
                              "fullComment": "rounded, amount of bytes per character",
                              "type": "number"
                            }
                          }
                        ],
                        "type": "object"
                      }
                    }
                  ],
                  "type": "object"
                }
              }
            ],
            "type": "object"
          }
        },
        {
          "name": "operationIndexes",
          "required": false,
          "schema": {
            "items": [
              {
                "schema": {
                  "fullComment": "--- dbStorageMethod: jsonSingle operationRelativePath: db/operation-index.json\n---\n\ncontains all calculated info about an operation that needs to be retreived often: some package-only things, but also a collection of all indexes of all files\n\nshould be able to be found in operaiton folder in /db/operation-index.json",
                  "properties": [
                    {
                      "name": "slug",
                      "required": true,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "name",
                      "required": true,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "language",
                      "required": true,
                      "schema": {
                        "enum": [
                          "english",
                          "dutch",
                          "nepali",
                          "portuguese",
                          "brazilian",
                          "german",
                          "french",
                          "spanish",
                          "italian",
                          "norwegian",
                          "swedish",
                          "danish",
                          "vietnamese",
                          "indonesian",
                          "southAfrican",
                          "tokiPona",
                          "hindi",
                          "mandarin",
                          "arabic",
                          "bengali",
                          "urdu",
                          "japanese",
                          "swahili"
                        ],
                        "fullComment": "all currently supported languages",
                        "type": "string"
                      }
                    },
                    {
                      "name": "createdAt",
                      "required": true,
                      "schema": {
                        "type": "number"
                      }
                    },
                    {
                      "name": "updatedAt",
                      "required": true,
                      "schema": {
                        "type": "number"
                      }
                    },
                    {
                      "name": "deletedAt",
                      "required": true,
                      "schema": {
                        "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                        "type": "number"
                      }
                    },
                    {
                      "name": "createdFirstAt",
                      "required": true,
                      "schema": {
                        "fullComment": "in some cases, data can be created before it was created in our system. In this case, use CreatedFirstAt if this information is important.\n\nTime\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                        "type": "number"
                      }
                    },
                    {
                      "name": "operationName",
                      "required": true,
                      "schema": {
                        "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
                        "type": "null"
                      }
                    },
                    {
                      "name": "projectRelativePath",
                      "required": true,
                      "schema": {
                        "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
                        "type": "string"
                      }
                    },
                    {
                      "name": "operationRelativePath",
                      "required": false,
                      "schema": {
                        "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
                        "type": "string"
                      }
                    },
                    {
                      "name": "id",
                      "required": true,
                      "schema": {
                        "fullComment": "here for compatibility, should implement...",
                        "type": "string"
                      }
                    },
                    {
                      "name": "categoryStackCalculated",
                      "required": false,
                      "schema": {
                        "fullComment": "In case of jsonSingle storageMethod, the categoryStack is generated by the location of the file in the db model folder in the db folder.\n\nNB: Changing this value when updating/upserting, changes where the item is located!\n\n",
                        "nb": "Changing this value when updating/upserting, changes where the item is located!",
                        "items": [
                          {
                            "schema": {
                              "type": "string"
                            },
                            "name": null
                          }
                        ],
                        "type": "array"
                      }
                    },
                    {
                      "name": "packageName",
                      "required": true,
                      "schema": {
                        "fullComment": "name of the package in package.json",
                        "type": "string"
                      }
                    },
                    {
                      "name": "folderName",
                      "required": true,
                      "schema": {
                        "fullComment": "name of the operation folder",
                        "type": "string"
                      }
                    },
                    {
                      "name": "relativeOperationLocationPath",
                      "required": true,
                      "schema": {
                        "fullComment": "relative path to the operation (does not include operation folder itself)\n\nrelative from project root",
                        "type": "string"
                      }
                    },
                    {
                      "name": "classification",
                      "required": true,
                      "schema": {
                        "enum": [
                          "js",
                          "ts",
                          "node",
                          "server",
                          "web",
                          "app",
                          "ui-es6",
                          "ui-es5",
                          "ui-esm"
                        ],
                        "fullComment": "# Classification\n\nTODO: think about what the differences are and how we need to change processes to make it all work good\n\n## Possible values\n\njs: only js (no node) (well, ts of course, but it gets built into js)\n\nts: non-built ts code\n\nnode: includes other node packages, operations, core-imports, or globals.\n\nserver: exposes something on some port when it is ran and uses node code\n\nweb: has next.config.js and thus exposes something on some port when it is ran. next.js + react-based...\n\napp: uses react-native and exposes something on some port when it is ran\n\nDEPRECATED: ui-es6: uses react (with (native)), which main entry points to typescript es6 files (this ui package cannot be built, should be transpiled. highly discouraged, please use ui-es5, or, if needed, ui-esm)\n\nui-es5: ui which main entry points to javascript es5 files (this ui package can be built)\n\nui-esm: ui which builds to ESM module resolved Javascript",
                        "todo": "think about what the differences are and how we need to change processes to make it all work good",
                        "type": "string"
                      }
                    },
                    {
                      "name": "packageDependencies",
                      "required": true,
                      "schema": {
                        "fullComment": "package dependency names (non-operation)",
                        "items": [
                          {
                            "schema": {
                              "type": "string"
                            },
                            "name": null
                          }
                        ],
                        "type": "array"
                      }
                    },
                    {
                      "name": "operationDependencies",
                      "required": true,
                      "schema": {
                        "fullComment": "operation dependency names",
                        "items": [
                          {
                            "schema": {
                              "type": "string"
                            },
                            "name": null
                          }
                        ],
                        "type": "array"
                      }
                    },
                    {
                      "name": "coreDependencies",
                      "required": true,
                      "schema": {
                        "fullComment": "core dependencies (e.g. `path` and `fs`)",
                        "items": [
                          {
                            "schema": {
                              "type": "string"
                            },
                            "name": null
                          }
                        ],
                        "type": "array"
                      }
                    },
                    {
                      "name": "buildSucceeded",
                      "required": true,
                      "schema": {
                        "type": "boolean"
                      }
                    },
                    {
                      "name": "dependenciesBuildsFailed",
                      "required": true,
                      "schema": {
                        "type": "boolean"
                      }
                    },
                    {
                      "name": "indexImportExportError",
                      "required": true,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "lintProblems",
                      "required": true,
                      "schema": {
                        "items": [
                          {
                            "schema": {
                              "type": "string"
                            },
                            "name": null
                          }
                        ],
                        "type": "array"
                      }
                    },
                    {
                      "name": "indexInteracesErrors",
                      "required": true,
                      "schema": {
                        "items": [
                          {
                            "schema": {
                              "type": "string"
                            },
                            "name": null
                          }
                        ],
                        "type": "array"
                      }
                    },
                    {
                      "name": "indexErrors",
                      "required": true,
                      "schema": {
                        "items": [
                          {
                            "schema": {
                              "type": "string"
                            },
                            "name": null
                          }
                        ],
                        "type": "array"
                      }
                    },
                    {
                      "name": "size",
                      "required": true,
                      "schema": {
                        "fullComment": "objective size measurements of all files in a folder\n\nsummary for a folder should contain file-summaries for different filetypes and an overal file summary",
                        "properties": [
                          {
                            "name": "size",
                            "required": true,
                            "schema": {
                              "fullComment": "type interface that can be used to summarize multiple files",
                              "properties": [
                                {
                                  "name": "numberOfFiles",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "if this is about multiple files, the number of files is specified here",
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "characters",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "amount of characters",
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "lines",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "amount of lines",
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "bytes",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "amount of bytes",
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "linesPerFile",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "rounded, amount of lines per file (averaged)",
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "charactersPerLine",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "rounded, amount of characters per line (averaged)",
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "bytesPerCharacter",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "rounded, amount of bytes per character",
                                    "type": "number"
                                  }
                                }
                              ],
                              "type": "object"
                            }
                          },
                          {
                            "name": "textSize",
                            "required": true,
                            "schema": {
                              "fullComment": "type interface that can be used to summarize multiple files",
                              "properties": [
                                {
                                  "name": "numberOfFiles",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "if this is about multiple files, the number of files is specified here",
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "characters",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "amount of characters",
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "lines",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "amount of lines",
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "bytes",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "amount of bytes",
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "linesPerFile",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "rounded, amount of lines per file (averaged)",
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "charactersPerLine",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "rounded, amount of characters per line (averaged)",
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "bytesPerCharacter",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "rounded, amount of bytes per character",
                                    "type": "number"
                                  }
                                }
                              ],
                              "type": "object"
                            }
                          },
                          {
                            "name": "dataSize",
                            "required": true,
                            "schema": {
                              "fullComment": "type interface that can be used to summarize multiple files",
                              "properties": [
                                {
                                  "name": "numberOfFiles",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "if this is about multiple files, the number of files is specified here",
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "characters",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "amount of characters",
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "lines",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "amount of lines",
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "bytes",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "amount of bytes",
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "linesPerFile",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "rounded, amount of lines per file (averaged)",
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "charactersPerLine",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "rounded, amount of characters per line (averaged)",
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "bytesPerCharacter",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "rounded, amount of bytes per character",
                                    "type": "number"
                                  }
                                }
                              ],
                              "type": "object"
                            }
                          },
                          {
                            "name": "codeSize",
                            "required": true,
                            "schema": {
                              "fullComment": "type interface that can be used to summarize multiple files",
                              "properties": [
                                {
                                  "name": "numberOfFiles",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "if this is about multiple files, the number of files is specified here",
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "characters",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "amount of characters",
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "lines",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "amount of lines",
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "bytes",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "amount of bytes",
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "linesPerFile",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "rounded, amount of lines per file (averaged)",
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "charactersPerLine",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "rounded, amount of characters per line (averaged)",
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "bytesPerCharacter",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "rounded, amount of bytes per character",
                                    "type": "number"
                                  }
                                }
                              ],
                              "type": "object"
                            }
                          }
                        ],
                        "type": "object"
                      }
                    }
                  ],
                  "type": "object"
                },
                "name": "OperationIndex"
              }
            ],
            "type": "array"
          }
        },
        {
          "name": "index",
          "required": true,
          "schema": {
            "items": [
              {
                "schema": {
                  "fullComment": "--- dbStorageMethod: jsonSingle\n---\n\nTODO: Just like parameters, this should be linted for. If you define an interface that's not declared here, that should ring a bell.",
                  "todo": "Just like parameters, this should be linted for. If you define an interface that's not declared here, that should ring a bell.",
                  "properties": [
                    {
                      "name": "operationName",
                      "required": true,
                      "schema": {
                        "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
                        "type": "null"
                      }
                    },
                    {
                      "name": "projectRelativePath",
                      "required": true,
                      "schema": {
                        "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
                        "type": "string"
                      }
                    },
                    {
                      "name": "operationRelativePath",
                      "required": false,
                      "schema": {
                        "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
                        "type": "string"
                      }
                    },
                    {
                      "name": "id",
                      "required": true,
                      "schema": {
                        "fullComment": "unique id of the model",
                        "type": "string"
                      }
                    },
                    {
                      "name": "name",
                      "required": true,
                      "schema": {
                        "fullComment": "name (identifier) of the model",
                        "type": "string"
                      }
                    },
                    {
                      "name": "slug",
                      "required": true,
                      "schema": {
                        "fullComment": "kebab-case variant of the name",
                        "type": "string"
                      }
                    },
                    {
                      "name": "operationRelativeTypescriptFilePath",
                      "required": true,
                      "schema": {
                        "fullComment": "relative file path from the operation that this indexed instance is referencing to\n\ne.g. src/general.ts\n\n(no preceding slash)",
                        "type": "string"
                      }
                    },
                    {
                      "name": "type",
                      "required": true,
                      "schema": {
                        "fullComment": "all info that should always be collected when indexing any type interface",
                        "properties": [
                          {
                            "name": "typeDefinition",
                            "required": false,
                            "schema": {
                              "fullComment": "JSON schema definition of a type interface\n\n\nSome info about the Schema:\n\n- if the type is an object, there should be properties\n- if the type is an array, there should be items\n\n\n\n",
                              "properties": [
                                {
                                  "name": "$id",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "$ref",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "$schema",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Meta schema\n\nRecommended values:\n- 'http://json-schema.org/schema#'\n- 'http://json-schema.org/hyper-schema#'\n- 'http://json-schema.org/draft-07/schema#'\n- 'http://json-schema.org/draft-07/hyper-schema#'",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "$comment",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "$defs",
                                  "required": false,
                                  "schema": {
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "type",
                                  "required": false,
                                  "schema": {
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "enum",
                                  "required": false,
                                  "schema": {
                                    "items": [
                                      {
                                        "schema": {
                                          "fullComment": "Primitive type",
                                          "properties": [],
                                          "type": "object"
                                        },
                                        "name": "JSONSchema7Type"
                                      }
                                    ],
                                    "type": "array"
                                  }
                                },
                                {
                                  "name": "const",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Primitive type",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "multipleOf",
                                  "required": false,
                                  "schema": {
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "maximum",
                                  "required": false,
                                  "schema": {
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "exclusiveMaximum",
                                  "required": false,
                                  "schema": {
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "minimum",
                                  "required": false,
                                  "schema": {
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "exclusiveMinimum",
                                  "required": false,
                                  "schema": {
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "maxLength",
                                  "required": false,
                                  "schema": {
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "minLength",
                                  "required": false,
                                  "schema": {
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "pattern",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "items",
                                  "required": false,
                                  "schema": {
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "additionalItems",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "JSON Schema v7",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "maxItems",
                                  "required": false,
                                  "schema": {
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "minItems",
                                  "required": false,
                                  "schema": {
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "uniqueItems",
                                  "required": false,
                                  "schema": {
                                    "type": "boolean"
                                  }
                                },
                                {
                                  "name": "contains",
                                  "required": false,
                                  "schema": {
                                    "circularRefName": "JSONSchema7",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "maxProperties",
                                  "required": false,
                                  "schema": {
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "minProperties",
                                  "required": false,
                                  "schema": {
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "required",
                                  "required": false,
                                  "schema": {
                                    "items": [
                                      {
                                        "schema": {
                                          "type": "string"
                                        },
                                        "name": null
                                      }
                                    ],
                                    "type": "array"
                                  }
                                },
                                {
                                  "name": "properties",
                                  "required": false,
                                  "schema": {
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "patternProperties",
                                  "required": false,
                                  "schema": {
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "additionalProperties",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "JSON Schema v7",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "dependencies",
                                  "required": false,
                                  "schema": {
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "propertyNames",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "JSON Schema v7",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "if",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "JSON Schema v7",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "then",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "JSON Schema v7",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "else",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "JSON Schema v7",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "allOf",
                                  "required": false,
                                  "schema": {
                                    "items": [
                                      {
                                        "schema": {
                                          "fullComment": "JSON Schema v7",
                                          "properties": [],
                                          "type": "object"
                                        },
                                        "name": "JSONSchema7Definition"
                                      }
                                    ],
                                    "type": "array"
                                  }
                                },
                                {
                                  "name": "anyOf",
                                  "required": false,
                                  "schema": {
                                    "items": [
                                      {
                                        "schema": {
                                          "fullComment": "JSON Schema v7",
                                          "properties": [],
                                          "type": "object"
                                        },
                                        "name": "JSONSchema7Definition"
                                      }
                                    ],
                                    "type": "array"
                                  }
                                },
                                {
                                  "name": "oneOf",
                                  "required": false,
                                  "schema": {
                                    "items": [
                                      {
                                        "schema": {
                                          "fullComment": "JSON Schema v7",
                                          "properties": [],
                                          "type": "object"
                                        },
                                        "name": "JSONSchema7Definition"
                                      }
                                    ],
                                    "type": "array"
                                  }
                                },
                                {
                                  "name": "not",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "JSON Schema v7",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "format",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "contentMediaType",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "contentEncoding",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "definitions",
                                  "required": false,
                                  "schema": {
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "title",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "description",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "default",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Primitive type",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "readOnly",
                                  "required": false,
                                  "schema": {
                                    "type": "boolean"
                                  }
                                },
                                {
                                  "name": "writeOnly",
                                  "required": false,
                                  "schema": {
                                    "type": "boolean"
                                  }
                                },
                                {
                                  "name": "examples",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Primitive type",
                                    "properties": [],
                                    "type": "object"
                                  }
                                }
                              ],
                              "type": "object"
                            }
                          },
                          {
                            "name": "simplifiedSchema",
                            "required": false,
                            "schema": {
                              "fullComment": "JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form",
                              "properties": [
                                {
                                  "name": "todo",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "discussion",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "idea",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "later",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "nb",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "title",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "section",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "description",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "type",
                                  "required": true,
                                  "schema": {
                                    "enum": [
                                      "string",
                                      "number",
                                      "boolean",
                                      "object",
                                      "array",
                                      "null"
                                    ],
                                    "fullComment": "- string\n- number\n- boolean\n- object\n- array\n- null\n\nNB: Omit doesn't work for the indexer! This would be the type: Omit<JSONSchema7TypeName, \"integer\">;\n\n",
                                    "nb": "Omit doesn't work for the indexer! This would be the type: Omit<JSONSchema7TypeName, \"integer\">;",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "circularRefName",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "enum",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think",
                                    "items": [
                                      {
                                        "schema": {
                                          "fullComment": "Primitive type",
                                          "properties": [],
                                          "type": "object"
                                        },
                                        "name": "JSONSchema7Type"
                                      }
                                    ],
                                    "type": "array"
                                  }
                                },
                                {
                                  "name": "properties",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "in case of object, this will always appear",
                                    "items": [
                                      {
                                        "schema": {
                                          "fullComment": "",
                                          "properties": [
                                            {
                                              "name": "name",
                                              "required": true,
                                              "schema": {
                                                "type": "string"
                                              }
                                            },
                                            {
                                              "name": "schema",
                                              "required": true,
                                              "schema": {
                                                "circularRefName": "SimplifiedSchema",
                                                "properties": [],
                                                "type": "object"
                                              }
                                            },
                                            {
                                              "name": "required",
                                              "required": true,
                                              "schema": {
                                                "fullComment": "NB: can't we put this in the SimplifiedSchema itself?",
                                                "nb": "can't we put this in the SimplifiedSchema itself?",
                                                "type": "boolean"
                                              }
                                            }
                                          ],
                                          "type": "object"
                                        },
                                        "name": "SimplifiedSchemaProperty"
                                      }
                                    ],
                                    "type": "array"
                                  }
                                },
                                {
                                  "name": "items",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "in case of arrays, this will always appear",
                                    "items": [
                                      {
                                        "schema": {
                                          "fullComment": "",
                                          "properties": [
                                            {
                                              "name": "name",
                                              "required": true,
                                              "schema": {
                                                "fullComment": "name in case of it being a reference, otherwise null",
                                                "type": "string"
                                              }
                                            },
                                            {
                                              "name": "schema",
                                              "required": true,
                                              "schema": {
                                                "circularRefName": "SimplifiedSchema",
                                                "properties": [],
                                                "type": "object"
                                              }
                                            }
                                          ],
                                          "type": "object"
                                        },
                                        "name": "SimplifiedSchemaItem"
                                      }
                                    ],
                                    "type": "array"
                                  }
                                },
                                {
                                  "name": "fullComment",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Full doccomment, parsed without all stars syntax.\n\nNB: besides this, every `CommentType` can optionally also be found as a property on the `SimplifiedSchema`",
                                    "nb": "besides this, every `CommentType` can optionally also be found as a property on the `SimplifiedSchema`",
                                    "type": "string"
                                  }
                                }
                              ],
                              "type": "object"
                            }
                          },
                          {
                            "name": "isObject",
                            "required": true,
                            "schema": {
                              "fullComment": "if the type is an object, this is true. false if it's an array",
                              "type": "boolean"
                            }
                          },
                          {
                            "name": "isArray",
                            "required": true,
                            "schema": {
                              "fullComment": "if the type is an array, this is true",
                              "type": "boolean"
                            }
                          },
                          {
                            "name": "isPrimitive",
                            "required": true,
                            "schema": {
                              "fullComment": "if it's a primitive type like \"string\", \"number\", \"boolean\", \"null\" | \"undefined\"",
                              "type": "boolean"
                            }
                          },
                          {
                            "name": "isEnum",
                            "required": true,
                            "schema": {
                              "fullComment": "will be true for any primitive conjunction types",
                              "type": "boolean"
                            }
                          },
                          {
                            "name": "isEnumLiteral",
                            "required": true,
                            "schema": {
                              "fullComment": "will be true for string conjunction types",
                              "type": "boolean"
                            }
                          },
                          {
                            "name": "typeCoverage",
                            "required": true,
                            "schema": {
                              "fullComment": "quantification of coverage of the specified type or subtypes in our database.",
                              "type": "number"
                            }
                          },
                          {
                            "name": "rawType",
                            "required": true,
                            "schema": {
                              "fullComment": "raw type string",
                              "type": "string"
                            }
                          }
                        ],
                        "type": "object"
                      }
                    },
                    {
                      "name": "description",
                      "required": false,
                      "schema": {
                        "fullComment": "jsdoc comment above the interface, if any\n\na string that is known to contain markdown.",
                        "type": "string"
                      }
                    },
                    {
                      "name": "commentsInside",
                      "required": true,
                      "schema": {
                        "items": [
                          {
                            "schema": {
                              "fullComment": "comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!",
                              "nb": "with the current setup we can also parse `.md` files as being a TsComment, keep it that way!",
                              "properties": [
                                {
                                  "name": "operationName",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
                                    "type": "null"
                                  }
                                },
                                {
                                  "name": "projectRelativePath",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "operationRelativePath",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "id",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "unique id of the model",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "name",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "name (identifier) of the model",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "slug",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "kebab-case variant of the name",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "operationRelativeTypescriptFilePath",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "relative file path from the operation that this indexed instance is referencing to\n\ne.g. src/general.ts\n\n(no preceding slash)",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "comment",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "the content of the comment in markdown, without frontmatter\n\na string that is known to contain markdown.",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "parameters",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "parameters destructured from the frontmatter of the parsed markdown (if comment is not a oneliner, otherwise it'll be empty)\n\nOur version of frontmatter is a bit simpler than regular frontmatter\n\nNot sure if this is a good idea, but it keeps it simple for our OS\n\nall values parse in a similar way to csv\n\nmake sure that you use quotes if you want to store a string with commas, because commas in a parameter indicate that it is a string array\n\nNB: string arrays are comma separated values, where you can put values with special characters in between quotes",
                                    "nb": "string arrays are comma separated values, where you can put values with special characters in between quotes",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "types",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "These are the type indicators that were found in this single or multiline comment. Can be multiple.",
                                    "items": [
                                      {
                                        "schema": {
                                          "enum": [
                                            "todo",
                                            "discussion",
                                            "idea",
                                            "later",
                                            "nb",
                                            "title",
                                            "section",
                                            "description"
                                          ],
                                          "fullComment": "special line prefixes:\n\n**Developer related comments**\n\n- TODO: for developer to know what to do\n- DISCUSSION: for developer to state that discussion is needed\n- IDEA: for developer to state ideas\n- LATER: for developer to mark as thing that needs to be done later\n- NB: for developer to add a note\n\n**Form related comments**\n\n- TITLE: if available, will be used as title of form input (overwrites humanCase version of the property-name itself in that case)\n- SECTION: start a new section in the form from this point, the value behind here can be the title\n- DESCRIPTION: if available, will be used as description of the form input",
                                          "type": "string"
                                        },
                                        "name": "CommentType"
                                      }
                                    ],
                                    "type": "array"
                                  }
                                },
                                {
                                  "name": "firstLine",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "first line of the comment",
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "lastLine",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "last line of the comment",
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "statementName",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "statement name the comment belongs to",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "rawStatement",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "raw statement text the comment belongs to",
                                    "type": "string"
                                  }
                                }
                              ],
                              "type": "object"
                            },
                            "name": "TsComment"
                          }
                        ],
                        "type": "array"
                      }
                    },
                    {
                      "name": "isExported",
                      "required": true,
                      "schema": {
                        "fullComment": "boolean indicating whether or not this interface is exported from the file, and with that, from the operation",
                        "type": "boolean"
                      }
                    },
                    {
                      "name": "hasGeneric",
                      "required": true,
                      "schema": {
                        "fullComment": "boolean indicating whether or not this interface uses one or more generic variables",
                        "type": "boolean"
                      }
                    },
                    {
                      "name": "rawText",
                      "required": false,
                      "schema": {
                        "fullComment": "raw interface text, coming from ts-morph",
                        "type": "string"
                      }
                    },
                    {
                      "name": "extensions",
                      "required": false,
                      "schema": {
                        "fullComment": "if the interface extends anything, names will be specified here",
                        "items": [
                          {
                            "schema": {
                              "type": "string"
                            },
                            "name": null
                          }
                        ],
                        "type": "array"
                      }
                    },
                    {
                      "name": "isDbModel",
                      "required": true,
                      "schema": {
                        "fullComment": "If true, this interface is marked as a db model, which means it will be included in the db function autocompletion so it's easy to store and fetch data in this format.\n\nIs automatically set to true when indexing and when one of the following statements holds true\n\n- if the doc-comment contains frontmatter with `isDbModel` or `dbStorageMethod` specified\n- if the interface last word is \"db\" or \"model\" and if there are minimum 2 words\n- if the interface extends some other special interface",
                        "type": "boolean"
                      }
                    },
                    {
                      "name": "isOperationIndex",
                      "required": true,
                      "schema": {
                        "fullComment": "If this is true, this is a db-model that is ALWAYS attached to an operation.\n\nBy default this means it will get a folder in the `db` folder in the operation folder, where the interface will be stored linked to the file-id in specified folder.\n\nHowever, you can also specify a `storageLocationRelativeFilePath` if you want to store the model on an exact location relative to the operation root.",
                        "type": "boolean"
                      }
                    },
                    {
                      "name": "operationStorageLocationRelativeFilePath",
                      "required": false,
                      "schema": {
                        "fullComment": "If given, specify a file path here where the data should be stored. Must be an operation relative path.\n\nThis will map onto the \"operationRelativePath\" for that instance.\n\nNB: Since this is a single file per project or per operation, it will overwrite your data in case of `jsonSingle` or `markdown` storage.",
                        "nb": "Since this is a single file per project or per operation, it will overwrite your data in case of `jsonSingle` or `markdown` storage.",
                        "type": "string"
                      }
                    },
                    {
                      "name": "dbStorageMethod",
                      "required": false,
                      "schema": {
                        "enum": [
                          "jsonMultiple",
                          "jsonSingle",
                          "markdown",
                          "keyValueMarkdown",
                          "csv"
                        ],
                        "fullComment": "The DbStorageMethod for this inteface (only for db models, otherwise this will be undefined)\n\nIf this interface is a db model, you can also specify the default db storage method for it. You can do this by specifying it in the frontmatter of the doccomment of the interface. You can also extend a xxxModelType model which can have a dbStorageMethod attached.\n\nWhen storing something into the database, this value can be overwritten in your query configuration.\n\nThe following strategies are available to store the data.\n\n- **jsonMultiple *(default)***: stores the data in a json file which is an array of this data structure. This file will be located in `db/[pluralized-kebab-case-model-name].json`\n\n- **jsonSingle**: stores the data in a json file which is of this data structure (single object) These files will be located in `db/[pluralized-kebab-case-model-name]/[instance-slug-or-id].json`\n\n- **markdown**: stores the data in a markdown file. Takes \"markdown\" parameter as the main markdown. The other parameters are stored as front-matter. This these files will be located in `db/[pluralized-kebab-case-model-name]/[instance-slug-or-id].md`\n\n- **keyValueMarkdown**: stores the data in key value markdown format. This file will be located in `db/[pluralized-kebab-case-model-name].md`\n\n- **csv**: stores the data in a csv file (only possible for flat object datastructures). This file will be located in `db/[pluralized-kebab-case-model-name].csv`\n\n## Definitions:\n\n- [pluralized-kebab-case-model-name]: e.g. `StudentUser` becomes `student-users`\n- [instance-slug-or-id]: For all models with a slug parameter, the filename will be that slug of that instance. Otherwise, `id` will be used",
                        "type": "string"
                      }
                    }
                  ],
                  "type": "object"
                },
                "name": "TsInterface"
              }
            ],
            "type": "array"
          }
        }
      ],
      "type": "object"
    },
    "typeCoverage": 0,
    "rawType": "ExplorationDetails",
    "isArray": false,
    "isEnum": false,
    "isEnumLiteral": false,
    "isObject": false,
    "isPrimitive": false
  }
}