{
  "createdAt": 1667684684206,
  "updatedAt": 1667684684206,
  "deletedAt": 0,
  "createdFirstAt": 1667684684206,
  "id": "tsvariable",
  "name": "TsVariable",
  "slug": "tsvariable",
  "operationRelativeTypescriptFilePath": "src/TsVariable.ts",
  "hasGeneric": false,
  "isExported": true,
  "rawText": "\n\n/**\n * ---\n * dbStorageMethod: jsonSingle\n * ---\n *\n */\nexport interface TsVariable extends TsIndexModelType {\n  /**\n   * if available , the parsed doccomment of the variable\n   */\n  description?: string;\n  value: string;\n  classification: \"const\" | \"var\" | \"let\";\n  type: TypeInfo;\n  isExported: boolean;\n  /**\n   * surrounding comments and comments inside of the variable\n   */\n  comments: Creation<TsComment>[];\n}",
  "extensions": [
    "TsIndexModelType"
  ],
  "isOperationIndex": true,
  "description": "",
  "dbStorageMethod": "jsonSingle",
  "isDbModel": true,
  "commentsInside": [],
  "type": {
    "typeDefinition": {
      "type": "object",
      "properties": {
        "operationName": {
          "type": [
            "null",
            "string"
          ],
          "description": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you"
        },
        "projectRelativePath": {
          "type": "string",
          "description": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you"
        },
        "operationRelativePath": {
          "type": "string",
          "description": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you"
        },
        "id": {
          "type": "string",
          "description": "unique id of the model"
        },
        "name": {
          "type": "string",
          "description": "name (identifier) of the model"
        },
        "slug": {
          "type": "string",
          "description": "kebab-case variant of the name"
        },
        "operationRelativeTypescriptFilePath": {
          "type": "string",
          "description": "relative file path from the operation that this indexed instance is referencing to\n\ne.g. src/general.ts\n\n(no preceding slash)"
        },
        "description": {
          "type": "string",
          "description": "if available , the parsed doccomment of the variable"
        },
        "value": {
          "type": "string"
        },
        "classification": {
          "type": "string",
          "enum": [
            "const",
            "var",
            "let"
          ]
        },
        "type": {
          "$ref": "#/definitions/TypeInfo"
        },
        "isExported": {
          "type": "boolean"
        },
        "comments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Creation%3CTsComment%3E"
          },
          "description": "surrounding comments and comments inside of the variable"
        }
      },
      "required": [
        "classification",
        "comments",
        "id",
        "isExported",
        "name",
        "operationName",
        "operationRelativeTypescriptFilePath",
        "projectRelativePath",
        "slug",
        "type",
        "value"
      ],
      "additionalProperties": false,
      "description": "--- dbStorageMethod: jsonSingle\n---"
    },
    "simplifiedSchema": {
      "fullComment": "--- dbStorageMethod: jsonSingle\n---",
      "properties": [
        {
          "name": "operationName",
          "required": true,
          "schema": {
            "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
            "type": "null"
          }
        },
        {
          "name": "projectRelativePath",
          "required": true,
          "schema": {
            "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
            "type": "string"
          }
        },
        {
          "name": "operationRelativePath",
          "required": false,
          "schema": {
            "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
            "type": "string"
          }
        },
        {
          "name": "id",
          "required": true,
          "schema": {
            "fullComment": "unique id of the model",
            "type": "string"
          }
        },
        {
          "name": "name",
          "required": true,
          "schema": {
            "fullComment": "name (identifier) of the model",
            "type": "string"
          }
        },
        {
          "name": "slug",
          "required": true,
          "schema": {
            "fullComment": "kebab-case variant of the name",
            "type": "string"
          }
        },
        {
          "name": "operationRelativeTypescriptFilePath",
          "required": true,
          "schema": {
            "fullComment": "relative file path from the operation that this indexed instance is referencing to\n\ne.g. src/general.ts\n\n(no preceding slash)",
            "type": "string"
          }
        },
        {
          "name": "description",
          "required": false,
          "schema": {
            "fullComment": "if available , the parsed doccomment of the variable",
            "type": "string"
          }
        },
        {
          "name": "value",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "classification",
          "required": true,
          "schema": {
            "enum": [
              "const",
              "var",
              "let"
            ],
            "type": "string"
          }
        },
        {
          "name": "type",
          "required": true,
          "schema": {
            "fullComment": "all info that should always be collected when indexing any type interface",
            "properties": [
              {
                "name": "typeDefinition",
                "required": false,
                "schema": {
                  "fullComment": "JSON schema definition of a type interface\n\n\nSome info about the Schema:\n\n- if the type is an object, there should be properties\n- if the type is an array, there should be items\n\n\n\n",
                  "properties": [
                    {
                      "name": "$id",
                      "required": false,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "$ref",
                      "required": false,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "$schema",
                      "required": false,
                      "schema": {
                        "fullComment": "Meta schema\n\nRecommended values:\n- 'http://json-schema.org/schema#'\n- 'http://json-schema.org/hyper-schema#'\n- 'http://json-schema.org/draft-07/schema#'\n- 'http://json-schema.org/draft-07/hyper-schema#'",
                        "type": "string"
                      }
                    },
                    {
                      "name": "$comment",
                      "required": false,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "$defs",
                      "required": false,
                      "schema": {
                        "properties": [],
                        "type": "object"
                      }
                    },
                    {
                      "name": "type",
                      "required": false,
                      "schema": {
                        "properties": [],
                        "type": "object"
                      }
                    },
                    {
                      "name": "enum",
                      "required": false,
                      "schema": {
                        "items": [
                          {
                            "schema": {
                              "fullComment": "Primitive type",
                              "properties": [],
                              "type": "object"
                            },
                            "name": "JSONSchema7Type"
                          }
                        ],
                        "type": "array"
                      }
                    },
                    {
                      "name": "const",
                      "required": false,
                      "schema": {
                        "fullComment": "Primitive type",
                        "properties": [],
                        "type": "object"
                      }
                    },
                    {
                      "name": "multipleOf",
                      "required": false,
                      "schema": {
                        "type": "number"
                      }
                    },
                    {
                      "name": "maximum",
                      "required": false,
                      "schema": {
                        "type": "number"
                      }
                    },
                    {
                      "name": "exclusiveMaximum",
                      "required": false,
                      "schema": {
                        "type": "number"
                      }
                    },
                    {
                      "name": "minimum",
                      "required": false,
                      "schema": {
                        "type": "number"
                      }
                    },
                    {
                      "name": "exclusiveMinimum",
                      "required": false,
                      "schema": {
                        "type": "number"
                      }
                    },
                    {
                      "name": "maxLength",
                      "required": false,
                      "schema": {
                        "type": "number"
                      }
                    },
                    {
                      "name": "minLength",
                      "required": false,
                      "schema": {
                        "type": "number"
                      }
                    },
                    {
                      "name": "pattern",
                      "required": false,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "items",
                      "required": false,
                      "schema": {
                        "properties": [],
                        "type": "object"
                      }
                    },
                    {
                      "name": "additionalItems",
                      "required": false,
                      "schema": {
                        "fullComment": "JSON Schema v7",
                        "properties": [],
                        "type": "object"
                      }
                    },
                    {
                      "name": "maxItems",
                      "required": false,
                      "schema": {
                        "type": "number"
                      }
                    },
                    {
                      "name": "minItems",
                      "required": false,
                      "schema": {
                        "type": "number"
                      }
                    },
                    {
                      "name": "uniqueItems",
                      "required": false,
                      "schema": {
                        "type": "boolean"
                      }
                    },
                    {
                      "name": "contains",
                      "required": false,
                      "schema": {
                        "circularRefName": "JSONSchema7",
                        "properties": [],
                        "type": "object"
                      }
                    },
                    {
                      "name": "maxProperties",
                      "required": false,
                      "schema": {
                        "type": "number"
                      }
                    },
                    {
                      "name": "minProperties",
                      "required": false,
                      "schema": {
                        "type": "number"
                      }
                    },
                    {
                      "name": "required",
                      "required": false,
                      "schema": {
                        "items": [
                          {
                            "schema": {
                              "type": "string"
                            },
                            "name": null
                          }
                        ],
                        "type": "array"
                      }
                    },
                    {
                      "name": "properties",
                      "required": false,
                      "schema": {
                        "properties": [],
                        "type": "object"
                      }
                    },
                    {
                      "name": "patternProperties",
                      "required": false,
                      "schema": {
                        "properties": [],
                        "type": "object"
                      }
                    },
                    {
                      "name": "additionalProperties",
                      "required": false,
                      "schema": {
                        "fullComment": "JSON Schema v7",
                        "properties": [],
                        "type": "object"
                      }
                    },
                    {
                      "name": "dependencies",
                      "required": false,
                      "schema": {
                        "properties": [],
                        "type": "object"
                      }
                    },
                    {
                      "name": "propertyNames",
                      "required": false,
                      "schema": {
                        "fullComment": "JSON Schema v7",
                        "properties": [],
                        "type": "object"
                      }
                    },
                    {
                      "name": "if",
                      "required": false,
                      "schema": {
                        "fullComment": "JSON Schema v7",
                        "properties": [],
                        "type": "object"
                      }
                    },
                    {
                      "name": "then",
                      "required": false,
                      "schema": {
                        "fullComment": "JSON Schema v7",
                        "properties": [],
                        "type": "object"
                      }
                    },
                    {
                      "name": "else",
                      "required": false,
                      "schema": {
                        "fullComment": "JSON Schema v7",
                        "properties": [],
                        "type": "object"
                      }
                    },
                    {
                      "name": "allOf",
                      "required": false,
                      "schema": {
                        "items": [
                          {
                            "schema": {
                              "fullComment": "JSON Schema v7",
                              "properties": [],
                              "type": "object"
                            },
                            "name": "JSONSchema7Definition"
                          }
                        ],
                        "type": "array"
                      }
                    },
                    {
                      "name": "anyOf",
                      "required": false,
                      "schema": {
                        "items": [
                          {
                            "schema": {
                              "fullComment": "JSON Schema v7",
                              "properties": [],
                              "type": "object"
                            },
                            "name": "JSONSchema7Definition"
                          }
                        ],
                        "type": "array"
                      }
                    },
                    {
                      "name": "oneOf",
                      "required": false,
                      "schema": {
                        "items": [
                          {
                            "schema": {
                              "fullComment": "JSON Schema v7",
                              "properties": [],
                              "type": "object"
                            },
                            "name": "JSONSchema7Definition"
                          }
                        ],
                        "type": "array"
                      }
                    },
                    {
                      "name": "not",
                      "required": false,
                      "schema": {
                        "fullComment": "JSON Schema v7",
                        "properties": [],
                        "type": "object"
                      }
                    },
                    {
                      "name": "format",
                      "required": false,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "contentMediaType",
                      "required": false,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "contentEncoding",
                      "required": false,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "definitions",
                      "required": false,
                      "schema": {
                        "properties": [],
                        "type": "object"
                      }
                    },
                    {
                      "name": "title",
                      "required": false,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "description",
                      "required": false,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "default",
                      "required": false,
                      "schema": {
                        "fullComment": "Primitive type",
                        "properties": [],
                        "type": "object"
                      }
                    },
                    {
                      "name": "readOnly",
                      "required": false,
                      "schema": {
                        "type": "boolean"
                      }
                    },
                    {
                      "name": "writeOnly",
                      "required": false,
                      "schema": {
                        "type": "boolean"
                      }
                    },
                    {
                      "name": "examples",
                      "required": false,
                      "schema": {
                        "fullComment": "Primitive type",
                        "properties": [],
                        "type": "object"
                      }
                    }
                  ],
                  "type": "object"
                }
              },
              {
                "name": "simplifiedSchema",
                "required": false,
                "schema": {
                  "fullComment": "JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form",
                  "properties": [
                    {
                      "name": "todo",
                      "required": false,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "discussion",
                      "required": false,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "idea",
                      "required": false,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "later",
                      "required": false,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "nb",
                      "required": false,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "title",
                      "required": false,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "section",
                      "required": false,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "description",
                      "required": false,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "type",
                      "required": true,
                      "schema": {
                        "enum": [
                          "string",
                          "number",
                          "boolean",
                          "object",
                          "array",
                          "null"
                        ],
                        "fullComment": "- string\n- number\n- boolean\n- object\n- array\n- null\n\nNB: Omit doesn't work for the indexer! This would be the type: Omit<JSONSchema7TypeName, \"integer\">;\n\n",
                        "nb": "Omit doesn't work for the indexer! This would be the type: Omit<JSONSchema7TypeName, \"integer\">;",
                        "type": "string"
                      }
                    },
                    {
                      "name": "circularRefName",
                      "required": false,
                      "schema": {
                        "fullComment": "sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here",
                        "type": "string"
                      }
                    },
                    {
                      "name": "enum",
                      "required": false,
                      "schema": {
                        "fullComment": "in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think",
                        "items": [
                          {
                            "schema": {
                              "fullComment": "Primitive type",
                              "properties": [],
                              "type": "object"
                            },
                            "name": "JSONSchema7Type"
                          }
                        ],
                        "type": "array"
                      }
                    },
                    {
                      "name": "properties",
                      "required": false,
                      "schema": {
                        "fullComment": "in case of object, this will always appear",
                        "items": [
                          {
                            "schema": {
                              "fullComment": "",
                              "properties": [
                                {
                                  "name": "name",
                                  "required": true,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "schema",
                                  "required": true,
                                  "schema": {
                                    "circularRefName": "SimplifiedSchema",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "required",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "NB: can't we put this in the SimplifiedSchema itself?",
                                    "nb": "can't we put this in the SimplifiedSchema itself?",
                                    "type": "boolean"
                                  }
                                }
                              ],
                              "type": "object"
                            },
                            "name": "SimplifiedSchemaProperty"
                          }
                        ],
                        "type": "array"
                      }
                    },
                    {
                      "name": "items",
                      "required": false,
                      "schema": {
                        "fullComment": "in case of arrays, this will always appear",
                        "items": [
                          {
                            "schema": {
                              "fullComment": "",
                              "properties": [
                                {
                                  "name": "name",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "name in case of it being a reference, otherwise null",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "schema",
                                  "required": true,
                                  "schema": {
                                    "circularRefName": "SimplifiedSchema",
                                    "properties": [],
                                    "type": "object"
                                  }
                                }
                              ],
                              "type": "object"
                            },
                            "name": "SimplifiedSchemaItem"
                          }
                        ],
                        "type": "array"
                      }
                    },
                    {
                      "name": "fullComment",
                      "required": false,
                      "schema": {
                        "fullComment": "Full doccomment, parsed without all stars syntax.\n\nNB: besides this, every `CommentType` can optionally also be found as a property on the `SimplifiedSchema`",
                        "nb": "besides this, every `CommentType` can optionally also be found as a property on the `SimplifiedSchema`",
                        "type": "string"
                      }
                    }
                  ],
                  "type": "object"
                }
              },
              {
                "name": "isObject",
                "required": true,
                "schema": {
                  "fullComment": "if the type is an object, this is true. false if it's an array",
                  "type": "boolean"
                }
              },
              {
                "name": "isArray",
                "required": true,
                "schema": {
                  "fullComment": "if the type is an array, this is true",
                  "type": "boolean"
                }
              },
              {
                "name": "isPrimitive",
                "required": true,
                "schema": {
                  "fullComment": "if it's a primitive type like \"string\", \"number\", \"boolean\", \"null\" | \"undefined\"",
                  "type": "boolean"
                }
              },
              {
                "name": "isEnum",
                "required": true,
                "schema": {
                  "fullComment": "will be true for any primitive conjunction types",
                  "type": "boolean"
                }
              },
              {
                "name": "isEnumLiteral",
                "required": true,
                "schema": {
                  "fullComment": "will be true for string conjunction types",
                  "type": "boolean"
                }
              },
              {
                "name": "typeCoverage",
                "required": true,
                "schema": {
                  "fullComment": "quantification of coverage of the specified type or subtypes in our database.",
                  "type": "number"
                }
              },
              {
                "name": "rawType",
                "required": true,
                "schema": {
                  "fullComment": "raw type string",
                  "type": "string"
                }
              }
            ],
            "type": "object"
          }
        },
        {
          "name": "isExported",
          "required": true,
          "schema": {
            "type": "boolean"
          }
        },
        {
          "name": "comments",
          "required": true,
          "schema": {
            "fullComment": "surrounding comments and comments inside of the variable",
            "items": [],
            "type": "array"
          }
        }
      ],
      "type": "object"
    },
    "typeCoverage": 0,
    "rawType": "TsVariable",
    "isArray": false,
    "isEnum": false,
    "isEnumLiteral": false,
    "isObject": false,
    "isPrimitive": false
  }
}