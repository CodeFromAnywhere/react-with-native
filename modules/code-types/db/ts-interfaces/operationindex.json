{
  "createdAt": 1667684668125,
  "updatedAt": 1667684668125,
  "deletedAt": 0,
  "createdFirstAt": 1667684668125,
  "id": "operationindex",
  "name": "OperationIndex",
  "slug": "operationindex",
  "operationRelativeTypescriptFilePath": "src/OperationIndex.ts",
  "hasGeneric": false,
  "isExported": true,
  "rawText": "\n\n/**\n * ---\n * dbStorageMethod: jsonSingle\n * operationRelativePath: db/operation-index.json\n * ---\n *\n * contains all calculated info about an operation that needs to be retreived often:\n * some package-only things, but also a collection of all indexes of all files\n *\n * should be able to be found in operaiton folder in /db/operation-index.json\n */\nexport interface OperationIndex extends GeneralOperationIndex, SlugModelType {\n  /**\n   * here for compatibility, should implement...\n   */\n  id: string;\n  createdAt: number;\n  buildSucceeded: boolean;\n  dependenciesBuildsFailed: boolean;\n  indexImportExportError: string;\n  lintProblems: string[];\n  indexInteracesErrors: string[];\n  indexErrors: string[];\n  size: FolderSummary;\n}",
  "extensions": [
    "GeneralOperationIndex",
    "SlugModelType"
  ],
  "isOperationIndex": false,
  "operationStorageLocationRelativeFilePath": "db/operation-index.json",
  "description": "\ncontains all calculated info about an operation that needs to be retreived often:\nsome package-only things, but also a collection of all indexes of all files\n\nshould be able to be found in operaiton folder in /db/operation-index.json",
  "dbStorageMethod": "jsonSingle",
  "isDbModel": true,
  "commentsInside": [],
  "type": {
    "typeDefinition": {
      "type": "object",
      "properties": {
        "slug": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "language": {
          "$ref": "#/definitions/Language",
          "default": "en"
        },
        "createdAt": {
          "type": "number"
        },
        "updatedAt": {
          "type": "number"
        },
        "deletedAt": {
          "$ref": "#/definitions/DeletedAt"
        },
        "createdFirstAt": {
          "$ref": "#/definitions/CreatedFirstAt"
        },
        "operationName": {
          "type": [
            "null",
            "string"
          ],
          "description": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you"
        },
        "projectRelativePath": {
          "type": "string",
          "description": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you"
        },
        "operationRelativePath": {
          "type": "string",
          "description": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you"
        },
        "id": {
          "type": "string",
          "description": "here for compatibility, should implement..."
        },
        "categoryStackCalculated": {
          "$ref": "#/definitions/CategoryStack",
          "description": "In case of jsonSingle storageMethod, the categoryStack is generated by the location of the file in the db model folder in the db folder.\n\nNB: Changing this value when updating/upserting, changes where the item is located!"
        },
        "packageName": {
          "type": "string",
          "description": "name of the package in package.json"
        },
        "folderName": {
          "type": "string",
          "description": "name of the operation folder"
        },
        "relativeOperationLocationPath": {
          "type": "string",
          "description": "relative path to the operation (does not include operation folder itself)\n\nrelative from project root"
        },
        "classification": {
          "$ref": "#/definitions/OperationClassification"
        },
        "packageDependencies": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "package dependency names (non-operation)"
        },
        "operationDependencies": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "operation dependency names"
        },
        "coreDependencies": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "core dependencies (e.g. `path` and `fs`)"
        },
        "buildSucceeded": {
          "type": "boolean"
        },
        "dependenciesBuildsFailed": {
          "type": "boolean"
        },
        "indexImportExportError": {
          "type": "string"
        },
        "lintProblems": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "indexInteracesErrors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "indexErrors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "size": {
          "$ref": "#/definitions/FolderSummary"
        }
      },
      "required": [
        "buildSucceeded",
        "classification",
        "coreDependencies",
        "createdAt",
        "createdFirstAt",
        "deletedAt",
        "dependenciesBuildsFailed",
        "folderName",
        "id",
        "indexErrors",
        "indexImportExportError",
        "indexInteracesErrors",
        "language",
        "lintProblems",
        "name",
        "operationDependencies",
        "operationName",
        "packageDependencies",
        "packageName",
        "projectRelativePath",
        "relativeOperationLocationPath",
        "size",
        "slug",
        "updatedAt"
      ],
      "additionalProperties": {
        "anyOf": [
          {
            "$ref": "#/definitions/Id"
          },
          {
            "not": {}
          }
        ]
      },
      "description": "--- dbStorageMethod: jsonSingle operationRelativePath: db/operation-index.json\n---\n\ncontains all calculated info about an operation that needs to be retreived often: some package-only things, but also a collection of all indexes of all files\n\nshould be able to be found in operaiton folder in /db/operation-index.json"
    },
    "simplifiedSchema": {
      "fullComment": "--- dbStorageMethod: jsonSingle operationRelativePath: db/operation-index.json\n---\n\ncontains all calculated info about an operation that needs to be retreived often: some package-only things, but also a collection of all indexes of all files\n\nshould be able to be found in operaiton folder in /db/operation-index.json",
      "properties": [
        {
          "name": "slug",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "name",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "language",
          "required": true,
          "schema": {
            "enum": [
              "english",
              "dutch",
              "nepali",
              "portuguese",
              "brazilian",
              "german",
              "french",
              "spanish",
              "italian",
              "norwegian",
              "swedish",
              "danish",
              "vietnamese",
              "indonesian",
              "southAfrican",
              "tokiPona",
              "hindi",
              "mandarin",
              "arabic",
              "bengali",
              "urdu",
              "japanese",
              "swahili"
            ],
            "fullComment": "all currently supported languages",
            "type": "string"
          }
        },
        {
          "name": "createdAt",
          "required": true,
          "schema": {
            "type": "number"
          }
        },
        {
          "name": "updatedAt",
          "required": true,
          "schema": {
            "type": "number"
          }
        },
        {
          "name": "deletedAt",
          "required": true,
          "schema": {
            "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
            "type": "number"
          }
        },
        {
          "name": "createdFirstAt",
          "required": true,
          "schema": {
            "fullComment": "in some cases, data can be created before it was created in our system. In this case, use CreatedFirstAt if this information is important.\n\nTime\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
            "type": "number"
          }
        },
        {
          "name": "operationName",
          "required": true,
          "schema": {
            "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
            "type": "null"
          }
        },
        {
          "name": "projectRelativePath",
          "required": true,
          "schema": {
            "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
            "type": "string"
          }
        },
        {
          "name": "operationRelativePath",
          "required": false,
          "schema": {
            "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
            "type": "string"
          }
        },
        {
          "name": "id",
          "required": true,
          "schema": {
            "fullComment": "here for compatibility, should implement...",
            "type": "string"
          }
        },
        {
          "name": "categoryStackCalculated",
          "required": false,
          "schema": {
            "fullComment": "In case of jsonSingle storageMethod, the categoryStack is generated by the location of the file in the db model folder in the db folder.\n\nNB: Changing this value when updating/upserting, changes where the item is located!\n\n",
            "nb": "Changing this value when updating/upserting, changes where the item is located!",
            "items": [
              {
                "schema": {
                  "type": "string"
                },
                "name": null
              }
            ],
            "type": "array"
          }
        },
        {
          "name": "packageName",
          "required": true,
          "schema": {
            "fullComment": "name of the package in package.json",
            "type": "string"
          }
        },
        {
          "name": "folderName",
          "required": true,
          "schema": {
            "fullComment": "name of the operation folder",
            "type": "string"
          }
        },
        {
          "name": "relativeOperationLocationPath",
          "required": true,
          "schema": {
            "fullComment": "relative path to the operation (does not include operation folder itself)\n\nrelative from project root",
            "type": "string"
          }
        },
        {
          "name": "classification",
          "required": true,
          "schema": {
            "enum": [
              "js",
              "ts",
              "node",
              "server",
              "web",
              "app",
              "ui-es6",
              "ui-es5",
              "ui-esm"
            ],
            "fullComment": "# Classification\n\nTODO: think about what the differences are and how we need to change processes to make it all work good\n\n## Possible values\n\njs: only js (no node) (well, ts of course, but it gets built into js)\n\nts: non-built ts code\n\nnode: includes other node packages, operations, core-imports, or globals.\n\nserver: exposes something on some port when it is ran and uses node code\n\nweb: has next.config.js and thus exposes something on some port when it is ran. next.js + react-based...\n\napp: uses react-native and exposes something on some port when it is ran\n\nDEPRECATED: ui-es6: uses react (with (native)), which main entry points to typescript es6 files (this ui package cannot be built, should be transpiled. highly discouraged, please use ui-es5, or, if needed, ui-esm)\n\nui-es5: ui which main entry points to javascript es5 files (this ui package can be built)\n\nui-esm: ui which builds to ESM module resolved Javascript",
            "todo": "think about what the differences are and how we need to change processes to make it all work good",
            "type": "string"
          }
        },
        {
          "name": "packageDependencies",
          "required": true,
          "schema": {
            "fullComment": "package dependency names (non-operation)",
            "items": [
              {
                "schema": {
                  "type": "string"
                },
                "name": null
              }
            ],
            "type": "array"
          }
        },
        {
          "name": "operationDependencies",
          "required": true,
          "schema": {
            "fullComment": "operation dependency names",
            "items": [
              {
                "schema": {
                  "type": "string"
                },
                "name": null
              }
            ],
            "type": "array"
          }
        },
        {
          "name": "coreDependencies",
          "required": true,
          "schema": {
            "fullComment": "core dependencies (e.g. `path` and `fs`)",
            "items": [
              {
                "schema": {
                  "type": "string"
                },
                "name": null
              }
            ],
            "type": "array"
          }
        },
        {
          "name": "buildSucceeded",
          "required": true,
          "schema": {
            "type": "boolean"
          }
        },
        {
          "name": "dependenciesBuildsFailed",
          "required": true,
          "schema": {
            "type": "boolean"
          }
        },
        {
          "name": "indexImportExportError",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "lintProblems",
          "required": true,
          "schema": {
            "items": [
              {
                "schema": {
                  "type": "string"
                },
                "name": null
              }
            ],
            "type": "array"
          }
        },
        {
          "name": "indexInteracesErrors",
          "required": true,
          "schema": {
            "items": [
              {
                "schema": {
                  "type": "string"
                },
                "name": null
              }
            ],
            "type": "array"
          }
        },
        {
          "name": "indexErrors",
          "required": true,
          "schema": {
            "items": [
              {
                "schema": {
                  "type": "string"
                },
                "name": null
              }
            ],
            "type": "array"
          }
        },
        {
          "name": "size",
          "required": true,
          "schema": {
            "fullComment": "objective size measurements of all files in a folder\n\nsummary for a folder should contain file-summaries for different filetypes and an overal file summary",
            "properties": [
              {
                "name": "size",
                "required": true,
                "schema": {
                  "fullComment": "type interface that can be used to summarize multiple files",
                  "properties": [
                    {
                      "name": "numberOfFiles",
                      "required": false,
                      "schema": {
                        "fullComment": "if this is about multiple files, the number of files is specified here",
                        "type": "number"
                      }
                    },
                    {
                      "name": "characters",
                      "required": true,
                      "schema": {
                        "fullComment": "amount of characters",
                        "type": "number"
                      }
                    },
                    {
                      "name": "lines",
                      "required": true,
                      "schema": {
                        "fullComment": "amount of lines",
                        "type": "number"
                      }
                    },
                    {
                      "name": "bytes",
                      "required": true,
                      "schema": {
                        "fullComment": "amount of bytes",
                        "type": "number"
                      }
                    },
                    {
                      "name": "linesPerFile",
                      "required": true,
                      "schema": {
                        "fullComment": "rounded, amount of lines per file (averaged)",
                        "type": "number"
                      }
                    },
                    {
                      "name": "charactersPerLine",
                      "required": true,
                      "schema": {
                        "fullComment": "rounded, amount of characters per line (averaged)",
                        "type": "number"
                      }
                    },
                    {
                      "name": "bytesPerCharacter",
                      "required": true,
                      "schema": {
                        "fullComment": "rounded, amount of bytes per character",
                        "type": "number"
                      }
                    }
                  ],
                  "type": "object"
                }
              },
              {
                "name": "textSize",
                "required": true,
                "schema": {
                  "fullComment": "type interface that can be used to summarize multiple files",
                  "properties": [
                    {
                      "name": "numberOfFiles",
                      "required": false,
                      "schema": {
                        "fullComment": "if this is about multiple files, the number of files is specified here",
                        "type": "number"
                      }
                    },
                    {
                      "name": "characters",
                      "required": true,
                      "schema": {
                        "fullComment": "amount of characters",
                        "type": "number"
                      }
                    },
                    {
                      "name": "lines",
                      "required": true,
                      "schema": {
                        "fullComment": "amount of lines",
                        "type": "number"
                      }
                    },
                    {
                      "name": "bytes",
                      "required": true,
                      "schema": {
                        "fullComment": "amount of bytes",
                        "type": "number"
                      }
                    },
                    {
                      "name": "linesPerFile",
                      "required": true,
                      "schema": {
                        "fullComment": "rounded, amount of lines per file (averaged)",
                        "type": "number"
                      }
                    },
                    {
                      "name": "charactersPerLine",
                      "required": true,
                      "schema": {
                        "fullComment": "rounded, amount of characters per line (averaged)",
                        "type": "number"
                      }
                    },
                    {
                      "name": "bytesPerCharacter",
                      "required": true,
                      "schema": {
                        "fullComment": "rounded, amount of bytes per character",
                        "type": "number"
                      }
                    }
                  ],
                  "type": "object"
                }
              },
              {
                "name": "dataSize",
                "required": true,
                "schema": {
                  "fullComment": "type interface that can be used to summarize multiple files",
                  "properties": [
                    {
                      "name": "numberOfFiles",
                      "required": false,
                      "schema": {
                        "fullComment": "if this is about multiple files, the number of files is specified here",
                        "type": "number"
                      }
                    },
                    {
                      "name": "characters",
                      "required": true,
                      "schema": {
                        "fullComment": "amount of characters",
                        "type": "number"
                      }
                    },
                    {
                      "name": "lines",
                      "required": true,
                      "schema": {
                        "fullComment": "amount of lines",
                        "type": "number"
                      }
                    },
                    {
                      "name": "bytes",
                      "required": true,
                      "schema": {
                        "fullComment": "amount of bytes",
                        "type": "number"
                      }
                    },
                    {
                      "name": "linesPerFile",
                      "required": true,
                      "schema": {
                        "fullComment": "rounded, amount of lines per file (averaged)",
                        "type": "number"
                      }
                    },
                    {
                      "name": "charactersPerLine",
                      "required": true,
                      "schema": {
                        "fullComment": "rounded, amount of characters per line (averaged)",
                        "type": "number"
                      }
                    },
                    {
                      "name": "bytesPerCharacter",
                      "required": true,
                      "schema": {
                        "fullComment": "rounded, amount of bytes per character",
                        "type": "number"
                      }
                    }
                  ],
                  "type": "object"
                }
              },
              {
                "name": "codeSize",
                "required": true,
                "schema": {
                  "fullComment": "type interface that can be used to summarize multiple files",
                  "properties": [
                    {
                      "name": "numberOfFiles",
                      "required": false,
                      "schema": {
                        "fullComment": "if this is about multiple files, the number of files is specified here",
                        "type": "number"
                      }
                    },
                    {
                      "name": "characters",
                      "required": true,
                      "schema": {
                        "fullComment": "amount of characters",
                        "type": "number"
                      }
                    },
                    {
                      "name": "lines",
                      "required": true,
                      "schema": {
                        "fullComment": "amount of lines",
                        "type": "number"
                      }
                    },
                    {
                      "name": "bytes",
                      "required": true,
                      "schema": {
                        "fullComment": "amount of bytes",
                        "type": "number"
                      }
                    },
                    {
                      "name": "linesPerFile",
                      "required": true,
                      "schema": {
                        "fullComment": "rounded, amount of lines per file (averaged)",
                        "type": "number"
                      }
                    },
                    {
                      "name": "charactersPerLine",
                      "required": true,
                      "schema": {
                        "fullComment": "rounded, amount of characters per line (averaged)",
                        "type": "number"
                      }
                    },
                    {
                      "name": "bytesPerCharacter",
                      "required": true,
                      "schema": {
                        "fullComment": "rounded, amount of bytes per character",
                        "type": "number"
                      }
                    }
                  ],
                  "type": "object"
                }
              }
            ],
            "type": "object"
          }
        }
      ],
      "type": "object"
    },
    "typeCoverage": 0,
    "rawType": "OperationIndex",
    "isArray": false,
    "isEnum": false,
    "isEnumLiteral": false,
    "isObject": false,
    "isPrimitive": false
  }
}