{
  "createdAt": 1668336042528,
  "updatedAt": 1668336042528,
  "deletedAt": 0,
  "createdFirstAt": 1668336042528,
  "publicAuthorization": [
    "read",
    "search"
  ],
  "isApiExposed": false,
  "isPostApi": false,
  "isGetApi": false,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/general.ts",
  "commentsInside": [],
  "rawText": " async ({\n  operationFolderPath,\n}: {\n  operationFolderPath: string;\n}) => {\n  const problems: string[] = [];\n\n  const packageJson = await getPackageJson({ operationFolderPath });\n  if (!packageJson) {\n    problems.push(\"package.json should exist\");\n  } else {\n    if (!packageJson.name) {\n      problems.push(\"package.json needs a name\");\n    }\n    if (!packageJson.version) {\n      problems.push(\"package.json needs a version\");\n    }\n  }\n\n  const tsConfig = await getTsConfig(operationFolderPath);\n  if (!tsConfig) {\n    problems.push(\"tsconfig.json should exist\");\n  } else {\n    // we can lint tsconfig here too\n  }\n\n  const operationFolderName = getLastFolder(operationFolderPath);\n\n  if (operationFolderName !== packageJson?.name) {\n    problems.push(\n      \"operation folder should have the same name as the package.json name\"\n    );\n  }\n\n  return problems;\n}",
  "name": "preIndexLint",
  "slug": "pre-index-lint",
  "parameters": [
    {
      "name": "{\n  operationFolderPath,\n}",
      "schema": {
        "type": "object",
        "properties": {
          "operationFolderPath": {
            "type": "string"
          }
        },
        "required": [
          "operationFolderPath"
        ],
        "additionalProperties": false
      },
      "simplifiedSchema": {
        "properties": [
          {
            "name": "operationFolderPath",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "type": "object"
      },
      "required": true
    }
  ],
  "description": "Should be a collection of small functions that check if all conventions are used and if there isn't used anything that should NOT be used. this can later become a linter. make sure to research how eslint works first\n\nPlan:\n\n1) just use my own sdk's as much as possible to provide some handy convention checks in a package\n2) later integrate this into vscode, i'm sure this is how it's done\n\nthis lint can be done before indexation",
  "returnType": {
    "rawType": "unknown",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 3,
  "size": {
    "characters": 1297,
    "lines": 43,
    "bytes": 1297,
    "bytesPerCharacter": 1,
    "charactersPerLine": 30,
    "linesPerFile": 43,
    "numberOfFiles": 1
  },
  "id": "qtmeennvmnbapyxzpapdutlz"
}