{
  "createdAt": 1669385029105,
  "updatedAt": 1669385029105,
  "deletedAt": 0,
  "createdFirstAt": 1669385029105,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "getFileContents",
  "slug": "get-file-contents",
  "operationRelativeTypescriptFilePath": "src/getFileContents.ts",
  "type": {
    "rawType": "(projectRelativeFilePath: string) => Promise<{ isSuccessful: boolean; message?: string | undefined; fileContents?: string | undefined; }>",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "async (\n  projectRelativeFilePath: string\n): Promise<{\n  isSuccessful: boolean;\n  message?: string;\n  fileContents?: string;\n}> => {\n  const projectRoot = getProjectRoot();\n\n  if (!projectRoot) {\n    return { isSuccessful: false, message: \"No project root\" };\n  }\n\n  const absolutePath = path.join(projectRoot, projectRelativeFilePath);\n\n  if (!fs.existsSync(absolutePath)) {\n    return { isSuccessful: false, message: \"File doesn't exist\" };\n  }\n\n  const stats = await fs.stat(absolutePath);\n\n  if (stats.size > 1024 * 1024 || stats.isDirectory()) {\n    return {\n      isSuccessful: false,\n      message: \"That's a directory or bigger than 1MB\",\n    };\n  }\n\n  const fileContents = await fs.readFile(absolutePath, \"utf8\");\n\n  return { fileContents, isSuccessful: true };\n}",
  "description": "Gets the contents of a file in the project",
  "id": "ikxfovldbpozfhiwzstzxfvj"
}