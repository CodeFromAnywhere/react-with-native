{
  "createdAt": 1666264529980,
  "updatedAt": 1666264529980,
  "deletedAt": 0,
  "createdFirstAt": 1666264529980,
  "publicAuthorization": [
    "read-docs",
    "search"
  ],
  "isApiExposed": false,
  "isPostApi": false,
  "isGetApi": false,
  "name": "slugify",
  "slug": "slugify",
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/slugify.ts",
  "commentsInside": [],
  "description": "/**\n * this function does the same as kebabCase but it also does some more transformation on top\n *\n * useful for making simple URLs and filenames. Kebacase is not enough\n *\n * NB: this is no two way transformation. When slugifying something, information is lost and it cannot be converted back in the original name.\n *\n * TODO: make the tranformations that are done here into smaller util functions and make a clean function that can be ran before running every casing conversion (maybe in a config)\n */",
  "parameters": [
    {
      "name": "string",
      "schema": {
        "type": "string"
      },
      "simplifiedSchema": {
        "type": "string"
      },
      "required": true
    }
  ],
  "returnType": {
    "rawType": "any",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "size": {
    "characters": 1771,
    "lines": 35,
    "bytes": 1852,
    "bytesPerCharacter": 1.0457368718238282,
    "charactersPerLine": 51,
    "linesPerFile": 35,
    "numberOfFiles": 1
  },
  "rawText": "/**\n * this function does the same as kebabCase but it also does some more transformation on top\n *\n * useful for making simple URLs and filenames. Kebacase is not enough\n *\n * NB: this is no two way transformation. When slugifying something, information is lost and it cannot be converted back in the original name.\n *\n * TODO: make the tranformations that are done here into smaller util functions and make a clean function that can be ran before running every casing conversion (maybe in a config)\n */\nexport function slugify(string: string) {\n  const a =\n    \"àáâäæãåāăąçćčđďèéêëēėęěğǵḧîïíīįìıİłḿñńǹňôöòóœøōõőṕŕřßśšşșťțûüùúūǘůűųẃẍÿýžźż·/_,:;\";\n  const b =\n    \"aaaaaaaaaacccddeeeeeeeegghiiiiiiiilmnnnnoooooooooprrsssssttuuuuuuuuuwxyyzzz------\";\n  const p = new RegExp(a.split(\"\").join(\"|\"), \"g\");\n\n  return string\n    .toString()\n    .toLowerCase()\n    .replace(/\\s+/g, \"-\") // Replace spaces with -\n    .replace(p, (c) => b.charAt(a.indexOf(c))) // Replace special characters\n    .replace(/&/g, \"-and-\") // Replace & with 'and'\n    .replace(/[^\\w\\-]+/g, \"\") // Remove all non-word characters\n    .replace(/\\-\\-+/g, \"-\") // Replace multiple - with single -\n    .replace(/^-+/, \"\") // Trim - from start of text\n    .replace(/-+$/, \"\"); // Trim - from end of text\n}",
  "maxIndentationDepth": 2,
  "id": "vfzallaamxoaacivptoeibxh"
}