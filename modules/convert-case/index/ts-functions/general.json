[{"id":"WhhIPNfojkSVAIZV","commentsInside":[],"rawText":" (word: string): string[] => {\n  const letters = word.split(\"\");\n  const allWords = letters.reduce(\n    (words, letter) => {\n      //get the last word, we know it's always defined because of the initial value of the reduce\n      const lastWord = words.pop()!;\n      //let's also get the last letter\n      const lastLetter = lastWord.substring(-1);\n      const lastLetterIsLowercase = lastLetter.toUpperCase() !== lastLetter;\n      const letterIsUppercase = letter.toUpperCase() === letter;\n      const createNewWord = lastLetterIsLowercase && letterIsUppercase;\n      const newSequence = createNewWord\n        ? [lastWord, letter]\n        : [`${lastWord}${letter}`];\n      const newWords = words.concat(newSequence);\n      return newWords;\n    },\n    [\"\"]\n  );\n\n  return allWords;\n  // if it was lowercase but it became upper, it's a new word\n}","name":"splitCasingDelimiters","slug":"split-casing-delimiters","parameters":[{"name":"word","schema":{"type":"string"},"simplifiedSchema":{"type":"string"},"required":true}],"description":"","returnType":{"rawType":"string[]","typeDefinition":{"optional":false,"type":"array","items":{"type":"string","allOf":[{"transform":["trim"]},{"minLength":1}]}},"typeCoverage":0,"isArray":true,"isEnum":false,"isObject":true,"isPrimitive":false,"isEnumLiteral":false,"simplifiedSchema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},"maxIndentationDepth":4,"relativePathFromProjectRoot":"/tools/util/convert-case/src/general.ts","srcFileId":"/general","operationFolderName":"convert-case","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/convert-case","operationName":"convert-case","size":{"characters":844,"lines":23,"bytes":844,"bytesPerCharacter":1,"charactersPerfLine":36.69565217391305,"linesPerFile":23,"numberOfFiles":1}},{"id":"eHVBToURbQbqGrht","commentsInside":[],"rawText":" (target: Casing) => {\n  if (target === \"capital\") return \"_\";\n  if (target === \"human\") return \" \";\n  if (target === \"kebab\") return \"-\";\n  if (target === \"snake\") return \"_\";\n  return \"\";\n}","name":"getDelimiter","slug":"get-delimiter","parameters":[{"name":"target","schema":{"$ref":"#/definitions/Casing"},"simplifiedSchema":{"enum":["camel","pascal","snake","kebab","capital","human"],"type":"string"},"required":true}],"description":"","returnType":{"rawType":"\"_\" | \" \" | \"-\" | \"\"","typeDefinition":{"optional":false,"enum":["_"," ","-",""],"x-enumNames":["_"," ","-",""],"type":"string"},"typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":false,"isEnumLiteral":false,"simplifiedSchema":{"enum":["_"," ","-",""],"type":"string"}},"maxIndentationDepth":1,"relativePathFromProjectRoot":"/tools/util/convert-case/src/general.ts","srcFileId":"/general","operationFolderName":"convert-case","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/convert-case","operationName":"convert-case","size":{"characters":191,"lines":7,"bytes":191,"bytesPerCharacter":1,"charactersPerfLine":27.285714285714285,"linesPerFile":7,"numberOfFiles":1}},{"id":"ZyaksBpHKJRGKkgB","commentsInside":[],"rawText":" (word: string) => {\n  return word.charAt(0).toUpperCase().concat(word.substring(1));\n}","name":"capitaliseFirstLetter","slug":"capitalise-first-letter","parameters":[{"name":"word","schema":{"type":"string"},"simplifiedSchema":{"type":"string"},"required":true}],"description":"","returnType":{"rawType":"any","typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":false,"isEnumLiteral":false},"maxIndentationDepth":1,"relativePathFromProjectRoot":"/tools/util/convert-case/src/general.ts","srcFileId":"/general","operationFolderName":"convert-case","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/convert-case","operationName":"convert-case","size":{"characters":87,"lines":3,"bytes":87,"bytesPerCharacter":1,"charactersPerfLine":29,"linesPerFile":3,"numberOfFiles":1}},{"id":"VXNGqSNGfjxIQhZO","commentsInside":[],"rawText":" (word: string, index: number, target: Casing) => {\n  if (target === \"capital\") return word.toUpperCase();\n  if (target === \"kebab\" || target === \"snake\") return word.toLowerCase();\n  if (target === \"pascal\") return capitaliseFirstLetter(word);\n  if (target === \"camel\")\n    return index === 0 ? word.toLowerCase() : capitaliseFirstLetter(word);\n\n  //human case\n  return index === 0 ? capitaliseFirstLetter(word) : word.toLowerCase();\n}","name":"convertToTargetCasing","slug":"convert-to-target-casing","parameters":[{"name":"word","schema":{"type":"string"},"simplifiedSchema":{"type":"string"},"required":true},{"name":"index","schema":{"type":"number"},"simplifiedSchema":{"type":"number"},"required":true},{"name":"target","schema":{"$ref":"#/definitions/Casing"},"simplifiedSchema":{"enum":["camel","pascal","snake","kebab","capital","human"],"type":"string"},"required":true}],"description":"","returnType":{"rawType":"any","typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":false,"isEnumLiteral":false},"maxIndentationDepth":2,"relativePathFromProjectRoot":"/tools/util/convert-case/src/general.ts","srcFileId":"/general","operationFolderName":"convert-case","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/convert-case","operationName":"convert-case","size":{"characters":436,"lines":10,"bytes":436,"bytesPerCharacter":1,"charactersPerfLine":43.6,"linesPerFile":10,"numberOfFiles":1}},{"id":"CryxMsjcJCCFfzPi","commentsInside":[],"rawText":" (\n  /**\n   * NB: texts of more than a sentence are not supported\n   */\n  text: string,\n  target: Casing\n) =>\n  text\n    .split(nonCasingDelimiters)\n    .reduce(\n      (all, word) => all.concat(splitCasingDelimiters(word)),\n      [] as string[]\n    )\n    .map((word, index) => convertToTargetCasing(word, index, target))\n    .join(getDelimiter(target))","name":"convertCase","slug":"convert-case","parameters":[{"name":"text","schema":{"type":"string","description":"NB: texts of more than a sentence are not supported"},"simplifiedSchema":{"description":"NB: texts of more than a sentence are not supported","type":"string"},"required":true},{"name":"target","schema":{"$ref":"#/definitions/Casing"},"simplifiedSchema":{"enum":["camel","pascal","snake","kebab","capital","human"],"type":"string"},"required":true}],"description":"","returnType":{"rawType":"any","typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":false,"isEnumLiteral":false},"maxIndentationDepth":3,"relativePathFromProjectRoot":"/tools/util/convert-case/src/general.ts","srcFileId":"/general","operationFolderName":"convert-case","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/convert-case","operationName":"convert-case","size":{"characters":352,"lines":15,"bytes":352,"bytesPerCharacter":1,"charactersPerfLine":23.466666666666665,"linesPerFile":15,"numberOfFiles":1}},{"id":"wRdQHjNMAqyQrXVB","commentsInside":[],"rawText":" (text: string) => convertCase(text, \"camel\")","name":"camelCase","slug":"camel-case","parameters":[{"name":"text","schema":{"type":"string"},"simplifiedSchema":{"type":"string"},"required":true}],"description":"","returnType":{"rawType":"any","typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":false,"isEnumLiteral":false},"maxIndentationDepth":0,"relativePathFromProjectRoot":"/tools/util/convert-case/src/general.ts","srcFileId":"/general","operationFolderName":"convert-case","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/convert-case","operationName":"convert-case","size":{"characters":45,"lines":1,"bytes":45,"bytesPerCharacter":1,"charactersPerfLine":45,"linesPerFile":1,"numberOfFiles":1}},{"id":"XoiONovQUqeerLjU","commentsInside":[],"rawText":" (text: string) => convertCase(text, \"pascal\")","name":"pascalCase","slug":"pascal-case","parameters":[{"name":"text","schema":{"type":"string"},"simplifiedSchema":{"type":"string"},"required":true}],"description":"","returnType":{"rawType":"any","typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":false,"isEnumLiteral":false},"maxIndentationDepth":0,"relativePathFromProjectRoot":"/tools/util/convert-case/src/general.ts","srcFileId":"/general","operationFolderName":"convert-case","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/convert-case","operationName":"convert-case","size":{"characters":46,"lines":1,"bytes":46,"bytesPerCharacter":1,"charactersPerfLine":46,"linesPerFile":1,"numberOfFiles":1}},{"id":"eBvbokUryywylRna","commentsInside":[],"rawText":" (text: string) => convertCase(text, \"snake\")","name":"snakeCase","slug":"snake-case","parameters":[{"name":"text","schema":{"type":"string"},"simplifiedSchema":{"type":"string"},"required":true}],"description":"","returnType":{"rawType":"any","typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":false,"isEnumLiteral":false},"maxIndentationDepth":0,"relativePathFromProjectRoot":"/tools/util/convert-case/src/general.ts","srcFileId":"/general","operationFolderName":"convert-case","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/convert-case","operationName":"convert-case","size":{"characters":45,"lines":1,"bytes":45,"bytesPerCharacter":1,"charactersPerfLine":45,"linesPerFile":1,"numberOfFiles":1}},{"id":"BloyadSfuMOiFdjc","commentsInside":[],"rawText":" (text: string) => convertCase(text, \"kebab\")","name":"kebabCase","slug":"kebab-case","parameters":[{"name":"text","schema":{"type":"string"},"simplifiedSchema":{"type":"string"},"required":true}],"description":"","returnType":{"rawType":"any","typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":false,"isEnumLiteral":false},"maxIndentationDepth":0,"relativePathFromProjectRoot":"/tools/util/convert-case/src/general.ts","srcFileId":"/general","operationFolderName":"convert-case","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/convert-case","operationName":"convert-case","size":{"characters":45,"lines":1,"bytes":45,"bytesPerCharacter":1,"charactersPerfLine":45,"linesPerFile":1,"numberOfFiles":1}},{"id":"JeapAuZPIxpdHiFi","commentsInside":[],"rawText":" (text: string) => convertCase(text, \"capital\")","name":"capitalCase","slug":"capital-case","parameters":[{"name":"text","schema":{"type":"string"},"simplifiedSchema":{"type":"string"},"required":true}],"description":"","returnType":{"rawType":"any","typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":false,"isEnumLiteral":false},"maxIndentationDepth":0,"relativePathFromProjectRoot":"/tools/util/convert-case/src/general.ts","srcFileId":"/general","operationFolderName":"convert-case","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/convert-case","operationName":"convert-case","size":{"characters":47,"lines":1,"bytes":47,"bytesPerCharacter":1,"charactersPerfLine":47,"linesPerFile":1,"numberOfFiles":1}},{"id":"udcpbCLlIyuguCXk","commentsInside":[],"rawText":" (text: string) => convertCase(text, \"human\")","name":"humanCase","slug":"human-case","parameters":[{"name":"text","schema":{"type":"string"},"simplifiedSchema":{"type":"string"},"required":true}],"description":"","returnType":{"rawType":"any","typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":false,"isEnumLiteral":false},"maxIndentationDepth":0,"relativePathFromProjectRoot":"/tools/util/convert-case/src/general.ts","srcFileId":"/general","operationFolderName":"convert-case","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/convert-case","operationName":"convert-case","size":{"characters":45,"lines":1,"bytes":45,"bytesPerCharacter":1,"charactersPerfLine":45,"linesPerFile":1,"numberOfFiles":1}},{"id":"SoBasmVNaPVKWKuT","commentsInside":[],"rawText":" (text: string) => {\n  return kebabCase(text).split(\"-\");\n}","name":"lowerCaseArray","slug":"lower-case-array","parameters":[{"name":"text","schema":{"type":"string"},"simplifiedSchema":{"type":"string"},"required":true}],"description":"converts any string to an array of lowercase words\n\nformat [\"word1\",\"word2\",\"word3\"] from a string of any casing.","returnType":{"rawType":"any","typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":false,"isEnumLiteral":false},"maxIndentationDepth":1,"relativePathFromProjectRoot":"/tools/util/convert-case/src/general.ts","srcFileId":"/general","operationFolderName":"convert-case","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/convert-case","operationName":"convert-case","size":{"characters":172,"lines":5,"bytes":172,"bytesPerCharacter":1,"charactersPerfLine":34.4,"linesPerFile":5,"numberOfFiles":1}},{"id":"QIYtkPDgPiNtQrAw","commentsInside":[],"name":"slugify","slug":"slugify","relativePathFromProjectRoot":"/tools/util/convert-case/src/general.ts","srcFileId":"/general","operationFolderName":"convert-case","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/convert-case","operationName":"convert-case","description":"/**\n * this function does the same as kebabCase but it also does some more transformation on top\n *\n * TODO: make the tranformations that are done here into smaller util functions and make a clean function that can be ran before running every casing conversion (maybe in a config)\n */","parameters":[{"name":"string","schema":{"type":"string"},"simplifiedSchema":{"type":"string"},"required":true}],"returnType":{"rawType":"any","typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":false,"isEnumLiteral":false},"size":{"characters":1333,"lines":29,"bytes":1414,"bytesPerCharacter":1.0607651912978244,"charactersPerfLine":45.96551724137931,"linesPerFile":29,"numberOfFiles":1},"rawText":"\n\n/**\n * this function does the same as kebabCase but it also does some more transformation on top\n *\n * TODO: make the tranformations that are done here into smaller util functions and make a clean function that can be ran before running every casing conversion (maybe in a config)\n */\nexport function slugify(string: string) {\n  const a =\n    \"àáâäæãåāăąçćčđďèéêëēėęěğǵḧîïíīįìıİłḿñńǹňôöòóœøōõőṕŕřßśšşșťțûüùúūǘůűųẃẍÿýžźż·/_,:;\";\n  const b =\n    \"aaaaaaaaaacccddeeeeeeeegghiiiiiiiilmnnnnoooooooooprrsssssttuuuuuuuuuwxyyzzz------\";\n  const p = new RegExp(a.split(\"\").join(\"|\"), \"g\");\n\n  return string\n    .toString()\n    .toLowerCase()\n    .replace(/\\s+/g, \"-\") // Replace spaces with -\n    .replace(p, (c) => b.charAt(a.indexOf(c))) // Replace special characters\n    .replace(/&/g, \"-and-\") // Replace & with 'and'\n    .replace(/[^\\w\\-]+/g, \"\") // Remove all non-word characters\n    .replace(/\\-\\-+/g, \"-\") // Replace multiple - with single -\n    .replace(/^-+/, \"\") // Trim - from start of text\n    .replace(/-+$/, \"\"); // Trim - from end of text\n}","maxIndentationDepth":2}]