[{"id":"pRsVrUkjJVEONjSk","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/tools/util/convert-case/src/general.ts","srcFileId":"/general","operationFolderName":"convert-case","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/convert-case","operationName":"convert-case","comment":"space, comma, dot, underscore, dash","rawStatement":"const nonCasingDelimiters = /[\\s,._-]+/;","parameters":{},"types":[],"firstLine":41,"lastLine":41},{"id":"pRsVrUkjJVEONjSk","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/tools/util/convert-case/src/general.ts","srcFileId":"/general","operationFolderName":"convert-case","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/convert-case","operationName":"convert-case","comment":"","rawStatement":"export const convertCase = (\n  /**\n   * NB: texts of more than a sentence are not supported\n   */\n  text: string,\n  target: Casing\n) =>\n  text\n    .split(nonCasingDelimiters)\n    .reduce(\n      (all, word) => all.concat(splitCasingDelimiters(word)),\n      [] as string[]\n    )\n    .map((word, index) => convertToTargetCasing(word, index, target))\n    .join(getDelimiter(target));","parameters":{},"types":[],"firstLine":66,"lastLine":68},{"id":"pRsVrUkjJVEONjSk","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/tools/util/convert-case/src/general.ts","srcFileId":"/general","operationFolderName":"convert-case","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/convert-case","operationName":"convert-case","comment":"converts any string to an array of lowercase words\n\nformat [\"word1\",\"word2\",\"word3\"] from a string of any casing.","rawStatement":"export const lowerCaseArray = (text: string) => {\n  return kebabCase(text).split(\"-\");\n};","parameters":{},"types":[],"firstLine":92,"lastLine":96},{"id":"pRsVrUkjJVEONjSk","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/tools/util/convert-case/src/general.ts","srcFileId":"/general","operationFolderName":"convert-case","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/convert-case","operationName":"convert-case","comment":"this function does the same as kebabCase but it also does some more transformation on top\n\nTODO: make the tranformations that are done here into smaller util functions and make a clean function that can be ran before running every casing conversion (maybe in a config)","rawStatement":"export function slugify(string: string) {\n  const a =\n    \"àáâäæãåāăąçćčđďèéêëēėęěğǵḧîïíīįìıİłḿñńǹňôöòóœøōõőṕŕřßśšşșťțûüùúūǘůűųẃẍÿýžźż·/_,:;\";\n  const b =\n    \"aaaaaaaaaacccddeeeeeeeegghiiiiiiiilmnnnnoooooooooprrsssssttuuuuuuuuuwxyyzzz------\";\n  const p = new RegExp(a.split(\"\").join(\"|\"), \"g\");\n\n  return string\n    .toString()\n    .toLowerCase()\n    .replace(/\\s+/g, \"-\") // Replace spaces with -\n    .replace(p, (c) => b.charAt(a.indexOf(c))) // Replace special characters\n    .replace(/&/g, \"-and-\") // Replace & with 'and'\n    .replace(/[^\\w\\-]+/g, \"\") // Remove all non-word characters\n    .replace(/\\-\\-+/g, \"-\") // Replace multiple - with single -\n    .replace(/^-+/, \"\") // Trim - from start of text\n    .replace(/-+$/, \"\"); // Trim - from end of text\n}","parameters":{},"types":["todo"],"firstLine":186,"lastLine":190}]