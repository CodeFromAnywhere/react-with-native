[{"id":"mMSwqltpfLaiEXGs","commentsInside":[],"rawText":" <TResult>(\n  result: TResult,\n  jsonSchema: JSONSchema\n): boolean => {\n  return true;\n}","name":"isResultOfInterface","slug":"is-result-of-interface","parameters":[],"description":"TODO: need validate-json-schema. also this can be its own little package, as it can be used in many other places\n\nnot sure if this should be part of make-test at all, because we want operations to be able to operate independently without the os, right? so then it won't work because you don't always have indexes...","returnType":{"rawType":"{}","typeDefinition":{"optional":false,"type":"boolean"},"typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":true,"isEnumLiteral":false,"simplifiedSchema":{"type":"boolean"}},"maxIndentationDepth":1,"relativePathFromProjectRoot":"/tools/typescript/testing/make-test/src/general.ts","srcFileId":"/general","operationFolderName":"make-test","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/typescript/testing/make-test","operationName":"make-test","size":{"characters":403,"lines":8,"bytes":403,"bytesPerCharacter":1,"charactersPerfLine":50.375,"linesPerFile":8,"numberOfFiles":1}},{"id":"yspfiaoTNRIoVEmT","commentsInside":[],"rawText":" <TResult>(\n  /**\n   * callback that calls the function to test with a certain input\n   */\n  testFunction: (() => Promise<TResult>) | (() => TResult),\n  /** If not given, assumes it passes if it returns the type interface it says it returns (and it doesn't crash) */\n  isValid?: (result: TResult) => boolean\n) => {\n  // NB: don't execute the test immideately, so we return a callback that actually tests\n  return async () => {\n    // try because funning the test may crash the app if the function doesn't work properly\n    try {\n      // TODO: what's the difference between TResult and Awaited<TResult>?\n      const result: TResult = await testFunction();\n\n      /**\n       * TODO:\n       */\n      const shouldBeInterface = {};\n\n      const correctInterface = isResultOfInterface(result, shouldBeInterface);\n      const isResultValid = isValid\n        ? correctInterface && isValid(result)\n        : correctInterface;\n\n      if (!isResultValid) {\n        console.dir(\n          {\n            response: `❌ TEST FAILED`,\n            test: testFunction.toString(),\n            result,\n          },\n          { depth: 999 }\n        );\n      } //\n\n      return isResultValid;\n    } catch (error) {\n      // TODO: check if toString here returns the right thing (a string representation of the function to test). otherwise, find a different solution.\n      console.log(`❌ TEST FAILED: ${testFunction.toString()}`, error);\n      return false;\n    }\n  };\n}","name":"makeTest","slug":"make-test","parameters":[],"description":"create a test that is testable with `runAllTests`...","returnType":{"rawType":"() => unknown","typeDefinition":{"type":"object","properties":{},"optional":false},"typeCoverage":0,"isArray":false,"isEnum":false,"isObject":true,"isPrimitive":false,"isEnumLiteral":false,"simplifiedSchema":{"properties":[],"type":"object"}},"maxIndentationDepth":6,"relativePathFromProjectRoot":"/tools/typescript/testing/make-test/src/general.ts","srcFileId":"/general","operationFolderName":"make-test","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/typescript/testing/make-test","operationName":"make-test","size":{"characters":1499,"lines":44,"bytes":1503,"bytesPerCharacter":1.0026684456304202,"charactersPerfLine":34.06818181818182,"linesPerFile":44,"numberOfFiles":1}}]