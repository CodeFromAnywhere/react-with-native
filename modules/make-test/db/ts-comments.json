[
  {
    "createdAt": 1666264430552,
    "updatedAt": 1666264430552,
    "deletedAt": 0,
    "createdFirstAt": 1666264430552,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/general.ts",
    "comment": "TODO: need validate-json-schema. also this can be its own little package, as it can be used in many other places\n\nnot sure if this should be part of make-test at all, because we want operations to be able to operate independently without the os, right? so then it won't work because you don't always have indexes...",
    "rawStatement": "export const isResultOfInterface = <TResult>(\n  result: TResult,\n  jsonSchema: JSONSchema\n): boolean => {\n  return true;\n};",
    "parameters": {},
    "types": [
      "todo"
    ],
    "firstLine": 5,
    "lastLine": 9,
    "id": "xvuyltotuncprpbvihmrnowu"
  },
  {
    "createdAt": 1666264430552,
    "updatedAt": 1666264430552,
    "deletedAt": 0,
    "createdFirstAt": 1666264430552,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/general.ts",
    "comment": "create a test that is testable with `runAllTests`...",
    "rawStatement": "export const makeTest = <TResult>(\n  /**\n   * callback that calls the function to test with a certain input\n   */\n  testFunction: (() => Promise<TResult>) | (() => TResult),\n  /** If not given, assumes it passes if it returns the type interface it says it returns (and it doesn't crash) */\n  isValid?: (result: TResult) => boolean\n) => {\n  // NB: don't execute the test immideately, so we return a callback that actually tests\n  return async () => {\n    // try because funning the test may crash the app if the function doesn't work properly\n    try {\n      // TODO: what's the difference between TResult and Awaited<TResult>?\n      const result: TResult = await testFunction();\n\n      /**\n       * TODO:\n       */\n      const shouldBeInterface = {};\n\n      const correctInterface = isResultOfInterface(result, shouldBeInterface);\n      const isResultValid = isValid\n        ? correctInterface && isValid(result)\n        : correctInterface;\n\n      if (!isResultValid) {\n        console.dir(\n          {\n            response: `❌ TEST FAILED`,\n            test: testFunction.toString(),\n            result,\n          },\n          { depth: 999 }\n        );\n      } //\n\n      return isResultValid;\n    } catch (error) {\n      // TODO: check if toString here returns the right thing (a string representation of the function to test). otherwise, find a different solution.\n      console.log(`❌ TEST FAILED: ${testFunction.toString()}`, error);\n      return false;\n    }\n  };\n};",
    "parameters": {},
    "types": [],
    "firstLine": 17,
    "lastLine": 19,
    "id": "xdsvddujftnizpjpbxzxjcer"
  }
]