{
  "createdAt": 1666259759380,
  "updatedAt": 1666259759380,
  "deletedAt": 0,
  "createdFirstAt": 1666259759380,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "hasSubExtension",
  "slug": "has-sub-extension",
  "operationRelativeTypescriptFilePath": "src/hasSubExtension.ts",
  "type": {
    "rawType": "(srcRelativeFileId: string, subExtensions: string | string[], includeRootName?: boolean | undefined) => boolean",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "(\n  srcRelativeFileId: string,\n  subExtensions: string | string[],\n  /**\n   * if true, also returns true if the extension is the complete name of the file\n   */\n  includeRootName?: boolean\n): boolean => {\n  const subExtensionsArray = makeArray(subExtensions);\n  const parts = srcRelativeFileId.split(\".\");\n  const isSinglePart = parts.length === 1;\n  const subExtension = parts.pop()!;\n  const includesSubExtension = subExtensionsArray.includes(subExtension);\n  const isCounting = includeRootName ? true : !isSinglePart;\n  const has = isCounting && includesSubExtension;\n  return has;\n}",
  "description": "Returns true if a fileid includes one of the specified subextensions.",
  "id": "vpdxqtbtmobcsggwkmwecuqp"
}