{
  "createdAt": 1668150464363,
  "updatedAt": 1668150464363,
  "deletedAt": 0,
  "createdFirstAt": 1668150464363,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "findDependants",
  "slug": "find-dependants",
  "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
  "type": {
    "rawType": "(config: { operationName: string; importName?: string | undefined; returnOperationName?: boolean | undefined; imports?: import(\"/Users/king/King/operations/tools/types/code-types/build/TsImport\").TsImport[] | undefined; onlyExternal?: boolean | undefined; }) => unknown",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "async (config: {\n  operationName: string;\n  /**\n   * Optionally specify a specific import from an operation that you want to find the dependants for\n   */\n  importName?: string;\n  returnOperationName?: boolean;\n  /**\n   * For efficiency reasons you can provide precalculated imports\n   */\n  imports?: TsImport[];\n  /**\n   * If true, only external imports are found\n   */\n  onlyExternal?: boolean;\n}) => {\n  const {\n    operationName,\n    importName,\n    returnOperationName,\n    imports,\n    onlyExternal,\n  } = config;\n\n  const resultValueKey: keyof TsImport = returnOperationName\n    ? \"operationName\"\n    : \"projectRelativePath\";\n  const theImports = imports || (await db.get(\"TsImport\"));\n  const monorepoModules = theImports\n    .filter((x) => x.module === operationName)\n    .filter((x) => (importName ? x.name === importName : true))\n    .filter((x) =>\n      onlyExternal ? x.isAbsolute && x.operationName !== operationName : true\n    )\n    .map((x) =>\n      x.isModuleFromMonorepo && x.isModuleResolved ? x[resultValueKey] : null\n    )\n    .filter(notEmpty)\n    .filter(onlyUnique);\n\n  return monorepoModules;\n}",
  "description": "finds all dependants of an operation or a specific import from that operation\n\nnormally returns the files where the operation or function is used, unless you specify to return the operationNames only.",
  "id": "yixawmxjpwnnpifpfleredhb"
}