{
  "createdAt": 1666260923197,
  "updatedAt": 1666260923197,
  "deletedAt": 0,
  "createdFirstAt": 1666260923197,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "objectStringToJson",
  "slug": "object-string-to-json",
  "operationRelativeTypescriptFilePath": "src/objectStringToJson.ts",
  "type": {
    "rawType": "(string: string) => { [key: string]: import(\"/Users/king/King/operations/tools/interfaces/cli/string-to-json/src/types\").JSONValue; }",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "(\n  string: string\n): { [key: string]: JSONValue } => {\n  const chunks = string.split(\",\").map((x) => x.trim());\n  const keyValues = chunks.map((chunk) => {\n    const [key, value] = chunk.split(\":\").map((x) => x.trim());\n    return { [key]: stringToJson(value) };\n  });\n\n  const mergedObject = mergeObjectsArray(keyValues);\n\n  return mergedObject;\n}",
  "description": "takes an object string and parses it to JSON\n\nInstead of requiring objects to be in JSON format, they can be in the following format:\n\nkey1: value, key2: another value, key3: 9, key4: false, key5: null, key6: { subkey: true, subkey2: 0 }\n\nNB: you can have objects in parameters of objects by surrounding the same syntax with `{` and `}`",
  "id": "garwvtjueqhmgkbjexgssyis"
}