{
  "createdAt": 1666260925700,
  "updatedAt": 1666260925700,
  "deletedAt": 0,
  "createdFirstAt": 1666260925700,
  "publicAuthorization": [
    "read-docs",
    "search"
  ],
  "isApiExposed": false,
  "isPostApi": false,
  "isGetApi": false,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/stringToJson.ts",
  "commentsInside": [],
  "rawText": " <\n  TForceType extends \"string\" | \"number\" | \"boolean\"\n>(\n  value: string,\n  forceType?: TForceType\n): TForceType extends \"string\"\n  ? string | null | undefined\n  : TForceType extends \"number\"\n  ? number | null | undefined\n  : TForceType extends \"boolean\"\n  ? boolean | null | undefined\n  : string | number | boolean | null | undefined => {\n  if (value === \"null\" && !forceType) {\n    // @ts-ignore\n    return null;\n  } else if (value === \"undefined\" && !forceType) {\n    // @ts-ignore\n    return undefined;\n  } else if (value === \"true\" && (!forceType || forceType === \"boolean\")) {\n    // @ts-ignore\n    return true;\n  } else if (value === \"false\" && (!forceType || forceType === \"boolean\")) {\n    // @ts-ignore\n    return false;\n  } else if (!isNaN(Number(value)) && (!forceType || forceType === \"number\")) {\n    // NB: do this after true and false, because they also cast to numbers\n    // @ts-ignore\n    return Number(value);\n  } else {\n    // all that's left is a string\n    // @ts-ignore\n    return value;\n  }\n}",
  "name": "parsePrimitiveJson",
  "slug": "parse-primitive-json",
  "parameters": [
    {
      "name": "value",
      "schema": {
        "type": "string"
      },
      "simplifiedSchema": {
        "type": "string"
      },
      "required": true
    }
  ],
  "description": "parses a string to a string, number, boolean, null or undefined.\n\noptionally you can chooose to force a type...\n\nTODO: figure out how I can do this without ts-ignores",
  "returnType": {
    "rawType": "string | number | boolean | null | undefined",
    "typeDefinition": {
      "optional": true,
      "enum": [
        "ul",
        "trin",
        "umbe",
        "als",
        "ru"
      ],
      "x-enumNames": [
        "ul",
        "trin",
        "umbe",
        "als",
        "ru"
      ],
      "type": "string"
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "enum": [
        "ul",
        "trin",
        "umbe",
        "als",
        "ru"
      ],
      "type": "string"
    }
  },
  "maxIndentationDepth": 2,
  "size": {
    "characters": 1185,
    "lines": 38,
    "bytes": 1185,
    "bytesPerCharacter": 1,
    "charactersPerLine": 31,
    "linesPerFile": 38,
    "numberOfFiles": 1
  },
  "id": "uiulselzthjqpvqrbfdszxkh"
}