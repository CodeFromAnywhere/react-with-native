[{"id":"ffDqvWNoauYLpcwp","commentsInside":[],"rawText":" (\n  extension: string\n): extension is SearchableExtension => {\n  return allowedSearchContentExtensions\n    .map((x) => x as string)\n    .includes(extension);\n}","name":"isSearchContentExtension","slug":"is-search-content-extension","parameters":[],"description":"type checker for a string to be an extension that can be searched for","returnType":{"rawType":"{}","typeDefinition":{"optional":false,"type":"boolean"},"typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":true,"isEnumLiteral":false,"simplifiedSchema":{"type":"boolean"}},"maxIndentationDepth":2,"relativePathFromProjectRoot":"/tools/control-fs/k-explore/src/explore.ts","srcFileId":"/explore","operationFolderName":"k-explore","relativeFilePathFromSrc":"/explore.ts","relativeOperationBasePathFromProjectRoot":"/tools/control-fs/k-explore","operationName":"k-explore","size":{"characters":229,"lines":7,"bytes":229,"bytesPerCharacter":1,"charactersPerfLine":32.714285714285715,"linesPerFile":7,"numberOfFiles":1}},{"id":"SAkECVffIpWHSfLw","commentsInside":[],"rawText":" (filePath: string) => {\n  const extension = path.parse(filePath).ext.substring(1);\n  if (!isSearchContentExtension(extension)) return null;\n  const index = fileTypes.findIndex((fileType) =>\n    extensions[fileType].includes(extension)\n  );\n  const fileType = fileTypes[index];\n  return fileType;\n}","name":"determineFileType","slug":"determine-file-type","parameters":[],"description":"returns the file type or null if it's unknown","returnType":{"rawType":"any","typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":false,"isEnumLiteral":false},"maxIndentationDepth":2,"relativePathFromProjectRoot":"/tools/control-fs/k-explore/src/explore.ts","srcFileId":"/explore","operationFolderName":"k-explore","relativeFilePathFromSrc":"/explore.ts","relativeOperationBasePathFromProjectRoot":"/tools/control-fs/k-explore","operationName":"k-explore","size":{"characters":343,"lines":9,"bytes":343,"bytesPerCharacter":1,"charactersPerfLine":38.111111111111114,"linesPerFile":9,"numberOfFiles":1}},{"id":"PKIemPZgFusaZnja","commentsInside":[],"rawText":" (filePath: string) => {\n  console.log(\"outline is currently just filename\");\n  return filePath.split(\"/\").pop();\n}","name":"getOutline","slug":"get-outline","parameters":[],"description":"","returnType":{"rawType":"any","typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":false,"isEnumLiteral":false},"maxIndentationDepth":1,"relativePathFromProjectRoot":"/tools/control-fs/k-explore/src/explore.ts","srcFileId":"/explore","operationFolderName":"k-explore","relativeFilePathFromSrc":"/explore.ts","relativeOperationBasePathFromProjectRoot":"/tools/control-fs/k-explore","operationName":"k-explore","size":{"characters":115,"lines":4,"bytes":115,"bytesPerCharacter":1,"charactersPerfLine":28.75,"linesPerFile":4,"numberOfFiles":1}},{"id":"ObQfZXavSNXtkZFI","commentsInside":[],"rawText":" ({\n  exact,\n  searchContender,\n  searches,\n}: {\n  exact: boolean | undefined;\n  searches: string[];\n  searchContender: string;\n}) => {\n  return searches.length === 0\n    ? true\n    : exact\n    ? searches.includes(searchContender)\n    : searches.find((s) => searchContender.includes(s));\n}","name":"isMatch","slug":"is-match","parameters":[],"description":"","returnType":{"rawType":"any","typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":false,"isEnumLiteral":false},"maxIndentationDepth":2,"relativePathFromProjectRoot":"/tools/control-fs/k-explore/src/explore.ts","srcFileId":"/explore","operationFolderName":"k-explore","relativeFilePathFromSrc":"/explore.ts","relativeOperationBasePathFromProjectRoot":"/tools/control-fs/k-explore","operationName":"k-explore","size":{"characters":289,"lines":15,"bytes":289,"bytesPerCharacter":1,"charactersPerfLine":19.266666666666666,"linesPerFile":15,"numberOfFiles":1}},{"id":"YyCsdBmeWjikFYKA","commentsInside":[],"rawText":" async (filePath: string) => {\n  // console.log(\"Get contents\", filePath);\n  const extension = getExtension(filePath);\n  if (!isSearchContentExtension(extension)) {\n    return;\n  }\n\n  if (extension === \"json\") {\n    return readJsonFile<any>(filePath);\n  } else if (markdownExtensions.includes(extension)) {\n    const contents = await fs.readFile(filePath, \"utf8\");\n    const markdownParse = mdToJsonParse(contents);\n    return markdownParse;\n  } else {\n    const fileString = fs.readFile(filePath, \"utf8\");\n    return fileString;\n  }\n}","name":"getContents","slug":"get-contents","parameters":[],"description":"gets needed contents of file path, based on the extension\n\nreturns a markdownparse if it's markdown, a json parse for json, or a file content string for anything else","returnType":{"rawType":"unknown","typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":false,"isEnumLiteral":false},"maxIndentationDepth":2,"relativePathFromProjectRoot":"/tools/control-fs/k-explore/src/explore.ts","srcFileId":"/explore","operationFolderName":"k-explore","relativeFilePathFromSrc":"/explore.ts","relativeOperationBasePathFromProjectRoot":"/tools/control-fs/k-explore","operationName":"k-explore","size":{"characters":701,"lines":20,"bytes":701,"bytesPerCharacter":1,"charactersPerfLine":35.05,"linesPerFile":20,"numberOfFiles":1}},{"id":"jKkMiOCfBQmQPKOf","commentsInside":[],"rawText":" async ({\n  basePath,\n  searchLevel = \"fileName\",\n  debug,\n  ...other\n}: SearchConfig): Promise<TextJson[]> => {\n  /** accessability depends on whether we need to be able to read the file, or just see it */\n  const canAccess = async (p: string) =>\n    await (searchLevel === \"outline\" || searchLevel === \"full\"\n      ? canRead\n      : canSee)(p);\n\n  /** basepaths becomes an array of only the basepaths that we can access */\n  const accessibleBasePaths = makeArray(basePath || getProjectRoot())\n    .filter(fs.existsSync)\n    .filter(canAccess);\n\n  if (debug) console.log(`finding files in ${accessibleBasePaths.join(\",\")}`);\n\n  const textJsonPromises = accessibleBasePaths.map(async (p) =>\n    findFilesRecursively({ basePath: p, searchLevel, debug, ...other })\n  );\n\n  const textJsons = (await Promise.all(textJsonPromises)).flat();\n\n  return textJsons;\n}","name":"explore","slug":"explore","parameters":[],"description":"this is the safe and friendly version of findFilesRecursively: it","returnType":{"rawType":"Promise<import(\"/Users/king/King/tools/types/code-types/build/TextJson\").TextJson[]>","typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":false,"isEnumLiteral":false},"maxIndentationDepth":3,"relativePathFromProjectRoot":"/tools/control-fs/k-explore/src/explore.ts","srcFileId":"/explore","operationFolderName":"k-explore","relativeFilePathFromSrc":"/explore.ts","relativeOperationBasePathFromProjectRoot":"/tools/control-fs/k-explore","operationName":"k-explore","size":{"characters":922,"lines":27,"bytes":922,"bytesPerCharacter":1,"charactersPerfLine":34.148148148148145,"linesPerFile":27,"numberOfFiles":1}},{"id":"sYIyQYKaUSOoAWkX","commentsInside":[],"rawText":" async (\n  config: Omit<SearchConfig, \"basePath\"> & {\n    // this is the only difference compared to the other searchconfig\n    basePath: string;\n  }\n): Promise<TextJson[]> => {\n  const {\n    basePath,\n    ignore,\n    searchLevel,\n    extension,\n    subExtension,\n    search,\n    //booleans:\n    includeFoldersWithResults,\n    doNotExploreMatch,\n    doNotExploreChildFolders,\n    debug,\n    exact,\n    includeStats,\n    includeMetaData,\n    cancelRecursionOn,\n  } = config;\n  // NB: we know we only use this function like this\n  const subExtensions = makeArray(subExtension);\n  const extensions = makeArray(extension);\n  const searches = makeArray(search);\n  const ignores = makeArray(ignore);\n\n  const contents = await fs.readdir(basePath, {\n    withFileTypes: true,\n    encoding: \"utf8\",\n  });\n\n  const pathArray = contents.map((x) => path.join(basePath, x.name));\n\n  // if contents should not be explored, return an empty array\n  if (cancelRecursionOn?.(pathArray)) {\n    return includeFoldersWithResults\n      ? [{ path: basePath, isCancelRecursionResult: true }]\n      : [];\n  }\n\n  if (debug) console.log(`contents contains ${contents.length} files/folders`);\n\n  const textJsonPromises: Promise<TextJson[] | null>[] = contents.map(\n    async (dirent) => {\n      // don't check files if search level is folder\n      if (searchLevel === \"folder\" && dirent.isFile()) {\n        return null;\n      }\n\n      //if dir/file name should be ignored, skip it\n      if (ignores.includes(dirent.name)) {\n        if (debug) console.log(\"Ignoring\", dirent.name);\n        return null;\n      }\n\n      // if we want specific sub-extensions and this file isn't one of them, return\n      if (\n        dirent.isFile() &&\n        subExtensions &&\n        subExtensions.length > 0 &&\n        !subExtensions.find((ext) => getSubExtension(dirent.name) === ext)\n      ) {\n        if (debug)\n          console.log(\n            `ignoring ${dirent.name} because of subextension mismatch`\n          );\n        return null;\n      }\n\n      // if we want specific extensions and this file isn't one of them, return\n      if (\n        dirent.isFile() &&\n        extensions &&\n        extensions.length > 0 &&\n        !extensions.find((ext) => getExtension(dirent.name) === ext)\n      ) {\n        if (debug)\n          console.log(`ignoring ${dirent.name} because of extension mismatch`);\n        return null;\n      }\n\n      const filePath: string = path.join(basePath, dirent.name);\n\n      // if it's a file, we don't go into recursion.\n      if (dirent.isFile()) {\n        const ext = getExtension(dirent.name) || \"\";\n\n        //getting extension\n\n        const isJson = jsonExtensions.includes(ext);\n        const isTypescript = typescriptExtensions.includes(ext);\n        const isMarkdown = markdownExtensions.includes(ext);\n\n        //NB: be careful when ever changing this logic!\n        // It should never get contents when it doesn't need to,\n        // because this is a very heavy operation.\n\n        const searchContender =\n          searchLevel === \"folder\"\n            ? dirent.name\n            : searchLevel === \"fileName\"\n            ? dirent.name\n            : searchLevel === \"filePath\" || !isSearchContentExtension(ext)\n            ? filePath //withoutExtension? dirent.name or filePath??? we also want to match folder names before it, right?\n            : //TODO: is getOutLine() evaluated if it's not an outline? it also seems the default, which I don't like. Test this, it's an important aspect of exploring efficiently.\n            searchLevel === \"outline\"\n            ? getOutline(filePath)!\n            : searchLevel === \"full\"\n            ? await getContents(filePath)\n            : \"SHOULD_NEVER_HAPPEN\";\n\n        if (debug) console.log(`searchContender: ${searchContender}`);\n        const match = isMatch({ exact, searchContender, searches });\n\n        const json: any | undefined =\n          isJson && searchLevel === \"full\" ? getContents(filePath) : undefined;\n\n        const markdownJson: MarkdownParse | undefined =\n          isMarkdown && searchLevel === \"full\"\n            ? // TODO: get markdown parse here\n              await getContents(filePath)\n            : undefined;\n\n        // NB: TODO: we don't do typescript json yet\n        // TODO: I think double special comments (like the above) on a single line isn't indexed yet, is it?\n        const typescriptJson: undefined = isTypescript ? undefined : undefined;\n\n        const stats = includeStats ? await fs.stat(filePath) : undefined;\n\n        if (debug) console.log(`${dirent.name}? match ${match}`);\n        //match found...\n        const matchOrNot: TextJson[] | null = match\n          ? [\n              {\n                path: filePath,\n                json,\n                markdownJson,\n                typescriptJson,\n                stats,\n              },\n            ]\n          : null;\n        return matchOrNot;\n      }\n\n      // ^ these were all the base cases ^. Now the recursion.\n\n      if (dirent.isDirectory() && !doNotExploreChildFolders) {\n        let results = [];\n        let shouldRecurse = true;\n        if (searchLevel === \"folder\") {\n          const searchContender = dirent.name;\n          const match = isMatch({ searchContender, exact, searches });\n\n          if (match) {\n            results.push({\n              path: filePath,\n            });\n            shouldRecurse = !doNotExploreMatch;\n          }\n        }\n\n        /**\n       don't dive into folder if:\n      - we're looking for folders \n      - the folder has matched \n      - we don't explore matches\n      */\n        if (shouldRecurse) {\n          const thisFolderPath = path.join(basePath, dirent.name);\n          const thisFolderResults = await findFilesRecursively({\n            basePath: thisFolderPath,\n            extension,\n            search,\n            searchLevel,\n            subExtension,\n            ignore,\n            debug,\n            exact,\n            // NB: I think we just need to fill in everything in the recursion, right?\n            cancelRecursionOn,\n            includeFoldersWithResults,\n            includeMetaData,\n            includeStats,\n            doNotExploreChildFolders,\n            doNotExploreMatch,\n          });\n\n          if (thisFolderResults.length > 0) {\n            results = results.concat(thisFolderResults);\n\n            if (includeFoldersWithResults) {\n              // NB: we can't show any stats because this fs.stats function only works on files. We could sum all stats recursively\n\n              // TODO: should use calcualtePathMetaData here, but we first need to do some more stuff before this can be done... calcualtePathMetaData probably needs to receive a full path instead of a operationFolderPath + relativePath because it can be used outside of operations as well...\n              const metaData = undefined;\n\n              const folderResult: TextJson = {\n                path: thisFolderPath,\n                metaData,\n              };\n\n              results.push(folderResult);\n            }\n          }\n        }\n\n        return results;\n      }\n\n      return null;\n    }\n  );\n\n  const allMatches = (await Promise.all(textJsonPromises))\n    .filter(notEmpty)\n    .flat();\n\n  return allMatches;\n}","name":"findFilesRecursively","slug":"find-files-recursively","parameters":[],"description":"Explores your files with many possibilities.\n\nNB: this function only searches one basePath, while explore can do multiple\n\nTODO: since this not only finds files but also explores them, naming should be exploreFilesRecursively, probably.\n\nTODO: TextJson[] is a bit weird name for the resulting type interface...","returnType":{"rawType":"Promise<import(\"/Users/king/King/tools/types/code-types/build/TextJson\").TextJson[]>","typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":false,"isEnumLiteral":false},"maxIndentationDepth":8,"relativePathFromProjectRoot":"/tools/control-fs/k-explore/src/explore.ts","srcFileId":"/explore","operationFolderName":"k-explore","relativeFilePathFromSrc":"/explore.ts","relativeOperationBasePathFromProjectRoot":"/tools/control-fs/k-explore","operationName":"k-explore","size":{"characters":7527,"lines":229,"bytes":7527,"bytesPerCharacter":1,"charactersPerfLine":32.86899563318777,"linesPerFile":229,"numberOfFiles":1}},{"id":"PORbnfMmoWKXndln","commentsInside":[],"rawText":" (config?: {\n  basePath: string | string[] | undefined;\n}) => {\n  return explore({\n    basePath: config?.basePath || getPathsWithOperations(),\n    search: \"package.json\",\n    exact: true,\n    extension: \"json\",\n    searchLevel: \"fileName\",\n    ignore: generatedFolders.concat([\"src\", \"assets\", \"data\"]),\n  });\n}","name":"findAllPackages","slug":"find-all-packages","parameters":[],"description":"Finds all package.json's everywhere. also in /tools, but this is to be expected.\n\nTODO: `stopRecursionAfterMatch` never worked, so I just removed it... the behavior now is that it also explores folders that are in a folder with a `package.json`, unless that foldername is ignored. For now it's fine, but this could easily create an ineficiency if there's a lot of data in an operation or something...\n\nTODO: We should be careful with ignoring all these folders... what if we use those folders outside of operations? This could have unexpected behavior. We either need to lint for these foldernames not to be used, or we need to make sure to only ignore it if we encounter a package.json","returnType":{"rawType":"Promise<import(\"/Users/king/King/tools/types/code-types/build/TextJson\").TextJson[]>","typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":false,"isEnumLiteral":false},"maxIndentationDepth":2,"relativePathFromProjectRoot":"/tools/control-fs/k-explore/src/explore.ts","srcFileId":"/explore","operationFolderName":"k-explore","relativeFilePathFromSrc":"/explore.ts","relativeOperationBasePathFromProjectRoot":"/tools/control-fs/k-explore","operationName":"k-explore","size":{"characters":997,"lines":16,"bytes":997,"bytesPerCharacter":1,"charactersPerfLine":62.3125,"linesPerFile":16,"numberOfFiles":1}},{"id":"toIwRqbTwhuTgveQ","commentsInside":[],"rawText":" (config: BaseConfig) => {\n  return explore({\n    basePath: config?.basePath,\n    search: \".git\",\n    exact: true,\n    searchLevel: \"folder\",\n    doNotExploreMatch: true,\n    // I guess we can assume there will never be git folders inside an operation on a deeper level, that would be strange... Therefore, these can be ignored\n    ignore: [\"node_modules\", \"build\", \".next\", \"src\", \"assets\", \"data\"],\n  });\n}","name":"findAllDotGitFolders","slug":"find-all-dot-git-folders","parameters":[],"description":"","returnType":{"rawType":"Promise<import(\"/Users/king/King/tools/types/code-types/build/TextJson\").TextJson[]>","typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":false,"isEnumLiteral":false},"maxIndentationDepth":2,"relativePathFromProjectRoot":"/tools/control-fs/k-explore/src/explore.ts","srcFileId":"/explore","operationFolderName":"k-explore","relativeFilePathFromSrc":"/explore.ts","relativeOperationBasePathFromProjectRoot":"/tools/control-fs/k-explore","operationName":"k-explore","size":{"characters":408,"lines":11,"bytes":408,"bytesPerCharacter":1,"charactersPerfLine":37.09090909090909,"linesPerFile":11,"numberOfFiles":1}},{"id":"WTxDAAMJBmTXCuqg","commentsInside":[],"rawText":" async (config: BaseConfig) => {\n  return (await findAllDotGitFolders(config))\n    .map((textJson) => textJson.path)\n    .map((p) => path.resolve(p, \"..\"));\n}","name":"exploreGitRepoFolders","slug":"explore-git-repo-folders","parameters":[],"description":"find all active git folders (folders having `.git`)","returnType":{"rawType":"unknown","typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":false,"isEnumLiteral":false},"maxIndentationDepth":2,"relativePathFromProjectRoot":"/tools/control-fs/k-explore/src/explore.ts","srcFileId":"/explore","operationFolderName":"k-explore","relativeFilePathFromSrc":"/explore.ts","relativeOperationBasePathFromProjectRoot":"/tools/control-fs/k-explore","operationName":"k-explore","size":{"characters":209,"lines":5,"bytes":209,"bytesPerCharacter":1,"charactersPerfLine":41.8,"linesPerFile":5,"numberOfFiles":1}},{"id":"iGnAZcOZBUZRDnyY","commentsInside":[],"rawText":" async (config: BaseConfig) => {\n  const folders = (await findAllPackages({ basePath: config?.basePath }))\n    .map((textJson) => textJson.path)\n    .map((p) => getFolder(p))\n    .filter((p) => fs.existsSync(path.join(p, \"tsconfig.json\")));\n\n  return folders;\n}","name":"exploreOperationFolders","slug":"explore-operation-folders","parameters":[],"description":"find all active operations (folders having `package.json` but also `tsconfig.json`)","returnType":{"rawType":"unknown","typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":false,"isEnumLiteral":false},"maxIndentationDepth":2,"relativePathFromProjectRoot":"/tools/control-fs/k-explore/src/explore.ts","srcFileId":"/explore","operationFolderName":"k-explore","relativeFilePathFromSrc":"/explore.ts","relativeOperationBasePathFromProjectRoot":"/tools/control-fs/k-explore","operationName":"k-explore","size":{"characters":344,"lines":8,"bytes":344,"bytesPerCharacter":1,"charactersPerfLine":43,"linesPerFile":8,"numberOfFiles":1}},{"id":"LUoyccZnPPhMwCmJ","commentsInside":[],"rawText":" (\n  preset: \"packages\" | \"markdown\" | \"todo\" | \"docs\" | \"src\" | \"git\",\n  config?: BaseConfig\n) => {\n  const basePath = config?.basePath;\n\n  const searchConfigs: SearchConfig[] =\n    preset === \"packages\"\n      ? [\n          {\n            basePath,\n            search: \"package.json\",\n            exact: true,\n            extension: \"json\",\n            ignore: generatedFolders,\n          },\n        ]\n      : preset === \"markdown\"\n      ? [\n          {\n            basePath,\n            extension: [\"md\", \"mdx\"],\n            ignore: generatedFolders,\n          },\n        ]\n      : preset === \"todo\"\n      ? // finds all `*.todo.md`,` todo/**/*.md` and returns the path + content\n\n        [\n          {\n            basePath,\n            extension: [\"md\", \"mdx\"],\n            search: \"/todo/\",\n            searchLevel: \"filePath\",\n            ignore: generatedFolders,\n          },\n          {\n            basePath,\n            extension: [\"md\", \"mdx\"],\n            search: \"todo.md\",\n            exact: true,\n            searchLevel: \"fileName\",\n            ignore: generatedFolders,\n          },\n          {\n            basePath,\n            extension: [\"md\", \"mdx\"],\n            subExtension: \"todo\",\n            exact: false,\n            searchLevel: \"fileName\",\n            ignore: generatedFolders,\n          },\n        ]\n      : preset === \"docs\"\n      ? [\n          {\n            basePath,\n            extension: [\"md\", \"mdx\"],\n            search: \"/docs/\",\n            searchLevel: \"filePath\",\n            ignore: generatedFolders,\n          },\n          {\n            basePath,\n            extension: [\"md\", \"mdx\"],\n            search: \"readme.md\",\n            exact: true,\n            searchLevel: \"fileName\",\n            ignore: generatedFolders,\n          },\n          {\n            basePath,\n            extension: [\"md\", \"mdx\"],\n            subExtension: [\"readme\"],\n            exact: false,\n            searchLevel: \"fileName\",\n            ignore: generatedFolders,\n          },\n        ]\n      : preset === \"src\"\n      ? [\n          {\n            basePath,\n            searchLevel: \"folder\",\n            exact: true,\n            search: \"src\",\n            doNotExploreMatch: true,\n            ignore: generatedFolders,\n          },\n        ]\n      : [];\n\n  const textJsons = exploreMultiple(searchConfigs);\n  return textJsons;\n}","name":"explorePreset","slug":"explore-preset","parameters":[],"description":"","returnType":{"rawType":"unknown","typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":false,"isEnumLiteral":false},"maxIndentationDepth":6,"relativePathFromProjectRoot":"/tools/control-fs/k-explore/src/explore.ts","srcFileId":"/explore","operationFolderName":"k-explore","relativeFilePathFromSrc":"/explore.ts","relativeOperationBasePathFromProjectRoot":"/tools/control-fs/k-explore","operationName":"k-explore","size":{"characters":2346,"lines":95,"bytes":2346,"bytesPerCharacter":1,"charactersPerfLine":24.694736842105264,"linesPerFile":95,"numberOfFiles":1}},{"id":"XoDfobuLKGWBmCJA","commentsInside":[],"rawText":" async (searchConfigs: SearchConfig[]) => {\n  const textJsonPromises = searchConfigs.map(async (config) => {\n    return explore(config);\n  });\n\n  return (await Promise.all(textJsonPromises)).flat();\n}","name":"exploreMultiple","slug":"explore-multiple","parameters":[],"description":"DEPRECATED: not sure if we still need it, look up usecases, can prob be replaced now","returnType":{"rawType":"unknown","typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":false,"isEnumLiteral":false},"maxIndentationDepth":2,"relativePathFromProjectRoot":"/tools/control-fs/k-explore/src/explore.ts","srcFileId":"/explore","operationFolderName":"k-explore","relativeFilePathFromSrc":"/explore.ts","relativeOperationBasePathFromProjectRoot":"/tools/control-fs/k-explore","operationName":"k-explore","size":{"characters":284,"lines":7,"bytes":284,"bytesPerCharacter":1,"charactersPerfLine":40.57142857142857,"linesPerFile":7,"numberOfFiles":1}}]