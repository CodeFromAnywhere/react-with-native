[{"id":"KxJDACqbYdyDCazW","name":"FrontMatter","slug":"front-matter","relativePathFromProjectRoot":"/tools/types/common-types/src/keyValueMarkdown.ts","srcFileId":"/keyValueMarkdown","operationFolderName":"common-types","relativeFilePathFromSrc":"/keyValueMarkdown.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/common-types","operationName":"common-types","rawText":"/**\n * TODO:\n * either make a special category crud for the category model would be nice maybe (especially a backend that makes sure all references stay updated would be epic)\n\n */\nexport type FrontMatter = {\n  [frontMatterKey: string]: string | number | null | boolean | undefined;\n};","extensions":[],"description":"TODO:\neither make a special category crud for the category model would be nice maybe (especially a backend that makes sure all references stay updated would be epic)","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","additionalProperties":{"anyOf":[{"type":"string"},{"type":"number"},{"type":"null"},{"type":"boolean"},{"not":{}}]},"description":"TODO: either make a special category crud for the category model would be nice maybe (especially a backend that makes sure all references stay updated would be epic)"},"simplifiedSchema":{"description":"TODO: either make a special category crud for the category model would be nice maybe (especially a backend that makes sure all references stay updated would be epic)","properties":[],"type":"object"},"typeCoverage":0,"rawType":"FrontMatter","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"BjtncJmvmeOlkGJD","name":"KeyValueMarkdownModelType","slug":"key-value-markdown-model-type","relativePathFromProjectRoot":"/tools/types/common-types/src/keyValueMarkdown.ts","srcFileId":"/keyValueMarkdown","operationFolderName":"common-types","relativeFilePathFromSrc":"/keyValueMarkdown.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/common-types","operationName":"common-types","rawText":"\n\n/**\n *\n * handy model type for storing stuff in a KeyValue Markdown file.\n * empty lines are omitted\n *\n * all you need to specify in the kvmd is the key and the value, separated by \":\"\n */\nexport type KeyValueMarkdownModelType = {\n  /**\n   * Calculated:\n   *\n   * by taking the relative file path + a stringified version of the index.\n   *\n   * used for compatibility with some general purpose functions\n   */\n  id: string;\n  /**\n   * line where the kv was found (at any given moment this is an unqiue identifier, but it may change without notice, so it's not a good idea to store stuff in kvmd if it has references to the id)\n   */\n  index: number;\n  /**\n   * relative index from the category header, starting count with 1. if there is no header, also counts starting with 1\n   */\n  relativeIndex: number;\n\n  /**\n   * key\n   *\n   * should be english because it's kind of part of the codebase!\n   */\n  name: string;\n  /**\n   * calculated: slug for this key (kebab case form of the name)\n   */\n  slug: string;\n\n  /**\n   * value behind the semicolom (:). If not given, will be undefined.\n   *\n   * If possible, will be parsed to a number, boolean, null or undefined... otherwise it's a string\n   *\n   * can be any language that we can detect\n   */\n  value: string | number | boolean | null | undefined;\n\n  /** comment in html syntax. if not given, will be null */\n  comment: string | null;\n  /** preceding categories found in markdown (headers) */\n  categoryStack: CategoryStack;\n};","extensions":[],"description":"handy model type for storing stuff in a KeyValue Markdown file.\nempty lines are omitted\n\nall you need to specify in the kvmd is the key and the value, separated by \":\"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"id":{"type":"string","description":"Calculated:\n\nby taking the relative file path + a stringified version of the index.\n\nused for compatibility with some general purpose functions"},"index":{"type":"number","description":"line where the kv was found (at any given moment this is an unqiue identifier, but it may change without notice, so it's not a good idea to store stuff in kvmd if it has references to the id)"},"relativeIndex":{"type":"number","description":"relative index from the category header, starting count with 1. if there is no header, also counts starting with 1"},"name":{"type":"string","description":"key\n\nshould be english because it's kind of part of the codebase!"},"slug":{"type":"string","description":"calculated: slug for this key (kebab case form of the name)"},"value":{"type":["string","number","boolean","null"],"description":"value behind the semicolom (:). If not given, will be undefined.\n\nIf possible, will be parsed to a number, boolean, null or undefined... otherwise it's a string\n\ncan be any language that we can detect"},"comment":{"type":["string","null"],"description":"comment in html syntax. if not given, will be null"},"categoryStack":{"$ref":"#/definitions/CategoryStack","description":"preceding categories found in markdown (headers)"}},"required":["id","index","relativeIndex","name","slug","comment","categoryStack"],"additionalProperties":false,"description":"handy model type for storing stuff in a KeyValue Markdown file. empty lines are omitted\n\nall you need to specify in the kvmd is the key and the value, separated by \":\""},"simplifiedSchema":{"description":"handy model type for storing stuff in a KeyValue Markdown file. empty lines are omitted\n\nall you need to specify in the kvmd is the key and the value, separated by \":\"","properties":[{"name":"id","required":true,"schema":{"description":"Calculated:\n\nby taking the relative file path + a stringified version of the index.\n\nused for compatibility with some general purpose functions","type":"string"}},{"name":"index","required":true,"schema":{"description":"line where the kv was found (at any given moment this is an unqiue identifier, but it may change without notice, so it's not a good idea to store stuff in kvmd if it has references to the id)","type":"number"}},{"name":"relativeIndex","required":true,"schema":{"description":"relative index from the category header, starting count with 1. if there is no header, also counts starting with 1","type":"number"}},{"name":"name","required":true,"schema":{"description":"key\n\nshould be english because it's kind of part of the codebase!","type":"string"}},{"name":"slug","required":true,"schema":{"description":"calculated: slug for this key (kebab case form of the name)","type":"string"}},{"name":"value","required":false,"schema":{"description":"value behind the semicolom (:). If not given, will be undefined.\n\nIf possible, will be parsed to a number, boolean, null or undefined... otherwise it's a string\n\ncan be any language that we can detect","type":"string"}},{"name":"comment","required":true,"schema":{"description":"comment in html syntax. if not given, will be null","type":"string"}},{"name":"categoryStack","required":true,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}}],"type":"object"},"typeCoverage":0,"rawType":"KeyValueMarkdownModelType","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"drhhHcZVCGpkfzDL","name":"CategoryStack","slug":"category-stack","relativePathFromProjectRoot":"/tools/types/common-types/src/keyValueMarkdown.ts","srcFileId":"/keyValueMarkdown","operationFolderName":"common-types","relativeFilePathFromSrc":"/keyValueMarkdown.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/common-types","operationName":"common-types","rawText":"\n\n/**\n *\n */\nexport type CategoryStack = string[];","extensions":[],"description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"array","items":{"type":"string"}},"simplifiedSchema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"},"typeCoverage":0,"rawType":"CategoryStack","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"QaQLpYNdDuhycLMf","name":"KeyValueMarkdownParse","slug":"key-value-markdown-parse","relativePathFromProjectRoot":"/tools/types/common-types/src/keyValueMarkdown.ts","srcFileId":"/keyValueMarkdown","operationFolderName":"common-types","relativeFilePathFromSrc":"/keyValueMarkdown.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/common-types","operationName":"common-types","rawText":"\n\nexport type KeyValueMarkdownParse = {\n  parameters: FrontMatter;\n  data: KeyValueMarkdownModelType[];\n};","extensions":[],"description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"parameters":{"$ref":"#/definitions/FrontMatter"},"data":{"type":"array","items":{"$ref":"#/definitions/KeyValueMarkdownModelType"}}},"required":["parameters","data"],"additionalProperties":false},"simplifiedSchema":{"properties":[{"name":"parameters","required":true,"schema":{"description":"TODO: either make a special category crud for the category model would be nice maybe (especially a backend that makes sure all references stay updated would be epic)","properties":[],"type":"object"}},{"name":"data","required":true,"schema":{"items":[{"schema":{"description":"handy model type for storing stuff in a KeyValue Markdown file. empty lines are omitted\n\nall you need to specify in the kvmd is the key and the value, separated by \":\"","properties":[{"name":"id","required":true,"schema":{"description":"Calculated:\n\nby taking the relative file path + a stringified version of the index.\n\nused for compatibility with some general purpose functions","type":"string"}},{"name":"index","required":true,"schema":{"description":"line where the kv was found (at any given moment this is an unqiue identifier, but it may change without notice, so it's not a good idea to store stuff in kvmd if it has references to the id)","type":"number"}},{"name":"relativeIndex","required":true,"schema":{"description":"relative index from the category header, starting count with 1. if there is no header, also counts starting with 1","type":"number"}},{"name":"name","required":true,"schema":{"description":"key\n\nshould be english because it's kind of part of the codebase!","type":"string"}},{"name":"slug","required":true,"schema":{"description":"calculated: slug for this key (kebab case form of the name)","type":"string"}},{"name":"value","required":false,"schema":{"description":"value behind the semicolom (:). If not given, will be undefined.\n\nIf possible, will be parsed to a number, boolean, null or undefined... otherwise it's a string\n\ncan be any language that we can detect","type":"string"}},{"name":"comment","required":true,"schema":{"description":"comment in html syntax. if not given, will be null","type":"string"}},{"name":"categoryStack","required":true,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}}],"type":"object"},"name":"KeyValueMarkdownModelType"}],"type":"array"}}],"type":"object"},"typeCoverage":0,"rawType":"KeyValueMarkdownParse","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"OgaERqbwGvwpxZsu","name":"CategoryModelType","slug":"category-model-type","relativePathFromProjectRoot":"/tools/types/common-types/src/keyValueMarkdown.ts","srcFileId":"/keyValueMarkdown","operationFolderName":"common-types","relativeFilePathFromSrc":"/keyValueMarkdown.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/common-types","operationName":"common-types","rawText":"\n\n/**\n * ---\n * isDbModel: false\n * ---\n *\n * Simple recursive data structure for hierarchical categories. Should be used to make any category model\n *\n * Make sure, when extending this, to provide a reference `xxxSlug` and its content `xxx` as optional parameters to its parent categories.\n *\n * E.g. for a `CountryCategory`, you should provide `countryCategorySlug` and `countryCategory`\n */\nexport interface CategoryModelType extends KeyValueMarkdownModelType {}","extensions":["KeyValueMarkdownModelType"],"description":"\nSimple recursive data structure for hierarchical categories. Should be used to make any category model\n\nMake sure, when extending this, to provide a reference `xxxSlug` and its content `xxx` as optional parameters to its parent categories.\n\nE.g. for a `CountryCategory`, you should provide `countryCategorySlug` and `countryCategory`","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","additionalProperties":false,"properties":{"id":{"type":"string","description":"Calculated:\n\nby taking the relative file path + a stringified version of the index.\n\nused for compatibility with some general purpose functions"},"index":{"type":"number","description":"line where the kv was found (at any given moment this is an unqiue identifier, but it may change without notice, so it's not a good idea to store stuff in kvmd if it has references to the id)"},"relativeIndex":{"type":"number","description":"relative index from the category header, starting count with 1. if there is no header, also counts starting with 1"},"name":{"type":"string","description":"key\n\nshould be english because it's kind of part of the codebase!"},"slug":{"type":"string","description":"calculated: slug for this key (kebab case form of the name)"},"value":{"type":["string","number","boolean","null"],"description":"value behind the semicolom (:). If not given, will be undefined.\n\nIf possible, will be parsed to a number, boolean, null or undefined... otherwise it's a string\n\ncan be any language that we can detect"},"comment":{"type":["string","null"],"description":"comment in html syntax. if not given, will be null"},"categoryStack":{"$ref":"#/definitions/CategoryStack","description":"preceding categories found in markdown (headers)"}},"required":["categoryStack","comment","id","index","name","relativeIndex","slug"],"description":"--- isDbModel: false\n---\n\nSimple recursive data structure for hierarchical categories. Should be used to make any category model\n\nMake sure, when extending this, to provide a reference `xxxSlug` and its content `xxx` as optional parameters to its parent categories.\n\nE.g. for a `CountryCategory`, you should provide `countryCategorySlug` and `countryCategory`"},"simplifiedSchema":{"description":"--- isDbModel: false\n---\n\nSimple recursive data structure for hierarchical categories. Should be used to make any category model\n\nMake sure, when extending this, to provide a reference `xxxSlug` and its content `xxx` as optional parameters to its parent categories.\n\nE.g. for a `CountryCategory`, you should provide `countryCategorySlug` and `countryCategory`","properties":[{"name":"id","required":true,"schema":{"description":"Calculated:\n\nby taking the relative file path + a stringified version of the index.\n\nused for compatibility with some general purpose functions","type":"string"}},{"name":"index","required":true,"schema":{"description":"line where the kv was found (at any given moment this is an unqiue identifier, but it may change without notice, so it's not a good idea to store stuff in kvmd if it has references to the id)","type":"number"}},{"name":"relativeIndex","required":true,"schema":{"description":"relative index from the category header, starting count with 1. if there is no header, also counts starting with 1","type":"number"}},{"name":"name","required":true,"schema":{"description":"key\n\nshould be english because it's kind of part of the codebase!","type":"string"}},{"name":"slug","required":true,"schema":{"description":"calculated: slug for this key (kebab case form of the name)","type":"string"}},{"name":"value","required":false,"schema":{"description":"value behind the semicolom (:). If not given, will be undefined.\n\nIf possible, will be parsed to a number, boolean, null or undefined... otherwise it's a string\n\ncan be any language that we can detect","type":"string"}},{"name":"comment","required":true,"schema":{"description":"comment in html syntax. if not given, will be null","type":"string"}},{"name":"categoryStack","required":true,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}}],"type":"object"},"typeCoverage":0,"rawType":"CategoryModelType","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}}]