[{"id":"iEWoxnCFccbRuEZD","name":"CommonTypesTypes","slug":"common-types-types","relativePathFromProjectRoot":"/tools/types/common-types/src/index.ts","srcFileId":"/index","operationFolderName":"common-types","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/common-types","operationName":"common-types","rawText":"\n\n\nexport type CommonTypesTypes = { Email: Email,Slug: Slug,Index: Index,Text: Text,Markdown: Markdown,Url: Url,PhoneNumber: PhoneNumber,Id: Id,FrontMatter: FrontMatter,KeyValueMarkdownModelType: KeyValueMarkdownModelType,CategoryStack: CategoryStack,KeyValueMarkdownParse: KeyValueMarkdownParse,CategoryModelType: CategoryModelType,Language: Language,RelationType: RelationType,DefaultModelType: DefaultModelType,CsvModelType: CsvModelType,SlugModelType: SlugModelType,MarkdownModelType: MarkdownModelType,Time: Time,UpdatedAt: UpdatedAt,CreatedAt: CreatedAt,DeletedAt: DeletedAt,CreatedFirstAt: CreatedFirstAt,TimeTypes: TimeTypes };","extensions":[],"description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"Email":{"$ref":"#/definitions/Email"},"Slug":{"$ref":"#/definitions/Slug"},"Index":{"$ref":"#/definitions/Index"},"Text":{"$ref":"#/definitions/Text"},"Markdown":{"$ref":"#/definitions/Markdown"},"Url":{"$ref":"#/definitions/Url"},"PhoneNumber":{"$ref":"#/definitions/PhoneNumber"},"Id":{"$ref":"#/definitions/Id"},"FrontMatter":{"$ref":"#/definitions/FrontMatter"},"KeyValueMarkdownModelType":{"$ref":"#/definitions/KeyValueMarkdownModelType"},"CategoryStack":{"$ref":"#/definitions/CategoryStack"},"KeyValueMarkdownParse":{"$ref":"#/definitions/KeyValueMarkdownParse"},"CategoryModelType":{"$ref":"#/definitions/CategoryModelType"},"Language":{"$ref":"#/definitions/Language"},"RelationType":{"$ref":"#/definitions/RelationType"},"DefaultModelType":{"$ref":"#/definitions/DefaultModelType"},"CsvModelType":{"$ref":"#/definitions/CsvModelType"},"SlugModelType":{"$ref":"#/definitions/SlugModelType"},"MarkdownModelType":{"$ref":"#/definitions/MarkdownModelType"},"Time":{"$ref":"#/definitions/Time"},"UpdatedAt":{"$ref":"#/definitions/UpdatedAt"},"CreatedAt":{"$ref":"#/definitions/CreatedAt"},"DeletedAt":{"$ref":"#/definitions/DeletedAt"},"CreatedFirstAt":{"$ref":"#/definitions/CreatedFirstAt"},"TimeTypes":{"$ref":"#/definitions/TimeTypes"}},"required":["Email","Slug","Index","Text","Markdown","Url","PhoneNumber","Id","FrontMatter","KeyValueMarkdownModelType","CategoryStack","KeyValueMarkdownParse","CategoryModelType","Language","RelationType","DefaultModelType","CsvModelType","SlugModelType","MarkdownModelType","Time","UpdatedAt","CreatedAt","DeletedAt","CreatedFirstAt","TimeTypes"],"additionalProperties":false},"simplifiedSchema":{"properties":[{"name":"Email","required":true,"schema":{"type":"string"}},{"name":"Slug","required":true,"schema":{"description":"use this for any identifier that's not an Id-type. Usually this is a kebab-case version of a written text, but it can also be a file path, for example.","type":"string"}},{"name":"Index","required":true,"schema":{"description":"used for md files. index is the line","type":"number"}},{"name":"Text","required":true,"schema":{"description":"text can be in multiple formats. most texts in data are probably just text but they can also contain markdown\n---- if there is a data model with just a single text and it is clear from the name of the model what it should be, better call it either text or markdown.","type":"string"}},{"name":"Markdown","required":true,"schema":{"description":"a string that is known to contain markdown.","type":"string"}},{"name":"Url","required":true,"schema":{"description":"valid url, can be validated","type":"string"}},{"name":"PhoneNumber","required":true,"schema":{"description":"country code without +","type":"number"}},{"name":"Id","required":true,"schema":{"description":"azAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` {  \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.","type":"string"}},{"name":"FrontMatter","required":true,"schema":{"description":"TODO: either make a special category crud for the category model would be nice maybe (especially a backend that makes sure all references stay updated would be epic)","properties":[],"type":"object"}},{"name":"KeyValueMarkdownModelType","required":true,"schema":{"description":"handy model type for storing stuff in a KeyValue Markdown file. empty lines are omitted\n\nall you need to specify in the kvmd is the key and the value, separated by \":\"","properties":[{"name":"id","required":true,"schema":{"description":"Calculated:\n\nby taking the relative file path + a stringified version of the index.\n\nused for compatibility with some general purpose functions","type":"string"}},{"name":"index","required":true,"schema":{"description":"line where the kv was found (at any given moment this is an unqiue identifier, but it may change without notice, so it's not a good idea to store stuff in kvmd if it has references to the id)","type":"number"}},{"name":"relativeIndex","required":true,"schema":{"description":"relative index from the category header, starting count with 1. if there is no header, also counts starting with 1","type":"number"}},{"name":"name","required":true,"schema":{"description":"key\n\nshould be english because it's kind of part of the codebase!","type":"string"}},{"name":"slug","required":true,"schema":{"description":"calculated: slug for this key (kebab case form of the name)","type":"string"}},{"name":"value","required":false,"schema":{"description":"value behind the semicolom (:). If not given, will be undefined.\n\nIf possible, will be parsed to a number, boolean, null or undefined... otherwise it's a string\n\ncan be any language that we can detect","type":"string"}},{"name":"comment","required":true,"schema":{"description":"comment in html syntax. if not given, will be null","type":"string"}},{"name":"categoryStack","required":true,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}}],"type":"object"}},{"name":"CategoryStack","required":true,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"KeyValueMarkdownParse","required":true,"schema":{"properties":[{"name":"parameters","required":true,"schema":{"description":"TODO: either make a special category crud for the category model would be nice maybe (especially a backend that makes sure all references stay updated would be epic)","properties":[],"type":"object"}},{"name":"data","required":true,"schema":{"items":[{"schema":{"description":"handy model type for storing stuff in a KeyValue Markdown file. empty lines are omitted\n\nall you need to specify in the kvmd is the key and the value, separated by \":\"","properties":[{"name":"id","required":true,"schema":{"description":"Calculated:\n\nby taking the relative file path + a stringified version of the index.\n\nused for compatibility with some general purpose functions","type":"string"}},{"name":"index","required":true,"schema":{"description":"line where the kv was found (at any given moment this is an unqiue identifier, but it may change without notice, so it's not a good idea to store stuff in kvmd if it has references to the id)","type":"number"}},{"name":"relativeIndex","required":true,"schema":{"description":"relative index from the category header, starting count with 1. if there is no header, also counts starting with 1","type":"number"}},{"name":"name","required":true,"schema":{"description":"key\n\nshould be english because it's kind of part of the codebase!","type":"string"}},{"name":"slug","required":true,"schema":{"description":"calculated: slug for this key (kebab case form of the name)","type":"string"}},{"name":"value","required":false,"schema":{"description":"value behind the semicolom (:). If not given, will be undefined.\n\nIf possible, will be parsed to a number, boolean, null or undefined... otherwise it's a string\n\ncan be any language that we can detect","type":"string"}},{"name":"comment","required":true,"schema":{"description":"comment in html syntax. if not given, will be null","type":"string"}},{"name":"categoryStack","required":true,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}}],"type":"object"},"name":"KeyValueMarkdownModelType"}],"type":"array"}}],"type":"object"}},{"name":"CategoryModelType","required":true,"schema":{"description":"--- isDbModel: false\n---\n\nSimple recursive data structure for hierarchical categories. Should be used to make any category model\n\nMake sure, when extending this, to provide a reference `xxxSlug` and its content `xxx` as optional parameters to its parent categories.\n\nE.g. for a `CountryCategory`, you should provide `countryCategorySlug` and `countryCategory`","properties":[{"name":"id","required":true,"schema":{"description":"Calculated:\n\nby taking the relative file path + a stringified version of the index.\n\nused for compatibility with some general purpose functions","type":"string"}},{"name":"index","required":true,"schema":{"description":"line where the kv was found (at any given moment this is an unqiue identifier, but it may change without notice, so it's not a good idea to store stuff in kvmd if it has references to the id)","type":"number"}},{"name":"relativeIndex","required":true,"schema":{"description":"relative index from the category header, starting count with 1. if there is no header, also counts starting with 1","type":"number"}},{"name":"name","required":true,"schema":{"description":"key\n\nshould be english because it's kind of part of the codebase!","type":"string"}},{"name":"slug","required":true,"schema":{"description":"calculated: slug for this key (kebab case form of the name)","type":"string"}},{"name":"value","required":false,"schema":{"description":"value behind the semicolom (:). If not given, will be undefined.\n\nIf possible, will be parsed to a number, boolean, null or undefined... otherwise it's a string\n\ncan be any language that we can detect","type":"string"}},{"name":"comment","required":true,"schema":{"description":"comment in html syntax. if not given, will be null","type":"string"}},{"name":"categoryStack","required":true,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}}],"type":"object"}},{"name":"Language","required":true,"schema":{"description":"all currently supported languages","enum":["en","nl","np","pt","de","fr","es","it","no","sw","da","vn","in","vl","af"],"type":"string"}},{"name":"RelationType","required":true,"schema":{"description":"This probably doesn't work, but it would be great if it would. This way I'd like to say that any model can have keys that end with \"Id\". These keys should always refer to Ids from other models. Also, if a model has a key like this, it is inferred that there is also a key without the Id suffix which does or doesn't cointain the actual model specified by the id.\n\nIf this cannot be done in typescript, it can be convention, and we can create a linter for this.\n\nWooh!\n\n``` const relations: RelationType = { helloId: \"hoi\", byeId: \"bye\", }; ```\n\nThe above seems to be working fine, so it IS possible!\n\nTODO: think about it... should the name of the parameter be dependent on the strategy of how the model is stored? Maybe just call it all id, right? We can also make the index a string by just prepending a string to it.","properties":[],"type":"object"}},{"name":"DefaultModelType","required":true,"schema":{"description":"use this model by default","properties":[{"name":"createdAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}},{"name":"updatedAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}},{"name":"deletedAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}},{"name":"createdFirstAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}},{"name":"id","required":true,"schema":{"description":"azAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` {  \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.","type":"string"}}],"type":"object"}},{"name":"CsvModelType","required":true,"schema":{"description":"use this model for things you want to store in CSV format\n\nTODO: add support for numbers, booleans, null, undefined","properties":[{"name":"createdAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}},{"name":"updatedAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}},{"name":"deletedAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}},{"name":"createdFirstAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}},{"name":"id","required":true,"schema":{"description":"azAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` {  \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.","type":"string"}}],"type":"object"}},{"name":"SlugModelType","required":true,"schema":{"description":"use this model for things with a name that have an unique slug that can be used to identify the model","properties":[{"name":"createdAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}},{"name":"updatedAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}},{"name":"deletedAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}},{"name":"createdFirstAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}},{"name":"id","required":true,"schema":{"description":"unique id used for compatibility purposes","type":"string"}},{"name":"slug","required":true,"schema":{"description":"use this for any identifier that's not an Id-type. Usually this is a kebab-case version of a written text, but it can also be a file path, for example.","type":"string"}},{"name":"name","required":true,"schema":{"type":"string"}},{"name":"language","required":true,"schema":{"description":"all currently supported languages","enum":["en","nl","np","pt","de","fr","es","it","no","sw","da","vn","in","vl","af"],"type":"string"}}],"type":"object"}},{"name":"MarkdownModelType","required":true,"schema":{"description":"handy model type for storing stuff in a Markdown file.\n\nanother option could be to parse the markdown file, but to KISS we are going to just return markdown with the full markdown content","properties":[{"name":"id","required":true,"schema":{"description":"should be a stringified version of the index. used for compatibility with some general purpose functions","type":"string"}},{"name":"name","required":true,"schema":{"description":"human readable version of filename","type":"string"}},{"name":"slug","required":true,"schema":{"description":"slugified filename","type":"string"}},{"name":"markdown","required":true,"schema":{"type":"string"}}],"type":"object"}},{"name":"Time","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}},{"name":"UpdatedAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}},{"name":"CreatedAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}},{"name":"DeletedAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}},{"name":"CreatedFirstAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}},{"name":"TimeTypes","required":true,"schema":{"properties":[{"name":"createdAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}},{"name":"updatedAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}},{"name":"deletedAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}},{"name":"createdFirstAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}}],"type":"object"}}],"type":"object"},"typeCoverage":0,"rawType":"CommonTypesTypes","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"UiiJkazdToPHEvxS","name":"Email","slug":"email","relativePathFromProjectRoot":"/tools/types/common-types/src/index.ts","srcFileId":"/index","operationFolderName":"common-types","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/common-types","operationName":"common-types","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"string"},"simplifiedSchema":{"type":"string"},"typeCoverage":0,"rawType":"Email","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"TddNoLZsDODvuuUH","name":"Slug","slug":"slug","relativePathFromProjectRoot":"/tools/types/common-types/src/index.ts","srcFileId":"/index","operationFolderName":"common-types","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/common-types","operationName":"common-types","description":"use this for any identifier that's not an Id-type. Usually this is a kebab-case version of a written text, but it can also be a file path, for example.","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"string","description":"use this for any identifier that's not an Id-type. Usually this is a kebab-case version of a written text, but it can also be a file path, for example."},"simplifiedSchema":{"description":"use this for any identifier that's not an Id-type. Usually this is a kebab-case version of a written text, but it can also be a file path, for example.","type":"string"},"typeCoverage":0,"rawType":"Slug","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"glizawGrUhnHOqEV","name":"Index","slug":"index","relativePathFromProjectRoot":"/tools/types/common-types/src/index.ts","srcFileId":"/index","operationFolderName":"common-types","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/common-types","operationName":"common-types","description":"used for md files. index is the line","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"number","description":"used for md files. index is the line"},"simplifiedSchema":{"description":"used for md files. index is the line","type":"number"},"typeCoverage":0,"rawType":"Index","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"AjXnaZboWYRVEPCK","name":"Text","slug":"text","relativePathFromProjectRoot":"/tools/types/common-types/src/index.ts","srcFileId":"/index","operationFolderName":"common-types","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/common-types","operationName":"common-types","description":"text can be in multiple formats. most texts in data are probably just text but they can also contain markdown\n---- if there is a data model with just a single text and it is clear from the name of the model what it should be, better call it either text or markdown.","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"string","description":"text can be in multiple formats. most texts in data are probably just text but they can also contain markdown\n---- if there is a data model with just a single text and it is clear from the name of the model what it should be, better call it either text or markdown."},"simplifiedSchema":{"description":"text can be in multiple formats. most texts in data are probably just text but they can also contain markdown\n---- if there is a data model with just a single text and it is clear from the name of the model what it should be, better call it either text or markdown.","type":"string"},"typeCoverage":0,"rawType":"Text","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"oNURouxspHrdpXix","name":"Markdown","slug":"markdown","relativePathFromProjectRoot":"/tools/types/common-types/src/index.ts","srcFileId":"/index","operationFolderName":"common-types","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/common-types","operationName":"common-types","description":"a string that is known to contain markdown.","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"string","description":"a string that is known to contain markdown."},"simplifiedSchema":{"description":"a string that is known to contain markdown.","type":"string"},"typeCoverage":0,"rawType":"Markdown","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"WkdGFmCDwdCzojui","name":"Url","slug":"url","relativePathFromProjectRoot":"/tools/types/common-types/src/index.ts","srcFileId":"/index","operationFolderName":"common-types","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/common-types","operationName":"common-types","description":"valid url, can be validated","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"string","description":"valid url, can be validated"},"simplifiedSchema":{"description":"valid url, can be validated","type":"string"},"typeCoverage":0,"rawType":"Url","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"lNOhOHgkiADLyrzp","name":"PhoneNumber","slug":"phone-number","relativePathFromProjectRoot":"/tools/types/common-types/src/index.ts","srcFileId":"/index","operationFolderName":"common-types","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/common-types","operationName":"common-types","description":"country code without +","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"number","description":"country code without +"},"simplifiedSchema":{"description":"country code without +","type":"number"},"typeCoverage":0,"rawType":"PhoneNumber","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"uGHMLnGHvNGfVhZv","name":"Id","slug":"id","relativePathFromProjectRoot":"/tools/types/common-types/src/index.ts","srcFileId":"/index","operationFolderName":"common-types","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/common-types","operationName":"common-types","description":"azAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` {  \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"string","description":"azAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` {  \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this."},"simplifiedSchema":{"description":"azAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` {  \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.","type":"string"},"typeCoverage":0,"rawType":"Id","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"LlsdAYNeSsLNnZYS","name":"FrontMatter","slug":"front-matter","relativePathFromProjectRoot":"/tools/types/common-types/src/index.ts","srcFileId":"/index","operationFolderName":"common-types","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/common-types","operationName":"common-types","description":"TODO: either make a special category crud for the category model would be nice maybe (especially a backend that makes sure all references stay updated would be epic)","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","additionalProperties":{"anyOf":[{"type":"string"},{"type":"number"},{"type":"null"},{"type":"boolean"},{"not":{}}]},"description":"TODO: either make a special category crud for the category model would be nice maybe (especially a backend that makes sure all references stay updated would be epic)"},"simplifiedSchema":{"description":"TODO: either make a special category crud for the category model would be nice maybe (especially a backend that makes sure all references stay updated would be epic)","properties":[],"type":"object"},"typeCoverage":0,"rawType":"FrontMatter","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"cCtHmCMoIMPWxHHW","name":"KeyValueMarkdownModelType","slug":"key-value-markdown-model-type","relativePathFromProjectRoot":"/tools/types/common-types/src/index.ts","srcFileId":"/index","operationFolderName":"common-types","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/common-types","operationName":"common-types","description":"handy model type for storing stuff in a KeyValue Markdown file. empty lines are omitted\n\nall you need to specify in the kvmd is the key and the value, separated by \":\"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"id":{"type":"string","description":"Calculated:\n\nby taking the relative file path + a stringified version of the index.\n\nused for compatibility with some general purpose functions"},"index":{"type":"number","description":"line where the kv was found (at any given moment this is an unqiue identifier, but it may change without notice, so it's not a good idea to store stuff in kvmd if it has references to the id)"},"relativeIndex":{"type":"number","description":"relative index from the category header, starting count with 1. if there is no header, also counts starting with 1"},"name":{"type":"string","description":"key\n\nshould be english because it's kind of part of the codebase!"},"slug":{"type":"string","description":"calculated: slug for this key (kebab case form of the name)"},"value":{"type":["string","number","boolean","null"],"description":"value behind the semicolom (:). If not given, will be undefined.\n\nIf possible, will be parsed to a number, boolean, null or undefined... otherwise it's a string\n\ncan be any language that we can detect"},"comment":{"type":["string","null"],"description":"comment in html syntax. if not given, will be null"},"categoryStack":{"$ref":"#/definitions/CategoryStack","description":"preceding categories found in markdown (headers)"}},"required":["id","index","relativeIndex","name","slug","comment","categoryStack"],"additionalProperties":false,"description":"handy model type for storing stuff in a KeyValue Markdown file. empty lines are omitted\n\nall you need to specify in the kvmd is the key and the value, separated by \":\""},"simplifiedSchema":{"description":"handy model type for storing stuff in a KeyValue Markdown file. empty lines are omitted\n\nall you need to specify in the kvmd is the key and the value, separated by \":\"","properties":[{"name":"id","required":true,"schema":{"description":"Calculated:\n\nby taking the relative file path + a stringified version of the index.\n\nused for compatibility with some general purpose functions","type":"string"}},{"name":"index","required":true,"schema":{"description":"line where the kv was found (at any given moment this is an unqiue identifier, but it may change without notice, so it's not a good idea to store stuff in kvmd if it has references to the id)","type":"number"}},{"name":"relativeIndex","required":true,"schema":{"description":"relative index from the category header, starting count with 1. if there is no header, also counts starting with 1","type":"number"}},{"name":"name","required":true,"schema":{"description":"key\n\nshould be english because it's kind of part of the codebase!","type":"string"}},{"name":"slug","required":true,"schema":{"description":"calculated: slug for this key (kebab case form of the name)","type":"string"}},{"name":"value","required":false,"schema":{"description":"value behind the semicolom (:). If not given, will be undefined.\n\nIf possible, will be parsed to a number, boolean, null or undefined... otherwise it's a string\n\ncan be any language that we can detect","type":"string"}},{"name":"comment","required":true,"schema":{"description":"comment in html syntax. if not given, will be null","type":"string"}},{"name":"categoryStack","required":true,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}}],"type":"object"},"typeCoverage":0,"rawType":"KeyValueMarkdownModelType","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"SNoXkoZofgPupIxs","name":"CategoryStack","slug":"category-stack","relativePathFromProjectRoot":"/tools/types/common-types/src/index.ts","srcFileId":"/index","operationFolderName":"common-types","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/common-types","operationName":"common-types","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"array","items":{"type":"string"}},"simplifiedSchema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"},"typeCoverage":0,"rawType":"CategoryStack","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"MUCWNLaxMVFQLXjX","name":"KeyValueMarkdownParse","slug":"key-value-markdown-parse","relativePathFromProjectRoot":"/tools/types/common-types/src/index.ts","srcFileId":"/index","operationFolderName":"common-types","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/common-types","operationName":"common-types","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"parameters":{"$ref":"#/definitions/FrontMatter"},"data":{"type":"array","items":{"$ref":"#/definitions/KeyValueMarkdownModelType"}}},"required":["parameters","data"],"additionalProperties":false},"simplifiedSchema":{"properties":[{"name":"parameters","required":true,"schema":{"description":"TODO: either make a special category crud for the category model would be nice maybe (especially a backend that makes sure all references stay updated would be epic)","properties":[],"type":"object"}},{"name":"data","required":true,"schema":{"items":[{"schema":{"description":"handy model type for storing stuff in a KeyValue Markdown file. empty lines are omitted\n\nall you need to specify in the kvmd is the key and the value, separated by \":\"","properties":[{"name":"id","required":true,"schema":{"description":"Calculated:\n\nby taking the relative file path + a stringified version of the index.\n\nused for compatibility with some general purpose functions","type":"string"}},{"name":"index","required":true,"schema":{"description":"line where the kv was found (at any given moment this is an unqiue identifier, but it may change without notice, so it's not a good idea to store stuff in kvmd if it has references to the id)","type":"number"}},{"name":"relativeIndex","required":true,"schema":{"description":"relative index from the category header, starting count with 1. if there is no header, also counts starting with 1","type":"number"}},{"name":"name","required":true,"schema":{"description":"key\n\nshould be english because it's kind of part of the codebase!","type":"string"}},{"name":"slug","required":true,"schema":{"description":"calculated: slug for this key (kebab case form of the name)","type":"string"}},{"name":"value","required":false,"schema":{"description":"value behind the semicolom (:). If not given, will be undefined.\n\nIf possible, will be parsed to a number, boolean, null or undefined... otherwise it's a string\n\ncan be any language that we can detect","type":"string"}},{"name":"comment","required":true,"schema":{"description":"comment in html syntax. if not given, will be null","type":"string"}},{"name":"categoryStack","required":true,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}}],"type":"object"},"name":"KeyValueMarkdownModelType"}],"type":"array"}}],"type":"object"},"typeCoverage":0,"rawType":"KeyValueMarkdownParse","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"FiBmifThNqTdiWRR","name":"CategoryModelType","slug":"category-model-type","relativePathFromProjectRoot":"/tools/types/common-types/src/index.ts","srcFileId":"/index","operationFolderName":"common-types","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/common-types","operationName":"common-types","description":"\nSimple recursive data structure for hierarchical categories. Should be used to make any category model\n\nMake sure, when extending this, to provide a reference `xxxSlug` and its content `xxx` as optional parameters to its parent categories.\n\nE.g. for a `CountryCategory`, you should provide `countryCategorySlug` and `countryCategory`","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","additionalProperties":false,"properties":{"id":{"type":"string","description":"Calculated:\n\nby taking the relative file path + a stringified version of the index.\n\nused for compatibility with some general purpose functions"},"index":{"type":"number","description":"line where the kv was found (at any given moment this is an unqiue identifier, but it may change without notice, so it's not a good idea to store stuff in kvmd if it has references to the id)"},"relativeIndex":{"type":"number","description":"relative index from the category header, starting count with 1. if there is no header, also counts starting with 1"},"name":{"type":"string","description":"key\n\nshould be english because it's kind of part of the codebase!"},"slug":{"type":"string","description":"calculated: slug for this key (kebab case form of the name)"},"value":{"type":["string","number","boolean","null"],"description":"value behind the semicolom (:). If not given, will be undefined.\n\nIf possible, will be parsed to a number, boolean, null or undefined... otherwise it's a string\n\ncan be any language that we can detect"},"comment":{"type":["string","null"],"description":"comment in html syntax. if not given, will be null"},"categoryStack":{"$ref":"#/definitions/CategoryStack","description":"preceding categories found in markdown (headers)"}},"required":["categoryStack","comment","id","index","name","relativeIndex","slug"],"description":"--- isDbModel: false\n---\n\nSimple recursive data structure for hierarchical categories. Should be used to make any category model\n\nMake sure, when extending this, to provide a reference `xxxSlug` and its content `xxx` as optional parameters to its parent categories.\n\nE.g. for a `CountryCategory`, you should provide `countryCategorySlug` and `countryCategory`"},"simplifiedSchema":{"description":"--- isDbModel: false\n---\n\nSimple recursive data structure for hierarchical categories. Should be used to make any category model\n\nMake sure, when extending this, to provide a reference `xxxSlug` and its content `xxx` as optional parameters to its parent categories.\n\nE.g. for a `CountryCategory`, you should provide `countryCategorySlug` and `countryCategory`","properties":[{"name":"id","required":true,"schema":{"description":"Calculated:\n\nby taking the relative file path + a stringified version of the index.\n\nused for compatibility with some general purpose functions","type":"string"}},{"name":"index","required":true,"schema":{"description":"line where the kv was found (at any given moment this is an unqiue identifier, but it may change without notice, so it's not a good idea to store stuff in kvmd if it has references to the id)","type":"number"}},{"name":"relativeIndex","required":true,"schema":{"description":"relative index from the category header, starting count with 1. if there is no header, also counts starting with 1","type":"number"}},{"name":"name","required":true,"schema":{"description":"key\n\nshould be english because it's kind of part of the codebase!","type":"string"}},{"name":"slug","required":true,"schema":{"description":"calculated: slug for this key (kebab case form of the name)","type":"string"}},{"name":"value","required":false,"schema":{"description":"value behind the semicolom (:). If not given, will be undefined.\n\nIf possible, will be parsed to a number, boolean, null or undefined... otherwise it's a string\n\ncan be any language that we can detect","type":"string"}},{"name":"comment","required":true,"schema":{"description":"comment in html syntax. if not given, will be null","type":"string"}},{"name":"categoryStack","required":true,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}}],"type":"object"},"typeCoverage":0,"rawType":"CategoryModelType","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"hIdbWkyoDpXmlEYo","name":"Language","slug":"language","relativePathFromProjectRoot":"/tools/types/common-types/src/index.ts","srcFileId":"/index","operationFolderName":"common-types","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/common-types","operationName":"common-types","description":"all currently supported languages","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"string","enum":["en","nl","np","pt","de","fr","es","it","no","sw","da","vn","in","vl","af"],"description":"all currently supported languages"},"simplifiedSchema":{"description":"all currently supported languages","enum":["en","nl","np","pt","de","fr","es","it","no","sw","da","vn","in","vl","af"],"type":"string"},"typeCoverage":0,"rawType":"Language","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"LoZtJllgFoklbvzc","name":"RelationType","slug":"relation-type","relativePathFromProjectRoot":"/tools/types/common-types/src/index.ts","srcFileId":"/index","operationFolderName":"common-types","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/common-types","operationName":"common-types","description":"This probably doesn't work, but it would be great if it would. This way I'd like to say that any model can have keys that end with \"Id\". These keys should always refer to Ids from other models. Also, if a model has a key like this, it is inferred that there is also a key without the Id suffix which does or doesn't cointain the actual model specified by the id.\n\nIf this cannot be done in typescript, it can be convention, and we can create a linter for this.\n\nWooh!\n\n``` const relations: RelationType = { helloId: \"hoi\", byeId: \"bye\", }; ```\n\nThe above seems to be working fine, so it IS possible!\n\nTODO: think about it... should the name of the parameter be dependent on the strategy of how the model is stored? Maybe just call it all id, right? We can also make the index a string by just prepending a string to it.","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","additionalProperties":{"anyOf":[{"$ref":"#/definitions/Id"},{"not":{}}]},"description":"This probably doesn't work, but it would be great if it would. This way I'd like to say that any model can have keys that end with \"Id\". These keys should always refer to Ids from other models. Also, if a model has a key like this, it is inferred that there is also a key without the Id suffix which does or doesn't cointain the actual model specified by the id.\n\nIf this cannot be done in typescript, it can be convention, and we can create a linter for this.\n\nWooh!\n\n``` const relations: RelationType = { helloId: \"hoi\", byeId: \"bye\", }; ```\n\nThe above seems to be working fine, so it IS possible!\n\nTODO: think about it... should the name of the parameter be dependent on the strategy of how the model is stored? Maybe just call it all id, right? We can also make the index a string by just prepending a string to it."},"simplifiedSchema":{"description":"This probably doesn't work, but it would be great if it would. This way I'd like to say that any model can have keys that end with \"Id\". These keys should always refer to Ids from other models. Also, if a model has a key like this, it is inferred that there is also a key without the Id suffix which does or doesn't cointain the actual model specified by the id.\n\nIf this cannot be done in typescript, it can be convention, and we can create a linter for this.\n\nWooh!\n\n``` const relations: RelationType = { helloId: \"hoi\", byeId: \"bye\", }; ```\n\nThe above seems to be working fine, so it IS possible!\n\nTODO: think about it... should the name of the parameter be dependent on the strategy of how the model is stored? Maybe just call it all id, right? We can also make the index a string by just prepending a string to it.","properties":[],"type":"object"},"typeCoverage":0,"rawType":"RelationType","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"efRoVnbBRdEREbue","name":"DefaultModelType","slug":"default-model-type","relativePathFromProjectRoot":"/tools/types/common-types/src/index.ts","srcFileId":"/index","operationFolderName":"common-types","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/common-types","operationName":"common-types","description":"use this model by default","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","additionalProperties":{"anyOf":[{"$ref":"#/definitions/Id"},{"not":{}}]},"properties":{"createdAt":{"$ref":"#/definitions/CreatedAt"},"updatedAt":{"$ref":"#/definitions/UpdatedAt"},"deletedAt":{"$ref":"#/definitions/DeletedAt"},"createdFirstAt":{"$ref":"#/definitions/CreatedFirstAt"},"id":{"$ref":"#/definitions/Id"}},"required":["createdAt","createdFirstAt","deletedAt","id","updatedAt"],"description":"use this model by default"},"simplifiedSchema":{"description":"use this model by default","properties":[{"name":"createdAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}},{"name":"updatedAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}},{"name":"deletedAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}},{"name":"createdFirstAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}},{"name":"id","required":true,"schema":{"description":"azAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` {  \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.","type":"string"}}],"type":"object"},"typeCoverage":0,"rawType":"DefaultModelType","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"BOuJBChfXpRMxmLL","name":"CreatedAt","slug":"created-at","relativePathFromProjectRoot":"/tools/types/common-types/src/index.ts","srcFileId":"/index","operationFolderName":"common-types","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/common-types","operationName":"common-types","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"$ref":"#/definitions/Time"},"simplifiedSchema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"},"typeCoverage":0,"rawType":"CreatedAt","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"vvvbUagQqFLRoKJG","name":"Time","slug":"time","relativePathFromProjectRoot":"/tools/types/common-types/src/index.ts","srcFileId":"/index","operationFolderName":"common-types","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/common-types","operationName":"common-types","description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"number","description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()"},"simplifiedSchema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"},"typeCoverage":0,"rawType":"Time","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"pXNUamLNihusGGaX","name":"UpdatedAt","slug":"updated-at","relativePathFromProjectRoot":"/tools/types/common-types/src/index.ts","srcFileId":"/index","operationFolderName":"common-types","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/common-types","operationName":"common-types","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"$ref":"#/definitions/Time"},"simplifiedSchema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"},"typeCoverage":0,"rawType":"UpdatedAt","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"GlIkSDlLuQitzpGr","name":"DeletedAt","slug":"deleted-at","relativePathFromProjectRoot":"/tools/types/common-types/src/index.ts","srcFileId":"/index","operationFolderName":"common-types","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/common-types","operationName":"common-types","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"$ref":"#/definitions/Time"},"simplifiedSchema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"},"typeCoverage":0,"rawType":"DeletedAt","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"UDZyLTsmmLHjNgeg","name":"CreatedFirstAt","slug":"created-first-at","relativePathFromProjectRoot":"/tools/types/common-types/src/index.ts","srcFileId":"/index","operationFolderName":"common-types","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/common-types","operationName":"common-types","description":"in some cases, data can be created before it was created in our system. In this case, use CreatedFirstAt if this information is important.","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"$ref":"#/definitions/Time","description":"in some cases, data can be created before it was created in our system. In this case, use CreatedFirstAt if this information is important."},"simplifiedSchema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"},"typeCoverage":0,"rawType":"CreatedFirstAt","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"xnRpYUiiXEendGHE","name":"CsvModelType","slug":"csv-model-type","relativePathFromProjectRoot":"/tools/types/common-types/src/index.ts","srcFileId":"/index","operationFolderName":"common-types","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/common-types","operationName":"common-types","description":"use this model for things you want to store in CSV format\n\nTODO: add support for numbers, booleans, null, undefined","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","additionalProperties":{"anyOf":[{"$ref":"#/definitions/Id"},{"not":{}},{"not":{}},{"type":["string","number","boolean","null"]}]},"properties":{"createdAt":{"$ref":"#/definitions/CreatedAt"},"updatedAt":{"$ref":"#/definitions/UpdatedAt"},"deletedAt":{"$ref":"#/definitions/DeletedAt"},"createdFirstAt":{"$ref":"#/definitions/CreatedFirstAt"},"id":{"$ref":"#/definitions/Id"}},"required":["createdAt","createdFirstAt","deletedAt","id","updatedAt"],"description":"use this model for things you want to store in CSV format\n\nTODO: add support for numbers, booleans, null, undefined"},"simplifiedSchema":{"description":"use this model for things you want to store in CSV format\n\nTODO: add support for numbers, booleans, null, undefined","properties":[{"name":"createdAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}},{"name":"updatedAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}},{"name":"deletedAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}},{"name":"createdFirstAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}},{"name":"id","required":true,"schema":{"description":"azAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` {  \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.","type":"string"}}],"type":"object"},"typeCoverage":0,"rawType":"CsvModelType","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"rYGKqhLioVGdmGWA","name":"SlugModelType","slug":"slug-model-type","relativePathFromProjectRoot":"/tools/types/common-types/src/index.ts","srcFileId":"/index","operationFolderName":"common-types","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/common-types","operationName":"common-types","description":"use this model for things with a name that have an unique slug that can be used to identify the model","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","additionalProperties":{"anyOf":[{"$ref":"#/definitions/Id"},{"not":{}}]},"properties":{"createdAt":{"$ref":"#/definitions/CreatedAt"},"updatedAt":{"$ref":"#/definitions/UpdatedAt"},"deletedAt":{"$ref":"#/definitions/DeletedAt"},"createdFirstAt":{"$ref":"#/definitions/CreatedFirstAt"},"id":{"type":"string","description":"unique id used for compatibility purposes"},"slug":{"$ref":"#/definitions/Slug","description":"kebab-case of the name, should be unique"},"name":{"type":"string"},"language":{"$ref":"#/definitions/Language","default":"en"}},"required":["createdAt","createdFirstAt","deletedAt","id","language","name","slug","updatedAt"],"description":"use this model for things with a name that have an unique slug that can be used to identify the model"},"simplifiedSchema":{"description":"use this model for things with a name that have an unique slug that can be used to identify the model","properties":[{"name":"createdAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}},{"name":"updatedAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}},{"name":"deletedAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}},{"name":"createdFirstAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}},{"name":"id","required":true,"schema":{"description":"unique id used for compatibility purposes","type":"string"}},{"name":"slug","required":true,"schema":{"description":"use this for any identifier that's not an Id-type. Usually this is a kebab-case version of a written text, but it can also be a file path, for example.","type":"string"}},{"name":"name","required":true,"schema":{"type":"string"}},{"name":"language","required":true,"schema":{"description":"all currently supported languages","enum":["en","nl","np","pt","de","fr","es","it","no","sw","da","vn","in","vl","af"],"type":"string"}}],"type":"object"},"typeCoverage":0,"rawType":"SlugModelType","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"LpJJGxGgBLIeQOLF","name":"MarkdownModelType","slug":"markdown-model-type","relativePathFromProjectRoot":"/tools/types/common-types/src/index.ts","srcFileId":"/index","operationFolderName":"common-types","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/common-types","operationName":"common-types","description":"handy model type for storing stuff in a Markdown file.\n\nanother option could be to parse the markdown file, but to KISS we are going to just return markdown with the full markdown content","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"id":{"type":"string","description":"should be a stringified version of the index. used for compatibility with some general purpose functions"},"name":{"type":"string","description":"human readable version of filename"},"slug":{"type":"string","description":"slugified filename"},"markdown":{"type":"string"}},"required":["id","name","slug","markdown"],"additionalProperties":{"anyOf":[{"type":"string"},{"type":"number"},{"type":"boolean"},{"not":{}},{"type":"null"}],"description":"will be stored in frontmatter"},"description":"handy model type for storing stuff in a Markdown file.\n\nanother option could be to parse the markdown file, but to KISS we are going to just return markdown with the full markdown content"},"simplifiedSchema":{"description":"handy model type for storing stuff in a Markdown file.\n\nanother option could be to parse the markdown file, but to KISS we are going to just return markdown with the full markdown content","properties":[{"name":"id","required":true,"schema":{"description":"should be a stringified version of the index. used for compatibility with some general purpose functions","type":"string"}},{"name":"name","required":true,"schema":{"description":"human readable version of filename","type":"string"}},{"name":"slug","required":true,"schema":{"description":"slugified filename","type":"string"}},{"name":"markdown","required":true,"schema":{"type":"string"}}],"type":"object"},"typeCoverage":0,"rawType":"MarkdownModelType","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"KhyFWvOpInWkYeoT","name":"TimeTypes","slug":"time-types","relativePathFromProjectRoot":"/tools/types/common-types/src/index.ts","srcFileId":"/index","operationFolderName":"common-types","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/common-types","operationName":"common-types","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"createdAt":{"$ref":"#/definitions/CreatedAt"},"updatedAt":{"$ref":"#/definitions/UpdatedAt"},"deletedAt":{"$ref":"#/definitions/DeletedAt"},"createdFirstAt":{"$ref":"#/definitions/CreatedFirstAt"}},"required":["createdAt","updatedAt","deletedAt","createdFirstAt"],"additionalProperties":false},"simplifiedSchema":{"properties":[{"name":"createdAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}},{"name":"updatedAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}},{"name":"deletedAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}},{"name":"createdFirstAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}}],"type":"object"},"typeCoverage":0,"rawType":"TimeTypes","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}}]