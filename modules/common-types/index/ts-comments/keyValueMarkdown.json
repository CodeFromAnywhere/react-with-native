[{"id":"UThmaEeWwmhSqGBQ","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/tools/types/common-types/src/keyValueMarkdown.ts","srcFileId":"/keyValueMarkdown","operationFolderName":"common-types","relativeFilePathFromSrc":"/keyValueMarkdown.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/common-types","operationName":"common-types","comment":"TODO:\neither make a special category crud for the category model would be nice maybe (especially a backend that makes sure all references stay updated would be epic)","rawStatement":"export type FrontMatter = {\n  [frontMatterKey: string]: string | number | null | boolean | undefined;\n};","parameters":{},"types":["todo"],"firstLine":1,"lastLine":5},{"id":"UThmaEeWwmhSqGBQ","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/tools/types/common-types/src/keyValueMarkdown.ts","srcFileId":"/keyValueMarkdown","operationFolderName":"common-types","relativeFilePathFromSrc":"/keyValueMarkdown.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/common-types","operationName":"common-types","comment":"handy model type for storing stuff in a KeyValue Markdown file.\nempty lines are omitted\n\nall you need to specify in the kvmd is the key and the value, separated by \":\"","rawStatement":"export type KeyValueMarkdownModelType = {\n  /**\n   * Calculated:\n   *\n   * by taking the relative file path + a stringified version of the index.\n   *\n   * used for compatibility with some general purpose functions\n   */\n  id: string;\n  /**\n   * line where the kv was found (at any given moment this is an unqiue identifier, but it may change without notice, so it's not a good idea to store stuff in kvmd if it has references to the id)\n   */\n  index: number;\n  /**\n   * relative index from the category header, starting count with 1. if there is no header, also counts starting with 1\n   */\n  relativeIndex: number;\n\n  /**\n   * key\n   *\n   * should be english because it's kind of part of the codebase!\n   */\n  name: string;\n  /**\n   * calculated: slug for this key (kebab case form of the name)\n   */\n  slug: string;\n\n  /**\n   * value behind the semicolom (:). If not given, will be undefined.\n   *\n   * If possible, will be parsed to a number, boolean, null or undefined... otherwise it's a string\n   *\n   * can be any language that we can detect\n   */\n  value: string | number | boolean | null | undefined;\n\n  /** comment in html syntax. if not given, will be null */\n  comment: string | null;\n  /** preceding categories found in markdown (headers) */\n  categoryStack: CategoryStack;\n};","parameters":{},"types":[],"firstLine":10,"lastLine":16},{"id":"UThmaEeWwmhSqGBQ","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/tools/types/common-types/src/keyValueMarkdown.ts","srcFileId":"/keyValueMarkdown","operationFolderName":"common-types","relativeFilePathFromSrc":"/keyValueMarkdown.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/common-types","operationName":"common-types","comment":"","rawStatement":"export type CategoryStack = string[];","parameters":{},"types":[],"firstLine":61,"lastLine":63},{"id":"UThmaEeWwmhSqGBQ","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/tools/types/common-types/src/keyValueMarkdown.ts","srcFileId":"/keyValueMarkdown","operationFolderName":"common-types","relativeFilePathFromSrc":"/keyValueMarkdown.ts","relativeOperationBasePathFromProjectRoot":"/tools/types/common-types","operationName":"common-types","comment":"\nSimple recursive data structure for hierarchical categories. Should be used to make any category model\n\nMake sure, when extending this, to provide a reference `xxxSlug` and its content `xxx` as optional parameters to its parent categories.\n\nE.g. for a `CountryCategory`, you should provide `countryCategorySlug` and `countryCategory`","rawStatement":"export interface CategoryModelType extends KeyValueMarkdownModelType {}","parameters":{"isDbModel":false},"types":[],"firstLine":71,"lastLine":81}]