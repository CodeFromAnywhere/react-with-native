[{"id":"IlhKyQEEmhKxEVGW","commentsInside":[],"rawText":" (\n  /**\n   * the message to be displayed to the user\n   */\n  message: string,\n  /**\n   * the configuration (optional)\n   */\n  config?: {\n    /**\n     * how it should look and feel for the user\n     */\n    type?: LogType;\n    /**\n     * TODO: needs to be implemented... this could make the errors disappear when some global config is turned off\n     */\n    debugOnly?: boolean;\n  }\n) => {\n  const color =\n    config?.type === \"error\"\n      ? options.FgRed\n      : config?.type === \"important\"\n      ? options.FgBlue\n      : config?.type === \"success\"\n      ? options.FgGreen\n      : config?.type === \"warning\"\n      ? options.FgYellow\n      : null;\n  // say(message);\n\n  if (color) {\n    return console.log(`${color}%s${resetString}`, message);\n  }\n  return console.log(message);\n}","name":"log","slug":"log","parameters":[{"name":"message","schema":{"type":"string","description":"the message to be displayed to the user"},"simplifiedSchema":{"description":"the message to be displayed to the user","type":"string"},"required":true},{"name":"config","schema":{"type":"object","properties":{"type":{"$ref":"#/definitions/LogType","description":"how it should look and feel for the user"},"debugOnly":{"type":"boolean","description":"TODO: needs to be implemented... this could make the errors disappear when some global config is turned off"}},"additionalProperties":false,"description":"the configuration (optional)"},"simplifiedSchema":{"description":"the configuration (optional)","properties":[{"name":"type","required":false,"schema":{"description":"how should it look and feel?","enum":["error","warning","success","important","default"],"type":"string"}},{"name":"debugOnly","required":false,"schema":{"description":"TODO: needs to be implemented... this could make the errors disappear when some global config is turned off","type":"boolean"}}],"type":"object"},"required":false}],"description":"","returnType":{"rawType":"void","typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":false,"isEnumLiteral":false},"maxIndentationDepth":3,"relativePathFromProjectRoot":"/tools/util/log/src/general.ts","srcFileId":"/general","operationFolderName":"log","relativeFilePathFromSrc":"/general.ts","relativeOperationBasePathFromProjectRoot":"/tools/util/log","operationName":"log","size":{"characters":781,"lines":36,"bytes":781,"bytesPerCharacter":1,"charactersPerfLine":21.694444444444443,"linesPerFile":36,"numberOfFiles":1}}]