[
  {
    "createdAt": 1666264722688,
    "updatedAt": 1666264722688,
    "deletedAt": 0,
    "createdFirstAt": 1666264722688,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/general.ts",
    "comment": "TODO: this is great. now also get the operationName. If the operationName appears in the config, for debug, show the log, otherwise don't show",
    "rawStatement": "export const getCallerFileName = () => {\n  const stack = new Error().stack;\n  if (!stack) return;\n\n  // console.log(\"Complete stack\", stack);\n  const firstRelevantLine = stack.split(\"\\n\")[3];\n  if (!firstRelevantLine) return;\n\n  const jsFilePath = firstRelevantLine.split(\"at \")[1].split(\":\")[0];\n\n  if (!jsFilePath) return;\n\n  const srcPath = jsFilePath.replace(\"/build/\", \"/src/\").replace(\".js\", \".ts\");\n\n  return srcPath;\n};",
    "parameters": {},
    "types": [
      "todo"
    ],
    "firstLine": 1,
    "lastLine": 3,
    "id": "rkqwtyaabowneuauxbmqdetf"
  },
  {
    "createdAt": 1666264722688,
    "updatedAt": 1666264722688,
    "deletedAt": 0,
    "createdFirstAt": 1666264722688,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/general.ts",
    "comment": "if true, also shows debug messages",
    "rawStatement": "export const DEBUG = false;",
    "parameters": {},
    "types": [],
    "firstLine": 21,
    "lastLine": 23,
    "id": "uequyyqzzmmbjdpcknwexfsy"
  },
  {
    "createdAt": 1666264722688,
    "updatedAt": 1666264722688,
    "deletedAt": 0,
    "createdFirstAt": 1666264722688,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/general.ts",
    "comment": "how should it look and feel?",
    "rawStatement": "export type LogType =\n  | \"debug\"\n  | \"error\"\n  | \"warning\"\n  | \"success\"\n  | \"important\"\n  | \"default\";",
    "parameters": {},
    "types": [],
    "firstLine": 26,
    "lastLine": 28,
    "id": "pbsrqsspyfhwvauvjwofkfxf"
  },
  {
    "createdAt": 1666264722688,
    "updatedAt": 1666264722688,
    "deletedAt": 0,
    "createdFirstAt": 1666264722688,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/general.ts",
    "comment": "special character combinations that make the console message be printed differently",
    "rawStatement": "const options = {\n  //special\n  Reset: \"\\x1b[0m\",\n  Bright: \"\\x1b[1m\",\n  Dim: \"\\x1b[2m\",\n  Underscore: \"\\x1b[4m\",\n  Blink: \"\\x1b[5m\",\n  Reverse: \"\\x1b[7m\",\n  Hidden: \"\\x1b[8m\",\n\n  //color\n  FgBlack: \"\\x1b[30m\",\n  FgRed: \"\\x1b[31m\",\n  FgGreen: \"\\x1b[32m\",\n  FgYellow: \"\\x1b[33m\",\n  FgBlue: \"\\x1b[34m\",\n  FgMagenta: \"\\x1b[35m\",\n  FgCyan: \"\\x1b[36m\",\n  FgWhite: \"\\x1b[37m\",\n\n  //backgrounds\n  BgBlack: \"\\x1b[40m\",\n  BgRed: \"\\x1b[41m\",\n  BgGreen: \"\\x1b[42m\",\n  BgYellow: \"\\x1b[43m\",\n  BgBlue: \"\\x1b[44m\",\n  BgMagenta: \"\\x1b[45m\",\n  BgCyan: \"\\x1b[46m\",\n  BgWhite: \"\\x1b[47m\",\n};",
    "parameters": {},
    "types": [],
    "firstLine": 37,
    "lastLine": 39,
    "id": "mauarvqflbyeweqmobwvinwn"
  },
  {
    "createdAt": 1666264722688,
    "updatedAt": 1666264722688,
    "deletedAt": 0,
    "createdFirstAt": 1666264722688,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/general.ts",
    "comment": "TODO: Should parse a title from markdown",
    "rawStatement": "export const parseTitle = (markdown: string) => {\n  const sentences = markdown\n    .split(\"\\n\")\n    .map((x) => x.split(\".\"))\n    .flat();\n\n  const [title, ...rest] = sentences;\n\n  return { title, rest: rest.filter((x) => x.length > 0).join(\"\\n\") };\n};",
    "parameters": {},
    "types": [
      "todo"
    ],
    "firstLine": 73,
    "lastLine": 75,
    "id": "mmydvkkqyndnebtvfovqdlnm"
  },
  {
    "createdAt": 1666264722688,
    "updatedAt": 1666264722688,
    "deletedAt": 0,
    "createdFirstAt": 1666264722688,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/general.ts",
    "comment": "Log a message with a special type",
    "rawStatement": "export const log = (\n  /**\n   * the message to be displayed to the user\n   */\n  message: string,\n  /**\n   * the configuration (optional)\n   */\n  config?: LogConfig,\n  /**\n   * Extra data the user needs to be able to see.\n   */\n  data?: any\n) => {\n  if (config?.type === \"debug\" && !DEBUG) return;\n  // TODO: figure out if I can also get the path, so I can easily figure out the operation and also store logs somewhere nice\n\n  // const caller = log.caller?.name;\n\n  // const titleParse = parseTitle(message);\n  // const title = config?.title || titleParse.title;\n  const color =\n    config?.type === \"error\"\n      ? options.FgRed\n      : config?.type === \"important\"\n      ? options.FgBlue\n      : config?.type === \"success\"\n      ? options.FgGreen\n      : config?.type === \"warning\"\n      ? options.FgYellow\n      : null;\n\n  if (color) {\n    console.log(`${color}%s${resetString}`, message);\n  } else {\n    console.log(message);\n  }\n\n  if (config?.type === \"error\") {\n    console.log(`(error happened in ${getCallerFileName()})`);\n  }\n\n  if (data) {\n    if (typeof data === \"object\") {\n      console.table(data);\n    } else {\n      console.log(data);\n    }\n  }\n};",
    "parameters": {},
    "types": [],
    "firstLine": 87,
    "lastLine": 89,
    "id": "hiqalguhzhubnhfygvsgcyhw"
  },
  {
    "createdAt": 1666264722688,
    "updatedAt": 1666264722688,
    "deletedAt": 0,
    "createdFirstAt": 1666264722688,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/general.ts",
    "comment": "a logging configuration object that you can set using a file in the root of your operation or project.",
    "rawStatement": "export type GlobalLogConfig = {\n  showDebug?: boolean;\n  showDefault?: boolean;\n  sayTitles?: boolean;\n  /**\n   * Folder where logs can be stored. If i can access the caller location this can be the operation db.\n   */\n  logFolder?: string;\n};",
    "parameters": {},
    "types": [],
    "firstLine": 155,
    "lastLine": 157,
    "id": "ynrplevayvsuwqdevconpjnh"
  }
]