{
  "createdAt": 1667378790552,
  "updatedAt": 1667378790552,
  "deletedAt": 0,
  "createdFirstAt": 1667378790552,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "findFilesRecursively",
  "slug": "find-files-recursively",
  "operationRelativeTypescriptFilePath": "src/deprecated.ts",
  "type": {
    "rawType": "({ match, basePath, relativePath, onlyInSubFolders, onlyInCurrentFolder, }: { match: (fileName: string, extension: string) => boolean; basePath: string; relativePath?: string | undefined; onlyInSubFolders?: boolean | undefined; onlyInCurrentFolder?: boolean | undefined; }) => import(\"/Users/king/King/operations/tools/control-fs/fs-util/src/types\").FolderPath[]",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "({\n  match,\n  basePath,\n  relativePath,\n  onlyInSubFolders,\n  onlyInCurrentFolder,\n}: {\n  match: (fileName: string, extension: string) => boolean;\n  basePath: Path;\n  relativePath?: string;\n  /**\n   * only find files in folders of this location, not in this location itself\n   */\n  onlyInSubFolders?: boolean;\n  onlyInCurrentFolder?: boolean;\n}): FolderPath[] => {\n  const location = relativePath ? path.join(basePath, relativePath) : basePath;\n\n  const contents = readdirSync(location, { withFileTypes: true });\n\n  return contents.reduce((all, fileOrFolder) => {\n    if (fileOrFolder.isDirectory() && !onlyInCurrentFolder) {\n      const folder = fileOrFolder;\n      const thisFolder = findFilesRecursively({\n        basePath,\n        relativePath: relativePath\n          ? `${relativePath}/${folder.name}`\n          : folder.name,\n        match,\n        onlyInSubFolders: false,\n      });\n      const allWithThisFolder = all.concat(thisFolder);\n      return allWithThisFolder;\n    } else if (!onlyInSubFolders) {\n      const file = fileOrFolder;\n      const filePath: Path = path.join(location, file.name);\n      const allWithMatchedFile = match(\n        withoutExtension(file.name),\n        path.parse(file.name).ext\n      )\n        ? all.concat([{ relativeFolder: relativePath, path: filePath }])\n        : all;\n      return allWithMatchedFile;\n    }\n    return all;\n  }, [] as FolderPath[]);\n}",
  "description": "DEPRECATED: in favour of `explore` from \"k-explore\"",
  "id": "lcblirjynznzxfelxlfkmqjg"
}