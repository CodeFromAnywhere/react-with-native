{
  "createdAt": 1667378795572,
  "updatedAt": 1667378795572,
  "deletedAt": 0,
  "createdFirstAt": 1667378795572,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "findFileNameCaseInsensitive",
  "slug": "find-file-name-case-insensitive",
  "operationRelativeTypescriptFilePath": "src/findFileNameCaseInsensitive.ts",
  "type": {
    "rawType": "(folderPath: string, fileName: string) => Promise<string | undefined>",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "async (\n  folderPath: string,\n  /**\n   * fileName with extension\n   */\n  fileName: string\n): Promise<string | undefined> => {\n  if (!fs.existsSync(folderPath)) return;\n\n  const results = await fs.readdir(folderPath);\n\n  const foundPath = results\n    .map((fileName) => {\n      const absolutePath = path.join(folderPath, fileName);\n      return absolutePath;\n    })\n    .find((absolutePath) => {\n      const parsedPath = path.parse(absolutePath);\n      const isMatchCaseInsensitive =\n        parsedPath.base.toLowerCase() === fileName.toLowerCase();\n\n      return isMatchCaseInsensitive;\n    });\n\n  return foundPath;\n}",
  "description": "returns a path of a fileName",
  "id": "itzhiwqconufgxapcemiimzi"
}