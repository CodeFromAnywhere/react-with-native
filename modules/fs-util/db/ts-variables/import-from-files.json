{
  "createdAt": 1667378790551,
  "updatedAt": 1667378790551,
  "deletedAt": 0,
  "createdFirstAt": 1667378790551,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "importFromFiles",
  "slug": "import-from-files",
  "operationRelativeTypescriptFilePath": "src/deprecated.ts",
  "type": {
    "rawType": "<T>({ files, importStrategy, list, guard, }: { files: string[]; importStrategy?: \"default\" | \"fileName\" | \"list\" | undefined; list?: string[] | undefined; guard?: ((moduleExports: any) => boolean) | undefined; }) => T[]",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "<T>({\n  files,\n  importStrategy = \"default\",\n  list,\n  guard,\n}: {\n  files: Path[];\n  importStrategy?: \"default\" | \"fileName\" | \"list\";\n  list?: string[];\n  guard?: (moduleExports: any) => boolean;\n}) => {\n  return files\n    .map((filePath) => {\n      const moduleExports = require(filePath);\n      if (importStrategy === \"default\") {\n        return moduleExports.default || moduleExports;\n      } else if (importStrategy === \"fileName\") {\n        const fileName = withoutExtension(filePath.split(\"/\").pop()!);\n        return moduleExports[fileName];\n      } else if (importStrategy === \"list\") {\n        return list\n          ? mergeObjectsArray(\n              list.map((item) => {\n                return { [item]: moduleExports[item] };\n              })\n            )\n          : {};\n      }\n    })\n    .filter((moduleExport) =>\n      guard ? guard(moduleExport) && moduleExport : moduleExport\n    ) as T[];\n}",
  "description": "DEPRECATED:\n\nworks fine but this requires us to know exactly what we want from the file, so it requires a very clear convention.\nbetter would be to introspect the code and just require whatever's there\nreturns T[] where every T is one of:\n- the default export (importStrategy \"default\")\n- the export with the name of the extension\n- an object with a subset of exports",
  "id": "jlrefhisvnrxhflsjgctlnfx"
}