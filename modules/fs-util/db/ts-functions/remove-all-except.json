{
  "createdAt": 1667378807290,
  "updatedAt": 1667378807290,
  "deletedAt": 0,
  "createdFirstAt": 1667378807290,
  "publicAuthorization": [
    "read-docs",
    "search"
  ],
  "isApiExposed": false,
  "isPostApi": false,
  "isGetApi": false,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/removeAllExcept.ts",
  "commentsInside": [],
  "rawText": " async (\n  folderPath: string,\n  config?: {\n    /**\n     * array of relative folder paths and file paths that should not be removed (include the extensions!)\n     */\n    ignore?: string[];\n    typeToRemove?: \"file\" | \"folder\";\n  }\n): Promise<\n  {\n    name: string;\n    removed: boolean;\n  }[]\n> => {\n  const filesAndFolders = await fs.readdir(folderPath, {\n    encoding: \"utf8\",\n    withFileTypes: true,\n  });\n\n  const removePromises = filesAndFolders.map((dirent) => {\n    if (config?.ignore?.find((x) => x.includes(dirent.name)))\n      return { name: dirent.name, removed: false };\n\n    if (config?.typeToRemove === \"file\" && !dirent.isFile())\n      return { name: dirent.name, removed: false };\n\n    if (config?.typeToRemove === \"folder\" && !dirent.isDirectory())\n      return { name: dirent.name, removed: false };\n\n    return fs\n      .rm(path.join(folderPath, dirent.name), { recursive: true })\n      .then(() => ({ name: dirent.name, removed: true }));\n  });\n\n  const promised = await Promise.all(removePromises);\n  return promised;\n}",
  "name": "removeAllExcept",
  "slug": "remove-all-except",
  "parameters": [
    {
      "name": "folderPath",
      "schema": {
        "type": "string"
      },
      "simplifiedSchema": {
        "type": "string"
      },
      "required": true
    },
    {
      "name": "config",
      "schema": {
        "type": "object",
        "properties": {
          "ignore": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "array of relative folder paths and file paths that should not be removed (include the extensions!)"
          },
          "typeToRemove": {
            "type": "string",
            "enum": [
              "file",
              "folder"
            ]
          }
        },
        "additionalProperties": false
      },
      "simplifiedSchema": {
        "properties": [
          {
            "name": "ignore",
            "required": false,
            "schema": {
              "fullComment": "array of relative folder paths and file paths that should not be removed (include the extensions!)",
              "items": [
                {
                  "schema": {
                    "type": "string"
                  },
                  "name": null
                }
              ],
              "type": "array"
            }
          },
          {
            "name": "typeToRemove",
            "required": false,
            "schema": {
              "enum": [
                "file",
                "folder"
              ],
              "type": "string"
            }
          }
        ],
        "type": "object"
      },
      "required": false
    }
  ],
  "description": "Removes everything inside a folder except some files and folders that can, optionally, be ignored for removal. does not remove the folder itself\n\nNB: make this work with subdirectories!",
  "returnType": {
    "rawType": "Promise<{ name: string; removed: boolean; }[]>",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 3,
  "size": {
    "characters": 1226,
    "lines": 40,
    "bytes": 1226,
    "bytesPerCharacter": 1,
    "charactersPerLine": 31,
    "linesPerFile": 40,
    "numberOfFiles": 1
  },
  "id": "vramqqjdexjwweyaihwetcoj"
}