[{"id":"kBvuNwwpXZzRnesZ","commentsInside":[],"rawText":" <T>({\n  files,\n  importStrategy = \"default\",\n  list,\n  guard,\n}: {\n  files: Path[];\n  importStrategy?: \"default\" | \"fileName\" | \"list\";\n  list?: string[];\n  guard?: (moduleExports: any) => boolean;\n}) => {\n  return files\n    .map((filePath) => {\n      const moduleExports = require(filePath);\n      if (importStrategy === \"default\") {\n        return moduleExports.default || moduleExports;\n      } else if (importStrategy === \"fileName\") {\n        const fileName = withoutExtension(filePath.split(\"/\").pop()!);\n        return moduleExports[fileName];\n      } else if (importStrategy === \"list\") {\n        return list\n          ? mergeObjectsArray(\n              list.map((item) => {\n                return { [item]: moduleExports[item] };\n              })\n            )\n          : {};\n      }\n    })\n    .filter((moduleExport) =>\n      guard ? guard(moduleExport) && moduleExport : moduleExport\n    ) as T[];\n}","name":"importFromFiles","slug":"import-from-files","parameters":[],"description":"DEPRECATED:\n\nworks fine but this requires us to know exactly what we want from the file, so it requires a very clear convention.\nbetter would be to introspect the code and just require whatever's there\nreturns T[] where every T is one of:\n- the default export (importStrategy \"default\")\n- the export with the name of the extension\n- an object with a subset of exports","returnType":{"rawType":"T[]","typeDefinition":{"optional":false,"type":"array","items":{}},"typeCoverage":0,"isArray":true,"isEnum":false,"isObject":true,"isPrimitive":false,"isEnumLiteral":false,"simplifiedSchema":{"items":[{"schema":{"properties":[],"type":"object"},"name":null}],"type":"array"}},"maxIndentationDepth":8,"relativePathFromProjectRoot":"/tools/control-fs/fs-util/src/deprecated.ts","srcFileId":"/deprecated","operationFolderName":"fs-util","relativeFilePathFromSrc":"/deprecated.ts","relativeOperationBasePathFromProjectRoot":"/tools/control-fs/fs-util","operationName":"fs-util","size":{"characters":1279,"lines":40,"bytes":1279,"bytesPerCharacter":1,"charactersPerfLine":31.975,"linesPerFile":40,"numberOfFiles":1}},{"id":"veRwFnZhLeVLzezN","commentsInside":[],"rawText":" (\n  slug: string,\n  basePath: string\n): FolderPath[] => {\n  return findFilesRecursively({\n    basePath,\n    match: (fileName) =>\n      fileName === slug ||\n      fileName === slug + \"s\" ||\n      fileName.endsWith(`.${slug}`) ||\n      fileName.endsWith(`.${slug}s`),\n  });\n}","name":"findSensibleFiles","slug":"find-sensible-files","parameters":[],"description":"DEPRECATED:\n\nthis is sensible-specific","returnType":{"rawType":"import(\"/Users/king/King/tools/control-fs/fs-util/src/types\").FolderPath[]","typeDefinition":{"optional":false,"type":"array","items":{"type":"object","properties":{"relativeFolder":{"type":"string","allOf":[{"transform":["trim"]},{"minLength":1}]},"path":{"type":"string","allOf":[{"transform":["trim"]},{"minLength":1}]}},"required":["path"]}},"typeCoverage":0,"isArray":true,"isEnum":false,"isObject":true,"isPrimitive":false,"isEnumLiteral":false,"simplifiedSchema":{"items":[{"schema":{"properties":[{"name":"relativeFolder","required":false,"schema":{"type":"string"}},{"name":"path","required":true,"schema":{"type":"string"}}],"type":"object"},"name":null}],"type":"array"}},"maxIndentationDepth":3,"relativePathFromProjectRoot":"/tools/control-fs/fs-util/src/deprecated.ts","srcFileId":"/deprecated","operationFolderName":"fs-util","relativeFilePathFromSrc":"/deprecated.ts","relativeOperationBasePathFromProjectRoot":"/tools/control-fs/fs-util","operationName":"fs-util","size":{"characters":312,"lines":15,"bytes":312,"bytesPerCharacter":1,"charactersPerfLine":20.8,"linesPerFile":15,"numberOfFiles":1}},{"id":"lehqmLamSRpgVIKp","commentsInside":[],"rawText":" (moduleExports: any) =>\n  typeof moduleExports === \"object\" && Array.isArray(moduleExports)","name":"isArrayGuard","slug":"is-array-guard","parameters":[],"description":"DEPRECATED","returnType":{"rawType":"any","typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":false,"isEnumLiteral":false},"maxIndentationDepth":1,"relativePathFromProjectRoot":"/tools/control-fs/fs-util/src/deprecated.ts","srcFileId":"/deprecated","operationFolderName":"fs-util","relativeFilePathFromSrc":"/deprecated.ts","relativeOperationBasePathFromProjectRoot":"/tools/control-fs/fs-util","operationName":"fs-util","size":{"characters":102,"lines":2,"bytes":102,"bytesPerCharacter":1,"charactersPerfLine":51,"linesPerFile":2,"numberOfFiles":1}},{"id":"RpaFLsvQbDAPHjsh","commentsInside":[],"rawText":" (\n  folderPath: Path,\n  onlyInCurrentFolder?: boolean\n): Markdown[] => {\n  //1. find all md file paths recursively in this folder, but don't look in node_modules\n\n  const fileFolderPaths = findFilesRecursively({\n    basePath: folderPath,\n    match: (_, extension) => extension === \"md\",\n    onlyInCurrentFolder,\n  });\n\n  const filePaths = fileFolderPaths.map((x) => x.path);\n  const mdArray = filePaths.map(parseMd);\n  return mdArray;\n}","name":"findAllMd","slug":"find-all-md","parameters":[],"description":"DEPRECATED: `k-explore` can be used","returnType":{"rawType":"import(\"/Users/king/King/tools/control-fs/fs-util/src/types\").Markdown[]","typeCoverage":0,"isArray":true,"isEnum":false,"isObject":true,"isPrimitive":false,"isEnumLiteral":false},"maxIndentationDepth":2,"relativePathFromProjectRoot":"/tools/control-fs/fs-util/src/deprecated.ts","srcFileId":"/deprecated","operationFolderName":"fs-util","relativeFilePathFromSrc":"/deprecated.ts","relativeOperationBasePathFromProjectRoot":"/tools/control-fs/fs-util","operationName":"fs-util","size":{"characters":472,"lines":16,"bytes":472,"bytesPerCharacter":1,"charactersPerfLine":29.5,"linesPerFile":16,"numberOfFiles":1}},{"id":"CWzxnnOOAjVlvhLe","commentsInside":[],"rawText":" ({\n  match,\n  basePath,\n  relativePath,\n  onlyInSubFolders,\n  onlyInCurrentFolder,\n}: {\n  match: (fileName: string, extension: string) => boolean;\n  basePath: Path;\n  relativePath?: string;\n  /**\n   * only find files in folders of this location, not in this location itself\n   */\n  onlyInSubFolders?: boolean;\n  onlyInCurrentFolder?: boolean;\n}): FolderPath[] => {\n  const location = relativePath ? path.join(basePath, relativePath) : basePath;\n\n  const contents = readdirSync(location, { withFileTypes: true });\n\n  return contents.reduce((all, fileOrFolder) => {\n    if (fileOrFolder.isDirectory() && !onlyInCurrentFolder) {\n      const folder = fileOrFolder;\n      const thisFolder = findFilesRecursively({\n        basePath,\n        relativePath: relativePath\n          ? `${relativePath}/${folder.name}`\n          : folder.name,\n        match,\n        onlyInSubFolders: false,\n      });\n      const allWithThisFolder = all.concat(thisFolder);\n      return allWithThisFolder;\n    } else if (!onlyInSubFolders) {\n      const file = fileOrFolder;\n      const filePath: Path = path.join(location, file.name);\n      const allWithMatchedFile = match(\n        withoutExtension(file.name),\n        path.parse(file.name).ext\n      )\n        ? all.concat([{ relativeFolder: relativePath, path: filePath }])\n        : all;\n      return allWithMatchedFile;\n    }\n    return all;\n  }, [] as FolderPath[]);\n}","name":"findFilesRecursively","slug":"find-files-recursively","parameters":[],"description":"DEPRECATED: in favour of `explore` from \"k-explore\"","returnType":{"rawType":"import(\"/Users/king/King/tools/control-fs/fs-util/src/types\").FolderPath[]","typeDefinition":{"optional":false,"type":"array","items":{"type":"object","properties":{"relativeFolder":{"type":"string","allOf":[{"transform":["trim"]},{"minLength":1}]},"path":{"type":"string","allOf":[{"transform":["trim"]},{"minLength":1}]}},"required":["path"]}},"typeCoverage":0,"isArray":true,"isEnum":false,"isObject":true,"isPrimitive":false,"isEnumLiteral":false,"simplifiedSchema":{"items":[{"schema":{"properties":[{"name":"relativeFolder","required":false,"schema":{"type":"string"}},{"name":"path","required":true,"schema":{"type":"string"}}],"type":"object"},"name":null}],"type":"array"}},"maxIndentationDepth":5,"relativePathFromProjectRoot":"/tools/control-fs/fs-util/src/deprecated.ts","srcFileId":"/deprecated","operationFolderName":"fs-util","relativeFilePathFromSrc":"/deprecated.ts","relativeOperationBasePathFromProjectRoot":"/tools/control-fs/fs-util","operationName":"fs-util","size":{"characters":1449,"lines":47,"bytes":1449,"bytesPerCharacter":1,"charactersPerfLine":30.829787234042552,"linesPerFile":47,"numberOfFiles":1}}]