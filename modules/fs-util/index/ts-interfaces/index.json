[{"id":"JfsXEcFOTliuHNxp","name":"FsUtilTypes","slug":"fs-util-types","relativePathFromProjectRoot":"/tools/control-fs/fs-util/src/index.ts","srcFileId":"/index","operationFolderName":"fs-util","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/control-fs/fs-util","operationName":"fs-util","rawText":"\n\n\nexport type FsUtilTypes = { PathLike: PathLike,Stats: Stats,Fs: Fs,UnixTimestamp: UnixTimestamp,MarkdownContent: MarkdownContent,Markdown: Markdown,Path: Path,FolderPath: FolderPath };","extensions":[],"description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"PathLike":{"$ref":"#/definitions/PathLike"},"Stats":{"$ref":"#/definitions/Stats"},"Fs":{"$ref":"#/definitions/Fs"},"UnixTimestamp":{"$ref":"#/definitions/UnixTimestamp"},"MarkdownContent":{"$ref":"#/definitions/MarkdownContent"},"Markdown":{"$ref":"#/definitions/Markdown"},"Path":{"$ref":"#/definitions/Path"},"FolderPath":{"$ref":"#/definitions/FolderPath"}},"required":["PathLike","Stats","Fs","UnixTimestamp","MarkdownContent","Markdown","Path","FolderPath"],"additionalProperties":false},"simplifiedSchema":{"properties":[{"name":"PathLike","required":true,"schema":{"description":"Valid types for path values in \"fs\".","properties":[],"type":"object"}},{"name":"Stats","required":true,"schema":{"description":"A `fs.Stats` object provides information about a file.\n\nObjects returned from  {@link  stat } ,  {@link  lstat }  and  {@link  fstat }  and their synchronous counterparts are of this type. If `bigint` in the `options` passed to those methods is true, the numeric values will be `bigint` instead of `number`, and the object will contain additional nanosecond-precision properties suffixed with `Ns`.\n\n```console Stats {   dev: 2114,   ino: 48064969,   mode: 33188,   nlink: 1,   uid: 85,   gid: 100,   rdev: 0,   size: 527,   blksize: 4096,   blocks: 8,   atimeMs: 1318289051000.1,   mtimeMs: 1318289051000.1,   ctimeMs: 1318289051000.1,   birthtimeMs: 1318289051000.1,   atime: Mon, 10 Oct 2011 23:24:11 GMT,   mtime: Mon, 10 Oct 2011 23:24:11 GMT,   ctime: Mon, 10 Oct 2011 23:24:11 GMT,   birthtime: Mon, 10 Oct 2011 23:24:11 GMT } ```\n\n`bigint` version:\n\n```console BigIntStats {   dev: 2114n,   ino: 48064969n,   mode: 33188n,   nlink: 1n,   uid: 85n,   gid: 100n,   rdev: 0n,   size: 527n,   blksize: 4096n,   blocks: 8n,   atimeMs: 1318289051000n,   mtimeMs: 1318289051000n,   ctimeMs: 1318289051000n,   birthtimeMs: 1318289051000n,   atimeNs: 1318289051000000000n,   mtimeNs: 1318289051000000000n,   ctimeNs: 1318289051000000000n,   birthtimeNs: 1318289051000000000n,   atime: Mon, 10 Oct 2011 23:24:11 GMT,   mtime: Mon, 10 Oct 2011 23:24:11 GMT,   ctime: Mon, 10 Oct 2011 23:24:11 GMT,   birthtime: Mon, 10 Oct 2011 23:24:11 GMT } ```","properties":[{"name":"dev","required":true,"schema":{"type":"number"}},{"name":"ino","required":true,"schema":{"type":"number"}},{"name":"mode","required":true,"schema":{"type":"number"}},{"name":"nlink","required":true,"schema":{"type":"number"}},{"name":"uid","required":true,"schema":{"type":"number"}},{"name":"gid","required":true,"schema":{"type":"number"}},{"name":"rdev","required":true,"schema":{"type":"number"}},{"name":"size","required":true,"schema":{"type":"number"}},{"name":"blksize","required":true,"schema":{"type":"number"}},{"name":"blocks","required":true,"schema":{"type":"number"}},{"name":"atimeMs","required":true,"schema":{"type":"number"}},{"name":"mtimeMs","required":true,"schema":{"type":"number"}},{"name":"ctimeMs","required":true,"schema":{"type":"number"}},{"name":"birthtimeMs","required":true,"schema":{"type":"number"}},{"name":"atime","required":true,"schema":{"type":"string"}},{"name":"mtime","required":true,"schema":{"type":"string"}},{"name":"ctime","required":true,"schema":{"type":"string"}},{"name":"birthtime","required":true,"schema":{"type":"string"}}],"type":"object"}},{"name":"Fs","required":true,"schema":{"description":"all handy Fs types","properties":[{"name":"PathLike","required":true,"schema":{"description":"Valid types for path values in \"fs\".","properties":[],"type":"object"}},{"name":"Stats","required":true,"schema":{"description":"A `fs.Stats` object provides information about a file.\n\nObjects returned from  {@link  stat } ,  {@link  lstat }  and  {@link  fstat }  and their synchronous counterparts are of this type. If `bigint` in the `options` passed to those methods is true, the numeric values will be `bigint` instead of `number`, and the object will contain additional nanosecond-precision properties suffixed with `Ns`.\n\n```console Stats {   dev: 2114,   ino: 48064969,   mode: 33188,   nlink: 1,   uid: 85,   gid: 100,   rdev: 0,   size: 527,   blksize: 4096,   blocks: 8,   atimeMs: 1318289051000.1,   mtimeMs: 1318289051000.1,   ctimeMs: 1318289051000.1,   birthtimeMs: 1318289051000.1,   atime: Mon, 10 Oct 2011 23:24:11 GMT,   mtime: Mon, 10 Oct 2011 23:24:11 GMT,   ctime: Mon, 10 Oct 2011 23:24:11 GMT,   birthtime: Mon, 10 Oct 2011 23:24:11 GMT } ```\n\n`bigint` version:\n\n```console BigIntStats {   dev: 2114n,   ino: 48064969n,   mode: 33188n,   nlink: 1n,   uid: 85n,   gid: 100n,   rdev: 0n,   size: 527n,   blksize: 4096n,   blocks: 8n,   atimeMs: 1318289051000n,   mtimeMs: 1318289051000n,   ctimeMs: 1318289051000n,   birthtimeMs: 1318289051000n,   atimeNs: 1318289051000000000n,   mtimeNs: 1318289051000000000n,   ctimeNs: 1318289051000000000n,   birthtimeNs: 1318289051000000000n,   atime: Mon, 10 Oct 2011 23:24:11 GMT,   mtime: Mon, 10 Oct 2011 23:24:11 GMT,   ctime: Mon, 10 Oct 2011 23:24:11 GMT,   birthtime: Mon, 10 Oct 2011 23:24:11 GMT } ```","properties":[{"name":"dev","required":true,"schema":{"type":"number"}},{"name":"ino","required":true,"schema":{"type":"number"}},{"name":"mode","required":true,"schema":{"type":"number"}},{"name":"nlink","required":true,"schema":{"type":"number"}},{"name":"uid","required":true,"schema":{"type":"number"}},{"name":"gid","required":true,"schema":{"type":"number"}},{"name":"rdev","required":true,"schema":{"type":"number"}},{"name":"size","required":true,"schema":{"type":"number"}},{"name":"blksize","required":true,"schema":{"type":"number"}},{"name":"blocks","required":true,"schema":{"type":"number"}},{"name":"atimeMs","required":true,"schema":{"type":"number"}},{"name":"mtimeMs","required":true,"schema":{"type":"number"}},{"name":"ctimeMs","required":true,"schema":{"type":"number"}},{"name":"birthtimeMs","required":true,"schema":{"type":"number"}},{"name":"atime","required":true,"schema":{"type":"string"}},{"name":"mtime","required":true,"schema":{"type":"string"}},{"name":"ctime","required":true,"schema":{"type":"string"}},{"name":"birthtime","required":true,"schema":{"type":"string"}}],"type":"object"}},{"name":"Dir","required":true,"schema":{"description":"A class representing a directory stream.\n\nCreated by  {@link  opendir } ,  {@link  opendirSync } , or `fsPromises.opendir()`.\n\n```js import { opendir } from 'fs/promises';\n\ntry {   const dir = await opendir('./');   for await (const dirent of dir)     console.log(dirent.name); } catch (err) {   console.error(err); } ```\n\nWhen using the async iterator, the `fs.Dir` object will be automatically closed after the iterator exits.","properties":[{"name":"path","required":true,"schema":{"description":"The read-only path of this directory as was provided to  {@link  opendir } , {@link  opendirSync } , or `fsPromises.opendir()`.","type":"string"}}],"type":"object"}},{"name":"Dirent","required":true,"schema":{"description":"A representation of a directory entry, which can be a file or a subdirectory within the directory, as returned by reading from an `fs.Dir`. The directory entry is a combination of the file name and file type pairs.\n\nAdditionally, when  {@link  readdir }  or  {@link  readdirSync }  is called with the `withFileTypes` option set to `true`, the resulting array is filled with `fs.Dirent` objects, rather than strings or `Buffer` s.","properties":[{"name":"name","required":true,"schema":{"description":"The file name that this `fs.Dirent` object refers to. The type of this value is determined by the `options.encoding` passed to  {@link  readdir }  or  {@link  readdirSync } .","type":"string"}}],"type":"object"}}],"type":"object"}},{"name":"UnixTimestamp","required":true,"schema":{"type":"number"}},{"name":"MarkdownContent","required":true,"schema":{"type":"string"}},{"name":"Markdown","required":true,"schema":{"properties":[{"name":"fileName","required":true,"schema":{"type":"string"}},{"name":"params","required":true,"schema":{"properties":[{"name":"title","required":false,"schema":{"type":"string"}},{"name":"author","required":false,"schema":{"type":"string"}}],"type":"object"}},{"name":"createdAt","required":true,"schema":{"type":"number"}},{"name":"updatedAt","required":true,"schema":{"type":"number"}},{"name":"modifiedAt","required":true,"schema":{"type":"number"}},{"name":"openedAt","required":true,"schema":{"type":"number"}},{"name":"content","required":true,"schema":{"type":"string"}}],"type":"object"}},{"name":"Path","required":true,"schema":{"description":"unlike PathLike, this is only a string\n\nFor now, we don't have a clear convention whether or not this string should be absolute or anything.","type":"string"}},{"name":"FolderPath","required":true,"schema":{"description":"DEPRECATED: just use ParsedPath","properties":[{"name":"relativeFolder","required":false,"schema":{"type":"string"}},{"name":"path","required":true,"schema":{"description":"unlike PathLike, this is only a string\n\nFor now, we don't have a clear convention whether or not this string should be absolute or anything.","type":"string"}}],"type":"object"}}],"type":"object"},"typeCoverage":0,"rawType":"FsUtilTypes","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"CZxjNHOJmJVdsWKd","name":"PathLike","slug":"path-like","relativePathFromProjectRoot":"/tools/control-fs/fs-util/src/index.ts","srcFileId":"/index","operationFolderName":"fs-util","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/control-fs/fs-util","operationName":"fs-util","description":"Valid types for path values in \"fs\".","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/global.Buffer"},{"$ref":"#/definitions/URL"}],"description":"Valid types for path values in \"fs\"."},"simplifiedSchema":{"description":"Valid types for path values in \"fs\".","properties":[],"type":"object"},"typeCoverage":0,"rawType":"PathLike","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"rPxthtrPFiRdqyLr","name":"global.Buffer","slug":"global-buffer","relativePathFromProjectRoot":"/tools/control-fs/fs-util/src/index.ts","srcFileId":"/index","operationFolderName":"fs-util","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/control-fs/fs-util","operationName":"fs-util","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","additionalProperties":{"type":"number"},"properties":{"BYTES_PER_ELEMENT":{"type":"number"},"buffer":{"type":"object","properties":{"byteLength":{"type":"number"}},"required":["byteLength"],"additionalProperties":false},"byteLength":{"type":"number"},"byteOffset":{"type":"number"},"length":{"type":"number"}},"required":["BYTES_PER_ELEMENT","buffer","byteLength","byteOffset","length"]},"simplifiedSchema":{"properties":[{"name":"BYTES_PER_ELEMENT","required":true,"schema":{"type":"number"}},{"name":"buffer","required":true,"schema":{"properties":[{"name":"byteLength","required":true,"schema":{"type":"number"}}],"type":"object"}},{"name":"byteLength","required":true,"schema":{"type":"number"}},{"name":"byteOffset","required":true,"schema":{"type":"number"}},{"name":"length","required":true,"schema":{"type":"number"}}],"type":"object"},"typeCoverage":0,"rawType":"global.Buffer","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"mWNCQOeuPHDjGTFS","name":"URL","slug":"url","relativePathFromProjectRoot":"/tools/control-fs/fs-util/src/index.ts","srcFileId":"/index","operationFolderName":"fs-util","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/control-fs/fs-util","operationName":"fs-util","description":"Browser-compatible `URL` class, implemented by following the WHATWG URL Standard. [Examples of parsed URLs](https://url.spec.whatwg.org/#example-url-parsing) may be found in the Standard itself. The `URL` class is also available on the global object.\n\nIn accordance with browser conventions, all properties of `URL` objects are implemented as getters and setters on the class prototype, rather than as data properties on the object itself. Thus, unlike `legacy urlObject` s, using the `delete` keyword on any properties of `URL` objects (e.g. `delete myURL.protocol`, `delete myURL.pathname`, etc) has no effect but will still return `true`.","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"hash":{"type":"string","description":"Gets and sets the fragment portion of the URL.\n\n```js const myURL = new URL('https://example.org/foo#bar'); console.log(myURL.hash); // Prints #bar\n\nmyURL.hash = 'baz'; console.log(myURL.href); // Prints https://example.org/foo#baz ```\n\nInvalid URL characters included in the value assigned to the `hash` property are `percent-encoded`. The selection of which characters to percent-encode may vary somewhat from what the  {@link  parse }  and  {@link  format }  methods would produce."},"host":{"type":"string","description":"Gets and sets the host portion of the URL.\n\n```js const myURL = new URL('https://example.org:81/foo'); console.log(myURL.host); // Prints example.org:81\n\nmyURL.host = 'example.com:82'; console.log(myURL.href); // Prints https://example.com:82/foo ```\n\nInvalid host values assigned to the `host` property are ignored."},"hostname":{"type":"string","description":"Gets and sets the host name portion of the URL. The key difference between`url.host` and `url.hostname` is that `url.hostname` does _not_ include the port.\n\n```js const myURL = new URL('https://example.org:81/foo'); console.log(myURL.hostname); // Prints example.org\n\n// Setting the hostname does not change the port myURL.hostname = 'example.com:82'; console.log(myURL.href); // Prints https://example.com:81/foo\n\n// Use myURL.host to change the hostname and port myURL.host = 'example.org:82'; console.log(myURL.href); // Prints https://example.org:82/foo ```\n\nInvalid host name values assigned to the `hostname` property are ignored."},"href":{"type":"string","description":"Gets and sets the serialized URL.\n\n```js const myURL = new URL('https://example.org/foo'); console.log(myURL.href); // Prints https://example.org/foo\n\nmyURL.href = 'https://example.com/bar'; console.log(myURL.href); // Prints https://example.com/bar ```\n\nGetting the value of the `href` property is equivalent to calling  {@link  toString } .\n\nSetting the value of this property to a new value is equivalent to creating a new `URL` object using `new URL(value)`. Each of the `URL`object's properties will be modified.\n\nIf the value assigned to the `href` property is not a valid URL, a `TypeError`will be thrown."},"origin":{"type":"string","description":"Gets the read-only serialization of the URL's origin.\n\n```js const myURL = new URL('https://example.org/foo/bar?baz'); console.log(myURL.origin); // Prints https://example.org ```\n\n```js const idnURL = new URL('https://測試'); console.log(idnURL.origin); // Prints https://xn--g6w251d\n\nconsole.log(idnURL.hostname); // Prints xn--g6w251d ```"},"password":{"type":"string","description":"Gets and sets the password portion of the URL.\n\n```js const myURL = new URL('https://abc:xyz@example.com'); console.log(myURL.password); // Prints xyz\n\nmyURL.password = '123'; console.log(myURL.href); // Prints https://abc:123@example.com ```\n\nInvalid URL characters included in the value assigned to the `password` property are `percent-encoded`. The selection of which characters to percent-encode may vary somewhat from what the  {@link  parse }  and  {@link  format }  methods would produce."},"pathname":{"type":"string","description":"Gets and sets the path portion of the URL.\n\n```js const myURL = new URL('https://example.org/abc/xyz?123'); console.log(myURL.pathname); // Prints /abc/xyz\n\nmyURL.pathname = '/abcdef'; console.log(myURL.href); // Prints https://example.org/abcdef?123 ```\n\nInvalid URL characters included in the value assigned to the `pathname`property are `percent-encoded`. The selection of which characters to percent-encode may vary somewhat from what the  {@link  parse }  and  {@link  format }  methods would produce."},"port":{"type":"string","description":"Gets and sets the port portion of the URL.\n\nThe port value may be a number or a string containing a number in the range`0` to `65535` (inclusive). Setting the value to the default port of the`URL` objects given `protocol` will result in the `port` value becoming the empty string (`''`).\n\nThe port value can be an empty string in which case the port depends on the protocol/scheme:\n\n<omitted>\n\nUpon assigning a value to the port, the value will first be converted to a string using `.toString()`.\n\nIf that string is invalid but it begins with a number, the leading number is assigned to `port`. If the number lies outside the range denoted above, it is ignored.\n\n```js const myURL = new URL('https://example.org:8888'); console.log(myURL.port); // Prints 8888\n\n// Default ports are automatically transformed to the empty string // (HTTPS protocol's default port is 443) myURL.port = '443'; console.log(myURL.port); // Prints the empty string console.log(myURL.href); // Prints https://example.org/\n\nmyURL.port = 1234; console.log(myURL.port); // Prints 1234 console.log(myURL.href); // Prints https://example.org:1234/\n\n// Completely invalid port strings are ignored myURL.port = 'abcd'; console.log(myURL.port); // Prints 1234\n\n// Leading numbers are treated as a port number myURL.port = '5678abcd'; console.log(myURL.port); // Prints 5678\n\n// Non-integers are truncated myURL.port = 1234.5678; console.log(myURL.port); // Prints 1234\n\n// Out-of-range numbers which are not represented in scientific notation // will be ignored. myURL.port = 1e10; // 10000000000, will be range-checked as described below console.log(myURL.port); // Prints 1234 ```\n\nNumbers which contain a decimal point, such as floating-point numbers or numbers in scientific notation, are not an exception to this rule. Leading numbers up to the decimal point will be set as the URL's port, assuming they are valid:\n\n```js myURL.port = 4.567e21; console.log(myURL.port); // Prints 4 (because it is the leading number in the string '4.567e21') ```"},"protocol":{"type":"string","description":"Gets and sets the protocol portion of the URL.\n\n```js const myURL = new URL('https://example.org'); console.log(myURL.protocol); // Prints https:\n\nmyURL.protocol = 'ftp'; console.log(myURL.href); // Prints ftp://example.org/ ```\n\nInvalid URL protocol values assigned to the `protocol` property are ignored."},"search":{"type":"string","description":"Gets and sets the serialized query portion of the URL.\n\n```js const myURL = new URL('https://example.org/abc?123'); console.log(myURL.search); // Prints ?123\n\nmyURL.search = 'abc=xyz'; console.log(myURL.href); // Prints https://example.org/abc?abc=xyz ```\n\nAny invalid URL characters appearing in the value assigned the `search`property will be `percent-encoded`. The selection of which characters to percent-encode may vary somewhat from what the  {@link  parse }  and  {@link  format }  methods would produce."},"searchParams":{"$ref":"#/definitions/URLSearchParams","description":"Gets the `URLSearchParams` object representing the query parameters of the URL. This property is read-only but the `URLSearchParams` object it provides can be used to mutate the URL instance; to replace the entirety of query parameters of the URL, use the  {@link  search }  setter. See `URLSearchParams` documentation for details.\n\nUse care when using `.searchParams` to modify the `URL` because, per the WHATWG specification, the `URLSearchParams` object uses different rules to determine which characters to percent-encode. For instance, the `URL` object will not percent encode the ASCII tilde (`~`) character, while `URLSearchParams` will always encode it:\n\n```js const myUrl = new URL('https://example.org/abc?foo=~bar');\n\nconsole.log(myUrl.search);  // prints ?foo=~bar\n\n// Modify the URL via searchParams... myUrl.searchParams.sort();\n\nconsole.log(myUrl.search);  // prints ?foo=%7Ebar ```"},"username":{"type":"string","description":"Gets and sets the username portion of the URL.\n\n```js const myURL = new URL('https://abc:xyz@example.com'); console.log(myURL.username); // Prints abc\n\nmyURL.username = '123'; console.log(myURL.href); // Prints https://123:xyz@example.com/ ```\n\nAny invalid URL characters appearing in the value assigned the `username`property will be `percent-encoded`. The selection of which characters to percent-encode may vary somewhat from what the  {@link  parse }  and  {@link  format }  methods would produce."}},"required":["hash","host","hostname","href","origin","password","pathname","port","protocol","search","searchParams","username"],"additionalProperties":false,"description":"Browser-compatible `URL` class, implemented by following the WHATWG URL Standard. [Examples of parsed URLs](https://url.spec.whatwg.org/#example-url-parsing) may be found in the Standard itself. The `URL` class is also available on the global object.\n\nIn accordance with browser conventions, all properties of `URL` objects are implemented as getters and setters on the class prototype, rather than as data properties on the object itself. Thus, unlike `legacy urlObject` s, using the `delete` keyword on any properties of `URL` objects (e.g. `delete myURL.protocol`, `delete myURL.pathname`, etc) has no effect but will still return `true`."},"simplifiedSchema":{"description":"Browser-compatible `URL` class, implemented by following the WHATWG URL Standard. [Examples of parsed URLs](https://url.spec.whatwg.org/#example-url-parsing) may be found in the Standard itself. The `URL` class is also available on the global object.\n\nIn accordance with browser conventions, all properties of `URL` objects are implemented as getters and setters on the class prototype, rather than as data properties on the object itself. Thus, unlike `legacy urlObject` s, using the `delete` keyword on any properties of `URL` objects (e.g. `delete myURL.protocol`, `delete myURL.pathname`, etc) has no effect but will still return `true`.","properties":[{"name":"hash","required":true,"schema":{"description":"Gets and sets the fragment portion of the URL.\n\n```js const myURL = new URL('https://example.org/foo#bar'); console.log(myURL.hash); // Prints #bar\n\nmyURL.hash = 'baz'; console.log(myURL.href); // Prints https://example.org/foo#baz ```\n\nInvalid URL characters included in the value assigned to the `hash` property are `percent-encoded`. The selection of which characters to percent-encode may vary somewhat from what the  {@link  parse }  and  {@link  format }  methods would produce.","type":"string"}},{"name":"host","required":true,"schema":{"description":"Gets and sets the host portion of the URL.\n\n```js const myURL = new URL('https://example.org:81/foo'); console.log(myURL.host); // Prints example.org:81\n\nmyURL.host = 'example.com:82'; console.log(myURL.href); // Prints https://example.com:82/foo ```\n\nInvalid host values assigned to the `host` property are ignored.","type":"string"}},{"name":"hostname","required":true,"schema":{"description":"Gets and sets the host name portion of the URL. The key difference between`url.host` and `url.hostname` is that `url.hostname` does _not_ include the port.\n\n```js const myURL = new URL('https://example.org:81/foo'); console.log(myURL.hostname); // Prints example.org\n\n// Setting the hostname does not change the port myURL.hostname = 'example.com:82'; console.log(myURL.href); // Prints https://example.com:81/foo\n\n// Use myURL.host to change the hostname and port myURL.host = 'example.org:82'; console.log(myURL.href); // Prints https://example.org:82/foo ```\n\nInvalid host name values assigned to the `hostname` property are ignored.","type":"string"}},{"name":"href","required":true,"schema":{"description":"Gets and sets the serialized URL.\n\n```js const myURL = new URL('https://example.org/foo'); console.log(myURL.href); // Prints https://example.org/foo\n\nmyURL.href = 'https://example.com/bar'; console.log(myURL.href); // Prints https://example.com/bar ```\n\nGetting the value of the `href` property is equivalent to calling  {@link  toString } .\n\nSetting the value of this property to a new value is equivalent to creating a new `URL` object using `new URL(value)`. Each of the `URL`object's properties will be modified.\n\nIf the value assigned to the `href` property is not a valid URL, a `TypeError`will be thrown.","type":"string"}},{"name":"origin","required":true,"schema":{"description":"Gets the read-only serialization of the URL's origin.\n\n```js const myURL = new URL('https://example.org/foo/bar?baz'); console.log(myURL.origin); // Prints https://example.org ```\n\n```js const idnURL = new URL('https://測試'); console.log(idnURL.origin); // Prints https://xn--g6w251d\n\nconsole.log(idnURL.hostname); // Prints xn--g6w251d ```","type":"string"}},{"name":"password","required":true,"schema":{"description":"Gets and sets the password portion of the URL.\n\n```js const myURL = new URL('https://abc:xyz@example.com'); console.log(myURL.password); // Prints xyz\n\nmyURL.password = '123'; console.log(myURL.href); // Prints https://abc:123@example.com ```\n\nInvalid URL characters included in the value assigned to the `password` property are `percent-encoded`. The selection of which characters to percent-encode may vary somewhat from what the  {@link  parse }  and  {@link  format }  methods would produce.","type":"string"}},{"name":"pathname","required":true,"schema":{"description":"Gets and sets the path portion of the URL.\n\n```js const myURL = new URL('https://example.org/abc/xyz?123'); console.log(myURL.pathname); // Prints /abc/xyz\n\nmyURL.pathname = '/abcdef'; console.log(myURL.href); // Prints https://example.org/abcdef?123 ```\n\nInvalid URL characters included in the value assigned to the `pathname`property are `percent-encoded`. The selection of which characters to percent-encode may vary somewhat from what the  {@link  parse }  and  {@link  format }  methods would produce.","type":"string"}},{"name":"port","required":true,"schema":{"description":"Gets and sets the port portion of the URL.\n\nThe port value may be a number or a string containing a number in the range`0` to `65535` (inclusive). Setting the value to the default port of the`URL` objects given `protocol` will result in the `port` value becoming the empty string (`''`).\n\nThe port value can be an empty string in which case the port depends on the protocol/scheme:\n\n<omitted>\n\nUpon assigning a value to the port, the value will first be converted to a string using `.toString()`.\n\nIf that string is invalid but it begins with a number, the leading number is assigned to `port`. If the number lies outside the range denoted above, it is ignored.\n\n```js const myURL = new URL('https://example.org:8888'); console.log(myURL.port); // Prints 8888\n\n// Default ports are automatically transformed to the empty string // (HTTPS protocol's default port is 443) myURL.port = '443'; console.log(myURL.port); // Prints the empty string console.log(myURL.href); // Prints https://example.org/\n\nmyURL.port = 1234; console.log(myURL.port); // Prints 1234 console.log(myURL.href); // Prints https://example.org:1234/\n\n// Completely invalid port strings are ignored myURL.port = 'abcd'; console.log(myURL.port); // Prints 1234\n\n// Leading numbers are treated as a port number myURL.port = '5678abcd'; console.log(myURL.port); // Prints 5678\n\n// Non-integers are truncated myURL.port = 1234.5678; console.log(myURL.port); // Prints 1234\n\n// Out-of-range numbers which are not represented in scientific notation // will be ignored. myURL.port = 1e10; // 10000000000, will be range-checked as described below console.log(myURL.port); // Prints 1234 ```\n\nNumbers which contain a decimal point, such as floating-point numbers or numbers in scientific notation, are not an exception to this rule. Leading numbers up to the decimal point will be set as the URL's port, assuming they are valid:\n\n```js myURL.port = 4.567e21; console.log(myURL.port); // Prints 4 (because it is the leading number in the string '4.567e21') ```","type":"string"}},{"name":"protocol","required":true,"schema":{"description":"Gets and sets the protocol portion of the URL.\n\n```js const myURL = new URL('https://example.org'); console.log(myURL.protocol); // Prints https:\n\nmyURL.protocol = 'ftp'; console.log(myURL.href); // Prints ftp://example.org/ ```\n\nInvalid URL protocol values assigned to the `protocol` property are ignored.","type":"string"}},{"name":"search","required":true,"schema":{"description":"Gets and sets the serialized query portion of the URL.\n\n```js const myURL = new URL('https://example.org/abc?123'); console.log(myURL.search); // Prints ?123\n\nmyURL.search = 'abc=xyz'; console.log(myURL.href); // Prints https://example.org/abc?abc=xyz ```\n\nAny invalid URL characters appearing in the value assigned the `search`property will be `percent-encoded`. The selection of which characters to percent-encode may vary somewhat from what the  {@link  parse }  and  {@link  format }  methods would produce.","type":"string"}},{"name":"searchParams","required":true,"schema":{"description":"The `URLSearchParams` API provides read and write access to the query of a`URL`. The `URLSearchParams` class can also be used standalone with one of the four following constructors. The `URLSearchParams` class is also available on the global object.\n\nThe WHATWG `URLSearchParams` interface and the `querystring` module have similar purpose, but the purpose of the `querystring` module is more general, as it allows the customization of delimiter characters (`&#x26;` and `=`). On the other hand, this API is designed purely for URL query strings.\n\n```js const myURL = new URL('https://example.org/?abc=123'); console.log(myURL.searchParams.get('abc')); // Prints 123\n\nmyURL.searchParams.append('abc', 'xyz'); console.log(myURL.href); // Prints https://example.org/?abc=123&#x26;abc=xyz\n\nmyURL.searchParams.delete('abc'); myURL.searchParams.set('a', 'b'); console.log(myURL.href); // Prints https://example.org/?a=b\n\nconst newSearchParams = new URLSearchParams(myURL.searchParams); // The above is equivalent to // const newSearchParams = new URLSearchParams(myURL.search);\n\nnewSearchParams.append('a', 'c'); console.log(myURL.href); // Prints https://example.org/?a=b console.log(newSearchParams.toString()); // Prints a=b&#x26;a=c\n\n// newSearchParams.toString() is implicitly called myURL.search = newSearchParams; console.log(myURL.href); // Prints https://example.org/?a=b&#x26;a=c newSearchParams.delete('a'); console.log(myURL.href); // Prints https://example.org/?a=b&#x26;a=c ```","properties":[],"type":"object"}},{"name":"username","required":true,"schema":{"description":"Gets and sets the username portion of the URL.\n\n```js const myURL = new URL('https://abc:xyz@example.com'); console.log(myURL.username); // Prints abc\n\nmyURL.username = '123'; console.log(myURL.href); // Prints https://123:xyz@example.com/ ```\n\nAny invalid URL characters appearing in the value assigned the `username`property will be `percent-encoded`. The selection of which characters to percent-encode may vary somewhat from what the  {@link  parse }  and  {@link  format }  methods would produce.","type":"string"}}],"type":"object"},"typeCoverage":0,"rawType":"URL","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"YuyrihWGpMbEwzyI","name":"URLSearchParams","slug":"urlsearch-params","relativePathFromProjectRoot":"/tools/control-fs/fs-util/src/index.ts","srcFileId":"/index","operationFolderName":"fs-util","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/control-fs/fs-util","operationName":"fs-util","description":"The `URLSearchParams` API provides read and write access to the query of a`URL`. The `URLSearchParams` class can also be used standalone with one of the four following constructors. The `URLSearchParams` class is also available on the global object.\n\nThe WHATWG `URLSearchParams` interface and the `querystring` module have similar purpose, but the purpose of the `querystring` module is more general, as it allows the customization of delimiter characters (`&#x26;` and `=`). On the other hand, this API is designed purely for URL query strings.\n\n```js const myURL = new URL('https://example.org/?abc=123'); console.log(myURL.searchParams.get('abc')); // Prints 123\n\nmyURL.searchParams.append('abc', 'xyz'); console.log(myURL.href); // Prints https://example.org/?abc=123&#x26;abc=xyz\n\nmyURL.searchParams.delete('abc'); myURL.searchParams.set('a', 'b'); console.log(myURL.href); // Prints https://example.org/?a=b\n\nconst newSearchParams = new URLSearchParams(myURL.searchParams); // The above is equivalent to // const newSearchParams = new URLSearchParams(myURL.search);\n\nnewSearchParams.append('a', 'c'); console.log(myURL.href); // Prints https://example.org/?a=b console.log(newSearchParams.toString()); // Prints a=b&#x26;a=c\n\nnewSearchParams.toString() is implicitly called myURL.search = newSearchParams; console.log(myURL.href); // Prints https://example.org/?a=b&#x26;a=c newSearchParams.delete('a'); console.log(myURL.href); // Prints https://example.org/?a=b&#x26;a=c ```","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","additionalProperties":false,"properties":{},"description":"The `URLSearchParams` API provides read and write access to the query of a`URL`. The `URLSearchParams` class can also be used standalone with one of the four following constructors. The `URLSearchParams` class is also available on the global object.\n\nThe WHATWG `URLSearchParams` interface and the `querystring` module have similar purpose, but the purpose of the `querystring` module is more general, as it allows the customization of delimiter characters (`&#x26;` and `=`). On the other hand, this API is designed purely for URL query strings.\n\n```js const myURL = new URL('https://example.org/?abc=123'); console.log(myURL.searchParams.get('abc')); // Prints 123\n\nmyURL.searchParams.append('abc', 'xyz'); console.log(myURL.href); // Prints https://example.org/?abc=123&#x26;abc=xyz\n\nmyURL.searchParams.delete('abc'); myURL.searchParams.set('a', 'b'); console.log(myURL.href); // Prints https://example.org/?a=b\n\nconst newSearchParams = new URLSearchParams(myURL.searchParams); // The above is equivalent to // const newSearchParams = new URLSearchParams(myURL.search);\n\nnewSearchParams.append('a', 'c'); console.log(myURL.href); // Prints https://example.org/?a=b console.log(newSearchParams.toString()); // Prints a=b&#x26;a=c\n\n// newSearchParams.toString() is implicitly called myURL.search = newSearchParams; console.log(myURL.href); // Prints https://example.org/?a=b&#x26;a=c newSearchParams.delete('a'); console.log(myURL.href); // Prints https://example.org/?a=b&#x26;a=c ```"},"simplifiedSchema":{"description":"The `URLSearchParams` API provides read and write access to the query of a`URL`. The `URLSearchParams` class can also be used standalone with one of the four following constructors. The `URLSearchParams` class is also available on the global object.\n\nThe WHATWG `URLSearchParams` interface and the `querystring` module have similar purpose, but the purpose of the `querystring` module is more general, as it allows the customization of delimiter characters (`&#x26;` and `=`). On the other hand, this API is designed purely for URL query strings.\n\n```js const myURL = new URL('https://example.org/?abc=123'); console.log(myURL.searchParams.get('abc')); // Prints 123\n\nmyURL.searchParams.append('abc', 'xyz'); console.log(myURL.href); // Prints https://example.org/?abc=123&#x26;abc=xyz\n\nmyURL.searchParams.delete('abc'); myURL.searchParams.set('a', 'b'); console.log(myURL.href); // Prints https://example.org/?a=b\n\nconst newSearchParams = new URLSearchParams(myURL.searchParams); // The above is equivalent to // const newSearchParams = new URLSearchParams(myURL.search);\n\nnewSearchParams.append('a', 'c'); console.log(myURL.href); // Prints https://example.org/?a=b console.log(newSearchParams.toString()); // Prints a=b&#x26;a=c\n\n// newSearchParams.toString() is implicitly called myURL.search = newSearchParams; console.log(myURL.href); // Prints https://example.org/?a=b&#x26;a=c newSearchParams.delete('a'); console.log(myURL.href); // Prints https://example.org/?a=b&#x26;a=c ```","properties":[],"type":"object"},"typeCoverage":0,"rawType":"URLSearchParams","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"mpZYKtuKHTLpnHRW","name":"Stats","slug":"stats","relativePathFromProjectRoot":"/tools/control-fs/fs-util/src/index.ts","srcFileId":"/index","operationFolderName":"fs-util","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/control-fs/fs-util","operationName":"fs-util","description":"A `fs.Stats` object provides information about a file.\n\nObjects returned from  {@link  stat } ,  {@link  lstat }  and  {@link  fstat }  and their synchronous counterparts are of this type. If `bigint` in the `options` passed to those methods is true, the numeric values will be `bigint` instead of `number`, and the object will contain additional nanosecond-precision properties suffixed with `Ns`.\n\n```console Stats {   dev: 2114,   ino: 48064969,   mode: 33188,   nlink: 1,   uid: 85,   gid: 100,   rdev: 0,   size: 527,   blksize: 4096,   blocks: 8,   atimeMs: 1318289051000.1,   mtimeMs: 1318289051000.1,   ctimeMs: 1318289051000.1,   birthtimeMs: 1318289051000.1,   atime: Mon, 10 Oct 2011 23:24:11 GMT,   mtime: Mon, 10 Oct 2011 23:24:11 GMT,   ctime: Mon, 10 Oct 2011 23:24:11 GMT,   birthtime: Mon, 10 Oct 2011 23:24:11 GMT } ```\n\n`bigint` version:\n\n```console BigIntStats {   dev: 2114n,   ino: 48064969n,   mode: 33188n,   nlink: 1n,   uid: 85n,   gid: 100n,   rdev: 0n,   size: 527n,   blksize: 4096n,   blocks: 8n,   atimeMs: 1318289051000n,   mtimeMs: 1318289051000n,   ctimeMs: 1318289051000n,   birthtimeMs: 1318289051000n,   atimeNs: 1318289051000000000n,   mtimeNs: 1318289051000000000n,   ctimeNs: 1318289051000000000n,   birthtimeNs: 1318289051000000000n,   atime: Mon, 10 Oct 2011 23:24:11 GMT,   mtime: Mon, 10 Oct 2011 23:24:11 GMT,   ctime: Mon, 10 Oct 2011 23:24:11 GMT,   birthtime: Mon, 10 Oct 2011 23:24:11 GMT } ```","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","additionalProperties":false,"properties":{"dev":{"type":"number"},"ino":{"type":"number"},"mode":{"type":"number"},"nlink":{"type":"number"},"uid":{"type":"number"},"gid":{"type":"number"},"rdev":{"type":"number"},"size":{"type":"number"},"blksize":{"type":"number"},"blocks":{"type":"number"},"atimeMs":{"type":"number"},"mtimeMs":{"type":"number"},"ctimeMs":{"type":"number"},"birthtimeMs":{"type":"number"},"atime":{"type":"string","format":"date-time"},"mtime":{"type":"string","format":"date-time"},"ctime":{"type":"string","format":"date-time"},"birthtime":{"type":"string","format":"date-time"}},"required":["atime","atimeMs","birthtime","birthtimeMs","blksize","blocks","ctime","ctimeMs","dev","gid","ino","mode","mtime","mtimeMs","nlink","rdev","size","uid"],"description":"A `fs.Stats` object provides information about a file.\n\nObjects returned from  {@link  stat } ,  {@link  lstat }  and  {@link  fstat }  and their synchronous counterparts are of this type. If `bigint` in the `options` passed to those methods is true, the numeric values will be `bigint` instead of `number`, and the object will contain additional nanosecond-precision properties suffixed with `Ns`.\n\n```console Stats {   dev: 2114,   ino: 48064969,   mode: 33188,   nlink: 1,   uid: 85,   gid: 100,   rdev: 0,   size: 527,   blksize: 4096,   blocks: 8,   atimeMs: 1318289051000.1,   mtimeMs: 1318289051000.1,   ctimeMs: 1318289051000.1,   birthtimeMs: 1318289051000.1,   atime: Mon, 10 Oct 2011 23:24:11 GMT,   mtime: Mon, 10 Oct 2011 23:24:11 GMT,   ctime: Mon, 10 Oct 2011 23:24:11 GMT,   birthtime: Mon, 10 Oct 2011 23:24:11 GMT } ```\n\n`bigint` version:\n\n```console BigIntStats {   dev: 2114n,   ino: 48064969n,   mode: 33188n,   nlink: 1n,   uid: 85n,   gid: 100n,   rdev: 0n,   size: 527n,   blksize: 4096n,   blocks: 8n,   atimeMs: 1318289051000n,   mtimeMs: 1318289051000n,   ctimeMs: 1318289051000n,   birthtimeMs: 1318289051000n,   atimeNs: 1318289051000000000n,   mtimeNs: 1318289051000000000n,   ctimeNs: 1318289051000000000n,   birthtimeNs: 1318289051000000000n,   atime: Mon, 10 Oct 2011 23:24:11 GMT,   mtime: Mon, 10 Oct 2011 23:24:11 GMT,   ctime: Mon, 10 Oct 2011 23:24:11 GMT,   birthtime: Mon, 10 Oct 2011 23:24:11 GMT } ```"},"simplifiedSchema":{"description":"A `fs.Stats` object provides information about a file.\n\nObjects returned from  {@link  stat } ,  {@link  lstat }  and  {@link  fstat }  and their synchronous counterparts are of this type. If `bigint` in the `options` passed to those methods is true, the numeric values will be `bigint` instead of `number`, and the object will contain additional nanosecond-precision properties suffixed with `Ns`.\n\n```console Stats {   dev: 2114,   ino: 48064969,   mode: 33188,   nlink: 1,   uid: 85,   gid: 100,   rdev: 0,   size: 527,   blksize: 4096,   blocks: 8,   atimeMs: 1318289051000.1,   mtimeMs: 1318289051000.1,   ctimeMs: 1318289051000.1,   birthtimeMs: 1318289051000.1,   atime: Mon, 10 Oct 2011 23:24:11 GMT,   mtime: Mon, 10 Oct 2011 23:24:11 GMT,   ctime: Mon, 10 Oct 2011 23:24:11 GMT,   birthtime: Mon, 10 Oct 2011 23:24:11 GMT } ```\n\n`bigint` version:\n\n```console BigIntStats {   dev: 2114n,   ino: 48064969n,   mode: 33188n,   nlink: 1n,   uid: 85n,   gid: 100n,   rdev: 0n,   size: 527n,   blksize: 4096n,   blocks: 8n,   atimeMs: 1318289051000n,   mtimeMs: 1318289051000n,   ctimeMs: 1318289051000n,   birthtimeMs: 1318289051000n,   atimeNs: 1318289051000000000n,   mtimeNs: 1318289051000000000n,   ctimeNs: 1318289051000000000n,   birthtimeNs: 1318289051000000000n,   atime: Mon, 10 Oct 2011 23:24:11 GMT,   mtime: Mon, 10 Oct 2011 23:24:11 GMT,   ctime: Mon, 10 Oct 2011 23:24:11 GMT,   birthtime: Mon, 10 Oct 2011 23:24:11 GMT } ```","properties":[{"name":"dev","required":true,"schema":{"type":"number"}},{"name":"ino","required":true,"schema":{"type":"number"}},{"name":"mode","required":true,"schema":{"type":"number"}},{"name":"nlink","required":true,"schema":{"type":"number"}},{"name":"uid","required":true,"schema":{"type":"number"}},{"name":"gid","required":true,"schema":{"type":"number"}},{"name":"rdev","required":true,"schema":{"type":"number"}},{"name":"size","required":true,"schema":{"type":"number"}},{"name":"blksize","required":true,"schema":{"type":"number"}},{"name":"blocks","required":true,"schema":{"type":"number"}},{"name":"atimeMs","required":true,"schema":{"type":"number"}},{"name":"mtimeMs","required":true,"schema":{"type":"number"}},{"name":"ctimeMs","required":true,"schema":{"type":"number"}},{"name":"birthtimeMs","required":true,"schema":{"type":"number"}},{"name":"atime","required":true,"schema":{"type":"string"}},{"name":"mtime","required":true,"schema":{"type":"string"}},{"name":"ctime","required":true,"schema":{"type":"string"}},{"name":"birthtime","required":true,"schema":{"type":"string"}}],"type":"object"},"typeCoverage":0,"rawType":"Stats","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"BrZbQspYweBTAykR","name":"Fs","slug":"fs","relativePathFromProjectRoot":"/tools/control-fs/fs-util/src/index.ts","srcFileId":"/index","operationFolderName":"fs-util","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/control-fs/fs-util","operationName":"fs-util","description":"all handy Fs types","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"PathLike":{"$ref":"#/definitions/PathLike"},"Stats":{"$ref":"#/definitions/Stats"},"Dir":{"$ref":"#/definitions/Dir"},"Dirent":{"$ref":"#/definitions/Dirent"}},"required":["PathLike","Stats","Dir","Dirent"],"additionalProperties":false,"description":"all handy Fs types"},"simplifiedSchema":{"description":"all handy Fs types","properties":[{"name":"PathLike","required":true,"schema":{"description":"Valid types for path values in \"fs\".","properties":[],"type":"object"}},{"name":"Stats","required":true,"schema":{"description":"A `fs.Stats` object provides information about a file.\n\nObjects returned from  {@link  stat } ,  {@link  lstat }  and  {@link  fstat }  and their synchronous counterparts are of this type. If `bigint` in the `options` passed to those methods is true, the numeric values will be `bigint` instead of `number`, and the object will contain additional nanosecond-precision properties suffixed with `Ns`.\n\n```console Stats {   dev: 2114,   ino: 48064969,   mode: 33188,   nlink: 1,   uid: 85,   gid: 100,   rdev: 0,   size: 527,   blksize: 4096,   blocks: 8,   atimeMs: 1318289051000.1,   mtimeMs: 1318289051000.1,   ctimeMs: 1318289051000.1,   birthtimeMs: 1318289051000.1,   atime: Mon, 10 Oct 2011 23:24:11 GMT,   mtime: Mon, 10 Oct 2011 23:24:11 GMT,   ctime: Mon, 10 Oct 2011 23:24:11 GMT,   birthtime: Mon, 10 Oct 2011 23:24:11 GMT } ```\n\n`bigint` version:\n\n```console BigIntStats {   dev: 2114n,   ino: 48064969n,   mode: 33188n,   nlink: 1n,   uid: 85n,   gid: 100n,   rdev: 0n,   size: 527n,   blksize: 4096n,   blocks: 8n,   atimeMs: 1318289051000n,   mtimeMs: 1318289051000n,   ctimeMs: 1318289051000n,   birthtimeMs: 1318289051000n,   atimeNs: 1318289051000000000n,   mtimeNs: 1318289051000000000n,   ctimeNs: 1318289051000000000n,   birthtimeNs: 1318289051000000000n,   atime: Mon, 10 Oct 2011 23:24:11 GMT,   mtime: Mon, 10 Oct 2011 23:24:11 GMT,   ctime: Mon, 10 Oct 2011 23:24:11 GMT,   birthtime: Mon, 10 Oct 2011 23:24:11 GMT } ```","properties":[{"name":"dev","required":true,"schema":{"type":"number"}},{"name":"ino","required":true,"schema":{"type":"number"}},{"name":"mode","required":true,"schema":{"type":"number"}},{"name":"nlink","required":true,"schema":{"type":"number"}},{"name":"uid","required":true,"schema":{"type":"number"}},{"name":"gid","required":true,"schema":{"type":"number"}},{"name":"rdev","required":true,"schema":{"type":"number"}},{"name":"size","required":true,"schema":{"type":"number"}},{"name":"blksize","required":true,"schema":{"type":"number"}},{"name":"blocks","required":true,"schema":{"type":"number"}},{"name":"atimeMs","required":true,"schema":{"type":"number"}},{"name":"mtimeMs","required":true,"schema":{"type":"number"}},{"name":"ctimeMs","required":true,"schema":{"type":"number"}},{"name":"birthtimeMs","required":true,"schema":{"type":"number"}},{"name":"atime","required":true,"schema":{"type":"string"}},{"name":"mtime","required":true,"schema":{"type":"string"}},{"name":"ctime","required":true,"schema":{"type":"string"}},{"name":"birthtime","required":true,"schema":{"type":"string"}}],"type":"object"}},{"name":"Dir","required":true,"schema":{"description":"A class representing a directory stream.\n\nCreated by  {@link  opendir } ,  {@link  opendirSync } , or `fsPromises.opendir()`.\n\n```js import { opendir } from 'fs/promises';\n\ntry {   const dir = await opendir('./');   for await (const dirent of dir)     console.log(dirent.name); } catch (err) {   console.error(err); } ```\n\nWhen using the async iterator, the `fs.Dir` object will be automatically closed after the iterator exits.","properties":[{"name":"path","required":true,"schema":{"description":"The read-only path of this directory as was provided to  {@link  opendir } , {@link  opendirSync } , or `fsPromises.opendir()`.","type":"string"}}],"type":"object"}},{"name":"Dirent","required":true,"schema":{"description":"A representation of a directory entry, which can be a file or a subdirectory within the directory, as returned by reading from an `fs.Dir`. The directory entry is a combination of the file name and file type pairs.\n\nAdditionally, when  {@link  readdir }  or  {@link  readdirSync }  is called with the `withFileTypes` option set to `true`, the resulting array is filled with `fs.Dirent` objects, rather than strings or `Buffer` s.","properties":[{"name":"name","required":true,"schema":{"description":"The file name that this `fs.Dirent` object refers to. The type of this value is determined by the `options.encoding` passed to  {@link  readdir }  or  {@link  readdirSync } .","type":"string"}}],"type":"object"}}],"type":"object"},"typeCoverage":0,"rawType":"Fs","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"GcllsXFzdHPErObl","name":"Dir","slug":"dir","relativePathFromProjectRoot":"/tools/control-fs/fs-util/src/index.ts","srcFileId":"/index","operationFolderName":"fs-util","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/control-fs/fs-util","operationName":"fs-util","description":"A class representing a directory stream.\n\nCreated by  {@link  opendir } ,  {@link  opendirSync } , or `fsPromises.opendir()`.\n\n```js import { opendir } from 'fs/promises';\n\ntry {   const dir = await opendir('./');   for await (const dirent of dir)     console.log(dirent.name); } catch (err) {   console.error(err); } ```\n\nWhen using the async iterator, the `fs.Dir` object will be automatically closed after the iterator exits.","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"path":{"type":"string","description":"The read-only path of this directory as was provided to  {@link  opendir } , {@link  opendirSync } , or `fsPromises.opendir()`."}},"required":["path"],"additionalProperties":false,"description":"A class representing a directory stream.\n\nCreated by  {@link  opendir } ,  {@link  opendirSync } , or `fsPromises.opendir()`.\n\n```js import { opendir } from 'fs/promises';\n\ntry {   const dir = await opendir('./');   for await (const dirent of dir)     console.log(dirent.name); } catch (err) {   console.error(err); } ```\n\nWhen using the async iterator, the `fs.Dir` object will be automatically closed after the iterator exits."},"simplifiedSchema":{"description":"A class representing a directory stream.\n\nCreated by  {@link  opendir } ,  {@link  opendirSync } , or `fsPromises.opendir()`.\n\n```js import { opendir } from 'fs/promises';\n\ntry {   const dir = await opendir('./');   for await (const dirent of dir)     console.log(dirent.name); } catch (err) {   console.error(err); } ```\n\nWhen using the async iterator, the `fs.Dir` object will be automatically closed after the iterator exits.","properties":[{"name":"path","required":true,"schema":{"description":"The read-only path of this directory as was provided to  {@link  opendir } , {@link  opendirSync } , or `fsPromises.opendir()`.","type":"string"}}],"type":"object"},"typeCoverage":0,"rawType":"Dir","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"TuBmOfBprTlXtvas","name":"Dirent","slug":"dirent","relativePathFromProjectRoot":"/tools/control-fs/fs-util/src/index.ts","srcFileId":"/index","operationFolderName":"fs-util","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/control-fs/fs-util","operationName":"fs-util","description":"A representation of a directory entry, which can be a file or a subdirectory within the directory, as returned by reading from an `fs.Dir`. The directory entry is a combination of the file name and file type pairs.\n\nAdditionally, when  {@link  readdir }  or  {@link  readdirSync }  is called with the `withFileTypes` option set to `true`, the resulting array is filled with `fs.Dirent` objects, rather than strings or `Buffer` s.","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"name":{"type":"string","description":"The file name that this `fs.Dirent` object refers to. The type of this value is determined by the `options.encoding` passed to  {@link  readdir }  or  {@link  readdirSync } ."}},"required":["name"],"additionalProperties":false,"description":"A representation of a directory entry, which can be a file or a subdirectory within the directory, as returned by reading from an `fs.Dir`. The directory entry is a combination of the file name and file type pairs.\n\nAdditionally, when  {@link  readdir }  or  {@link  readdirSync }  is called with the `withFileTypes` option set to `true`, the resulting array is filled with `fs.Dirent` objects, rather than strings or `Buffer` s."},"simplifiedSchema":{"description":"A representation of a directory entry, which can be a file or a subdirectory within the directory, as returned by reading from an `fs.Dir`. The directory entry is a combination of the file name and file type pairs.\n\nAdditionally, when  {@link  readdir }  or  {@link  readdirSync }  is called with the `withFileTypes` option set to `true`, the resulting array is filled with `fs.Dirent` objects, rather than strings or `Buffer` s.","properties":[{"name":"name","required":true,"schema":{"description":"The file name that this `fs.Dirent` object refers to. The type of this value is determined by the `options.encoding` passed to  {@link  readdir }  or  {@link  readdirSync } .","type":"string"}}],"type":"object"},"typeCoverage":0,"rawType":"Dirent","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"MKjWDsHHORAbKrvu","name":"UnixTimestamp","slug":"unix-timestamp","relativePathFromProjectRoot":"/tools/control-fs/fs-util/src/index.ts","srcFileId":"/index","operationFolderName":"fs-util","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/control-fs/fs-util","operationName":"fs-util","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"number"},"simplifiedSchema":{"type":"number"},"typeCoverage":0,"rawType":"UnixTimestamp","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"SdzfLBtEJEzlNNXq","name":"MarkdownContent","slug":"markdown-content","relativePathFromProjectRoot":"/tools/control-fs/fs-util/src/index.ts","srcFileId":"/index","operationFolderName":"fs-util","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/control-fs/fs-util","operationName":"fs-util","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"string"},"simplifiedSchema":{"type":"string"},"typeCoverage":0,"rawType":"MarkdownContent","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"xFoCgwTxunumCSOe","name":"Markdown","slug":"markdown","relativePathFromProjectRoot":"/tools/control-fs/fs-util/src/index.ts","srcFileId":"/index","operationFolderName":"fs-util","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/control-fs/fs-util","operationName":"fs-util","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"fileName":{"type":"string"},"params":{"type":"object","additionalProperties":{"type":"string"},"properties":{"title":{"type":"string"},"author":{"type":"string"}}},"createdAt":{"$ref":"#/definitions/UnixTimestamp"},"updatedAt":{"$ref":"#/definitions/UnixTimestamp"},"modifiedAt":{"$ref":"#/definitions/UnixTimestamp"},"openedAt":{"$ref":"#/definitions/UnixTimestamp"},"content":{"$ref":"#/definitions/MarkdownContent"}},"required":["fileName","params","createdAt","updatedAt","modifiedAt","openedAt","content"],"additionalProperties":false},"simplifiedSchema":{"properties":[{"name":"fileName","required":true,"schema":{"type":"string"}},{"name":"params","required":true,"schema":{"properties":[{"name":"title","required":false,"schema":{"type":"string"}},{"name":"author","required":false,"schema":{"type":"string"}}],"type":"object"}},{"name":"createdAt","required":true,"schema":{"type":"number"}},{"name":"updatedAt","required":true,"schema":{"type":"number"}},{"name":"modifiedAt","required":true,"schema":{"type":"number"}},{"name":"openedAt","required":true,"schema":{"type":"number"}},{"name":"content","required":true,"schema":{"type":"string"}}],"type":"object"},"typeCoverage":0,"rawType":"Markdown","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"lUlZFmskvdFUxqtM","name":"Path","slug":"path","relativePathFromProjectRoot":"/tools/control-fs/fs-util/src/index.ts","srcFileId":"/index","operationFolderName":"fs-util","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/control-fs/fs-util","operationName":"fs-util","description":"unlike PathLike, this is only a string\n\nFor now, we don't have a clear convention whether or not this string should be absolute or anything.","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"string","description":"unlike PathLike, this is only a string\n\nFor now, we don't have a clear convention whether or not this string should be absolute or anything."},"simplifiedSchema":{"description":"unlike PathLike, this is only a string\n\nFor now, we don't have a clear convention whether or not this string should be absolute or anything.","type":"string"},"typeCoverage":0,"rawType":"Path","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"yvKhBYkoFLRkNFEp","name":"FolderPath","slug":"folder-path","relativePathFromProjectRoot":"/tools/control-fs/fs-util/src/index.ts","srcFileId":"/index","operationFolderName":"fs-util","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/tools/control-fs/fs-util","operationName":"fs-util","description":"DEPRECATED: just use ParsedPath","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"relativeFolder":{"type":"string"},"path":{"$ref":"#/definitions/Path"}},"required":["path"],"additionalProperties":false,"description":"DEPRECATED: just use ParsedPath"},"simplifiedSchema":{"description":"DEPRECATED: just use ParsedPath","properties":[{"name":"relativeFolder","required":false,"schema":{"type":"string"}},{"name":"path","required":true,"schema":{"description":"unlike PathLike, this is only a string\n\nFor now, we don't have a clear convention whether or not this string should be absolute or anything.","type":"string"}}],"type":"object"},"typeCoverage":0,"rawType":"FolderPath","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}}]