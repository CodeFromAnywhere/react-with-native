/// <reference types="node" />
import { importFromFiles } from "./deprecated";
import { findSensibleFiles } from "./deprecated";
import { findFiles } from "./deprecated";
import { isArrayGuard } from "./deprecated";
import { findAllMd } from "./deprecated";
import { mergeObjectsArray } from "./deprecated";
import { findFilesRecursively } from "./deprecated";
import { writeToFiles } from "./files";
import { canAccess } from "./files";
import { canAccessSync } from "./files";
import { canSee } from "./files";
import { canRead } from "./files";
import { canWrite } from "./files";
import { canExecute } from "./files";
import { canSeeSync } from "./files";
import { canReadSync } from "./files";
import { canWriteSync } from "./files";
import { canExecuteSync } from "./files";
import { getPathCombinations } from "./files";
import { writeJsonToFile } from "./files";
import { removeTrailingSlash } from "./files";
import { getSubExtension } from "./files";
import { getLastFolder } from "./files";
import { getFolder } from "./files";
import { getFileName } from "./files";
import { withoutExtension } from "./files";
import { getExtension } from "./files";
import { findFileNameCaseInsensitive } from "./findFileNameCaseInsensitive";
import { Dir } from "./fs";
import { Dirent } from "./fs";
import { fs } from "./fs";
import { parseMd } from "./parseMd";
import { ParsedPath } from "./path";
import { path } from "./path";
import { removeAllExcept } from "./removeAllExcept";
import type { PathLike } from "./fs";
import type { Stats } from "./fs";
import type { Fs } from "./fs";
import type { UnixTimestamp } from "./types";
import type { MarkdownContent } from "./types";
import type { Markdown } from "./types";
import type { Path } from "./types";
import type { FolderPath } from "./types";
export declare type FsUtilTypes = {
    PathLike: PathLike;
    Stats: Stats;
    Fs: Fs;
    UnixTimestamp: UnixTimestamp;
    MarkdownContent: MarkdownContent;
    Markdown: Markdown;
    Path: Path;
    FolderPath: FolderPath;
};
export { importFromFiles, findSensibleFiles, findFiles, isArrayGuard, findAllMd, mergeObjectsArray, findFilesRecursively, writeToFiles, canAccess, canAccessSync, canSee, canRead, canWrite, canExecute, canSeeSync, canReadSync, canWriteSync, canExecuteSync, getPathCombinations, writeJsonToFile, removeTrailingSlash, getSubExtension, getLastFolder, getFolder, getFileName, withoutExtension, getExtension, findFileNameCaseInsensitive, Dir, Dirent, fs, parseMd, ParsedPath, path, removeAllExcept };
export { PathLike, Stats, Fs, UnixTimestamp, MarkdownContent, Markdown, Path, FolderPath };
//# sourceMappingURL=index.d.ts.map