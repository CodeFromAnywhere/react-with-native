[{"id":"PNmpRnovYnHKQYVG","commentsInside":[],"rawText":" async (\n  operationNames: string[]\n): Promise<TsInterface[]> => {\n  const dbModels = (await db.get(\"TsInterface\"))\n    .filter((x) => x.isDbModel)\n    .filter(onlyUnique2<TsInterface>((a, b) => a.name === b.name))\n    .filter((tsInterface) =>\n      filterInterfacesFromOperationNames(tsInterface, operationNames)\n    );\n\n  return dbModels;\n}","name":"getDbModelsFromOperations","slug":"get-db-models-from-operations","parameters":[{"name":"operationNames","schema":{"type":"array","items":{"type":"string"}},"simplifiedSchema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"},"required":true}],"description":"","returnType":{"rawType":"Promise<import(\"/Users/king/King/tools/types/code-types/build/TsInterface\").TsInterface[]>","typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":false,"isEnumLiteral":false},"maxIndentationDepth":3,"relativePathFromProjectRoot":"/tools/deployment/bundling/db-util/src/dbUtil.ts","srcFileId":"/dbUtil","operationFolderName":"db-util","relativeFilePathFromSrc":"/dbUtil.ts","relativeOperationBasePathFromProjectRoot":"/tools/deployment/bundling/db-util","operationName":"db-util","size":{"characters":342,"lines":12,"bytes":342,"bytesPerCharacter":1,"charactersPerfLine":28.5,"linesPerFile":12,"numberOfFiles":1}},{"id":"tVPtebGyMylOZvbx","commentsInside":[],"rawText":" (\n  tsInterface: TsInterface,\n  operationNames?: string[]\n) => {\n  return (\n    !operationNames ||\n    (tsInterface.operationName &&\n      operationNames.includes(tsInterface.operationName))\n  );\n}","name":"filterInterfacesFromOperationNames","slug":"filter-interfaces-from-operation-names","parameters":[{"name":"tsInterface","schema":{"$ref":"#/definitions/TsInterface"},"simplifiedSchema":{"description":"TODO: Just like parameters, this should be linted for. If you define an interface that's not declared here, that should ring a bell.","properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"type","required":true,"schema":{"description":"all info that should always be collected when indexing any type interface","properties":[{"name":"typeDefinition","required":false,"schema":{"properties":[{"name":"$id","required":false,"schema":{"type":"string"}},{"name":"$ref","required":false,"schema":{"type":"string"}},{"name":"$schema","required":false,"schema":{"description":"Meta schema\n\nRecommended values:\n- 'http://json-schema.org/schema#'\n- 'http://json-schema.org/hyper-schema#'\n- 'http://json-schema.org/draft-07/schema#'\n- 'http://json-schema.org/draft-07/hyper-schema#'","type":"string"}},{"name":"$comment","required":false,"schema":{"type":"string"}},{"name":"$defs","required":false,"schema":{"properties":[],"type":"object"}},{"name":"type","required":false,"schema":{"properties":[],"type":"object"}},{"name":"enum","required":false,"schema":{"items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"const","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"multipleOf","required":false,"schema":{"type":"number"}},{"name":"maximum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMaximum","required":false,"schema":{"type":"number"}},{"name":"minimum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMinimum","required":false,"schema":{"type":"number"}},{"name":"maxLength","required":false,"schema":{"type":"number"}},{"name":"minLength","required":false,"schema":{"type":"number"}},{"name":"pattern","required":false,"schema":{"type":"string"}},{"name":"items","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalItems","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"maxItems","required":false,"schema":{"type":"number"}},{"name":"minItems","required":false,"schema":{"type":"number"}},{"name":"uniqueItems","required":false,"schema":{"type":"boolean"}},{"name":"contains","required":false,"schema":{"circularRefName":"JSONSchema7","properties":[],"type":"object"}},{"name":"maxProperties","required":false,"schema":{"type":"number"}},{"name":"minProperties","required":false,"schema":{"type":"number"}},{"name":"required","required":false,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"properties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"patternProperties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalProperties","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"dependencies","required":false,"schema":{"properties":[],"type":"object"}},{"name":"propertyNames","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"if","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"then","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"else","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"allOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"anyOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"oneOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"not","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"format","required":false,"schema":{"type":"string"}},{"name":"contentMediaType","required":false,"schema":{"type":"string"}},{"name":"contentEncoding","required":false,"schema":{"type":"string"}},{"name":"definitions","required":false,"schema":{"properties":[],"type":"object"}},{"name":"title","required":false,"schema":{"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"default","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"readOnly","required":false,"schema":{"type":"boolean"}},{"name":"writeOnly","required":false,"schema":{"type":"boolean"}},{"name":"examples","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}}],"type":"object"}},{"name":"simplifiedSchema","required":false,"schema":{"description":"JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form","properties":[{"name":"type","required":true,"schema":{"enum":["string","number","boolean","object","array","null"],"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"circularRefName","required":false,"schema":{"description":"sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here","type":"string"}},{"name":"enum","required":false,"schema":{"description":"in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think","items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"properties","required":false,"schema":{"description":"in case of object, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}},{"name":"required","required":true,"schema":{"description":"NB: can't we put this in the SimplifiedSchema itself?","type":"boolean"}}],"type":"object"},"name":"SimplifiedSchemaProperty"}],"type":"array"}},{"name":"items","required":false,"schema":{"description":"in case of arrays, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"description":"name in case of it being a reference, otherwise null","type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}}],"type":"object"},"name":"SimplifiedSchemaItem"}],"type":"array"}}],"type":"object"}},{"name":"isObject","required":true,"schema":{"description":"if the type is an object, this is true. false if it's an array","type":"boolean"}},{"name":"isArray","required":true,"schema":{"description":"if the type is an array, this is true","type":"boolean"}},{"name":"isPrimitive","required":true,"schema":{"description":"if it's a primitive type like \"string\", \"number\", \"boolean\", \"null\" | \"undefined\"","type":"boolean"}},{"name":"isEnum","required":true,"schema":{"description":"will be true for any primitive conjunction types","type":"boolean"}},{"name":"isEnumLiteral","required":true,"schema":{"description":"will be true for string conjunction types","type":"boolean"}},{"name":"typeCoverage","required":true,"schema":{"description":"quantification of coverage of the specified type or subtypes in our database.","type":"number"}},{"name":"rawType","required":true,"schema":{"description":"raw type string","type":"string"}}],"type":"object"}},{"name":"description","required":false,"schema":{"description":"a string that is known to contain markdown.","type":"string"}},{"name":"commentsInside","required":true,"schema":{"items":[{"schema":{"description":"comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\nspecial line prefixes:\n- TODO:\n- DISCUSSION:\n- IDEA:\n- LATER:\n- NB:\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!","properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"comment","required":true,"schema":{"description":"a string that is known to contain markdown.","type":"string"}},{"name":"parameters","required":true,"schema":{"properties":[],"type":"object"}},{"name":"types","required":true,"schema":{"description":"These are the type indicators that were found in this single or multiline comment. Can be multiple.","items":[{"schema":{"enum":["todo","discussion","idea","later","nb"],"type":"string"},"name":"CommentType"}],"type":"array"}},{"name":"firstLine","required":true,"schema":{"description":"first line of the comment","type":"number"}},{"name":"lastLine","required":true,"schema":{"description":"last line of the comment","type":"number"}},{"name":"statementName","required":false,"schema":{"description":"statement name the comment belongs to","type":"string"}},{"name":"rawStatement","required":false,"schema":{"description":"raw statement text the comment belongs to","type":"string"}}],"type":"object"},"name":"TsComment"}],"type":"array"}},{"name":"rawText","required":false,"schema":{"description":"raw interface text, coming from ts-morph","type":"string"}},{"name":"extensions","required":false,"schema":{"description":"if the interface extends anything, names will be specified here","items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"isDbModel","required":true,"schema":{"description":"if true, this interface is marked as a db model, which means it will be included in the db function autocompletion so it's easy to store and fetch data in this format.\n\nis automatically set to true when indexing and when one of the following statements holds true\n- if the doc-comment contains frontmatter with `isDbModel` or `defaultDbStorageMethod` specified\n- if the interface last word is \"db\" or \"model\" and if there are minimum 2 words\n- if the interface extends some other special interface","type":"boolean"}},{"name":"defaultDbStorageMethod","required":false,"schema":{"enum":["jsonMultiple","jsonSingle","markdown","keyValueMarkdown","csv"],"type":"string"}}],"type":"object"},"required":true},{"name":"operationNames","schema":{"type":"array","items":{"type":"string"}},"simplifiedSchema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"},"required":false}],"description":"","returnType":{"rawType":"any","typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":false,"isEnumLiteral":false},"maxIndentationDepth":3,"relativePathFromProjectRoot":"/tools/deployment/bundling/db-util/src/dbUtil.ts","srcFileId":"/dbUtil","operationFolderName":"db-util","relativeFilePathFromSrc":"/dbUtil.ts","relativeOperationBasePathFromProjectRoot":"/tools/deployment/bundling/db-util","operationName":"db-util","size":{"characters":198,"lines":10,"bytes":198,"bytesPerCharacter":1,"charactersPerfLine":19.8,"linesPerFile":10,"numberOfFiles":1}}]