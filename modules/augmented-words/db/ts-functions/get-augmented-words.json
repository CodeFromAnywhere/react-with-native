{
  "createdAt": 1667635090784,
  "updatedAt": 1667635090784,
  "deletedAt": 0,
  "createdFirstAt": 1667635090784,
  "publicAuthorization": [
    "read-docs",
    "search"
  ],
  "isApiExposed": false,
  "isPostApi": false,
  "isGetApi": false,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/getAugmentedWords.ts",
  "commentsInside": [],
  "rawText": " async (\n  manualProjectRoot?: string\n): Promise<AugmentedWord[]> => {\n  const projectRoot = manualProjectRoot || getProjectRoot();\n\n  if (!projectRoot) return [];\n\n  const persons = await db.get(\"Person\");\n\n  const personAugmentedWords = persons.map((person) => {\n    const augmentedWord: AugmentedWord = {\n      queryPath: `person/${person.id}`,\n      spoiler: `# ${\n        person.name\n      }\\n\\n## Interests\\n\\n${person.interestSlugs?.join(\"\\n\")}`,\n      type: \"person\",\n      word: person.slug,\n      isCaseInsensitive: true,\n      projectRelativeMarkdownSourcePath: \"\",\n    };\n\n    return augmentedWord;\n  });\n\n  const operationIndexes = await db.get(\"OperationIndex\");\n  const operationConfigs = await db.get(\"OperationConfig\");\n\n  const operationAugmentedWords: AugmentedWord[] = operationIndexes\n    .map((item) => {\n      const itemLocationPath = path.join(projectRoot, item.projectRelativePath);\n      const operationPath = findOperationBasePath(itemLocationPath);\n      if (!operationPath) return;\n\n      const description = operationConfigs.find(\n        (x) => x.operationName === item.operationName\n      )?.markdown;\n\n      const augmentedWord: AugmentedWord = {\n        queryPath: makeRelative(operationPath, projectRoot),\n        spoiler: description,\n        type: \"operation\",\n        word: item.name,\n        // NB: OperationConfig is located in operation basePath\n        projectRelativeMarkdownSourcePath: path.join(\n          operationPath,\n          \"OPERATION.md\"\n        ),\n      };\n\n      return augmentedWord;\n    })\n    .filter(notEmpty);\n\n  const tsVariables = await db.get(\"TsVariable\", {\n    manualProjectRoot: projectRoot,\n  });\n\n  const tsFunctions = await db.get(\"TsFunction\", {\n    manualProjectRoot: projectRoot,\n  });\n  const tsInterfaces = await db.get(\"TsInterface\", {\n    manualProjectRoot: projectRoot,\n  });\n\n  const interfaceAugmentedWords: AugmentedWord[] = tsInterfaces\n    .map((item) => {\n      // NB: TODO: figure out of this is always correct, this path must exist!\n      const itemLocationPath = path.join(projectRoot, item.projectRelativePath);\n      const operationPath = findOperationBasePath(itemLocationPath);\n      if (!operationPath) return;\n\n      const projectRelativeOperationPath = makeRelative(\n        operationPath,\n        projectRoot\n      );\n\n      const augmentedWord: AugmentedWord = {\n        queryPath: `${projectRelativeOperationPath}#${getImplicitId(\n          item.name\n        )}`,\n        spoiler: item.description,\n        type: \"type\",\n        word: item.name,\n        projectRelativeMarkdownSourcePath: item.projectRelativePath,\n      };\n\n      return augmentedWord;\n    })\n    .filter(notEmpty);\n\n  const functionAugmentedWords: AugmentedWord[] = tsFunctions\n    .map((item) => {\n      // NB: TODO: figure out of this is always correct, this path must exist!\n      const itemLocationPath = path.join(projectRoot, item.projectRelativePath);\n      const operationPath = findOperationBasePath(itemLocationPath);\n      if (!operationPath) return;\n\n      const projectRelativeOperationPath = makeRelative(\n        operationPath,\n        projectRoot\n      );\n\n      const augmentedWord: AugmentedWord = {\n        queryPath: `${projectRelativeOperationPath}#${getImplicitId(\n          item.name\n        )}`,\n        spoiler: item.description,\n        type: \"function\",\n        word: item.name,\n        projectRelativeMarkdownSourcePath: item.projectRelativePath,\n      };\n\n      return augmentedWord;\n    })\n    .filter(notEmpty);\n\n  const variableAugmentedWords: AugmentedWord[] = tsVariables\n    .map((item) => {\n      // NB: TODO: figure out of this is always correct, this path must exist!\n      const itemLocationPath = path.join(projectRoot, item.projectRelativePath);\n      const operationPath = findOperationBasePath(itemLocationPath);\n      if (!operationPath) return;\n\n      const projectRelativeOperationPath = makeRelative(\n        operationPath,\n        projectRoot\n      );\n\n      const augmentedWord: AugmentedWord = {\n        queryPath: `${projectRelativeOperationPath}#${getImplicitId(\n          item.name\n        )}`,\n        spoiler: item.description,\n        type: \"variable\",\n        word: item.name,\n        projectRelativeMarkdownSourcePath: item.projectRelativePath,\n      };\n\n      return augmentedWord;\n    })\n    .filter(notEmpty);\n\n  const wordInclude: Include[] = [\n    { referenceKey: \"english_wordSlug\" },\n    { referenceKey: \"root_wordSlug\" },\n    { referenceKey: \"common_wordSlug\" },\n    { referenceKey: \"definition_statementId\" },\n  ];\n  const words = await db.get(\"Word\", {\n    manualProjectRoot: projectRoot,\n    include: wordInclude,\n  });\n\n  const markdownWords = await db.get(\"MarkdownWord\");\n\n  const kvmdWords = await db.get(\"KvmdWord\");\n\n  const kvmdAugmentedWords: AugmentedWord[] = kvmdWords.map((item) => {\n    const augmentedWord: AugmentedWord = {\n      queryPath: `dictionary?word=${item.name}`,\n      type: \"word\",\n      spoiler: item.value ? String(item.value) : undefined,\n      word: item.name,\n      isCaseInsensitive: true,\n      projectRelativeMarkdownSourcePath: item.projectRelativePath,\n    };\n\n    return augmentedWord;\n  });\n\n  const markdownAugmentedWords: AugmentedWord[] = markdownWords.map((item) => {\n    const augmentedWord: AugmentedWord = {\n      queryPath: `dictionary?word=${item.name}`,\n      type: \"word\",\n      spoiler: item.markdown,\n      word: item.name,\n      isCaseInsensitive: true,\n      projectRelativeMarkdownSourcePath: item.projectRelativePath,\n    };\n\n    return augmentedWord;\n  });\n\n  const wordAugmentedWords: AugmentedWord[] = words.map((item) => {\n    const augmentedWord: AugmentedWord = {\n      queryPath: `dictionary?word=${item.slug}`,\n      type: \"word\",\n      spoiler: item.definition_statement?.name,\n      word: item.name,\n      isCaseInsensitive: true,\n      projectRelativeMarkdownSourcePath: item.projectRelativePath,\n    };\n\n    return augmentedWord;\n  });\n\n  const bundleAugmentedWords: AugmentedWord[] | undefined = isSensibleProject(\n    projectRoot\n  )\n    ? undefined\n    : await getBundleAugmentedWords();\n\n  const allAugmentedWords: AugmentedWord[] = [\n    bundleAugmentedWords,\n    operationAugmentedWords,\n    variableAugmentedWords,\n    functionAugmentedWords,\n    interfaceAugmentedWords,\n    //words\n    wordAugmentedWords,\n    kvmdAugmentedWords,\n    markdownAugmentedWords,\n    personAugmentedWords,\n  ]\n    .filter(notEmpty)\n    .flat();\n\n  return allAugmentedWords;\n}",
  "name": "getAugmentedWords",
  "slug": "get-augmented-words",
  "parameters": [
    {
      "name": "manualProjectRoot",
      "schema": {
        "type": "string"
      },
      "simplifiedSchema": {
        "type": "string"
      },
      "required": false
    }
  ],
  "description": "Gets all augmented words of the entire project\n\n- words with their definitions, if available (`/dictionary?word=x`)\n- functions, interfaces, variables, operations (`/[operation-path]#name`)\n- if this is a non-sensible-project, also bundles (`/[docs-path]`)",
  "returnType": {
    "rawType": "Promise<import(\"/Users/king/King/operations/tools/markdown-reader/markdown-reader-types/build/AugmentedWord\").AugmentedWord[]>",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 5,
  "size": {
    "characters": 6717,
    "lines": 223,
    "bytes": 6717,
    "bytesPerCharacter": 1,
    "charactersPerLine": 30,
    "linesPerFile": 223,
    "numberOfFiles": 1
  },
  "id": "ovlsxnsldnsvgwdpkumqlmdn"
}