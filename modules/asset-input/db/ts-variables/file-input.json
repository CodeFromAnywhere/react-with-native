{
  "createdAt": 1667378714338,
  "updatedAt": 1667378714338,
  "deletedAt": 0,
  "createdFirstAt": 1667378714338,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "FileInput",
  "slug": "file-input",
  "operationRelativeTypescriptFilePath": "src/FileInput.tsx",
  "type": {
    "rawType": "(props: { setBlobs: (blobs: import(\"/Users/king/King/operations/tools/asset/asset-type/build/Asset\").Asset[]) => void; }) => JSX.Element",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "(props: { setBlobs: (blobs: Asset[]) => void }) => {\n  const { setBlobs } = props;\n  return (\n    <Input\n      type=\"file\"\n      multiple\n      onChange={(event) => {\n        const files = event.target.files;\n\n        if (!files) {\n          setBlobs([]);\n          return;\n        }\n\n        const fileArray = new Array(files.length)\n          .fill(null)\n          .map((_, index) => {\n            const file = files.item(index);\n\n            return file;\n          })\n          .filter(notEmpty);\n\n        const assetBlobs: Asset[] = fileArray.map((file) => {\n          const type = getTypeFromFileBlob(file);\n          const name = withoutExtension(file.name);\n\n          const asset: Asset = {\n            blobPath: URL.createObjectURL(file),\n            originalFilename: file.name,\n            blob: file,\n            type,\n            name,\n            sizeBytes: file.size,\n            uploadProgress: 0,\n          };\n\n          return asset;\n        });\n        setBlobs(assetBlobs);\n      }}\n    />\n  );\n}",
  "description": "",
  "id": "qngputpjbsuynbpevwtfeqsy"
}