{
  "createdAt": 1669962078497,
  "updatedAt": 1669962078497,
  "deletedAt": 0,
  "createdFirstAt": 1669962078497,
  "isApiExposed": true,
  "isExported": true,
  "groupAuthorization": {},
  "operationRelativeTypescriptFilePath": "src/flattenMarkdownChunks.ts",
  "commentsInside": [],
  "rawText": " (\n  markdownChunks: MarkdownChunk[]\n): MarkdownParagraph[] => {\n  const flatMarkdownChunks = markdownChunks\n    .map((chunk) => getParagraphsRecursively(chunk))\n    .flat();\n  return flatMarkdownChunks;\n}",
  "name": "flattenMarkdownChunks",
  "slug": "flatten-markdown-chunks",
  "parameters": [
    {
      "name": "markdownChunks",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/MarkdownChunk"
        }
      },
      "simplifiedSchema": {
        "items": [
          {
            "schema": {
              "fullComment": "",
              "properties": [
                {
                  "name": "level",
                  "required": true,
                  "schema": {
                    "fullComment": "0 is a paragraph 1-6 is h1 until h6",
                    "type": "number"
                  }
                },
                {
                  "name": "content",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "markdownEmbed",
                  "required": false,
                  "schema": {
                    "fullComment": "Anything in the format `![alt](src)`\n\nNB: I need to be very clear how this one works",
                    "nb": "I need to be very clear how this one works",
                    "properties": [
                      {
                        "name": "alt",
                        "required": true,
                        "schema": {
                          "type": "string"
                        }
                      },
                      {
                        "name": "src",
                        "required": true,
                        "schema": {
                          "type": "string"
                        }
                      },
                      {
                        "name": "type",
                        "required": true,
                        "schema": {
                          "enum": [
                            "video",
                            "audio",
                            "image",
                            "text",
                            "other"
                          ],
                          "fullComment": "Possible Asset Types\n\nLater, maybe also support: \"markdown\",\"json\",\"typescript\"",
                          "type": "string"
                        }
                      }
                    ],
                    "type": "object"
                  }
                },
                {
                  "name": "markdownLink",
                  "required": false,
                  "schema": {
                    "fullComment": "Anything in the format `[alt](href)`\n\nIt needs to be clear how this works. There is a convention for this, and I should implement that as good as possible, and document it here",
                    "properties": [
                      {
                        "name": "alt",
                        "required": true,
                        "schema": {
                          "type": "string"
                        }
                      },
                      {
                        "name": "href",
                        "required": true,
                        "schema": {
                          "type": "string"
                        }
                      },
                      {
                        "name": "type",
                        "required": true,
                        "schema": {
                          "enum": [
                            "video",
                            "audio",
                            "image",
                            "text",
                            "other"
                          ],
                          "fullComment": "Can be inferred from href\n\nPossible Asset Types\n\nLater, maybe also support: \"markdown\",\"json\",\"typescript\"",
                          "type": "string"
                        }
                      }
                    ],
                    "type": "object"
                  }
                },
                {
                  "name": "title",
                  "required": false,
                  "schema": {
                    "fullComment": "NB: title can also be an empty string (\"\")",
                    "nb": "title can also be an empty string (\"\")",
                    "type": "string"
                  }
                },
                {
                  "name": "children",
                  "required": false,
                  "schema": {
                    "fullComment": "all content until the next title. it's either a content array if there's any titles found, or a string[] if it's paragraphs",
                    "items": [
                      {
                        "schema": {
                          "circularRefName": "MarkdownChunk",
                          "properties": [],
                          "type": "object"
                        },
                        "name": "MarkdownChunk"
                      }
                    ],
                    "type": "array"
                  }
                }
              ],
              "type": "object"
            },
            "name": "MarkdownChunk"
          }
        ],
        "type": "array"
      },
      "required": true
    }
  ],
  "description": "Flatten markdown content into an array of paragraphs",
  "returnType": {
    "rawType": "import(\"/Users/king/King/operations/tools/types/markdown-types/build/MarkdownParse\").MarkdownParagraph[]",
    "typeDefinition": {
      "optional": false,
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "paragraph": {
            "type": "string",
            "allOf": [
              {
                "transform": [
                  "trim"
                ]
              },
              {
                "minLength": 1
              }
            ]
          },
          "categoryStackCalculated": {
            "type": "array",
            "items": {
              "type": "string",
              "allOf": [
                {
                  "transform": [
                    "trim"
                  ]
                },
                {
                  "minLength": 1
                }
              ]
            }
          },
          "level": {
            "type": "number"
          }
        },
        "required": [
          "paragraph",
          "categoryStackCalculated"
        ]
      }
    },
    "typeCoverage": 0,
    "isArray": true,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "items": [
        {
          "schema": {
            "properties": [
              {
                "name": "paragraph",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              {
                "name": "categoryStackCalculated",
                "required": true,
                "schema": {
                  "items": [
                    {
                      "schema": {
                        "type": "string"
                      },
                      "name": null
                    }
                  ],
                  "type": "array"
                }
              },
              {
                "name": "level",
                "required": false,
                "schema": {
                  "type": "number"
                }
              }
            ],
            "type": "object"
          },
          "name": null
        }
      ],
      "type": "array"
    }
  },
  "maxIndentationDepth": 2,
  "size": {
    "characters": 257,
    "lines": 8,
    "bytes": 257,
    "bytesPerCharacter": 1,
    "charactersPerLine": 32,
    "linesPerFile": 8,
    "numberOfFiles": 1
  },
  "id": "kyinioayuypajvneptlkriwa"
}