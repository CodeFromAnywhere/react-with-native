{
  "createdAt": 1666262775480,
  "updatedAt": 1666262775480,
  "deletedAt": 0,
  "createdFirstAt": 1666262775480,
  "publicAuthorization": [
    "read-docs",
    "search"
  ],
  "isApiExposed": false,
  "isPostApi": false,
  "isGetApi": false,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/getKvmdItemsRecursively.ts",
  "commentsInside": [],
  "rawText": " (\n  chunk: MarkdownChunk,\n  categoryStackCalculatedUntilNow?: CategoryStack\n): Storing<KeyValueMarkdownModelType>[] => {\n  // NB: copy\n  let categoryStackCalculated = categoryStackCalculatedUntilNow\n    ? [...categoryStackCalculatedUntilNow]\n    : [];\n\n  let allKvmdItems: Storing<KeyValueMarkdownModelType>[] = [];\n\n  // If this chunk has a title (this is a header)\n  if (chunk.title) {\n    const headerParsedKvmdLine = parseKvmdLine(chunk.title);\n\n    // NB: titles with an empty key are ignored\n    if (headerParsedKvmdLine) {\n      // NB: also add the title as a model item\n      const headerKvmdItem: Storing<KeyValueMarkdownModelType> = {\n        ...headerParsedKvmdLine,\n        isHeaderCalculated: true,\n        // NB: copy!\n        categoryStackCalculated: [...categoryStackCalculated],\n      };\n      allKvmdItems.push(headerKvmdItem);\n\n      // NB: the slug of the title is added to the categoryStackCalculated, but only AFTER adding the kvmd item of the title\n      categoryStackCalculated.push(headerParsedKvmdLine.slug);\n    }\n  }\n\n  const childKvmdItems =\n    chunk.children\n      ?.map((childChunk) =>\n        getKvmdItemsRecursively(childChunk, categoryStackCalculated)\n      )\n      .flat() || [];\n\n  allKvmdItems = allKvmdItems.concat(childKvmdItems);\n\n  const lineKvmdItems = (chunk.content || \"\")\n    // NB: we are splitting on newlines here because content can still contain newlines.\n    .split(\"\\n\")\n    .map((line) => {\n      const parsedKvmdLine = parseKvmdLine(line);\n      if (!parsedKvmdLine) return;\n\n      const contentKvmdItem: Storing<KeyValueMarkdownModelType> = {\n        ...parsedKvmdLine,\n        isHeaderCalculated: false,\n        categoryStackCalculated,\n      };\n\n      return contentKvmdItem;\n    })\n    .filter(notEmpty);\n\n  allKvmdItems = allKvmdItems.concat(lineKvmdItems);\n\n  return allKvmdItems;\n}",
  "name": "getKvmdItemsRecursively",
  "slug": "get-kvmd-items-recursively",
  "parameters": [
    {
      "name": "chunk",
      "schema": {
        "$ref": "#/definitions/MarkdownChunk"
      },
      "simplifiedSchema": {
        "fullComment": "",
        "properties": [
          {
            "name": "content",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "title",
            "required": false,
            "schema": {
              "fullComment": "NB: title can also be an empty string (\"\")",
              "nb": "title can also be an empty string (\"\")",
              "type": "string"
            }
          },
          {
            "name": "children",
            "required": false,
            "schema": {
              "fullComment": "all content until the next title. it's either a content array if there's any titles found, or a string[] if it's paragraphs",
              "items": [
                {
                  "schema": {
                    "circularRefName": "MarkdownChunk",
                    "properties": [],
                    "type": "object"
                  },
                  "name": "MarkdownChunk"
                }
              ],
              "type": "array"
            }
          }
        ],
        "type": "object"
      },
      "required": true
    },
    {
      "name": "categoryStackCalculatedUntilNow",
      "schema": {
        "$ref": "#/definitions/CategoryStack"
      },
      "simplifiedSchema": {
        "fullComment": "",
        "items": [
          {
            "schema": {
              "type": "string"
            },
            "name": null
          }
        ],
        "type": "array"
      },
      "required": false
    }
  ],
  "description": "recursively dives into the Chunk to get all kvmd items\n\nNB: this doesn't have a reference to its parent yet, but this will be added in fs-orm on the fly because the key for that is based on the model name",
  "returnType": {
    "rawType": "Omit<TModel, import(\"/Users/king/King/operations/tools/types/model-types/build/generics\").ShouldNotBeStored>[]",
    "typeDefinition": {
      "optional": false,
      "type": "array",
      "items": {}
    },
    "typeCoverage": 0,
    "isArray": true,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "items": [
        {
          "schema": {
            "properties": [],
            "type": "object"
          },
          "name": null
        }
      ],
      "type": "array"
    }
  },
  "maxIndentationDepth": 4,
  "size": {
    "characters": 2048,
    "lines": 63,
    "bytes": 2048,
    "bytesPerCharacter": 1,
    "charactersPerLine": 33,
    "linesPerFile": 63,
    "numberOfFiles": 1
  },
  "id": "jroacgysuodpdqctjnwctunh"
}