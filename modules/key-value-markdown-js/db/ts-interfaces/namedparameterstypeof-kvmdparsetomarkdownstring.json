{
  "createdAt": 1666262780221,
  "updatedAt": 1666262780221,
  "deletedAt": 0,
  "createdFirstAt": 1666262780221,
  "id": "namedparameterstypeof-kvmdparsetomarkdownstring",
  "name": "NamedParameters<typeof kvmdParseToMarkdownString>",
  "slug": "namedparameterstypeof-kvmdparsetomarkdownstring",
  "operationRelativeTypescriptFilePath": "src/kvmdParseToMarkdownString.ts",
  "hasGeneric": false,
  "isExported": false,
  "isOperationIndex": false,
  "description": "",
  "isDbModel": false,
  "commentsInside": [],
  "type": {
    "typeDefinition": {
      "type": "object",
      "properties": {
        "keyValueMarkdownParse": {
          "$ref": "#/definitions/KeyValueMarkdownParse"
        }
      },
      "required": [
        "keyValueMarkdownParse"
      ],
      "additionalProperties": false
    },
    "simplifiedSchema": {
      "properties": [
        {
          "name": "keyValueMarkdownParse",
          "required": true,
          "schema": {
            "fullComment": "",
            "properties": [
              {
                "name": "parameters",
                "required": true,
                "schema": {
                  "fullComment": "Our version of frontmatter is a bit simpler than regular frontmatter\n\nNot sure if this is a good idea, but it keeps it simple for our OS\n\nall values parse in a similar way to csv\n\nmake sure that you use quotes if you want to store a string with commas, because commas in a parameter indicate that it is a string array\n\nNB: string arrays are comma separated values, where you can put values with special characters in between quotes",
                  "nb": "string arrays are comma separated values, where you can put values with special characters in between quotes",
                  "properties": [],
                  "type": "object"
                }
              },
              {
                "name": "data",
                "required": true,
                "schema": {
                  "items": [
                    {
                      "schema": {
                        "fullComment": "handy model type for storing stuff in a KeyValue Markdown file. empty lines are omitted\n\nall you need to specify in the kvmd is the key and the value, separated by \":\"\n\nNB: there can be a `parent_modelNameSlug` key exposed that should refer to the parent slug",
                        "nb": "there can be a `parent_modelNameSlug` key exposed that should refer to the parent slug",
                        "properties": [
                          {
                            "name": "id",
                            "required": true,
                            "schema": {
                              "fullComment": "same as slug\n\nused for compatibility with some general purpose functions\n\nNB: uniqueness is hard to enforce!",
                              "nb": "uniqueness is hard to enforce!",
                              "type": "string"
                            }
                          },
                          {
                            "name": "name",
                            "required": true,
                            "schema": {
                              "fullComment": "key\n\nshould be english because it's kind of part of the codebase!",
                              "type": "string"
                            }
                          },
                          {
                            "name": "slug",
                            "required": true,
                            "schema": {
                              "fullComment": "calculated: slug for this key (kebab case form of the name)",
                              "type": "string"
                            }
                          },
                          {
                            "name": "value",
                            "required": false,
                            "schema": {
                              "fullComment": "value behind the semicolom (:). If not given, will be undefined.\n\nIf possible, will be parsed to a number, boolean, null or undefined... otherwise it's a string\n\ncan be any language that we can detect",
                              "type": "string"
                            }
                          },
                          {
                            "name": "comment",
                            "required": true,
                            "schema": {
                              "fullComment": "comment in html syntax. if not given, will be null",
                              "type": "string"
                            }
                          },
                          {
                            "name": "operationName",
                            "required": true,
                            "schema": {
                              "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
                              "type": "null"
                            }
                          },
                          {
                            "name": "projectRelativePath",
                            "required": true,
                            "schema": {
                              "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
                              "type": "string"
                            }
                          },
                          {
                            "name": "operationRelativePath",
                            "required": false,
                            "schema": {
                              "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
                              "type": "string"
                            }
                          },
                          {
                            "name": "categoryStackCalculated",
                            "required": true,
                            "schema": {
                              "fullComment": "calculated value that contains the slugs of all preceding categories to this item.\n\nWill be present when fetching from the the db with `fs-orm`\n\n",
                              "items": [
                                {
                                  "schema": {
                                    "type": "string"
                                  },
                                  "name": null
                                }
                              ],
                              "type": "array"
                            }
                          },
                          {
                            "name": "isHeaderCalculated",
                            "required": true,
                            "schema": {
                              "fullComment": "Calculated value indicating whether or not the item has children",
                              "type": "boolean"
                            }
                          }
                        ],
                        "type": "object"
                      },
                      "name": "KeyValueMarkdownModelType"
                    }
                  ],
                  "type": "array"
                }
              }
            ],
            "type": "object"
          }
        }
      ],
      "type": "object"
    },
    "typeCoverage": 0,
    "rawType": "NamedParameters<typeof kvmdParseToMarkdownString>",
    "isArray": false,
    "isEnum": false,
    "isEnumLiteral": false,
    "isObject": false,
    "isPrimitive": false
  }
}