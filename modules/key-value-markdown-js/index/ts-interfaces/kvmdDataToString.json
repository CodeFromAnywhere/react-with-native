[{"id":"gZlxAZaHjNdRRudD","name":"NamedParameters<typeof kvmdDataToString>","slug":"named-parameters-<typeof-kvmd-data-to-string->","relativePathFromProjectRoot":"/tools/parsing/file-conversion/md/key-value-markdown-js/src/kvmdDataToString.ts","srcFileId":"/kvmdDataToString","operationFolderName":"key-value-markdown-js","relativeFilePathFromSrc":"/kvmdDataToString.ts","relativeOperationBasePathFromProjectRoot":"/tools/parsing/file-conversion/md/key-value-markdown-js","operationName":"key-value-markdown-js","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"kvmdData":{"$ref":"#/definitions/KeyValueMarkdownModelType"},"previous":{"$ref":"#/definitions/KeyValueMarkdownModelType"}},"required":["kvmdData"],"additionalProperties":false},"simplifiedSchema":{"properties":[{"name":"kvmdData","required":true,"schema":{"description":"handy model type for storing stuff in a KeyValue Markdown file. empty lines are omitted\n\nall you need to specify in the kvmd is the key and the value, separated by \":\"","properties":[{"name":"id","required":true,"schema":{"description":"Calculated:\n\nby taking the relative file path + a stringified version of the index.\n\nused for compatibility with some general purpose functions","type":"string"}},{"name":"index","required":true,"schema":{"description":"line where the kv was found (at any given moment this is an unqiue identifier, but it may change without notice, so it's not a good idea to store stuff in kvmd if it has references to the id)","type":"number"}},{"name":"relativeIndex","required":true,"schema":{"description":"relative index from the category header, starting count with 1. if there is no header, also counts starting with 1","type":"number"}},{"name":"name","required":true,"schema":{"description":"key\n\nshould be english because it's kind of part of the codebase!","type":"string"}},{"name":"slug","required":true,"schema":{"description":"calculated: slug for this key (kebab case form of the name)","type":"string"}},{"name":"value","required":false,"schema":{"description":"value behind the semicolom (:). If not given, will be undefined.\n\nIf possible, will be parsed to a number, boolean, null or undefined... otherwise it's a string\n\ncan be any language that we can detect","type":"string"}},{"name":"comment","required":true,"schema":{"description":"comment in html syntax. if not given, will be null","type":"string"}},{"name":"categoryStack","required":true,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}}],"type":"object"}},{"name":"previous","required":false,"schema":{"description":"handy model type for storing stuff in a KeyValue Markdown file. empty lines are omitted\n\nall you need to specify in the kvmd is the key and the value, separated by \":\"","properties":[{"name":"id","required":true,"schema":{"description":"Calculated:\n\nby taking the relative file path + a stringified version of the index.\n\nused for compatibility with some general purpose functions","type":"string"}},{"name":"index","required":true,"schema":{"description":"line where the kv was found (at any given moment this is an unqiue identifier, but it may change without notice, so it's not a good idea to store stuff in kvmd if it has references to the id)","type":"number"}},{"name":"relativeIndex","required":true,"schema":{"description":"relative index from the category header, starting count with 1. if there is no header, also counts starting with 1","type":"number"}},{"name":"name","required":true,"schema":{"description":"key\n\nshould be english because it's kind of part of the codebase!","type":"string"}},{"name":"slug","required":true,"schema":{"description":"calculated: slug for this key (kebab case form of the name)","type":"string"}},{"name":"value","required":false,"schema":{"description":"value behind the semicolom (:). If not given, will be undefined.\n\nIf possible, will be parsed to a number, boolean, null or undefined... otherwise it's a string\n\ncan be any language that we can detect","type":"string"}},{"name":"comment","required":true,"schema":{"description":"comment in html syntax. if not given, will be null","type":"string"}},{"name":"categoryStack","required":true,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}}],"type":"object"}}],"type":"object"},"typeCoverage":0,"rawType":"NamedParameters<typeof kvmdDataToString>","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"FugSIJBPYHaKMbAl","name":"KeyValueMarkdownModelType","slug":"key-value-markdown-model-type","relativePathFromProjectRoot":"/tools/parsing/file-conversion/md/key-value-markdown-js/src/kvmdDataToString.ts","srcFileId":"/kvmdDataToString","operationFolderName":"key-value-markdown-js","relativeFilePathFromSrc":"/kvmdDataToString.ts","relativeOperationBasePathFromProjectRoot":"/tools/parsing/file-conversion/md/key-value-markdown-js","operationName":"key-value-markdown-js","description":"handy model type for storing stuff in a KeyValue Markdown file. empty lines are omitted\n\nall you need to specify in the kvmd is the key and the value, separated by \":\"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"id":{"type":"string","description":"Calculated:\n\nby taking the relative file path + a stringified version of the index.\n\nused for compatibility with some general purpose functions"},"index":{"type":"number","description":"line where the kv was found (at any given moment this is an unqiue identifier, but it may change without notice, so it's not a good idea to store stuff in kvmd if it has references to the id)"},"relativeIndex":{"type":"number","description":"relative index from the category header, starting count with 1. if there is no header, also counts starting with 1"},"name":{"type":"string","description":"key\n\nshould be english because it's kind of part of the codebase!"},"slug":{"type":"string","description":"calculated: slug for this key (kebab case form of the name)"},"value":{"type":["string","number","boolean","null"],"description":"value behind the semicolom (:). If not given, will be undefined.\n\nIf possible, will be parsed to a number, boolean, null or undefined... otherwise it's a string\n\ncan be any language that we can detect"},"comment":{"type":["string","null"],"description":"comment in html syntax. if not given, will be null"},"categoryStack":{"$ref":"#/definitions/CategoryStack","description":"preceding categories found in markdown (headers)"}},"required":["id","index","relativeIndex","name","slug","comment","categoryStack"],"additionalProperties":false,"description":"handy model type for storing stuff in a KeyValue Markdown file. empty lines are omitted\n\nall you need to specify in the kvmd is the key and the value, separated by \":\""},"simplifiedSchema":{"description":"handy model type for storing stuff in a KeyValue Markdown file. empty lines are omitted\n\nall you need to specify in the kvmd is the key and the value, separated by \":\"","properties":[{"name":"id","required":true,"schema":{"description":"Calculated:\n\nby taking the relative file path + a stringified version of the index.\n\nused for compatibility with some general purpose functions","type":"string"}},{"name":"index","required":true,"schema":{"description":"line where the kv was found (at any given moment this is an unqiue identifier, but it may change without notice, so it's not a good idea to store stuff in kvmd if it has references to the id)","type":"number"}},{"name":"relativeIndex","required":true,"schema":{"description":"relative index from the category header, starting count with 1. if there is no header, also counts starting with 1","type":"number"}},{"name":"name","required":true,"schema":{"description":"key\n\nshould be english because it's kind of part of the codebase!","type":"string"}},{"name":"slug","required":true,"schema":{"description":"calculated: slug for this key (kebab case form of the name)","type":"string"}},{"name":"value","required":false,"schema":{"description":"value behind the semicolom (:). If not given, will be undefined.\n\nIf possible, will be parsed to a number, boolean, null or undefined... otherwise it's a string\n\ncan be any language that we can detect","type":"string"}},{"name":"comment","required":true,"schema":{"description":"comment in html syntax. if not given, will be null","type":"string"}},{"name":"categoryStack","required":true,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}}],"type":"object"},"typeCoverage":0,"rawType":"KeyValueMarkdownModelType","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"hxWfKMszFCrcndpU","name":"CategoryStack","slug":"category-stack","relativePathFromProjectRoot":"/tools/parsing/file-conversion/md/key-value-markdown-js/src/kvmdDataToString.ts","srcFileId":"/kvmdDataToString","operationFolderName":"key-value-markdown-js","relativeFilePathFromSrc":"/kvmdDataToString.ts","relativeOperationBasePathFromProjectRoot":"/tools/parsing/file-conversion/md/key-value-markdown-js","operationName":"key-value-markdown-js","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"array","items":{"type":"string"}},"simplifiedSchema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"},"typeCoverage":0,"rawType":"CategoryStack","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}}]