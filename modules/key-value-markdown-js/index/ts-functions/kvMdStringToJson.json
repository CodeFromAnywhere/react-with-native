[{"id":"GlketxsCNaijaSgn","commentsInside":[],"rawText":" (\n  kvMdString: string,\n  relativeFilePath?: string\n): KeyValueMarkdownParse => {\n  const { parameters, content } = mdToJsonParse(kvMdString);\n\n  if (!content) {\n    console.log(\"NO CONTENT FOUND\");\n    return { parameters: {}, data: [] };\n  }\n\n  const paragraphs = content\n    .map((chunk) => getParagraphsRecursively(chunk))\n    .flat();\n\n  const flatLines = paragraphs\n    .map((paragraph) => {\n      const lines = paragraph.paragraph.split(\"\\n\");\n      return lines.map((line) => {\n        return { categoryStack: paragraph.categoryStack, line };\n      });\n    })\n    .flat();\n\n  const data: KeyValueMarkdownModelType[] = flatLines\n    .map(({ line, categoryStack }, index) => {\n      const relativeIndex = index;\n\n      const id = relativeFilePath\n        ? `${relativeFilePath}${index}`\n        : String(index);\n\n      const keyValueMarkdownModelType: KeyValueMarkdownModelType = {\n        categoryStack,\n        index,\n        relativeIndex,\n        id,\n        ...parseLine(line),\n      };\n\n      return keyValueMarkdownModelType;\n    })\n    .filter(\n      // empty data should be removed\n      (kvMarkdownData) =>\n        !!(\n          kvMarkdownData.comment ||\n          kvMarkdownData.name ||\n          kvMarkdownData.value\n        )\n    );\n\n  return { parameters, data };\n}","name":"kvMdStringToJson","slug":"kv-md-string-to-json","parameters":[{"name":"kvMdString","schema":{"type":"string"},"simplifiedSchema":{"type":"string"},"required":true},{"name":"relativeFilePath","schema":{"type":"string"},"simplifiedSchema":{"type":"string"},"required":false}],"description":"parses a key value md string (with support for headings and frontmatter)","returnType":{"rawType":"import(\"/Users/king/King/tools/types/common-types/build/keyValueMarkdown\").KeyValueMarkdownParse","typeDefinition":{"type":"object","properties":{"parameters":{"type":"object","properties":{}},"data":{"type":"array","items":{"type":"object","properties":{"id":{"type":"string","allOf":[{"transform":["trim"]},{"minLength":1}]},"index":{"type":"number"},"relativeIndex":{"type":"number"},"name":{"type":"string","allOf":[{"transform":["trim"]},{"minLength":1}]},"slug":{"type":"string","allOf":[{"transform":["trim"]},{"minLength":1}]},"value":{"enum":["ul","trin","umbe","als","ru"],"x-enumNames":["ul","trin","umbe","als","ru"],"type":"string"},"comment":{"type":"string | null"},"categoryStack":{"type":"array","items":{"type":"string","allOf":[{"transform":["trim"]},{"minLength":1}]}}},"required":["id","index","relativeIndex","name","slug","categoryStack"]}}},"required":["parameters","data"],"optional":false},"typeCoverage":0,"isArray":false,"isEnum":false,"isObject":true,"isPrimitive":false,"isEnumLiteral":false,"simplifiedSchema":{"properties":[{"name":"parameters","required":true,"schema":{"properties":[],"type":"object"}},{"name":"data","required":true,"schema":{"items":[{"schema":{"properties":[{"name":"id","required":true,"schema":{"type":"string"}},{"name":"index","required":true,"schema":{"type":"number"}},{"name":"relativeIndex","required":true,"schema":{"type":"number"}},{"name":"name","required":true,"schema":{"type":"string"}},{"name":"slug","required":true,"schema":{"type":"string"}},{"name":"value","required":false,"schema":{"enum":["ul","trin","umbe","als","ru"],"type":"string"}},{"name":"comment","required":false,"schema":{"properties":[],"type":"object"}},{"name":"categoryStack","required":true,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}}],"type":"object"},"name":null}],"type":"array"}}],"type":"object"}},"maxIndentationDepth":5,"relativePathFromProjectRoot":"/tools/parsing/file-conversion/md/key-value-markdown-js/src/kvMdStringToJson.ts","srcFileId":"/kvMdStringToJson","operationFolderName":"key-value-markdown-js","relativeFilePathFromSrc":"/kvMdStringToJson.ts","relativeOperationBasePathFromProjectRoot":"/tools/parsing/file-conversion/md/key-value-markdown-js","operationName":"key-value-markdown-js","size":{"characters":1358,"lines":54,"bytes":1358,"bytesPerCharacter":1,"charactersPerfLine":25.14814814814815,"linesPerFile":54,"numberOfFiles":1}}]