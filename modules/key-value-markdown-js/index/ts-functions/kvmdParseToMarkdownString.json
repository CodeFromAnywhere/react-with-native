[{"id":"fkhiFuzaSzxyRLoj","commentsInside":[],"rawText":" (\n  keyValueMarkdownParse: KeyValueMarkdownParse\n) => {\n  const frontmatterString = frontmatterParseToString(\n    keyValueMarkdownParse.parameters\n  );\n\n  // console.log({ data: keyValueMarkdownParse.data });\n  // NB: TODO: I don't know if we need to sort stuff at all, it should stay in the right order!\n  //const sortedData = keyValueMarkdownParse.data\n  //.sort((a, b) =>\n  //  JSON.stringify(a.categoryStack) < JSON.stringify(b.categoryStack) ? -1 : 1\n  //);\n  //console.log({ sortedData });\n\n  //2 go over every row, and parse it back into the line. if the row holds a new categorystack, make sure to parse that header as well\n  const result = keyValueMarkdownParse.data\n    .map((kvmdData, index) => {\n      const previous: KeyValueMarkdownModelType | undefined =\n        keyValueMarkdownParse.data[index - 1];\n\n      const string = kvmdDataToString(kvmdData, previous);\n\n      return string;\n    })\n    .join(\"\");\n\n  // console.log({ frontmatterString, result });\n\n  return `${frontmatterString}${result}`;\n}","name":"kvmdParseToMarkdownString","slug":"kvmd-parse-to-markdown-string","parameters":[{"name":"keyValueMarkdownParse","schema":{"$ref":"#/definitions/KeyValueMarkdownParse"},"simplifiedSchema":{"properties":[{"name":"parameters","required":true,"schema":{"properties":[],"type":"object"}},{"name":"data","required":true,"schema":{"items":[{"schema":{"description":"handy model type for storing stuff in a KeyValue Markdown file. empty lines are omitted\n\nall you need to specify in the kvmd is the key and the value, separated by \":\"","properties":[{"name":"id","required":true,"schema":{"description":"Calculated:\n\nby taking the relative file path + a stringified version of the index.\n\nused for compatibility with some general purpose functions","type":"string"}},{"name":"index","required":true,"schema":{"description":"line where the kv was found (at any given moment this is an unqiue identifier, but it may change without notice, so it's not a good idea to store stuff in kvmd if it has references to the id)","type":"number"}},{"name":"relativeIndex","required":true,"schema":{"description":"relative index from the category header, starting count with 1. if there is no header, also counts starting with 1","type":"number"}},{"name":"name","required":true,"schema":{"description":"key\n\nshould be english because it's kind of part of the codebase!","type":"string"}},{"name":"slug","required":true,"schema":{"description":"calculated: slug for this key (kebab case form of the name)","type":"string"}},{"name":"value","required":false,"schema":{"description":"value behind the semicolom (:). If not given, will be undefined.\n\nIf possible, will be parsed to a number, boolean, null or undefined... otherwise it's a string\n\ncan be any language that we can detect","type":"string"}},{"name":"comment","required":true,"schema":{"description":"comment in html syntax. if not given, will be null","type":"string"}},{"name":"categoryStack","required":true,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}}],"type":"object"},"name":"KeyValueMarkdownModelType"}],"type":"array"}}],"type":"object"},"required":true}],"description":"parses KeyValueMarkdownParse into a markdown string so it can be saved as a markdown file","returnType":{"rawType":"String","typeDefinition":{"optional":false,"type":"string","allOf":[{"transform":["trim"]},{"minLength":1}]},"typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":true,"isEnumLiteral":false,"simplifiedSchema":{"type":"string"}},"maxIndentationDepth":4,"relativePathFromProjectRoot":"/tools/parsing/file-conversion/md/key-value-markdown-js/src/kvmdParseToMarkdownString.ts","srcFileId":"/kvmdParseToMarkdownString","operationFolderName":"key-value-markdown-js","relativeFilePathFromSrc":"/kvmdParseToMarkdownString.ts","relativeOperationBasePathFromProjectRoot":"/tools/parsing/file-conversion/md/key-value-markdown-js","operationName":"key-value-markdown-js","size":{"characters":1105,"lines":31,"bytes":1105,"bytesPerCharacter":1,"charactersPerfLine":35.645161290322584,"linesPerFile":31,"numberOfFiles":1}}]