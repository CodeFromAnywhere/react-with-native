[{"id":"NYbCCHuwDlZHhPcJ","commentsInside":[],"rawText":" (\n  string: string\n): Omit<\n  KeyValueMarkdownModelType,\n  \"categoryStack\" | \"index\" | \"relativeIndex\" | \"id\"\n> => {\n  const htmlCommentRegex = /<!--[\\s\\S]*?-->/g;\n  const lineWithoutComment = string.replace(htmlCommentRegex, \"\");\n\n  const commentMatch = string.match(htmlCommentRegex)?.[0];\n  const comment = commentMatch\n    ? commentMatch.replace(\"<!--\", \"\").replace(\"-->\", \"\").trim()\n    : null;\n\n  const [keyString, valueString] = lineWithoutComment\n    .split(\":\")\n    .map((x) => x.trim());\n\n  const value = valueString?.length ? valueString : undefined;\n  return {\n    name: keyString,\n    value,\n    comment,\n    slug: kebabCase(keyString),\n  };\n}","name":"parseLine","slug":"parse-line","parameters":[{"name":"string","schema":{"type":"string"},"simplifiedSchema":{"type":"string"},"required":true}],"description":"parses a kv md line with data into a key, value, and comment (if available)","returnType":{"rawType":"Omit<import(\"/Users/king/King/tools/types/common-types/build/keyValueMarkdown\").KeyValueMarkdownModelType, \"categoryStack\" | \"index\" | \"relativeIndex\" | \"id\">","typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":false,"isEnumLiteral":false},"maxIndentationDepth":2,"relativePathFromProjectRoot":"/tools/parsing/file-conversion/md/key-value-markdown-js/src/parseLine.ts","srcFileId":"/parseLine","operationFolderName":"key-value-markdown-js","relativeFilePathFromSrc":"/parseLine.ts","relativeOperationBasePathFromProjectRoot":"/tools/parsing/file-conversion/md/key-value-markdown-js","operationName":"key-value-markdown-js","size":{"characters":732,"lines":26,"bytes":732,"bytesPerCharacter":1,"charactersPerfLine":28.153846153846153,"linesPerFile":26,"numberOfFiles":1}}]