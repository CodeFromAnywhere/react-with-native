[{"id":"UiqQuZBmtgHZrMKe","commentsInside":[],"rawText":" (\n  kvmdData: KeyValueMarkdownModelType,\n  previous: KeyValueMarkdownModelType | undefined\n) => {\n  const mismatchingHeaderIndex = kvmdData.categoryStack.findIndex(\n    (x, index) => previous?.categoryStack[index] !== x\n  );\n\n  // NB: No mismatch means they are the same\n  const sameHeaderAsPrevious = mismatchingHeaderIndex === -1;\n\n  const differentHeaders: MarkdownHeader[] = sameHeaderAsPrevious\n    ? []\n    : kvmdData.categoryStack\n        .map((category, index) => {\n          // NB: if the headers are the same, don't show them\n          if (index < mismatchingHeaderIndex) return;\n\n          // NB: if the header starts being different from previous, header, show everything after that\n          return {\n            level: index + 1,\n            title: category,\n          };\n        })\n        .filter(notEmpty);\n\n  const headerStrings = differentHeaders.map((header) => {\n    return `\\n${\"#\".repeat(header.level)} ${header.title}\\n`;\n  });\n\n  const line = `${kvmdData.name ? `${kvmdData.name}: ` : \"\"}${\n    kvmdData.value || \"\"\n  }${kvmdData.comment ? ` <!-- ${kvmdData.comment} -->` : \"\"}\\n`;\n\n  const newLineIfHeader = headerStrings.length > 0 ? \"\\n\" : \"\";\n  const resultingMarkdown = `${headerStrings.join(\n    \"\"\n  )}${newLineIfHeader}${line}`;\n\n  return resultingMarkdown;\n}","name":"kvmdDataToString","slug":"kvmd-data-to-string","parameters":[{"name":"kvmdData","schema":{"$ref":"#/definitions/KeyValueMarkdownModelType"},"simplifiedSchema":{"description":"handy model type for storing stuff in a KeyValue Markdown file. empty lines are omitted\n\nall you need to specify in the kvmd is the key and the value, separated by \":\"","properties":[{"name":"id","required":true,"schema":{"description":"Calculated:\n\nby taking the relative file path + a stringified version of the index.\n\nused for compatibility with some general purpose functions","type":"string"}},{"name":"index","required":true,"schema":{"description":"line where the kv was found (at any given moment this is an unqiue identifier, but it may change without notice, so it's not a good idea to store stuff in kvmd if it has references to the id)","type":"number"}},{"name":"relativeIndex","required":true,"schema":{"description":"relative index from the category header, starting count with 1. if there is no header, also counts starting with 1","type":"number"}},{"name":"name","required":true,"schema":{"description":"key\n\nshould be english because it's kind of part of the codebase!","type":"string"}},{"name":"slug","required":true,"schema":{"description":"calculated: slug for this key (kebab case form of the name)","type":"string"}},{"name":"value","required":false,"schema":{"description":"value behind the semicolom (:). If not given, will be undefined.\n\nIf possible, will be parsed to a number, boolean, null or undefined... otherwise it's a string\n\ncan be any language that we can detect","type":"string"}},{"name":"comment","required":true,"schema":{"description":"comment in html syntax. if not given, will be null","type":"string"}},{"name":"categoryStack","required":true,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}}],"type":"object"},"required":true},{"name":"previous","schema":{"$ref":"#/definitions/KeyValueMarkdownModelType"},"simplifiedSchema":{"description":"handy model type for storing stuff in a KeyValue Markdown file. empty lines are omitted\n\nall you need to specify in the kvmd is the key and the value, separated by \":\"","properties":[{"name":"id","required":true,"schema":{"description":"Calculated:\n\nby taking the relative file path + a stringified version of the index.\n\nused for compatibility with some general purpose functions","type":"string"}},{"name":"index","required":true,"schema":{"description":"line where the kv was found (at any given moment this is an unqiue identifier, but it may change without notice, so it's not a good idea to store stuff in kvmd if it has references to the id)","type":"number"}},{"name":"relativeIndex","required":true,"schema":{"description":"relative index from the category header, starting count with 1. if there is no header, also counts starting with 1","type":"number"}},{"name":"name","required":true,"schema":{"description":"key\n\nshould be english because it's kind of part of the codebase!","type":"string"}},{"name":"slug","required":true,"schema":{"description":"calculated: slug for this key (kebab case form of the name)","type":"string"}},{"name":"value","required":false,"schema":{"description":"value behind the semicolom (:). If not given, will be undefined.\n\nIf possible, will be parsed to a number, boolean, null or undefined... otherwise it's a string\n\ncan be any language that we can detect","type":"string"}},{"name":"comment","required":true,"schema":{"description":"comment in html syntax. if not given, will be null","type":"string"}},{"name":"categoryStack","required":true,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}}],"type":"object"},"required":false}],"description":"parses KeyValueMarkdownModelType into a string which can be part of a new markdown file\n\nNB: we need to know the previous line as well because the header we need to print depends on it","returnType":{"rawType":"String","typeDefinition":{"optional":false,"type":"string","allOf":[{"transform":["trim"]},{"minLength":1}]},"typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":true,"isEnumLiteral":false,"simplifiedSchema":{"type":"string"}},"maxIndentationDepth":6,"relativePathFromProjectRoot":"/tools/parsing/file-conversion/md/key-value-markdown-js/src/kvmdDataToString.ts","srcFileId":"/kvmdDataToString","operationFolderName":"key-value-markdown-js","relativeFilePathFromSrc":"/kvmdDataToString.ts","relativeOperationBasePathFromProjectRoot":"/tools/parsing/file-conversion/md/key-value-markdown-js","operationName":"key-value-markdown-js","size":{"characters":1477,"lines":43,"bytes":1477,"bytesPerCharacter":1,"charactersPerfLine":34.348837209302324,"linesPerFile":43,"numberOfFiles":1}}]