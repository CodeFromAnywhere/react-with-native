[{"id":"KMoAeoHGJiVoerPz","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/tools/parsing/file-conversion/md/key-value-markdown-js/src/kvmdDataToString.ts","srcFileId":"/kvmdDataToString","operationFolderName":"key-value-markdown-js","relativeFilePathFromSrc":"/kvmdDataToString.ts","relativeOperationBasePathFromProjectRoot":"/tools/parsing/file-conversion/md/key-value-markdown-js","operationName":"key-value-markdown-js","comment":"parses KeyValueMarkdownModelType into a string which can be part of a new markdown file\n\nNB: we need to know the previous line as well because the header we need to print depends on it","rawStatement":"export const kvmdDataToString = (\n  kvmdData: KeyValueMarkdownModelType,\n  previous: KeyValueMarkdownModelType | undefined\n) => {\n  const mismatchingHeaderIndex = kvmdData.categoryStack.findIndex(\n    (x, index) => previous?.categoryStack[index] !== x\n  );\n\n  // NB: No mismatch means they are the same\n  const sameHeaderAsPrevious = mismatchingHeaderIndex === -1;\n\n  const differentHeaders: MarkdownHeader[] = sameHeaderAsPrevious\n    ? []\n    : kvmdData.categoryStack\n        .map((category, index) => {\n          // NB: if the headers are the same, don't show them\n          if (index < mismatchingHeaderIndex) return;\n\n          // NB: if the header starts being different from previous, header, show everything after that\n          return {\n            level: index + 1,\n            title: category,\n          };\n        })\n        .filter(notEmpty);\n\n  const headerStrings = differentHeaders.map((header) => {\n    return `\\n${\"#\".repeat(header.level)} ${header.title}\\n`;\n  });\n\n  const line = `${kvmdData.name ? `${kvmdData.name}: ` : \"\"}${\n    kvmdData.value || \"\"\n  }${kvmdData.comment ? ` <!-- ${kvmdData.comment} -->` : \"\"}\\n`;\n\n  const newLineIfHeader = headerStrings.length > 0 ? \"\\n\" : \"\";\n  const resultingMarkdown = `${headerStrings.join(\n    \"\"\n  )}${newLineIfHeader}${line}`;\n\n  return resultingMarkdown;\n};","parameters":{},"types":["nb"],"firstLine":5,"lastLine":10}]