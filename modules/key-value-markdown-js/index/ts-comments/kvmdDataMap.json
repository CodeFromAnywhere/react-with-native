[{"id":"vOqAWedjlFzloJVk","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/tools/parsing/file-conversion/md/key-value-markdown-js/src/kvmdDataMap.ts","srcFileId":"/kvmdDataMap","operationFolderName":"key-value-markdown-js","relativeFilePathFromSrc":"/kvmdDataMap.ts","relativeOperationBasePathFromProjectRoot":"/tools/parsing/file-conversion/md/key-value-markdown-js","operationName":"key-value-markdown-js","comment":"DEPRECATED: probably never needed, unless I make it useful\n\nmapper function to give a kvmd data object other parameters.\n\nNB: not sure if this is useful. it would be useful if we could auto-generate the application of this function for multiple db models.","rawStatement":"export const kvmdDataMap = <\n  T extends { [key: string]: string | string[] | undefined }\n>(\n  data: KeyValueMarkdownModelType[],\n  {\n    keyName,\n    valueName,\n    categoryStackName,\n    commentName,\n  }: {\n    /**\n     * key by default\n     */\n    keyName?: string;\n    /**\n     * value by default\n     */\n    valueName?: string;\n    /**\n     * comment by default\n     */\n    commentName?: string;\n    /**\n     * categoryStack by default\n     */\n    categoryStackName?: string;\n  }\n): T[] => {\n  const newDataObject = data.map((item) => {\n    const newData = {\n      [keyName || \"name\"]: item.name,\n      [valueName || \"value\"]: item.value,\n      [commentName || \"comment\"]: item.comment,\n      [categoryStackName || \"categoryStack\"]: item.categoryStack,\n    } as T;\n\n    return newData;\n  });\n\n  return newDataObject;\n};","parameters":{},"types":["nb"],"firstLine":3,"lastLine":9}]