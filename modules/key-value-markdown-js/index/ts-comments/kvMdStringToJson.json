[{"id":"LoCCVdBuuynvkjed","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/tools/parsing/file-conversion/md/key-value-markdown-js/src/kvMdStringToJson.ts","srcFileId":"/kvMdStringToJson","operationFolderName":"key-value-markdown-js","relativeFilePathFromSrc":"/kvMdStringToJson.ts","relativeOperationBasePathFromProjectRoot":"/tools/parsing/file-conversion/md/key-value-markdown-js","operationName":"key-value-markdown-js","comment":"parses a key value md string (with support for headings and frontmatter)","rawStatement":"export const kvMdStringToJson = (\n  kvMdString: string,\n  relativeFilePath?: string\n): KeyValueMarkdownParse => {\n  const { parameters, content } = mdToJsonParse(kvMdString);\n\n  if (!content) {\n    console.log(\"NO CONTENT FOUND\");\n    return { parameters: {}, data: [] };\n  }\n\n  const paragraphs = content\n    .map((chunk) => getParagraphsRecursively(chunk))\n    .flat();\n\n  const flatLines = paragraphs\n    .map((paragraph) => {\n      const lines = paragraph.paragraph.split(\"\\n\");\n      return lines.map((line) => {\n        return { categoryStack: paragraph.categoryStack, line };\n      });\n    })\n    .flat();\n\n  const data: KeyValueMarkdownModelType[] = flatLines\n    .map(({ line, categoryStack }, index) => {\n      const relativeIndex = index;\n\n      const id = relativeFilePath\n        ? `${relativeFilePath}${index}`\n        : String(index);\n\n      const keyValueMarkdownModelType: KeyValueMarkdownModelType = {\n        categoryStack,\n        index,\n        relativeIndex,\n        id,\n        ...parseLine(line),\n      };\n\n      return keyValueMarkdownModelType;\n    })\n    .filter(\n      // empty data should be removed\n      (kvMarkdownData) =>\n        !!(\n          kvMarkdownData.comment ||\n          kvMarkdownData.name ||\n          kvMarkdownData.value\n        )\n    );\n\n  return { parameters, data };\n};","parameters":{},"types":[],"firstLine":9,"lastLine":11}]