[
  {
    "createdAt": 1666263624751,
    "updatedAt": 1666263624751,
    "deletedAt": 0,
    "createdFirstAt": 1666263624751,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/frontmatterParseToString.ts",
    "comment": "For now, simply quote a string if it contains commas\n\nThere are probably more edgecases that need to be fixed here",
    "rawStatement": "export const quotedOrNot = (string: string) => {\n  const returnString = string.includes(\",\") ? `\"${string}\"` : string;\n  return returnString;\n};",
    "parameters": {},
    "types": [],
    "firstLine": 35,
    "lastLine": 39,
    "id": "cxurjkidqvfhgnusjmzbhdav"
  },
  {
    "createdAt": 1666263624752,
    "updatedAt": 1666263624752,
    "deletedAt": 0,
    "createdFirstAt": 1666263624752,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/frontmatterParseToString.ts",
    "comment": "Parses frontmatter object into a frontmatter string\n- includes a newline at the end\n- string[] becomes a comma separated string\nTODO: maybe parse xxxAt values into human readable dates",
    "rawStatement": "export const frontmatterParseToString = (frontmatter: Frontmatter): string => {\n  const keys = Object.keys(frontmatter);\n\n  const keyValueLines = keys\n    .map((key) => {\n      const value = frontmatter[key];\n      const valueString = getFrontmatterValueString(value);\n\n      if (valueString === null) {\n        return null;\n      }\n\n      const parsedFrontmatterLine = `${key}: ${valueString}`;\n\n      return parsedFrontmatterLine;\n    })\n    .filter(notEmpty);\n\n  return keyValueLines.length === 0\n    ? \"\"\n    : `---\\n${keyValueLines.join(\"\\n\")}\\n---\\n`;\n};",
    "parameters": {},
    "types": [
      "todo"
    ],
    "firstLine": 44,
    "lastLine": 49,
    "id": "lwtwxehblypiflbywfetukuh"
  }
]