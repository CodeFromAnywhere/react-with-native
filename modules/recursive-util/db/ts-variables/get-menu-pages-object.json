{
  "createdAt": 1669385432757,
  "updatedAt": 1669385432757,
  "deletedAt": 0,
  "createdFirstAt": 1669385432757,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "getMenuPagesObject",
  "slug": "get-menu-pages-object",
  "operationRelativeTypescriptFilePath": "src/getMenuPagesObject.ts",
  "type": {
    "rawType": "<T>(flat: import(\"/Users/king/King/operations/tools/types/webpage-types/build/types\").WebPage<T>[]) => import(\"/Users/king/King/operations/tools/types/webpage-types/build/types\").MenuObjectType<T>",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "<T>(\n  flat: WebPage<T>[]\n): MenuObjectType<T> => {\n  // NB: to make the NestedWebPage[], we don't want the pageData.\n  const flatWithoutPageData: WebPage[] = flat.map((x) => {\n    return { ...x, pageData: null, __check: true };\n  });\n\n  const nestedObject = makeNestedObjectFromQueryPathObject(\n    flatWithoutPageData,\n    {}\n  );\n\n  const keyToWebPage = (nestedObject: NestedObject<WebPage>, key: string) => {\n    return { ...nestedObject, pageData: null, queryPath: \"\" };\n  };\n\n  const nested: NestedWebPage[] = nestedObjectToChildObject(\n    nestedObject,\n    keyToWebPage\n  );\n\n  return { flat, nested };\n}",
  "description": "",
  "id": "nbnkzxsvjquvzjrkdjgitzrp"
}