{
  "createdAt": 1669385444619,
  "updatedAt": 1669385444619,
  "deletedAt": 0,
  "createdFirstAt": 1669385444619,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "reduceQueryPathsRecursively",
  "slug": "reduce-query-paths-recursively",
  "operationRelativeTypescriptFilePath": "src/reduceQueryPathsRecursively.ts",
  "type": {
    "rawType": "(queryPaths: string[], initialValue: import(\"/Users/king/King/operations/tools/types/recursive-types/build/NestedPathObject\").NestedPathObject) => import(\"/Users/king/King/operations/tools/types/recursive-types/build/NestedPathObject\").NestedPathObject",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "(\n  queryPaths: string[],\n  initialValue: NestedPathObject\n): NestedPathObject => {\n  const nestedPathObject = queryPaths.reduce((nestedPathObject, queryPath) => {\n    const parts: string[] = queryPath.split(\"/\");\n    const firstPart = parts[0];\n\n    // Base case 1: if we already have it, skip it\n    if (Object.keys(nestedPathObject).includes(firstPart)) {\n      return nestedPathObject;\n    }\n\n    const queryPathsHere = queryPaths\n      .filter((p) => p.startsWith(`${firstPart}/`))\n      .map((p) => p.substring(firstPart.length + 1));\n\n    // Base case 2: if it's a leaf (last item), and it has NO children, return it with value null\n    if (parts.length === 1 && queryPathsHere.length === 0) {\n      return { ...nestedPathObject, [firstPart]: null };\n    }\n\n    // Recursion case: find all queryPaths starting with the same branch\n    const newNestedPathObject: NestedPathObject = {\n      ...nestedPathObject,\n      [firstPart]: reduceQueryPathsRecursively(queryPathsHere, {}),\n    };\n\n    return newNestedPathObject;\n  }, initialValue);\n\n  return nestedPathObject;\n}",
  "description": "",
  "id": "bvdhwapfpvrfhwklwsadwemw"
}