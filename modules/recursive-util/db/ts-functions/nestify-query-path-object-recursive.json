{
  "createdAt": 1669385440855,
  "updatedAt": 1669385440855,
  "deletedAt": 0,
  "createdFirstAt": 1669385440855,
  "isApiExposed": true,
  "isExported": true,
  "groupAuthorization": {},
  "operationRelativeTypescriptFilePath": "src/nestifyQueryPathObjectRecursive.ts",
  "commentsInside": [],
  "rawText": " <T extends QueryPathObject>(\n  queryPathObjects: T[],\n  level?: number\n): NestedQueryPathObject<T>[] => {\n  console.log({ level });\n  const nestedPathObject: NestedQueryPathObject<T>[] = queryPathObjects.reduce(\n    (previous, current, currentIndex, queryPathObjects) => {\n      const queryPathRemainder =\n        current.queryPathRemainder || current.queryPath;\n      const parts: string[] = queryPathRemainder.split(\"/\");\n      const firstPart = parts.find((x) => x.length !== 0);\n\n      const hasFirstPartAlready = !!previous.find(\n        (x) => x.queryPathChunk === firstPart\n      );\n\n      if (hasFirstPartAlready) {\n        // Base case 1: if we already have it, skip it, go to the next\n        return previous;\n      }\n\n      const children = queryPathObjects\n        // not myself!\n        .filter((x) => x.queryPath !== current.queryPath)\n        .filter((x) => {\n          const queryPath = x.queryPathRemainder || x.queryPath;\n          const isMatch = queryPath.startsWith(firstPart + \"/\");\n          return isMatch;\n        })\n        .map((x) => {\n          // everything after the first part\n          const queryPathRemainder = x.queryPath.split(firstPart!)[1];\n          return { ...x, queryPathRemainder };\n        });\n\n      const newNestedQueryPathObject = {\n        ...current,\n        // queryPath: folderQueryPath,\n        children:\n          children.length === 0\n            ? undefined\n            : [\n                current,\n                ...nestifyQueryPathObjectRecursive(children, (level || 0) + 1),\n              ],\n        queryPathChunk: firstPart,\n      } as NestedQueryPathObject<T>;\n      // add the new one to the array\n      return [...previous, newNestedQueryPathObject];\n    },\n    [] as NestedQueryPathObject<T>[]\n  );\n\n  return nestedPathObject;\n}",
  "name": "nestifyQueryPathObjectRecursive",
  "slug": "nestify-query-path-object-recursive",
  "parameters": [],
  "description": "",
  "returnType": {
    "rawType": "import(\"/Users/king/King/operations/tools/user-interfaces/gui/smart/recursive-util/src/nestifyQueryPathObjectRecursive\").NestedQueryPathObject<T>[]",
    "typeDefinition": {
      "optional": false,
      "type": "array",
      "items": {}
    },
    "typeCoverage": 0,
    "isArray": true,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "items": [
        {
          "schema": {
            "properties": [],
            "type": "object"
          },
          "name": null
        }
      ],
      "type": "array"
    }
  },
  "maxIndentationDepth": 8,
  "size": {
    "characters": 1795,
    "lines": 55,
    "bytes": 1795,
    "bytesPerCharacter": 1,
    "charactersPerLine": 33,
    "linesPerFile": 55,
    "numberOfFiles": 1
  },
  "id": "bqtcwpvrftttygjwmlsmoygw"
}