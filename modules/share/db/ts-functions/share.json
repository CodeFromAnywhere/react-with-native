{
  "createdAt": 1670529077336,
  "updatedAt": 1670529077336,
  "deletedAt": 0,
  "createdFirstAt": 1670529077336,
  "isApiExposed": true,
  "isExported": true,
  "groupAuthorization": {},
  "operationRelativeTypescriptFilePath": "src/Share.tsx",
  "commentsInside": [],
  "rawText": " (props: {\n  /**\n   * Can be a more specific text instead of the text of the whole page. Can be omitted. Will just take full page text\n   */\n  contextText?: string;\n}) => {\n  const { contextText } = props;\n  const { handleModal } = useModal();\n\n  const contextualPromptQuery =\n    queries.useGetReferencableModelData(\"ContextualPrompt\");\n  const alert = useAlert();\n  const allText = useAllText();\n  const lastSelection = useLastSelection();\n\n  const modalContent = (\n    <Div className=\"h-[60vh] overflow-y-auto\">\n      {/* \n        - show text + selection, both editable\n        - show prompt input to ask chat-gpt\n        - open prompt textbox based on text and selection\n        */}\n      <FunctionForm\n        tsFunction={Index}\n        initialValues={[\n          contextText || allText || \"\",\n          lastSelection || \"\",\n          undefined,\n          \"\",\n          \"\",\n          \"\",\n        ]}\n        referencableModelData={{\n          ContextualPrompt: {\n            isLoading: contextualPromptQuery.isLoading,\n            data: contextualPromptQuery.data?.result,\n          },\n        }}\n        projectRelativeStorageFilePath=\"README.md\"\n        modelName=\"\"\n        withApiResult={(result: RealApiReturnType<\"processChatGptPrompt\">) => {\n          console.log({ result });\n\n          if (!result.result?.isSuccessful) {\n            errorToast(\n              result?.result?.message ||\n                result.message ||\n                \"Something went wrong\"\n            );\n            return;\n          }\n\n          handleModal(null);\n          const text = result?.result?.result?.text;\n          alert?.(\"You did it\", text, [\n            { text: \"Share\", style: \"default\" },\n            { text: \"Do nothing\", style: \"destructive\" },\n          ]);\n        }}\n      />\n    </Div>\n  );\n\n  return (\n    <ClickableIcon\n      emoji=\"ðŸ’¡\"\n      onClick={() => {\n        // opens modal\n        handleModal(modalContent);\n      }}\n    />\n  );\n}",
  "name": "Share",
  "slug": "share",
  "parameters": [
    {
      "name": "props",
      "schema": {
        "type": "object",
        "properties": {
          "contextText": {
            "type": "string",
            "description": "Can be a more specific text instead of the text of the whole page. Can be omitted. Will just take full page text"
          }
        },
        "additionalProperties": false
      },
      "simplifiedSchema": {
        "properties": [
          {
            "name": "contextText",
            "required": false,
            "schema": {
              "fullComment": "Can be a more specific text instead of the text of the whole page. Can be omitted. Will just take full page text",
              "type": "string"
            }
          }
        ],
        "type": "object"
      },
      "required": true
    }
  ],
  "description": "and\n\n",
  "returnType": {
    "rawType": "JSX.Element",
    "typeDefinition": {
      "optional": false,
      "$ref": "#/definitions/JSX.Element"
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 8,
  "size": {
    "characters": 1956,
    "lines": 75,
    "bytes": 1958,
    "bytesPerCharacter": 1.0010224948875255,
    "charactersPerLine": 26,
    "linesPerFile": 75,
    "numberOfFiles": 1
  },
  "id": "lczsdekvcjmghfvnjqneuiwt"
}