{
  "createdAt": 1670063314443,
  "updatedAt": 1670063314443,
  "deletedAt": 0,
  "createdFirstAt": 1670063314443,
  "isApiExposed": true,
  "isExported": true,
  "groupAuthorization": {},
  "operationRelativeTypescriptFilePath": "src/compressImages.ts",
  "commentsInside": [],
  "rawText": " async (\n  absoluteBasePath: string,\n  sizeWidthPx?: number,\n  quality?: number\n) => {\n  const results = (\n    await explore({\n      basePath: absoluteBasePath,\n      extension: [\"jpg\", \"jpeg\", \"png\"],\n    })\n  ).map((x) => x.path);\n\n  const compressionResult = await Promise.all(\n    results.map((path) =>\n      compressImage(path, {\n        targetFormat: \"webp\",\n        quality: quality || 50,\n        sizeWidthPx: sizeWidthPx || 1920,\n      })\n    )\n  );\n\n  const isSuccessful =\n    compressionResult.filter(notEmpty).length === compressionResult.length;\n\n  console.log(\"DONE\", { isSuccessful });\n}",
  "name": "compressImages",
  "slug": "compress-images",
  "parameters": [
    {
      "name": "absoluteBasePath",
      "schema": {
        "type": "string"
      },
      "simplifiedSchema": {
        "type": "string"
      },
      "required": true
    },
    {
      "name": "sizeWidthPx",
      "schema": {
        "type": "number"
      },
      "simplifiedSchema": {
        "type": "number"
      },
      "required": false
    },
    {
      "name": "quality",
      "schema": {
        "type": "number"
      },
      "simplifiedSchema": {
        "type": "number"
      },
      "required": false
    }
  ],
  "description": "searches the folder recursively for all images and converts them to webp",
  "returnType": {
    "rawType": "any",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 4,
  "size": {
    "characters": 674,
    "lines": 27,
    "bytes": 674,
    "bytesPerCharacter": 1,
    "charactersPerLine": 25,
    "linesPerFile": 27,
    "numberOfFiles": 1
  },
  "id": "ycbbklrefoqyliekkybjekou"
}