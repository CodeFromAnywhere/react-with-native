{
  "createdAt": 1670528891296,
  "updatedAt": 1670528891296,
  "deletedAt": 0,
  "createdFirstAt": 1670528891296,
  "id": "namedparameterstypeof-upsertform",
  "name": "NamedParameters<typeof UpsertForm>",
  "slug": "namedparameterstypeof-upsertform",
  "operationRelativeTypescriptFilePath": "src/UpsertForm.tsx",
  "hasGeneric": false,
  "isExported": false,
  "isOperationIndex": false,
  "description": "",
  "isDbModel": false,
  "commentsInside": [],
  "type": {
    "typeDefinition": {
      "type": "object",
      "properties": {
        "props": {
          "type": "object",
          "properties": {
            "simplifiedSchema": {
              "$ref": "#/definitions/SimplifiedSchema",
              "description": "the schema for the model we want to update/create"
            },
            "instance": {
              "description": "an instance, if it's an update form"
            },
            "referencableModelNames": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "NB: this thing will make hooks appear, so it must be constant!"
            },
            "modelName": {
              "type": "string",
              "description": "Provide this"
            }
          },
          "required": [
            "simplifiedSchema",
            "instance",
            "modelName"
          ],
          "additionalProperties": false
        }
      },
      "required": [
        "props"
      ],
      "additionalProperties": false
    },
    "simplifiedSchema": {
      "properties": [
        {
          "name": "props",
          "required": true,
          "schema": {
            "properties": [
              {
                "name": "simplifiedSchema",
                "required": true,
                "schema": {
                  "fullComment": "the schema for the model we want to update/create\n\nJSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form",
                  "properties": [
                    {
                      "name": "todo",
                      "required": false,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "discussion",
                      "required": false,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "idea",
                      "required": false,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "later",
                      "required": false,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "nb",
                      "required": false,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "title",
                      "required": false,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "section",
                      "required": false,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "description",
                      "required": false,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "type",
                      "required": true,
                      "schema": {
                        "enum": [
                          "string",
                          "number",
                          "boolean",
                          "object",
                          "array",
                          "null"
                        ],
                        "fullComment": "- string\n- number\n- boolean\n- object\n- array\n- null\n\nNB: Omit doesn't work for the indexer! This would be the type: Omit<JSONSchema7TypeName, \"integer\">;\n\n",
                        "nb": "Omit doesn't work for the indexer! This would be the type: Omit<JSONSchema7TypeName, \"integer\">;",
                        "type": "string"
                      }
                    },
                    {
                      "name": "circularRefName",
                      "required": false,
                      "schema": {
                        "fullComment": "sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here",
                        "type": "string"
                      }
                    },
                    {
                      "name": "enum",
                      "required": false,
                      "schema": {
                        "fullComment": "in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think",
                        "items": [
                          {
                            "schema": {
                              "fullComment": "Primitive type",
                              "properties": [],
                              "type": "object"
                            },
                            "name": "JSONSchema7Type"
                          }
                        ],
                        "type": "array"
                      }
                    },
                    {
                      "name": "properties",
                      "required": false,
                      "schema": {
                        "fullComment": "in case of object, this will always appear",
                        "items": [
                          {
                            "schema": {
                              "fullComment": "",
                              "properties": [
                                {
                                  "name": "name",
                                  "required": true,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "schema",
                                  "required": true,
                                  "schema": {
                                    "circularRefName": "SimplifiedSchema",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "required",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "NB: can't we put this in the SimplifiedSchema itself?",
                                    "nb": "can't we put this in the SimplifiedSchema itself?",
                                    "type": "boolean"
                                  }
                                }
                              ],
                              "type": "object"
                            },
                            "name": "SimplifiedSchemaProperty"
                          }
                        ],
                        "type": "array"
                      }
                    },
                    {
                      "name": "items",
                      "required": false,
                      "schema": {
                        "fullComment": "in case of arrays, this will always appear",
                        "items": [
                          {
                            "schema": {
                              "fullComment": "",
                              "properties": [
                                {
                                  "name": "name",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "name in case of it being a reference, otherwise null",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "schema",
                                  "required": true,
                                  "schema": {
                                    "circularRefName": "SimplifiedSchema",
                                    "properties": [],
                                    "type": "object"
                                  }
                                }
                              ],
                              "type": "object"
                            },
                            "name": "SimplifiedSchemaItem"
                          }
                        ],
                        "type": "array"
                      }
                    },
                    {
                      "name": "fullComment",
                      "required": false,
                      "schema": {
                        "fullComment": "Full doccomment, parsed without all stars syntax.\n\nNB: besides this, every `CommentType` can optionally also be found as a property on the `SimplifiedSchema`",
                        "nb": "besides this, every `CommentType` can optionally also be found as a property on the `SimplifiedSchema`",
                        "type": "string"
                      }
                    }
                  ],
                  "type": "object"
                }
              },
              {
                "name": "instance",
                "required": true,
                "schema": {
                  "fullComment": "an instance, if it's an update form",
                  "properties": [],
                  "type": "object"
                }
              },
              {
                "name": "referencableModelNames",
                "required": false,
                "schema": {
                  "fullComment": "NB: this thing will make hooks appear, so it must be constant!",
                  "nb": "this thing will make hooks appear, so it must be constant!",
                  "items": [
                    {
                      "schema": {
                        "type": "string"
                      },
                      "name": null
                    }
                  ],
                  "type": "array"
                }
              },
              {
                "name": "modelName",
                "required": true,
                "schema": {
                  "fullComment": "Provide this",
                  "type": "string"
                }
              }
            ],
            "type": "object"
          }
        }
      ],
      "type": "object"
    },
    "typeCoverage": 0,
    "rawType": "NamedParameters<typeof UpsertForm>",
    "isArray": false,
    "isEnum": false,
    "isEnumLiteral": false,
    "isObject": false,
    "isPrimitive": false
  }
}