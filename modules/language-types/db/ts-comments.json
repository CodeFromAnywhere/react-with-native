[
  {
    "createdAt": 1668335519705,
    "updatedAt": 1668335519705,
    "deletedAt": 0,
    "createdFirstAt": 1668335519705,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/WordMatrix.ts",
    "comment": "Language specific word information",
    "rawStatement": "export type WordLanguageInfo = {\n  /**\n   * TITLE: Latin writing (if common)\n   * DESCRIPTION: the latin standard written representation for this word\n   */\n  latin?: LanguageLatin;\n  /**\n   * TITLE: Alternative writing (if common)\n   *\n   * DESCRIPTION: the alternative written representation for this word, if any (if the language commonly uses a different script, this can be noted here)\n   */\n  alternative?: LanguageAlternative;\n  /**\n   * TITLE: Phonetic writing\n   *\n   * DESCRIPTION: Phonetic writing is used to describe how the word is pronounced\n   */\n  phonetic?: LanguagePhonetic;\n  /**\n   * TITLE: Spoken word\n   *\n   * DESCRIPTION: Audio fragment containing the spoken word.\n   */\n  audio?: LanguageAudio;\n  /**\n   * DESCRIPTION: A list of examples of usage of this word (can contain both a text and audio)\n   */\n  examples?: LanguageExample[];\n};",
    "parameters": {},
    "types": [],
    "firstLine": 17,
    "lastLine": 19,
    "id": "oldxlhwodanflichnserqckf"
  },
  {
    "createdAt": 1668335519705,
    "updatedAt": 1668335519705,
    "deletedAt": 0,
    "createdFirstAt": 1668335519705,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/WordMatrix.ts",
    "comment": "Mapped Object for performance reasons",
    "rawStatement": "export interface MappedWordMatrix extends MappedObject<WordMatrix> {\n  [baseLanguageWord: string]: WordMatrix;\n}",
    "parameters": {},
    "types": [],
    "firstLine": 50,
    "lastLine": 50,
    "id": "hkwuefynrjuiitmkemcvnwtm"
  },
  {
    "createdAt": 1668335519705,
    "updatedAt": 1668335519705,
    "deletedAt": 0,
    "createdFirstAt": 1668335519705,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/WordMatrix.ts",
    "comment": "Different ways to categorise a word semantically",
    "rawStatement": "export interface WordCategory extends SlugModelType {\n  description: Markdown;\n}",
    "parameters": {},
    "types": [],
    "firstLine": 55,
    "lastLine": 57,
    "id": "nnkifofjelmahbdrvnbkywbu"
  },
  {
    "createdAt": 1668335519705,
    "updatedAt": 1668335519705,
    "deletedAt": 0,
    "createdFirstAt": 1668335519705,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/WordMatrix.ts",
    "comment": "",
    "rawStatement": "export type WordPriority = \"critical\" | \"high\" | \"medium\" | \"low\";",
    "parameters": {},
    "types": [],
    "firstLine": 62,
    "lastLine": 64,
    "id": "visovmvnzhhwoazzbmjzmmst"
  },
  {
    "createdAt": 1668335519705,
    "updatedAt": 1668335519705,
    "deletedAt": 0,
    "createdFirstAt": 1668335519705,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/WordMatrix.ts",
    "comment": "In linguistics, conjugation is the creation of derived forms of a verb from its principal parts by inflection\n\nBesides this, there are also other ways to alter a word to add/change meaning, this should be summed up using this enum.",
    "rawStatement": "export type WordConjucation = \"plural\" | \"female\" | \"male\" | \"past\" | \"future\";",
    "parameters": {},
    "types": [],
    "firstLine": 68,
    "lastLine": 72,
    "id": "ycdzhdofztrmzxwmtrcftbso"
  },
  {
    "createdAt": 1668335519705,
    "updatedAt": 1668335519705,
    "deletedAt": 0,
    "createdFirstAt": 1668335519705,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/WordMatrix.ts",
    "comment": "\nWordMatrix is a matrix that contains as much information about a word as possible in as many languages as possible. Easy to use for 1:1 translation\n\n@see Language",
    "rawStatement": "export type WordMatrix = WordLanguageInfoObject &\n  WordInfo &\n  CoreWordMatrixWord &\n  SlugModelType;",
    "parameters": {
      "dbStorageMethod": "jsonMultiple"
    },
    "types": [],
    "firstLine": 181,
    "lastLine": 189,
    "id": "goizmzecoglbmyyvgykkmqsi"
  },
  {
    "createdAt": 1668335519705,
    "updatedAt": 1668335519705,
    "deletedAt": 0,
    "createdFirstAt": 1668335519705,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/WordMatrix.ts",
    "comment": "DEPRECATED: to be migrated to `WordMatrix`",
    "rawStatement": "export interface TokiPonaMatrix extends DefaultModelType {\n  category: string;\n  type: string;\n  tok?: string;\n  nl?: string;\n  en?: string;\n  np?: string;\n  \"pt-br\"?: string;\n  em: string;\n}",
    "parameters": {},
    "types": [],
    "firstLine": 195,
    "lastLine": 197,
    "id": "lxvkkcezsgrgzbhccbbezkwv"
  },
  {
    "createdAt": 1668335519705,
    "updatedAt": 1668335519705,
    "deletedAt": 0,
    "createdFirstAt": 1668335519705,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/WordMatrix.ts",
    "comment": "Best way to combine words if you don't want to specify all language specific info for a new word. You can refer to words from the WordMatrix instead!",
    "rawStatement": "export interface WordCombination extends SlugModelType, WordInfo {\n  /**\n   * Should be autofilled based on the combination of the base words\n   */\n  name: string;\n  /**\n   * Should be auto filled in based on the combination of the base words\n   */\n  slug: string;\n  /**\n   * Which words is this a combination of?\n   */\n  wordMatrixSlugs?: Slug[];\n}",
    "parameters": {},
    "types": [],
    "firstLine": 209,
    "lastLine": 211,
    "id": "rwjokjymfwwtmiefhgelzfff"
  }
]