{
  "createdAt": 1666331231003,
  "updatedAt": 1666331231003,
  "deletedAt": 0,
  "createdFirstAt": 1666331231003,
  "id": "wordmatrix",
  "name": "WordMatrix",
  "slug": "wordmatrix",
  "operationRelativeTypescriptFilePath": "src/WordMatrix.ts",
  "hasGeneric": false,
  "isExported": true,
  "rawText": "\n\n/**\n * ---\n * dbStorageMethod: jsonMultiple\n * ---\n *\n * WordMatrix is a matrix that contains as much information about a word as possible in as many languages as possible. Easy to use for 1:1 translation\n *\n * Besides the keys that are language-agnostic, for every language `key` (See `Language`), there are multiple keys that are connected to that specific language\n *\n * - [key]: the latin standard written representation for this word\n * - [key]Alternative: the alternative written representation for this word, if any (if the language commonly uses a different script, this can be noted here)\n * - [key]Audio: a short audio recording for pronunciation of this word\n * - [key]Phonetic: a phonetic representation of pronunciation of this word in this language\n * - [key]Examples: An array of examples of usage of this word (can contain both a text and audio)\n *\n * @see Language\n */\nexport type WordMatrix = WordInfoObject & {\n  /**\n   * unique name of the word in english (or another one if `language` is specified). Can usually be the word itself...\n   */\n  name: string;\n  slug: Slug;\n  /**\n   * Definition of the word (in english)\n   */\n  description: Markdown;\n  descriptionAudio: BackendAsset;\n\n  image?: BackendAsset;\n\n  wordCategorySlugs: Slug[];\n  wordCategorys: WordCategory[];\n\n  type?: WordType;\n\n  /**\n   * Priority level is how important this word is to communicate...\n   *\n   *\n   * TITLE: Priority level (defaults to low)\n   *\n   * critical: toki pona word (top 150)\n   * high: top 500\n   * medium: top 2500\n   * low (default): less occurence\n   */\n  priorityLevel?: WordPriority;\n\n  /**\n   * TITLE: Rank (How common this word is in the english language?)\n   */\n  rank?: number;\n\n  /**\n   * amount used across the whole monorepo\n   */\n  usageCountCalculated?: number;\n\n  /**\n   * All ways the word is conjucated from the root word\n   */\n  conjucations?: WordConjucation[];\n\n  /**\n   * SECTION: Relations to other words...\n   *\n   * TITLE: Root word\n   *\n   * DESCRIPTION: If the word is a certain conjugation of a root word, this should be a reference to the root word\n   */\n  root_wordMatrixSlug?: Slug;\n  root_word?: WordMatrix;\n\n  /**\n   * TITLE: Common Synonym\n   *\n   * DESCRIPTION: f the word is a synonym to a more common word, this should be a reference to the more common synonym. This is a 1:1 synonym only\n   */\n  common_wordMatrixSlug?: Slug;\n  common_wordMatrix?: WordMatrix;\n\n  /**\n   * TITLE: Opposite word\n   *\n   * DESCRIPTION: If there's another word that's the complete opposite of this one, you can declare it here\n   */\n  opposite_wordMatrixSlug?: Slug;\n  opposite_wordMatrix?: WordMatrix;\n\n  /**\n   * TITLE: Toki-Pona words\n   *\n   * DESCRIPTION: The closest way to express this word in toki pona terms.\n   *\n   * NB: should be an array (order is important here) of slugs of words containing the \"tk\" property. This needs to be a reference so we can also give information about the individual toki pona words\n   */\n  tokiPona_wordMatrixSlugs?: Slug[];\n  tokiPona_wordMatrixs?: WordMatrix[];\n\n  /**\n   * TITLE: Emoji Words\n   *\n   * The closest way to express this word in emoji terms should be an array (order is important here) of slugs of words containing \"emoji\" property\n   *\n   * This needs to be a reference so we can also give information about the individual emojis\n   */\n  emoji_wordMatrixSlugs?: Slug[];\n  emoji_wordMatrixs?: WordMatrix[];\n\n  /**\n   * SECTION: Translations\n   *\n   * DESCRIPTION: Single emoji describing this word 1:1 (if it are more emojis of multiple words, please use the reference instead)\n   */\n  emoji?: string;\n} & SlugModelType;",
  "extensions": [],
  "isOperationIndex": false,
  "description": "\nWordMatrix is a matrix that contains as much information about a word as possible in as many languages as possible. Easy to use for 1:1 translation\n\nBesides the keys that are language-agnostic, for every language `key` (See `Language`), there are multiple keys that are connected to that specific language\n\n- [key]: the latin standard written representation for this word\n- [key]Alternative: the alternative written representation for this word, if any (if the language commonly uses a different script, this can be noted here)\n- [key]Audio: a short audio recording for pronunciation of this word\n- [key]Phonetic: a phonetic representation of pronunciation of this word in this language\n- [key]Examples: An array of examples of usage of this word (can contain both a text and audio)\n\n@see Language",
  "dbStorageMethod": "jsonMultiple",
  "isDbModel": true,
  "commentsInside": [],
  "type": {
    "typeDefinition": {
      "type": "object",
      "additionalProperties": {
        "anyOf": [
          {
            "$ref": "#/definitions/Id"
          },
          {
            "not": {}
          }
        ]
      },
      "properties": {
        "slug": {
          "$ref": "#/definitions/Slug"
        },
        "name": {
          "type": "string",
          "description": "unique name of the word in english (or another one if `language` is specified). Can usually be the word itself..."
        },
        "language": {
          "$ref": "#/definitions/Language",
          "default": "en"
        },
        "createdAt": {
          "$ref": "#/definitions/CreatedAt"
        },
        "updatedAt": {
          "$ref": "#/definitions/UpdatedAt"
        },
        "deletedAt": {
          "$ref": "#/definitions/DeletedAt"
        },
        "createdFirstAt": {
          "$ref": "#/definitions/CreatedFirstAt"
        },
        "operationName": {
          "type": [
            "null",
            "string"
          ],
          "description": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you"
        },
        "projectRelativePath": {
          "type": "string",
          "description": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you"
        },
        "operationRelativePath": {
          "type": "string",
          "description": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you"
        },
        "id": {
          "$ref": "#/definitions/Id"
        },
        "categoryStackCalculated": {
          "$ref": "#/definitions/CategoryStack",
          "description": "In case of jsonSingle storageMethod, the categoryStack is generated by the location of the file in the db model folder in the db folder.\n\nNB: Changing this value when updating/upserting, changes where the item is located!"
        },
        "description": {
          "$ref": "#/definitions/Markdown",
          "description": "Definition of the word (in english)"
        },
        "descriptionAudio": {
          "$ref": "#/definitions/BackendAsset"
        },
        "image": {
          "$ref": "#/definitions/BackendAsset"
        },
        "wordCategorySlugs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Slug"
          }
        },
        "wordCategorys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WordCategory"
          }
        },
        "type": {
          "$ref": "#/definitions/WordType"
        },
        "priorityLevel": {
          "$ref": "#/definitions/WordPriority",
          "description": "Priority level is how important this word is to communicate...\n\n\nTITLE: Priority level (defaults to low)\n\ncritical: toki pona word (top 150) high: top 500 medium: top 2500 low (default): less occurence"
        },
        "rank": {
          "type": "number",
          "description": "TITLE: Rank (How common this word is in the english language?)"
        },
        "usageCountCalculated": {
          "type": "number",
          "description": "amount used across the whole monorepo"
        },
        "conjucations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WordConjucation"
          },
          "description": "All ways the word is conjucated from the root word"
        },
        "root_wordMatrixSlug": {
          "$ref": "#/definitions/Slug",
          "description": "SECTION: Relations to other words...\n\nTITLE: Root word\n\nDESCRIPTION: If the word is a certain conjugation of a root word, this should be a reference to the root word"
        },
        "root_word": {
          "$ref": "#/definitions/WordMatrix"
        },
        "common_wordMatrixSlug": {
          "$ref": "#/definitions/Slug",
          "description": "TITLE: Common Synonym\n\nDESCRIPTION: f the word is a synonym to a more common word, this should be a reference to the more common synonym. This is a 1:1 synonym only"
        },
        "common_wordMatrix": {
          "$ref": "#/definitions/WordMatrix"
        },
        "opposite_wordMatrixSlug": {
          "$ref": "#/definitions/Slug",
          "description": "TITLE: Opposite word\n\nDESCRIPTION: If there's another word that's the complete opposite of this one, you can declare it here"
        },
        "opposite_wordMatrix": {
          "$ref": "#/definitions/WordMatrix"
        },
        "tokiPona_wordMatrixSlugs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Slug"
          },
          "description": "TITLE: Toki-Pona words\n\nDESCRIPTION: The closest way to express this word in toki pona terms.\n\nNB: should be an array (order is important here) of slugs of words containing the \"tk\" property. This needs to be a reference so we can also give information about the individual toki pona words"
        },
        "tokiPona_wordMatrixs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WordMatrix"
          }
        },
        "emoji_wordMatrixSlugs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Slug"
          },
          "description": "TITLE: Emoji Words\n\nThe closest way to express this word in emoji terms should be an array (order is important here) of slugs of words containing \"emoji\" property\n\nThis needs to be a reference so we can also give information about the individual emojis"
        },
        "emoji_wordMatrixs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WordMatrix"
          }
        },
        "emoji": {
          "type": "string",
          "description": "SECTION: Translations\n\nDESCRIPTION: Single emoji describing this word 1:1 (if it are more emojis of multiple words, please use the reference instead)"
        },
        "english": {
          "$ref": "#/definitions/WordInfo"
        },
        "dutch": {
          "$ref": "#/definitions/WordInfo"
        },
        "nepali": {
          "$ref": "#/definitions/WordInfo"
        },
        "portuguese": {
          "$ref": "#/definitions/WordInfo"
        },
        "brazilian": {
          "$ref": "#/definitions/WordInfo"
        },
        "german": {
          "$ref": "#/definitions/WordInfo"
        },
        "french": {
          "$ref": "#/definitions/WordInfo"
        },
        "spanish": {
          "$ref": "#/definitions/WordInfo"
        },
        "italian": {
          "$ref": "#/definitions/WordInfo"
        },
        "norwegian": {
          "$ref": "#/definitions/WordInfo"
        },
        "swedish": {
          "$ref": "#/definitions/WordInfo"
        },
        "danish": {
          "$ref": "#/definitions/WordInfo"
        },
        "vietnamese": {
          "$ref": "#/definitions/WordInfo"
        },
        "indonesian": {
          "$ref": "#/definitions/WordInfo"
        },
        "southAfrican": {
          "$ref": "#/definitions/WordInfo"
        },
        "tokiPona": {
          "$ref": "#/definitions/WordInfo"
        },
        "hindi": {
          "$ref": "#/definitions/WordInfo"
        },
        "mandarin": {
          "$ref": "#/definitions/WordInfo"
        },
        "arabic": {
          "$ref": "#/definitions/WordInfo"
        },
        "bengali": {
          "$ref": "#/definitions/WordInfo"
        },
        "urdu": {
          "$ref": "#/definitions/WordInfo"
        },
        "japanese": {
          "$ref": "#/definitions/WordInfo"
        },
        "swahili": {
          "$ref": "#/definitions/WordInfo"
        }
      },
      "required": [
        "createdAt",
        "createdFirstAt",
        "deletedAt",
        "description",
        "descriptionAudio",
        "id",
        "language",
        "name",
        "operationName",
        "projectRelativePath",
        "slug",
        "updatedAt",
        "wordCategorySlugs",
        "wordCategorys"
      ],
      "description": "--- dbStorageMethod: jsonMultiple\n---\n\nWordMatrix is a matrix that contains as much information about a word as possible in as many languages as possible. Easy to use for 1:1 translation\n\nBesides the keys that are language-agnostic, for every language `key` (See `Language`), there are multiple keys that are connected to that specific language\n\n- [key]: the latin standard written representation for this word\n- [key]Alternative: the alternative written representation for this word, if any (if the language commonly uses a different script, this can be noted here)\n- [key]Audio: a short audio recording for pronunciation of this word\n- [key]Phonetic: a phonetic representation of pronunciation of this word in this language\n- [key]Examples: An array of examples of usage of this word (can contain both a text and audio)"
    },
    "simplifiedSchema": {
      "fullComment": "--- dbStorageMethod: jsonMultiple\n---\n\nWordMatrix is a matrix that contains as much information about a word as possible in as many languages as possible. Easy to use for 1:1 translation\n\nBesides the keys that are language-agnostic, for every language `key` (See `Language`), there are multiple keys that are connected to that specific language\n\n- [key]: the latin standard written representation for this word\n- [key]Alternative: the alternative written representation for this word, if any (if the language commonly uses a different script, this can be noted here)\n- [key]Audio: a short audio recording for pronunciation of this word\n- [key]Phonetic: a phonetic representation of pronunciation of this word in this language\n- [key]Examples: An array of examples of usage of this word (can contain both a text and audio)",
      "properties": [
        {
          "name": "slug",
          "required": true,
          "schema": {
            "fullComment": "use this for any identifier that's not an Id-type. Usually this is a kebab-case version of a written text, but it can also be a file path, for example.",
            "type": "string"
          }
        },
        {
          "name": "name",
          "required": true,
          "schema": {
            "fullComment": "unique name of the word in english (or another one if `language` is specified). Can usually be the word itself...",
            "type": "string"
          }
        },
        {
          "name": "language",
          "required": true,
          "schema": {
            "enum": [
              "english",
              "dutch",
              "nepali",
              "portuguese",
              "brazilian",
              "german",
              "french",
              "spanish",
              "italian",
              "norwegian",
              "swedish",
              "danish",
              "vietnamese",
              "indonesian",
              "southAfrican",
              "tokiPona",
              "hindi",
              "mandarin",
              "arabic",
              "bengali",
              "urdu",
              "japanese",
              "swahili"
            ],
            "fullComment": "all currently supported languages",
            "type": "string"
          }
        },
        {
          "name": "createdAt",
          "required": true,
          "schema": {
            "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
            "type": "number"
          }
        },
        {
          "name": "updatedAt",
          "required": true,
          "schema": {
            "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
            "type": "number"
          }
        },
        {
          "name": "deletedAt",
          "required": true,
          "schema": {
            "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
            "type": "number"
          }
        },
        {
          "name": "createdFirstAt",
          "required": true,
          "schema": {
            "fullComment": "in some cases, data can be created before it was created in our system. In this case, use CreatedFirstAt if this information is important.\n\nTime\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
            "type": "number"
          }
        },
        {
          "name": "operationName",
          "required": true,
          "schema": {
            "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
            "type": "null"
          }
        },
        {
          "name": "projectRelativePath",
          "required": true,
          "schema": {
            "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
            "type": "string"
          }
        },
        {
          "name": "operationRelativePath",
          "required": false,
          "schema": {
            "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
            "type": "string"
          }
        },
        {
          "name": "id",
          "required": true,
          "schema": {
            "fullComment": "Should be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
            "type": "string"
          }
        },
        {
          "name": "categoryStackCalculated",
          "required": false,
          "schema": {
            "fullComment": "In case of jsonSingle storageMethod, the categoryStack is generated by the location of the file in the db model folder in the db folder.\n\nNB: Changing this value when updating/upserting, changes where the item is located!\n\n",
            "nb": "Changing this value when updating/upserting, changes where the item is located!",
            "items": [
              {
                "schema": {
                  "type": "string"
                },
                "name": null
              }
            ],
            "type": "array"
          }
        },
        {
          "name": "description",
          "required": true,
          "schema": {
            "fullComment": "Definition of the word (in english)\n\na string that is known to contain markdown.",
            "type": "string"
          }
        },
        {
          "name": "descriptionAudio",
          "required": true,
          "schema": {
            "fullComment": "Part of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
            "properties": [
              {
                "name": "alt",
                "required": false,
                "schema": {
                  "fullComment": "Stored value\n\nAlt text for the asset",
                  "type": "string"
                }
              },
              {
                "name": "relativePath",
                "required": false,
                "schema": {
                  "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                  "type": "string"
                }
              },
              {
                "name": "name",
                "required": false,
                "schema": {
                  "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                  "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                  "type": "string"
                }
              },
              {
                "name": "temporaryDestination",
                "required": false,
                "schema": {
                  "fullComment": "Not stored\n\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                  "type": "string"
                }
              }
            ],
            "type": "object"
          }
        },
        {
          "name": "image",
          "required": false,
          "schema": {
            "fullComment": "Part of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
            "properties": [
              {
                "name": "alt",
                "required": false,
                "schema": {
                  "fullComment": "Stored value\n\nAlt text for the asset",
                  "type": "string"
                }
              },
              {
                "name": "relativePath",
                "required": false,
                "schema": {
                  "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                  "type": "string"
                }
              },
              {
                "name": "name",
                "required": false,
                "schema": {
                  "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                  "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                  "type": "string"
                }
              },
              {
                "name": "temporaryDestination",
                "required": false,
                "schema": {
                  "fullComment": "Not stored\n\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                  "type": "string"
                }
              }
            ],
            "type": "object"
          }
        },
        {
          "name": "wordCategorySlugs",
          "required": true,
          "schema": {
            "items": [
              {
                "schema": {
                  "fullComment": "use this for any identifier that's not an Id-type. Usually this is a kebab-case version of a written text, but it can also be a file path, for example.",
                  "type": "string"
                },
                "name": "Slug"
              }
            ],
            "type": "array"
          }
        },
        {
          "name": "type",
          "required": false,
          "schema": {
            "enum": [
              "noun",
              "adjective",
              "verb"
            ],
            "fullComment": "",
            "type": "string"
          }
        },
        {
          "name": "priorityLevel",
          "required": false,
          "schema": {
            "enum": [
              "critical",
              "high",
              "medium",
              "low"
            ],
            "fullComment": "Priority level is how important this word is to communicate...\n\n\nTITLE: Priority level (defaults to low)\n\ncritical: toki pona word (top 150) high: top 500 medium: top 2500 low (default): less occurence\n\n",
            "title": "Priority level (defaults to low)",
            "type": "string"
          }
        },
        {
          "name": "rank",
          "required": false,
          "schema": {
            "fullComment": "TITLE: Rank (How common this word is in the english language?)",
            "title": "Rank (How common this word is in the english language?)",
            "type": "number"
          }
        },
        {
          "name": "usageCountCalculated",
          "required": false,
          "schema": {
            "fullComment": "amount used across the whole monorepo",
            "type": "number"
          }
        },
        {
          "name": "conjucations",
          "required": false,
          "schema": {
            "fullComment": "All ways the word is conjucated from the root word",
            "items": [
              {
                "schema": {
                  "enum": [
                    "plural",
                    "female",
                    "male",
                    "past",
                    "future"
                  ],
                  "fullComment": "In linguistics, conjugation is the creation of derived forms of a verb from its principal parts by inflection\n\nBesides this, there are also other ways to alter a word to add/change meaning, this should be summed up using this enum.",
                  "type": "string"
                },
                "name": "WordConjucation"
              }
            ],
            "type": "array"
          }
        },
        {
          "name": "root_wordMatrixSlug",
          "required": false,
          "schema": {
            "fullComment": "SECTION: Relations to other words...\n\nTITLE: Root word\n\nDESCRIPTION: If the word is a certain conjugation of a root word, this should be a reference to the root word\n\nuse this for any identifier that's not an Id-type. Usually this is a kebab-case version of a written text, but it can also be a file path, for example.",
            "title": "Root word",
            "section": "Relations to other words...",
            "description": "If the word is a certain conjugation of a root word, this should be a reference to the root word",
            "type": "string"
          }
        },
        {
          "name": "root_word",
          "required": false,
          "schema": {
            "circularRefName": "WordMatrix",
            "properties": [],
            "type": "object"
          }
        },
        {
          "name": "common_wordMatrixSlug",
          "required": false,
          "schema": {
            "fullComment": "TITLE: Common Synonym\n\nDESCRIPTION: f the word is a synonym to a more common word, this should be a reference to the more common synonym. This is a 1:1 synonym only\n\nuse this for any identifier that's not an Id-type. Usually this is a kebab-case version of a written text, but it can also be a file path, for example.",
            "title": "Common Synonym",
            "description": "f the word is a synonym to a more common word, this should be a reference to the more common synonym. This is a 1:1 synonym only",
            "type": "string"
          }
        },
        {
          "name": "opposite_wordMatrixSlug",
          "required": false,
          "schema": {
            "fullComment": "TITLE: Opposite word\n\nDESCRIPTION: If there's another word that's the complete opposite of this one, you can declare it here\n\nuse this for any identifier that's not an Id-type. Usually this is a kebab-case version of a written text, but it can also be a file path, for example.",
            "title": "Opposite word",
            "description": "If there's another word that's the complete opposite of this one, you can declare it here",
            "type": "string"
          }
        },
        {
          "name": "tokiPona_wordMatrixSlugs",
          "required": false,
          "schema": {
            "fullComment": "TITLE: Toki-Pona words\n\nDESCRIPTION: The closest way to express this word in toki pona terms.\n\nNB: should be an array (order is important here) of slugs of words containing the \"tk\" property. This needs to be a reference so we can also give information about the individual toki pona words",
            "nb": "should be an array (order is important here) of slugs of words containing the \"tk\" property. This needs to be a reference so we can also give information about the individual toki pona words",
            "title": "Toki-Pona words",
            "description": "The closest way to express this word in toki pona terms.",
            "items": [
              {
                "schema": {
                  "fullComment": "use this for any identifier that's not an Id-type. Usually this is a kebab-case version of a written text, but it can also be a file path, for example.",
                  "type": "string"
                },
                "name": "Slug"
              }
            ],
            "type": "array"
          }
        },
        {
          "name": "emoji_wordMatrixSlugs",
          "required": false,
          "schema": {
            "fullComment": "TITLE: Emoji Words\n\nThe closest way to express this word in emoji terms should be an array (order is important here) of slugs of words containing \"emoji\" property\n\nThis needs to be a reference so we can also give information about the individual emojis",
            "title": "Emoji Words",
            "items": [
              {
                "schema": {
                  "fullComment": "use this for any identifier that's not an Id-type. Usually this is a kebab-case version of a written text, but it can also be a file path, for example.",
                  "type": "string"
                },
                "name": "Slug"
              }
            ],
            "type": "array"
          }
        },
        {
          "name": "emoji",
          "required": false,
          "schema": {
            "fullComment": "SECTION: Translations\n\nDESCRIPTION: Single emoji describing this word 1:1 (if it are more emojis of multiple words, please use the reference instead)",
            "section": "Translations",
            "description": "Single emoji describing this word 1:1 (if it are more emojis of multiple words, please use the reference instead)",
            "type": "string"
          }
        },
        {
          "name": "english",
          "required": false,
          "schema": {
            "fullComment": "",
            "properties": [
              {
                "name": "latin",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Latin writing (if common)",
                  "title": "Latin writing (if common)",
                  "type": "string"
                }
              },
              {
                "name": "alternative",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Alternative writing (if common)",
                  "title": "Alternative writing (if common)",
                  "type": "string"
                }
              },
              {
                "name": "phonetic",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Phonetic writing\n\nDESCRIPTION: Phonetic writing is used to describe how the word is pronounced",
                  "title": "Phonetic writing",
                  "description": "Phonetic writing is used to describe how the word is pronounced",
                  "type": "string"
                }
              },
              {
                "name": "audio",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Spoken word\n\nDESCRIPTION: Audio fragment containing the spoken word\n\nPart of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
                  "title": "Spoken word",
                  "description": "Audio fragment containing the spoken word",
                  "properties": [
                    {
                      "name": "alt",
                      "required": false,
                      "schema": {
                        "fullComment": "Stored value\n\nAlt text for the asset",
                        "type": "string"
                      }
                    },
                    {
                      "name": "relativePath",
                      "required": false,
                      "schema": {
                        "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                        "type": "string"
                      }
                    },
                    {
                      "name": "name",
                      "required": false,
                      "schema": {
                        "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                        "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                        "type": "string"
                      }
                    },
                    {
                      "name": "temporaryDestination",
                      "required": false,
                      "schema": {
                        "fullComment": "Not stored\n\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                        "type": "string"
                      }
                    }
                  ],
                  "type": "object"
                }
              },
              {
                "name": "examples",
                "required": false,
                "schema": {
                  "fullComment": "DESCRIPTION: Sentences containing this word",
                  "description": "Sentences containing this word",
                  "items": [
                    {
                      "schema": {
                        "properties": [
                          {
                            "name": "text",
                            "required": true,
                            "schema": {
                              "type": "string"
                            }
                          },
                          {
                            "name": "audio",
                            "required": true,
                            "schema": {
                              "fullComment": "Part of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
                              "properties": [
                                {
                                  "name": "alt",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Stored value\n\nAlt text for the asset",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "relativePath",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "name",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                                    "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "temporaryDestination",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Not stored\n\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                                    "type": "string"
                                  }
                                }
                              ],
                              "type": "object"
                            }
                          }
                        ],
                        "type": "object"
                      },
                      "name": null
                    }
                  ],
                  "type": "array"
                }
              }
            ],
            "type": "object"
          }
        },
        {
          "name": "dutch",
          "required": false,
          "schema": {
            "fullComment": "",
            "properties": [
              {
                "name": "latin",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Latin writing (if common)",
                  "title": "Latin writing (if common)",
                  "type": "string"
                }
              },
              {
                "name": "alternative",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Alternative writing (if common)",
                  "title": "Alternative writing (if common)",
                  "type": "string"
                }
              },
              {
                "name": "phonetic",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Phonetic writing\n\nDESCRIPTION: Phonetic writing is used to describe how the word is pronounced",
                  "title": "Phonetic writing",
                  "description": "Phonetic writing is used to describe how the word is pronounced",
                  "type": "string"
                }
              },
              {
                "name": "audio",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Spoken word\n\nDESCRIPTION: Audio fragment containing the spoken word\n\nPart of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
                  "title": "Spoken word",
                  "description": "Audio fragment containing the spoken word",
                  "properties": [
                    {
                      "name": "alt",
                      "required": false,
                      "schema": {
                        "fullComment": "Stored value\n\nAlt text for the asset",
                        "type": "string"
                      }
                    },
                    {
                      "name": "relativePath",
                      "required": false,
                      "schema": {
                        "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                        "type": "string"
                      }
                    },
                    {
                      "name": "name",
                      "required": false,
                      "schema": {
                        "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                        "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                        "type": "string"
                      }
                    },
                    {
                      "name": "temporaryDestination",
                      "required": false,
                      "schema": {
                        "fullComment": "Not stored\n\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                        "type": "string"
                      }
                    }
                  ],
                  "type": "object"
                }
              },
              {
                "name": "examples",
                "required": false,
                "schema": {
                  "fullComment": "DESCRIPTION: Sentences containing this word",
                  "description": "Sentences containing this word",
                  "items": [
                    {
                      "schema": {
                        "properties": [
                          {
                            "name": "text",
                            "required": true,
                            "schema": {
                              "type": "string"
                            }
                          },
                          {
                            "name": "audio",
                            "required": true,
                            "schema": {
                              "fullComment": "Part of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
                              "properties": [
                                {
                                  "name": "alt",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Stored value\n\nAlt text for the asset",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "relativePath",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "name",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                                    "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "temporaryDestination",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Not stored\n\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                                    "type": "string"
                                  }
                                }
                              ],
                              "type": "object"
                            }
                          }
                        ],
                        "type": "object"
                      },
                      "name": null
                    }
                  ],
                  "type": "array"
                }
              }
            ],
            "type": "object"
          }
        },
        {
          "name": "nepali",
          "required": false,
          "schema": {
            "fullComment": "",
            "properties": [
              {
                "name": "latin",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Latin writing (if common)",
                  "title": "Latin writing (if common)",
                  "type": "string"
                }
              },
              {
                "name": "alternative",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Alternative writing (if common)",
                  "title": "Alternative writing (if common)",
                  "type": "string"
                }
              },
              {
                "name": "phonetic",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Phonetic writing\n\nDESCRIPTION: Phonetic writing is used to describe how the word is pronounced",
                  "title": "Phonetic writing",
                  "description": "Phonetic writing is used to describe how the word is pronounced",
                  "type": "string"
                }
              },
              {
                "name": "audio",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Spoken word\n\nDESCRIPTION: Audio fragment containing the spoken word\n\nPart of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
                  "title": "Spoken word",
                  "description": "Audio fragment containing the spoken word",
                  "properties": [
                    {
                      "name": "alt",
                      "required": false,
                      "schema": {
                        "fullComment": "Stored value\n\nAlt text for the asset",
                        "type": "string"
                      }
                    },
                    {
                      "name": "relativePath",
                      "required": false,
                      "schema": {
                        "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                        "type": "string"
                      }
                    },
                    {
                      "name": "name",
                      "required": false,
                      "schema": {
                        "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                        "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                        "type": "string"
                      }
                    },
                    {
                      "name": "temporaryDestination",
                      "required": false,
                      "schema": {
                        "fullComment": "Not stored\n\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                        "type": "string"
                      }
                    }
                  ],
                  "type": "object"
                }
              },
              {
                "name": "examples",
                "required": false,
                "schema": {
                  "fullComment": "DESCRIPTION: Sentences containing this word",
                  "description": "Sentences containing this word",
                  "items": [
                    {
                      "schema": {
                        "properties": [
                          {
                            "name": "text",
                            "required": true,
                            "schema": {
                              "type": "string"
                            }
                          },
                          {
                            "name": "audio",
                            "required": true,
                            "schema": {
                              "fullComment": "Part of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
                              "properties": [
                                {
                                  "name": "alt",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Stored value\n\nAlt text for the asset",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "relativePath",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "name",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                                    "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "temporaryDestination",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Not stored\n\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                                    "type": "string"
                                  }
                                }
                              ],
                              "type": "object"
                            }
                          }
                        ],
                        "type": "object"
                      },
                      "name": null
                    }
                  ],
                  "type": "array"
                }
              }
            ],
            "type": "object"
          }
        },
        {
          "name": "portuguese",
          "required": false,
          "schema": {
            "fullComment": "",
            "properties": [
              {
                "name": "latin",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Latin writing (if common)",
                  "title": "Latin writing (if common)",
                  "type": "string"
                }
              },
              {
                "name": "alternative",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Alternative writing (if common)",
                  "title": "Alternative writing (if common)",
                  "type": "string"
                }
              },
              {
                "name": "phonetic",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Phonetic writing\n\nDESCRIPTION: Phonetic writing is used to describe how the word is pronounced",
                  "title": "Phonetic writing",
                  "description": "Phonetic writing is used to describe how the word is pronounced",
                  "type": "string"
                }
              },
              {
                "name": "audio",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Spoken word\n\nDESCRIPTION: Audio fragment containing the spoken word\n\nPart of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
                  "title": "Spoken word",
                  "description": "Audio fragment containing the spoken word",
                  "properties": [
                    {
                      "name": "alt",
                      "required": false,
                      "schema": {
                        "fullComment": "Stored value\n\nAlt text for the asset",
                        "type": "string"
                      }
                    },
                    {
                      "name": "relativePath",
                      "required": false,
                      "schema": {
                        "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                        "type": "string"
                      }
                    },
                    {
                      "name": "name",
                      "required": false,
                      "schema": {
                        "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                        "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                        "type": "string"
                      }
                    },
                    {
                      "name": "temporaryDestination",
                      "required": false,
                      "schema": {
                        "fullComment": "Not stored\n\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                        "type": "string"
                      }
                    }
                  ],
                  "type": "object"
                }
              },
              {
                "name": "examples",
                "required": false,
                "schema": {
                  "fullComment": "DESCRIPTION: Sentences containing this word",
                  "description": "Sentences containing this word",
                  "items": [
                    {
                      "schema": {
                        "properties": [
                          {
                            "name": "text",
                            "required": true,
                            "schema": {
                              "type": "string"
                            }
                          },
                          {
                            "name": "audio",
                            "required": true,
                            "schema": {
                              "fullComment": "Part of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
                              "properties": [
                                {
                                  "name": "alt",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Stored value\n\nAlt text for the asset",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "relativePath",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "name",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                                    "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "temporaryDestination",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Not stored\n\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                                    "type": "string"
                                  }
                                }
                              ],
                              "type": "object"
                            }
                          }
                        ],
                        "type": "object"
                      },
                      "name": null
                    }
                  ],
                  "type": "array"
                }
              }
            ],
            "type": "object"
          }
        },
        {
          "name": "brazilian",
          "required": false,
          "schema": {
            "fullComment": "",
            "properties": [
              {
                "name": "latin",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Latin writing (if common)",
                  "title": "Latin writing (if common)",
                  "type": "string"
                }
              },
              {
                "name": "alternative",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Alternative writing (if common)",
                  "title": "Alternative writing (if common)",
                  "type": "string"
                }
              },
              {
                "name": "phonetic",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Phonetic writing\n\nDESCRIPTION: Phonetic writing is used to describe how the word is pronounced",
                  "title": "Phonetic writing",
                  "description": "Phonetic writing is used to describe how the word is pronounced",
                  "type": "string"
                }
              },
              {
                "name": "audio",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Spoken word\n\nDESCRIPTION: Audio fragment containing the spoken word\n\nPart of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
                  "title": "Spoken word",
                  "description": "Audio fragment containing the spoken word",
                  "properties": [
                    {
                      "name": "alt",
                      "required": false,
                      "schema": {
                        "fullComment": "Stored value\n\nAlt text for the asset",
                        "type": "string"
                      }
                    },
                    {
                      "name": "relativePath",
                      "required": false,
                      "schema": {
                        "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                        "type": "string"
                      }
                    },
                    {
                      "name": "name",
                      "required": false,
                      "schema": {
                        "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                        "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                        "type": "string"
                      }
                    },
                    {
                      "name": "temporaryDestination",
                      "required": false,
                      "schema": {
                        "fullComment": "Not stored\n\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                        "type": "string"
                      }
                    }
                  ],
                  "type": "object"
                }
              },
              {
                "name": "examples",
                "required": false,
                "schema": {
                  "fullComment": "DESCRIPTION: Sentences containing this word",
                  "description": "Sentences containing this word",
                  "items": [
                    {
                      "schema": {
                        "properties": [
                          {
                            "name": "text",
                            "required": true,
                            "schema": {
                              "type": "string"
                            }
                          },
                          {
                            "name": "audio",
                            "required": true,
                            "schema": {
                              "fullComment": "Part of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
                              "properties": [
                                {
                                  "name": "alt",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Stored value\n\nAlt text for the asset",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "relativePath",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "name",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                                    "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "temporaryDestination",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Not stored\n\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                                    "type": "string"
                                  }
                                }
                              ],
                              "type": "object"
                            }
                          }
                        ],
                        "type": "object"
                      },
                      "name": null
                    }
                  ],
                  "type": "array"
                }
              }
            ],
            "type": "object"
          }
        },
        {
          "name": "german",
          "required": false,
          "schema": {
            "fullComment": "",
            "properties": [
              {
                "name": "latin",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Latin writing (if common)",
                  "title": "Latin writing (if common)",
                  "type": "string"
                }
              },
              {
                "name": "alternative",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Alternative writing (if common)",
                  "title": "Alternative writing (if common)",
                  "type": "string"
                }
              },
              {
                "name": "phonetic",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Phonetic writing\n\nDESCRIPTION: Phonetic writing is used to describe how the word is pronounced",
                  "title": "Phonetic writing",
                  "description": "Phonetic writing is used to describe how the word is pronounced",
                  "type": "string"
                }
              },
              {
                "name": "audio",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Spoken word\n\nDESCRIPTION: Audio fragment containing the spoken word\n\nPart of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
                  "title": "Spoken word",
                  "description": "Audio fragment containing the spoken word",
                  "properties": [
                    {
                      "name": "alt",
                      "required": false,
                      "schema": {
                        "fullComment": "Stored value\n\nAlt text for the asset",
                        "type": "string"
                      }
                    },
                    {
                      "name": "relativePath",
                      "required": false,
                      "schema": {
                        "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                        "type": "string"
                      }
                    },
                    {
                      "name": "name",
                      "required": false,
                      "schema": {
                        "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                        "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                        "type": "string"
                      }
                    },
                    {
                      "name": "temporaryDestination",
                      "required": false,
                      "schema": {
                        "fullComment": "Not stored\n\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                        "type": "string"
                      }
                    }
                  ],
                  "type": "object"
                }
              },
              {
                "name": "examples",
                "required": false,
                "schema": {
                  "fullComment": "DESCRIPTION: Sentences containing this word",
                  "description": "Sentences containing this word",
                  "items": [
                    {
                      "schema": {
                        "properties": [
                          {
                            "name": "text",
                            "required": true,
                            "schema": {
                              "type": "string"
                            }
                          },
                          {
                            "name": "audio",
                            "required": true,
                            "schema": {
                              "fullComment": "Part of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
                              "properties": [
                                {
                                  "name": "alt",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Stored value\n\nAlt text for the asset",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "relativePath",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "name",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                                    "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "temporaryDestination",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Not stored\n\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                                    "type": "string"
                                  }
                                }
                              ],
                              "type": "object"
                            }
                          }
                        ],
                        "type": "object"
                      },
                      "name": null
                    }
                  ],
                  "type": "array"
                }
              }
            ],
            "type": "object"
          }
        },
        {
          "name": "french",
          "required": false,
          "schema": {
            "fullComment": "",
            "properties": [
              {
                "name": "latin",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Latin writing (if common)",
                  "title": "Latin writing (if common)",
                  "type": "string"
                }
              },
              {
                "name": "alternative",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Alternative writing (if common)",
                  "title": "Alternative writing (if common)",
                  "type": "string"
                }
              },
              {
                "name": "phonetic",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Phonetic writing\n\nDESCRIPTION: Phonetic writing is used to describe how the word is pronounced",
                  "title": "Phonetic writing",
                  "description": "Phonetic writing is used to describe how the word is pronounced",
                  "type": "string"
                }
              },
              {
                "name": "audio",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Spoken word\n\nDESCRIPTION: Audio fragment containing the spoken word\n\nPart of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
                  "title": "Spoken word",
                  "description": "Audio fragment containing the spoken word",
                  "properties": [
                    {
                      "name": "alt",
                      "required": false,
                      "schema": {
                        "fullComment": "Stored value\n\nAlt text for the asset",
                        "type": "string"
                      }
                    },
                    {
                      "name": "relativePath",
                      "required": false,
                      "schema": {
                        "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                        "type": "string"
                      }
                    },
                    {
                      "name": "name",
                      "required": false,
                      "schema": {
                        "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                        "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                        "type": "string"
                      }
                    },
                    {
                      "name": "temporaryDestination",
                      "required": false,
                      "schema": {
                        "fullComment": "Not stored\n\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                        "type": "string"
                      }
                    }
                  ],
                  "type": "object"
                }
              },
              {
                "name": "examples",
                "required": false,
                "schema": {
                  "fullComment": "DESCRIPTION: Sentences containing this word",
                  "description": "Sentences containing this word",
                  "items": [
                    {
                      "schema": {
                        "properties": [
                          {
                            "name": "text",
                            "required": true,
                            "schema": {
                              "type": "string"
                            }
                          },
                          {
                            "name": "audio",
                            "required": true,
                            "schema": {
                              "fullComment": "Part of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
                              "properties": [
                                {
                                  "name": "alt",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Stored value\n\nAlt text for the asset",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "relativePath",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "name",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                                    "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "temporaryDestination",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Not stored\n\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                                    "type": "string"
                                  }
                                }
                              ],
                              "type": "object"
                            }
                          }
                        ],
                        "type": "object"
                      },
                      "name": null
                    }
                  ],
                  "type": "array"
                }
              }
            ],
            "type": "object"
          }
        },
        {
          "name": "spanish",
          "required": false,
          "schema": {
            "fullComment": "",
            "properties": [
              {
                "name": "latin",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Latin writing (if common)",
                  "title": "Latin writing (if common)",
                  "type": "string"
                }
              },
              {
                "name": "alternative",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Alternative writing (if common)",
                  "title": "Alternative writing (if common)",
                  "type": "string"
                }
              },
              {
                "name": "phonetic",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Phonetic writing\n\nDESCRIPTION: Phonetic writing is used to describe how the word is pronounced",
                  "title": "Phonetic writing",
                  "description": "Phonetic writing is used to describe how the word is pronounced",
                  "type": "string"
                }
              },
              {
                "name": "audio",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Spoken word\n\nDESCRIPTION: Audio fragment containing the spoken word\n\nPart of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
                  "title": "Spoken word",
                  "description": "Audio fragment containing the spoken word",
                  "properties": [
                    {
                      "name": "alt",
                      "required": false,
                      "schema": {
                        "fullComment": "Stored value\n\nAlt text for the asset",
                        "type": "string"
                      }
                    },
                    {
                      "name": "relativePath",
                      "required": false,
                      "schema": {
                        "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                        "type": "string"
                      }
                    },
                    {
                      "name": "name",
                      "required": false,
                      "schema": {
                        "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                        "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                        "type": "string"
                      }
                    },
                    {
                      "name": "temporaryDestination",
                      "required": false,
                      "schema": {
                        "fullComment": "Not stored\n\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                        "type": "string"
                      }
                    }
                  ],
                  "type": "object"
                }
              },
              {
                "name": "examples",
                "required": false,
                "schema": {
                  "fullComment": "DESCRIPTION: Sentences containing this word",
                  "description": "Sentences containing this word",
                  "items": [
                    {
                      "schema": {
                        "properties": [
                          {
                            "name": "text",
                            "required": true,
                            "schema": {
                              "type": "string"
                            }
                          },
                          {
                            "name": "audio",
                            "required": true,
                            "schema": {
                              "fullComment": "Part of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
                              "properties": [
                                {
                                  "name": "alt",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Stored value\n\nAlt text for the asset",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "relativePath",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "name",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                                    "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "temporaryDestination",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Not stored\n\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                                    "type": "string"
                                  }
                                }
                              ],
                              "type": "object"
                            }
                          }
                        ],
                        "type": "object"
                      },
                      "name": null
                    }
                  ],
                  "type": "array"
                }
              }
            ],
            "type": "object"
          }
        },
        {
          "name": "italian",
          "required": false,
          "schema": {
            "fullComment": "",
            "properties": [
              {
                "name": "latin",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Latin writing (if common)",
                  "title": "Latin writing (if common)",
                  "type": "string"
                }
              },
              {
                "name": "alternative",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Alternative writing (if common)",
                  "title": "Alternative writing (if common)",
                  "type": "string"
                }
              },
              {
                "name": "phonetic",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Phonetic writing\n\nDESCRIPTION: Phonetic writing is used to describe how the word is pronounced",
                  "title": "Phonetic writing",
                  "description": "Phonetic writing is used to describe how the word is pronounced",
                  "type": "string"
                }
              },
              {
                "name": "audio",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Spoken word\n\nDESCRIPTION: Audio fragment containing the spoken word\n\nPart of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
                  "title": "Spoken word",
                  "description": "Audio fragment containing the spoken word",
                  "properties": [
                    {
                      "name": "alt",
                      "required": false,
                      "schema": {
                        "fullComment": "Stored value\n\nAlt text for the asset",
                        "type": "string"
                      }
                    },
                    {
                      "name": "relativePath",
                      "required": false,
                      "schema": {
                        "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                        "type": "string"
                      }
                    },
                    {
                      "name": "name",
                      "required": false,
                      "schema": {
                        "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                        "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                        "type": "string"
                      }
                    },
                    {
                      "name": "temporaryDestination",
                      "required": false,
                      "schema": {
                        "fullComment": "Not stored\n\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                        "type": "string"
                      }
                    }
                  ],
                  "type": "object"
                }
              },
              {
                "name": "examples",
                "required": false,
                "schema": {
                  "fullComment": "DESCRIPTION: Sentences containing this word",
                  "description": "Sentences containing this word",
                  "items": [
                    {
                      "schema": {
                        "properties": [
                          {
                            "name": "text",
                            "required": true,
                            "schema": {
                              "type": "string"
                            }
                          },
                          {
                            "name": "audio",
                            "required": true,
                            "schema": {
                              "fullComment": "Part of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
                              "properties": [
                                {
                                  "name": "alt",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Stored value\n\nAlt text for the asset",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "relativePath",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "name",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                                    "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "temporaryDestination",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Not stored\n\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                                    "type": "string"
                                  }
                                }
                              ],
                              "type": "object"
                            }
                          }
                        ],
                        "type": "object"
                      },
                      "name": null
                    }
                  ],
                  "type": "array"
                }
              }
            ],
            "type": "object"
          }
        },
        {
          "name": "norwegian",
          "required": false,
          "schema": {
            "fullComment": "",
            "properties": [
              {
                "name": "latin",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Latin writing (if common)",
                  "title": "Latin writing (if common)",
                  "type": "string"
                }
              },
              {
                "name": "alternative",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Alternative writing (if common)",
                  "title": "Alternative writing (if common)",
                  "type": "string"
                }
              },
              {
                "name": "phonetic",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Phonetic writing\n\nDESCRIPTION: Phonetic writing is used to describe how the word is pronounced",
                  "title": "Phonetic writing",
                  "description": "Phonetic writing is used to describe how the word is pronounced",
                  "type": "string"
                }
              },
              {
                "name": "audio",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Spoken word\n\nDESCRIPTION: Audio fragment containing the spoken word\n\nPart of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
                  "title": "Spoken word",
                  "description": "Audio fragment containing the spoken word",
                  "properties": [
                    {
                      "name": "alt",
                      "required": false,
                      "schema": {
                        "fullComment": "Stored value\n\nAlt text for the asset",
                        "type": "string"
                      }
                    },
                    {
                      "name": "relativePath",
                      "required": false,
                      "schema": {
                        "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                        "type": "string"
                      }
                    },
                    {
                      "name": "name",
                      "required": false,
                      "schema": {
                        "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                        "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                        "type": "string"
                      }
                    },
                    {
                      "name": "temporaryDestination",
                      "required": false,
                      "schema": {
                        "fullComment": "Not stored\n\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                        "type": "string"
                      }
                    }
                  ],
                  "type": "object"
                }
              },
              {
                "name": "examples",
                "required": false,
                "schema": {
                  "fullComment": "DESCRIPTION: Sentences containing this word",
                  "description": "Sentences containing this word",
                  "items": [
                    {
                      "schema": {
                        "properties": [
                          {
                            "name": "text",
                            "required": true,
                            "schema": {
                              "type": "string"
                            }
                          },
                          {
                            "name": "audio",
                            "required": true,
                            "schema": {
                              "fullComment": "Part of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
                              "properties": [
                                {
                                  "name": "alt",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Stored value\n\nAlt text for the asset",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "relativePath",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "name",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                                    "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "temporaryDestination",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Not stored\n\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                                    "type": "string"
                                  }
                                }
                              ],
                              "type": "object"
                            }
                          }
                        ],
                        "type": "object"
                      },
                      "name": null
                    }
                  ],
                  "type": "array"
                }
              }
            ],
            "type": "object"
          }
        },
        {
          "name": "swedish",
          "required": false,
          "schema": {
            "fullComment": "",
            "properties": [
              {
                "name": "latin",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Latin writing (if common)",
                  "title": "Latin writing (if common)",
                  "type": "string"
                }
              },
              {
                "name": "alternative",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Alternative writing (if common)",
                  "title": "Alternative writing (if common)",
                  "type": "string"
                }
              },
              {
                "name": "phonetic",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Phonetic writing\n\nDESCRIPTION: Phonetic writing is used to describe how the word is pronounced",
                  "title": "Phonetic writing",
                  "description": "Phonetic writing is used to describe how the word is pronounced",
                  "type": "string"
                }
              },
              {
                "name": "audio",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Spoken word\n\nDESCRIPTION: Audio fragment containing the spoken word\n\nPart of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
                  "title": "Spoken word",
                  "description": "Audio fragment containing the spoken word",
                  "properties": [
                    {
                      "name": "alt",
                      "required": false,
                      "schema": {
                        "fullComment": "Stored value\n\nAlt text for the asset",
                        "type": "string"
                      }
                    },
                    {
                      "name": "relativePath",
                      "required": false,
                      "schema": {
                        "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                        "type": "string"
                      }
                    },
                    {
                      "name": "name",
                      "required": false,
                      "schema": {
                        "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                        "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                        "type": "string"
                      }
                    },
                    {
                      "name": "temporaryDestination",
                      "required": false,
                      "schema": {
                        "fullComment": "Not stored\n\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                        "type": "string"
                      }
                    }
                  ],
                  "type": "object"
                }
              },
              {
                "name": "examples",
                "required": false,
                "schema": {
                  "fullComment": "DESCRIPTION: Sentences containing this word",
                  "description": "Sentences containing this word",
                  "items": [
                    {
                      "schema": {
                        "properties": [
                          {
                            "name": "text",
                            "required": true,
                            "schema": {
                              "type": "string"
                            }
                          },
                          {
                            "name": "audio",
                            "required": true,
                            "schema": {
                              "fullComment": "Part of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
                              "properties": [
                                {
                                  "name": "alt",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Stored value\n\nAlt text for the asset",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "relativePath",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "name",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                                    "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "temporaryDestination",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Not stored\n\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                                    "type": "string"
                                  }
                                }
                              ],
                              "type": "object"
                            }
                          }
                        ],
                        "type": "object"
                      },
                      "name": null
                    }
                  ],
                  "type": "array"
                }
              }
            ],
            "type": "object"
          }
        },
        {
          "name": "danish",
          "required": false,
          "schema": {
            "fullComment": "",
            "properties": [
              {
                "name": "latin",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Latin writing (if common)",
                  "title": "Latin writing (if common)",
                  "type": "string"
                }
              },
              {
                "name": "alternative",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Alternative writing (if common)",
                  "title": "Alternative writing (if common)",
                  "type": "string"
                }
              },
              {
                "name": "phonetic",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Phonetic writing\n\nDESCRIPTION: Phonetic writing is used to describe how the word is pronounced",
                  "title": "Phonetic writing",
                  "description": "Phonetic writing is used to describe how the word is pronounced",
                  "type": "string"
                }
              },
              {
                "name": "audio",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Spoken word\n\nDESCRIPTION: Audio fragment containing the spoken word\n\nPart of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
                  "title": "Spoken word",
                  "description": "Audio fragment containing the spoken word",
                  "properties": [
                    {
                      "name": "alt",
                      "required": false,
                      "schema": {
                        "fullComment": "Stored value\n\nAlt text for the asset",
                        "type": "string"
                      }
                    },
                    {
                      "name": "relativePath",
                      "required": false,
                      "schema": {
                        "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                        "type": "string"
                      }
                    },
                    {
                      "name": "name",
                      "required": false,
                      "schema": {
                        "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                        "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                        "type": "string"
                      }
                    },
                    {
                      "name": "temporaryDestination",
                      "required": false,
                      "schema": {
                        "fullComment": "Not stored\n\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                        "type": "string"
                      }
                    }
                  ],
                  "type": "object"
                }
              },
              {
                "name": "examples",
                "required": false,
                "schema": {
                  "fullComment": "DESCRIPTION: Sentences containing this word",
                  "description": "Sentences containing this word",
                  "items": [
                    {
                      "schema": {
                        "properties": [
                          {
                            "name": "text",
                            "required": true,
                            "schema": {
                              "type": "string"
                            }
                          },
                          {
                            "name": "audio",
                            "required": true,
                            "schema": {
                              "fullComment": "Part of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
                              "properties": [
                                {
                                  "name": "alt",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Stored value\n\nAlt text for the asset",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "relativePath",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "name",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                                    "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "temporaryDestination",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Not stored\n\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                                    "type": "string"
                                  }
                                }
                              ],
                              "type": "object"
                            }
                          }
                        ],
                        "type": "object"
                      },
                      "name": null
                    }
                  ],
                  "type": "array"
                }
              }
            ],
            "type": "object"
          }
        },
        {
          "name": "vietnamese",
          "required": false,
          "schema": {
            "fullComment": "",
            "properties": [
              {
                "name": "latin",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Latin writing (if common)",
                  "title": "Latin writing (if common)",
                  "type": "string"
                }
              },
              {
                "name": "alternative",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Alternative writing (if common)",
                  "title": "Alternative writing (if common)",
                  "type": "string"
                }
              },
              {
                "name": "phonetic",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Phonetic writing\n\nDESCRIPTION: Phonetic writing is used to describe how the word is pronounced",
                  "title": "Phonetic writing",
                  "description": "Phonetic writing is used to describe how the word is pronounced",
                  "type": "string"
                }
              },
              {
                "name": "audio",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Spoken word\n\nDESCRIPTION: Audio fragment containing the spoken word\n\nPart of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
                  "title": "Spoken word",
                  "description": "Audio fragment containing the spoken word",
                  "properties": [
                    {
                      "name": "alt",
                      "required": false,
                      "schema": {
                        "fullComment": "Stored value\n\nAlt text for the asset",
                        "type": "string"
                      }
                    },
                    {
                      "name": "relativePath",
                      "required": false,
                      "schema": {
                        "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                        "type": "string"
                      }
                    },
                    {
                      "name": "name",
                      "required": false,
                      "schema": {
                        "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                        "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                        "type": "string"
                      }
                    },
                    {
                      "name": "temporaryDestination",
                      "required": false,
                      "schema": {
                        "fullComment": "Not stored\n\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                        "type": "string"
                      }
                    }
                  ],
                  "type": "object"
                }
              },
              {
                "name": "examples",
                "required": false,
                "schema": {
                  "fullComment": "DESCRIPTION: Sentences containing this word",
                  "description": "Sentences containing this word",
                  "items": [
                    {
                      "schema": {
                        "properties": [
                          {
                            "name": "text",
                            "required": true,
                            "schema": {
                              "type": "string"
                            }
                          },
                          {
                            "name": "audio",
                            "required": true,
                            "schema": {
                              "fullComment": "Part of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
                              "properties": [
                                {
                                  "name": "alt",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Stored value\n\nAlt text for the asset",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "relativePath",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "name",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                                    "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "temporaryDestination",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Not stored\n\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                                    "type": "string"
                                  }
                                }
                              ],
                              "type": "object"
                            }
                          }
                        ],
                        "type": "object"
                      },
                      "name": null
                    }
                  ],
                  "type": "array"
                }
              }
            ],
            "type": "object"
          }
        },
        {
          "name": "indonesian",
          "required": false,
          "schema": {
            "fullComment": "",
            "properties": [
              {
                "name": "latin",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Latin writing (if common)",
                  "title": "Latin writing (if common)",
                  "type": "string"
                }
              },
              {
                "name": "alternative",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Alternative writing (if common)",
                  "title": "Alternative writing (if common)",
                  "type": "string"
                }
              },
              {
                "name": "phonetic",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Phonetic writing\n\nDESCRIPTION: Phonetic writing is used to describe how the word is pronounced",
                  "title": "Phonetic writing",
                  "description": "Phonetic writing is used to describe how the word is pronounced",
                  "type": "string"
                }
              },
              {
                "name": "audio",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Spoken word\n\nDESCRIPTION: Audio fragment containing the spoken word\n\nPart of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
                  "title": "Spoken word",
                  "description": "Audio fragment containing the spoken word",
                  "properties": [
                    {
                      "name": "alt",
                      "required": false,
                      "schema": {
                        "fullComment": "Stored value\n\nAlt text for the asset",
                        "type": "string"
                      }
                    },
                    {
                      "name": "relativePath",
                      "required": false,
                      "schema": {
                        "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                        "type": "string"
                      }
                    },
                    {
                      "name": "name",
                      "required": false,
                      "schema": {
                        "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                        "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                        "type": "string"
                      }
                    },
                    {
                      "name": "temporaryDestination",
                      "required": false,
                      "schema": {
                        "fullComment": "Not stored\n\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                        "type": "string"
                      }
                    }
                  ],
                  "type": "object"
                }
              },
              {
                "name": "examples",
                "required": false,
                "schema": {
                  "fullComment": "DESCRIPTION: Sentences containing this word",
                  "description": "Sentences containing this word",
                  "items": [
                    {
                      "schema": {
                        "properties": [
                          {
                            "name": "text",
                            "required": true,
                            "schema": {
                              "type": "string"
                            }
                          },
                          {
                            "name": "audio",
                            "required": true,
                            "schema": {
                              "fullComment": "Part of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
                              "properties": [
                                {
                                  "name": "alt",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Stored value\n\nAlt text for the asset",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "relativePath",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "name",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                                    "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "temporaryDestination",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Not stored\n\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                                    "type": "string"
                                  }
                                }
                              ],
                              "type": "object"
                            }
                          }
                        ],
                        "type": "object"
                      },
                      "name": null
                    }
                  ],
                  "type": "array"
                }
              }
            ],
            "type": "object"
          }
        },
        {
          "name": "southAfrican",
          "required": false,
          "schema": {
            "fullComment": "",
            "properties": [
              {
                "name": "latin",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Latin writing (if common)",
                  "title": "Latin writing (if common)",
                  "type": "string"
                }
              },
              {
                "name": "alternative",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Alternative writing (if common)",
                  "title": "Alternative writing (if common)",
                  "type": "string"
                }
              },
              {
                "name": "phonetic",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Phonetic writing\n\nDESCRIPTION: Phonetic writing is used to describe how the word is pronounced",
                  "title": "Phonetic writing",
                  "description": "Phonetic writing is used to describe how the word is pronounced",
                  "type": "string"
                }
              },
              {
                "name": "audio",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Spoken word\n\nDESCRIPTION: Audio fragment containing the spoken word\n\nPart of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
                  "title": "Spoken word",
                  "description": "Audio fragment containing the spoken word",
                  "properties": [
                    {
                      "name": "alt",
                      "required": false,
                      "schema": {
                        "fullComment": "Stored value\n\nAlt text for the asset",
                        "type": "string"
                      }
                    },
                    {
                      "name": "relativePath",
                      "required": false,
                      "schema": {
                        "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                        "type": "string"
                      }
                    },
                    {
                      "name": "name",
                      "required": false,
                      "schema": {
                        "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                        "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                        "type": "string"
                      }
                    },
                    {
                      "name": "temporaryDestination",
                      "required": false,
                      "schema": {
                        "fullComment": "Not stored\n\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                        "type": "string"
                      }
                    }
                  ],
                  "type": "object"
                }
              },
              {
                "name": "examples",
                "required": false,
                "schema": {
                  "fullComment": "DESCRIPTION: Sentences containing this word",
                  "description": "Sentences containing this word",
                  "items": [
                    {
                      "schema": {
                        "properties": [
                          {
                            "name": "text",
                            "required": true,
                            "schema": {
                              "type": "string"
                            }
                          },
                          {
                            "name": "audio",
                            "required": true,
                            "schema": {
                              "fullComment": "Part of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
                              "properties": [
                                {
                                  "name": "alt",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Stored value\n\nAlt text for the asset",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "relativePath",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "name",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                                    "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "temporaryDestination",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Not stored\n\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                                    "type": "string"
                                  }
                                }
                              ],
                              "type": "object"
                            }
                          }
                        ],
                        "type": "object"
                      },
                      "name": null
                    }
                  ],
                  "type": "array"
                }
              }
            ],
            "type": "object"
          }
        },
        {
          "name": "tokiPona",
          "required": false,
          "schema": {
            "fullComment": "",
            "properties": [
              {
                "name": "latin",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Latin writing (if common)",
                  "title": "Latin writing (if common)",
                  "type": "string"
                }
              },
              {
                "name": "alternative",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Alternative writing (if common)",
                  "title": "Alternative writing (if common)",
                  "type": "string"
                }
              },
              {
                "name": "phonetic",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Phonetic writing\n\nDESCRIPTION: Phonetic writing is used to describe how the word is pronounced",
                  "title": "Phonetic writing",
                  "description": "Phonetic writing is used to describe how the word is pronounced",
                  "type": "string"
                }
              },
              {
                "name": "audio",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Spoken word\n\nDESCRIPTION: Audio fragment containing the spoken word\n\nPart of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
                  "title": "Spoken word",
                  "description": "Audio fragment containing the spoken word",
                  "properties": [
                    {
                      "name": "alt",
                      "required": false,
                      "schema": {
                        "fullComment": "Stored value\n\nAlt text for the asset",
                        "type": "string"
                      }
                    },
                    {
                      "name": "relativePath",
                      "required": false,
                      "schema": {
                        "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                        "type": "string"
                      }
                    },
                    {
                      "name": "name",
                      "required": false,
                      "schema": {
                        "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                        "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                        "type": "string"
                      }
                    },
                    {
                      "name": "temporaryDestination",
                      "required": false,
                      "schema": {
                        "fullComment": "Not stored\n\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                        "type": "string"
                      }
                    }
                  ],
                  "type": "object"
                }
              },
              {
                "name": "examples",
                "required": false,
                "schema": {
                  "fullComment": "DESCRIPTION: Sentences containing this word",
                  "description": "Sentences containing this word",
                  "items": [
                    {
                      "schema": {
                        "properties": [
                          {
                            "name": "text",
                            "required": true,
                            "schema": {
                              "type": "string"
                            }
                          },
                          {
                            "name": "audio",
                            "required": true,
                            "schema": {
                              "fullComment": "Part of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
                              "properties": [
                                {
                                  "name": "alt",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Stored value\n\nAlt text for the asset",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "relativePath",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "name",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                                    "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "temporaryDestination",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Not stored\n\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                                    "type": "string"
                                  }
                                }
                              ],
                              "type": "object"
                            }
                          }
                        ],
                        "type": "object"
                      },
                      "name": null
                    }
                  ],
                  "type": "array"
                }
              }
            ],
            "type": "object"
          }
        },
        {
          "name": "hindi",
          "required": false,
          "schema": {
            "fullComment": "",
            "properties": [
              {
                "name": "latin",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Latin writing (if common)",
                  "title": "Latin writing (if common)",
                  "type": "string"
                }
              },
              {
                "name": "alternative",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Alternative writing (if common)",
                  "title": "Alternative writing (if common)",
                  "type": "string"
                }
              },
              {
                "name": "phonetic",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Phonetic writing\n\nDESCRIPTION: Phonetic writing is used to describe how the word is pronounced",
                  "title": "Phonetic writing",
                  "description": "Phonetic writing is used to describe how the word is pronounced",
                  "type": "string"
                }
              },
              {
                "name": "audio",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Spoken word\n\nDESCRIPTION: Audio fragment containing the spoken word\n\nPart of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
                  "title": "Spoken word",
                  "description": "Audio fragment containing the spoken word",
                  "properties": [
                    {
                      "name": "alt",
                      "required": false,
                      "schema": {
                        "fullComment": "Stored value\n\nAlt text for the asset",
                        "type": "string"
                      }
                    },
                    {
                      "name": "relativePath",
                      "required": false,
                      "schema": {
                        "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                        "type": "string"
                      }
                    },
                    {
                      "name": "name",
                      "required": false,
                      "schema": {
                        "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                        "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                        "type": "string"
                      }
                    },
                    {
                      "name": "temporaryDestination",
                      "required": false,
                      "schema": {
                        "fullComment": "Not stored\n\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                        "type": "string"
                      }
                    }
                  ],
                  "type": "object"
                }
              },
              {
                "name": "examples",
                "required": false,
                "schema": {
                  "fullComment": "DESCRIPTION: Sentences containing this word",
                  "description": "Sentences containing this word",
                  "items": [
                    {
                      "schema": {
                        "properties": [
                          {
                            "name": "text",
                            "required": true,
                            "schema": {
                              "type": "string"
                            }
                          },
                          {
                            "name": "audio",
                            "required": true,
                            "schema": {
                              "fullComment": "Part of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
                              "properties": [
                                {
                                  "name": "alt",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Stored value\n\nAlt text for the asset",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "relativePath",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "name",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                                    "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "temporaryDestination",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Not stored\n\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                                    "type": "string"
                                  }
                                }
                              ],
                              "type": "object"
                            }
                          }
                        ],
                        "type": "object"
                      },
                      "name": null
                    }
                  ],
                  "type": "array"
                }
              }
            ],
            "type": "object"
          }
        },
        {
          "name": "mandarin",
          "required": false,
          "schema": {
            "fullComment": "",
            "properties": [
              {
                "name": "latin",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Latin writing (if common)",
                  "title": "Latin writing (if common)",
                  "type": "string"
                }
              },
              {
                "name": "alternative",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Alternative writing (if common)",
                  "title": "Alternative writing (if common)",
                  "type": "string"
                }
              },
              {
                "name": "phonetic",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Phonetic writing\n\nDESCRIPTION: Phonetic writing is used to describe how the word is pronounced",
                  "title": "Phonetic writing",
                  "description": "Phonetic writing is used to describe how the word is pronounced",
                  "type": "string"
                }
              },
              {
                "name": "audio",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Spoken word\n\nDESCRIPTION: Audio fragment containing the spoken word\n\nPart of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
                  "title": "Spoken word",
                  "description": "Audio fragment containing the spoken word",
                  "properties": [
                    {
                      "name": "alt",
                      "required": false,
                      "schema": {
                        "fullComment": "Stored value\n\nAlt text for the asset",
                        "type": "string"
                      }
                    },
                    {
                      "name": "relativePath",
                      "required": false,
                      "schema": {
                        "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                        "type": "string"
                      }
                    },
                    {
                      "name": "name",
                      "required": false,
                      "schema": {
                        "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                        "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                        "type": "string"
                      }
                    },
                    {
                      "name": "temporaryDestination",
                      "required": false,
                      "schema": {
                        "fullComment": "Not stored\n\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                        "type": "string"
                      }
                    }
                  ],
                  "type": "object"
                }
              },
              {
                "name": "examples",
                "required": false,
                "schema": {
                  "fullComment": "DESCRIPTION: Sentences containing this word",
                  "description": "Sentences containing this word",
                  "items": [
                    {
                      "schema": {
                        "properties": [
                          {
                            "name": "text",
                            "required": true,
                            "schema": {
                              "type": "string"
                            }
                          },
                          {
                            "name": "audio",
                            "required": true,
                            "schema": {
                              "fullComment": "Part of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
                              "properties": [
                                {
                                  "name": "alt",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Stored value\n\nAlt text for the asset",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "relativePath",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "name",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                                    "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "temporaryDestination",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Not stored\n\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                                    "type": "string"
                                  }
                                }
                              ],
                              "type": "object"
                            }
                          }
                        ],
                        "type": "object"
                      },
                      "name": null
                    }
                  ],
                  "type": "array"
                }
              }
            ],
            "type": "object"
          }
        },
        {
          "name": "arabic",
          "required": false,
          "schema": {
            "fullComment": "",
            "properties": [
              {
                "name": "latin",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Latin writing (if common)",
                  "title": "Latin writing (if common)",
                  "type": "string"
                }
              },
              {
                "name": "alternative",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Alternative writing (if common)",
                  "title": "Alternative writing (if common)",
                  "type": "string"
                }
              },
              {
                "name": "phonetic",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Phonetic writing\n\nDESCRIPTION: Phonetic writing is used to describe how the word is pronounced",
                  "title": "Phonetic writing",
                  "description": "Phonetic writing is used to describe how the word is pronounced",
                  "type": "string"
                }
              },
              {
                "name": "audio",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Spoken word\n\nDESCRIPTION: Audio fragment containing the spoken word\n\nPart of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
                  "title": "Spoken word",
                  "description": "Audio fragment containing the spoken word",
                  "properties": [
                    {
                      "name": "alt",
                      "required": false,
                      "schema": {
                        "fullComment": "Stored value\n\nAlt text for the asset",
                        "type": "string"
                      }
                    },
                    {
                      "name": "relativePath",
                      "required": false,
                      "schema": {
                        "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                        "type": "string"
                      }
                    },
                    {
                      "name": "name",
                      "required": false,
                      "schema": {
                        "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                        "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                        "type": "string"
                      }
                    },
                    {
                      "name": "temporaryDestination",
                      "required": false,
                      "schema": {
                        "fullComment": "Not stored\n\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                        "type": "string"
                      }
                    }
                  ],
                  "type": "object"
                }
              },
              {
                "name": "examples",
                "required": false,
                "schema": {
                  "fullComment": "DESCRIPTION: Sentences containing this word",
                  "description": "Sentences containing this word",
                  "items": [
                    {
                      "schema": {
                        "properties": [
                          {
                            "name": "text",
                            "required": true,
                            "schema": {
                              "type": "string"
                            }
                          },
                          {
                            "name": "audio",
                            "required": true,
                            "schema": {
                              "fullComment": "Part of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
                              "properties": [
                                {
                                  "name": "alt",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Stored value\n\nAlt text for the asset",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "relativePath",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "name",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                                    "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "temporaryDestination",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Not stored\n\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                                    "type": "string"
                                  }
                                }
                              ],
                              "type": "object"
                            }
                          }
                        ],
                        "type": "object"
                      },
                      "name": null
                    }
                  ],
                  "type": "array"
                }
              }
            ],
            "type": "object"
          }
        },
        {
          "name": "bengali",
          "required": false,
          "schema": {
            "fullComment": "",
            "properties": [
              {
                "name": "latin",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Latin writing (if common)",
                  "title": "Latin writing (if common)",
                  "type": "string"
                }
              },
              {
                "name": "alternative",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Alternative writing (if common)",
                  "title": "Alternative writing (if common)",
                  "type": "string"
                }
              },
              {
                "name": "phonetic",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Phonetic writing\n\nDESCRIPTION: Phonetic writing is used to describe how the word is pronounced",
                  "title": "Phonetic writing",
                  "description": "Phonetic writing is used to describe how the word is pronounced",
                  "type": "string"
                }
              },
              {
                "name": "audio",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Spoken word\n\nDESCRIPTION: Audio fragment containing the spoken word\n\nPart of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
                  "title": "Spoken word",
                  "description": "Audio fragment containing the spoken word",
                  "properties": [
                    {
                      "name": "alt",
                      "required": false,
                      "schema": {
                        "fullComment": "Stored value\n\nAlt text for the asset",
                        "type": "string"
                      }
                    },
                    {
                      "name": "relativePath",
                      "required": false,
                      "schema": {
                        "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                        "type": "string"
                      }
                    },
                    {
                      "name": "name",
                      "required": false,
                      "schema": {
                        "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                        "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                        "type": "string"
                      }
                    },
                    {
                      "name": "temporaryDestination",
                      "required": false,
                      "schema": {
                        "fullComment": "Not stored\n\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                        "type": "string"
                      }
                    }
                  ],
                  "type": "object"
                }
              },
              {
                "name": "examples",
                "required": false,
                "schema": {
                  "fullComment": "DESCRIPTION: Sentences containing this word",
                  "description": "Sentences containing this word",
                  "items": [
                    {
                      "schema": {
                        "properties": [
                          {
                            "name": "text",
                            "required": true,
                            "schema": {
                              "type": "string"
                            }
                          },
                          {
                            "name": "audio",
                            "required": true,
                            "schema": {
                              "fullComment": "Part of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
                              "properties": [
                                {
                                  "name": "alt",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Stored value\n\nAlt text for the asset",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "relativePath",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "name",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                                    "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "temporaryDestination",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Not stored\n\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                                    "type": "string"
                                  }
                                }
                              ],
                              "type": "object"
                            }
                          }
                        ],
                        "type": "object"
                      },
                      "name": null
                    }
                  ],
                  "type": "array"
                }
              }
            ],
            "type": "object"
          }
        },
        {
          "name": "urdu",
          "required": false,
          "schema": {
            "fullComment": "",
            "properties": [
              {
                "name": "latin",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Latin writing (if common)",
                  "title": "Latin writing (if common)",
                  "type": "string"
                }
              },
              {
                "name": "alternative",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Alternative writing (if common)",
                  "title": "Alternative writing (if common)",
                  "type": "string"
                }
              },
              {
                "name": "phonetic",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Phonetic writing\n\nDESCRIPTION: Phonetic writing is used to describe how the word is pronounced",
                  "title": "Phonetic writing",
                  "description": "Phonetic writing is used to describe how the word is pronounced",
                  "type": "string"
                }
              },
              {
                "name": "audio",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Spoken word\n\nDESCRIPTION: Audio fragment containing the spoken word\n\nPart of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
                  "title": "Spoken word",
                  "description": "Audio fragment containing the spoken word",
                  "properties": [
                    {
                      "name": "alt",
                      "required": false,
                      "schema": {
                        "fullComment": "Stored value\n\nAlt text for the asset",
                        "type": "string"
                      }
                    },
                    {
                      "name": "relativePath",
                      "required": false,
                      "schema": {
                        "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                        "type": "string"
                      }
                    },
                    {
                      "name": "name",
                      "required": false,
                      "schema": {
                        "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                        "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                        "type": "string"
                      }
                    },
                    {
                      "name": "temporaryDestination",
                      "required": false,
                      "schema": {
                        "fullComment": "Not stored\n\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                        "type": "string"
                      }
                    }
                  ],
                  "type": "object"
                }
              },
              {
                "name": "examples",
                "required": false,
                "schema": {
                  "fullComment": "DESCRIPTION: Sentences containing this word",
                  "description": "Sentences containing this word",
                  "items": [
                    {
                      "schema": {
                        "properties": [
                          {
                            "name": "text",
                            "required": true,
                            "schema": {
                              "type": "string"
                            }
                          },
                          {
                            "name": "audio",
                            "required": true,
                            "schema": {
                              "fullComment": "Part of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
                              "properties": [
                                {
                                  "name": "alt",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Stored value\n\nAlt text for the asset",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "relativePath",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "name",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                                    "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "temporaryDestination",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Not stored\n\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                                    "type": "string"
                                  }
                                }
                              ],
                              "type": "object"
                            }
                          }
                        ],
                        "type": "object"
                      },
                      "name": null
                    }
                  ],
                  "type": "array"
                }
              }
            ],
            "type": "object"
          }
        },
        {
          "name": "japanese",
          "required": false,
          "schema": {
            "fullComment": "",
            "properties": [
              {
                "name": "latin",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Latin writing (if common)",
                  "title": "Latin writing (if common)",
                  "type": "string"
                }
              },
              {
                "name": "alternative",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Alternative writing (if common)",
                  "title": "Alternative writing (if common)",
                  "type": "string"
                }
              },
              {
                "name": "phonetic",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Phonetic writing\n\nDESCRIPTION: Phonetic writing is used to describe how the word is pronounced",
                  "title": "Phonetic writing",
                  "description": "Phonetic writing is used to describe how the word is pronounced",
                  "type": "string"
                }
              },
              {
                "name": "audio",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Spoken word\n\nDESCRIPTION: Audio fragment containing the spoken word\n\nPart of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
                  "title": "Spoken word",
                  "description": "Audio fragment containing the spoken word",
                  "properties": [
                    {
                      "name": "alt",
                      "required": false,
                      "schema": {
                        "fullComment": "Stored value\n\nAlt text for the asset",
                        "type": "string"
                      }
                    },
                    {
                      "name": "relativePath",
                      "required": false,
                      "schema": {
                        "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                        "type": "string"
                      }
                    },
                    {
                      "name": "name",
                      "required": false,
                      "schema": {
                        "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                        "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                        "type": "string"
                      }
                    },
                    {
                      "name": "temporaryDestination",
                      "required": false,
                      "schema": {
                        "fullComment": "Not stored\n\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                        "type": "string"
                      }
                    }
                  ],
                  "type": "object"
                }
              },
              {
                "name": "examples",
                "required": false,
                "schema": {
                  "fullComment": "DESCRIPTION: Sentences containing this word",
                  "description": "Sentences containing this word",
                  "items": [
                    {
                      "schema": {
                        "properties": [
                          {
                            "name": "text",
                            "required": true,
                            "schema": {
                              "type": "string"
                            }
                          },
                          {
                            "name": "audio",
                            "required": true,
                            "schema": {
                              "fullComment": "Part of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
                              "properties": [
                                {
                                  "name": "alt",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Stored value\n\nAlt text for the asset",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "relativePath",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "name",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                                    "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "temporaryDestination",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Not stored\n\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                                    "type": "string"
                                  }
                                }
                              ],
                              "type": "object"
                            }
                          }
                        ],
                        "type": "object"
                      },
                      "name": null
                    }
                  ],
                  "type": "array"
                }
              }
            ],
            "type": "object"
          }
        },
        {
          "name": "swahili",
          "required": false,
          "schema": {
            "fullComment": "",
            "properties": [
              {
                "name": "latin",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Latin writing (if common)",
                  "title": "Latin writing (if common)",
                  "type": "string"
                }
              },
              {
                "name": "alternative",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Alternative writing (if common)",
                  "title": "Alternative writing (if common)",
                  "type": "string"
                }
              },
              {
                "name": "phonetic",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Phonetic writing\n\nDESCRIPTION: Phonetic writing is used to describe how the word is pronounced",
                  "title": "Phonetic writing",
                  "description": "Phonetic writing is used to describe how the word is pronounced",
                  "type": "string"
                }
              },
              {
                "name": "audio",
                "required": false,
                "schema": {
                  "fullComment": "TITLE: Spoken word\n\nDESCRIPTION: Audio fragment containing the spoken word\n\nPart of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
                  "title": "Spoken word",
                  "description": "Audio fragment containing the spoken word",
                  "properties": [
                    {
                      "name": "alt",
                      "required": false,
                      "schema": {
                        "fullComment": "Stored value\n\nAlt text for the asset",
                        "type": "string"
                      }
                    },
                    {
                      "name": "relativePath",
                      "required": false,
                      "schema": {
                        "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                        "type": "string"
                      }
                    },
                    {
                      "name": "name",
                      "required": false,
                      "schema": {
                        "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                        "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                        "type": "string"
                      }
                    },
                    {
                      "name": "temporaryDestination",
                      "required": false,
                      "schema": {
                        "fullComment": "Not stored\n\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                        "type": "string"
                      }
                    }
                  ],
                  "type": "object"
                }
              },
              {
                "name": "examples",
                "required": false,
                "schema": {
                  "fullComment": "DESCRIPTION: Sentences containing this word",
                  "description": "Sentences containing this word",
                  "items": [
                    {
                      "schema": {
                        "properties": [
                          {
                            "name": "text",
                            "required": true,
                            "schema": {
                              "type": "string"
                            }
                          },
                          {
                            "name": "audio",
                            "required": true,
                            "schema": {
                              "fullComment": "Part of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
                              "properties": [
                                {
                                  "name": "alt",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Stored value\n\nAlt text for the asset",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "relativePath",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "name",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                                    "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "temporaryDestination",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Not stored\n\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                                    "type": "string"
                                  }
                                }
                              ],
                              "type": "object"
                            }
                          }
                        ],
                        "type": "object"
                      },
                      "name": null
                    }
                  ],
                  "type": "array"
                }
              }
            ],
            "type": "object"
          }
        }
      ],
      "type": "object"
    },
    "typeCoverage": 0,
    "rawType": "WordMatrix",
    "isArray": false,
    "isEnum": false,
    "isEnumLiteral": false,
    "isObject": false,
    "isPrimitive": false
  }
}