{
  "createdAt": 1668836009493,
  "updatedAt": 1668836009493,
  "deletedAt": 0,
  "createdFirstAt": 1668836009493,
  "isApiExposed": true,
  "isExported": true,
  "groupAuthorization": {},
  "operationRelativeTypescriptFilePath": "src/getRecerencableModels.ts",
  "commentsInside": [],
  "rawText": " (\n  simplifiedSchema?: SimplifiedSchema\n): ReferenceParameterInfo[] | undefined => {\n  if (simplifiedSchema?.type !== \"object\") return undefined;\n  const parameterNames = simplifiedSchema.properties?.map((x) => x.name);\n\n  const referenceParameterInfo = parameterNames\n    ?.map((parameterName) => {\n      const referenceParameterInfo = getReferenceParameterInfo(parameterName);\n\n      return referenceParameterInfo;\n    })\n    .filter((x) => x.isReferenceParameter);\n\n  return referenceParameterInfo;\n}",
  "name": "getReferencableModels",
  "slug": "get-referencable-models",
  "parameters": [
    {
      "name": "simplifiedSchema",
      "schema": {
        "$ref": "#/definitions/SimplifiedSchema"
      },
      "simplifiedSchema": {
        "fullComment": "JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form",
        "properties": [
          {
            "name": "todo",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "discussion",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idea",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "later",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nb",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "title",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "section",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": true,
            "schema": {
              "enum": [
                "string",
                "number",
                "boolean",
                "object",
                "array",
                "null"
              ],
              "fullComment": "- string\n- number\n- boolean\n- object\n- array\n- null\n\nNB: Omit doesn't work for the indexer! This would be the type: Omit<JSONSchema7TypeName, \"integer\">;\n\n",
              "nb": "Omit doesn't work for the indexer! This would be the type: Omit<JSONSchema7TypeName, \"integer\">;",
              "type": "string"
            }
          },
          {
            "name": "circularRefName",
            "required": false,
            "schema": {
              "fullComment": "sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here",
              "type": "string"
            }
          },
          {
            "name": "enum",
            "required": false,
            "schema": {
              "fullComment": "in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think",
              "items": [
                {
                  "schema": {
                    "fullComment": "Primitive type",
                    "properties": [],
                    "type": "object"
                  },
                  "name": "JSONSchema7Type"
                }
              ],
              "type": "array"
            }
          },
          {
            "name": "properties",
            "required": false,
            "schema": {
              "fullComment": "in case of object, this will always appear",
              "items": [
                {
                  "schema": {
                    "fullComment": "",
                    "properties": [
                      {
                        "name": "name",
                        "required": true,
                        "schema": {
                          "type": "string"
                        }
                      },
                      {
                        "name": "schema",
                        "required": true,
                        "schema": {
                          "circularRefName": "SimplifiedSchema",
                          "properties": [],
                          "type": "object"
                        }
                      },
                      {
                        "name": "required",
                        "required": true,
                        "schema": {
                          "fullComment": "NB: can't we put this in the SimplifiedSchema itself?",
                          "nb": "can't we put this in the SimplifiedSchema itself?",
                          "type": "boolean"
                        }
                      }
                    ],
                    "type": "object"
                  },
                  "name": "SimplifiedSchemaProperty"
                }
              ],
              "type": "array"
            }
          },
          {
            "name": "items",
            "required": false,
            "schema": {
              "fullComment": "in case of arrays, this will always appear",
              "items": [
                {
                  "schema": {
                    "fullComment": "",
                    "properties": [
                      {
                        "name": "name",
                        "required": true,
                        "schema": {
                          "fullComment": "name in case of it being a reference, otherwise null",
                          "type": "string"
                        }
                      },
                      {
                        "name": "schema",
                        "required": true,
                        "schema": {
                          "circularRefName": "SimplifiedSchema",
                          "properties": [],
                          "type": "object"
                        }
                      }
                    ],
                    "type": "object"
                  },
                  "name": "SimplifiedSchemaItem"
                }
              ],
              "type": "array"
            }
          },
          {
            "name": "fullComment",
            "required": false,
            "schema": {
              "fullComment": "Full doccomment, parsed without all stars syntax.\n\nNB: besides this, every `CommentType` can optionally also be found as a property on the `SimplifiedSchema`",
              "nb": "besides this, every `CommentType` can optionally also be found as a property on the `SimplifiedSchema`",
              "type": "string"
            }
          }
        ],
        "type": "object"
      },
      "required": false
    }
  ],
  "description": "based on the object properties in SimplifiedSchema, returns the model names that can be referenced",
  "returnType": {
    "rawType": "import(\"/Users/king/King/operations/tools/typescript/schema-util/src/getReferenceParameterInfo\").ReferenceParameterInfo[] | undefined",
    "typeDefinition": {
      "optional": true,
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "parameterName": {
            "type": "string",
            "allOf": [
              {
                "transform": [
                  "trim"
                ]
              },
              {
                "minLength": 1
              }
            ]
          },
          "dataParameterName": {
            "type": "string",
            "allOf": [
              {
                "transform": [
                  "trim"
                ]
              },
              {
                "minLength": 1
              }
            ]
          },
          "descriptor": {
            "type": "string",
            "allOf": [
              {
                "transform": [
                  "trim"
                ]
              },
              {
                "minLength": 1
              }
            ]
          },
          "keyInModel": {
            "type": "string",
            "allOf": [
              {
                "transform": [
                  "trim"
                ]
              },
              {
                "minLength": 1
              }
            ]
          },
          "interfaceName": {
            "type": "string",
            "allOf": [
              {
                "transform": [
                  "trim"
                ]
              },
              {
                "minLength": 1
              }
            ]
          },
          "isReferenceMultipleParameter": {
            "type": "boolean"
          },
          "isReferenceSingleParameter": {
            "type": "boolean"
          },
          "isReferenceParameter": {
            "type": "boolean"
          }
        },
        "required": [
          "parameterName",
          "isReferenceMultipleParameter",
          "isReferenceSingleParameter",
          "isReferenceParameter"
        ]
      }
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "items": [
        {
          "schema": {
            "properties": [
              {
                "name": "parameterName",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              {
                "name": "dataParameterName",
                "required": false,
                "schema": {
                  "type": "string"
                }
              },
              {
                "name": "descriptor",
                "required": false,
                "schema": {
                  "type": "string"
                }
              },
              {
                "name": "keyInModel",
                "required": false,
                "schema": {
                  "type": "string"
                }
              },
              {
                "name": "interfaceName",
                "required": false,
                "schema": {
                  "type": "string"
                }
              },
              {
                "name": "isReferenceMultipleParameter",
                "required": true,
                "schema": {
                  "type": "boolean"
                }
              },
              {
                "name": "isReferenceSingleParameter",
                "required": true,
                "schema": {
                  "type": "boolean"
                }
              },
              {
                "name": "isReferenceParameter",
                "required": true,
                "schema": {
                  "type": "boolean"
                }
              }
            ],
            "type": "object"
          },
          "name": null
        }
      ],
      "type": "array"
    }
  },
  "maxIndentationDepth": 3,
  "size": {
    "characters": 602,
    "lines": 16,
    "bytes": 602,
    "bytesPerCharacter": 1,
    "charactersPerLine": 38,
    "linesPerFile": 16,
    "numberOfFiles": 1
  },
  "id": "keqoqndcbgfxyjtotnezajcv"
}