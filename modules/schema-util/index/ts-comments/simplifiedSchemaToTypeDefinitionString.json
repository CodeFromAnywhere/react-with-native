[{"id":"tIElmQXgVErGWtEh","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/tools/typescript/schema-util/src/simplifiedSchemaToTypeDefinitionString.ts","srcFileId":"/simplifiedSchemaToTypeDefinitionString","operationFolderName":"schema-util","relativeFilePathFromSrc":"/simplifiedSchemaToTypeDefinitionString.ts","relativeOperationBasePathFromProjectRoot":"/tools/typescript/schema-util","operationName":"schema-util","comment":"Converts a simplifiedSchema definition back into a type interface string\n\nWith this, types can be generated in different ways","rawStatement":"export const simplifiedSchemaToTypeDefinitionString = (\n  simplifiedSchema?: SimplifiedSchema\n) => {\n  if (!simplifiedSchema) return \"\";\n\n  if (simplifiedSchema.enum && simplifiedSchema.enum.length > 0) {\n    // NB: TODO: This is probably not satisfactory for all enums! Needs testing\n    const enumString = simplifiedSchema.enum.map((x) => String(x)).join(\" | \");\n\n    return enumString;\n  }\n\n  if (simplifiedSchema.type === \"boolean\") return \"boolean\";\n  if (simplifiedSchema.type === \"null\") return \"null\";\n  if (simplifiedSchema.type === \"number\") return \"number\";\n  if (simplifiedSchema.type === \"string\") return \"string\";\n  if (\n    simplifiedSchema.type === \"array\" &&\n    simplifiedSchema.items &&\n    simplifiedSchema.items.length >= 1\n  ) {\n    const parts: string = simplifiedSchema.items\n      .map((x) => simplifiedSchemaToTypeDefinitionString(x.schema))\n      .join(\" | \");\n\n    const partsString: string =\n      simplifiedSchema.items && simplifiedSchema.items.length >= 2\n        ? `(${parts})[]`\n        : `${parts}[]`;\n\n    return partsString;\n  }\n\n  if (simplifiedSchema.type === \"object\" && simplifiedSchema.properties) {\n    const objectParts = simplifiedSchema.properties.map((prop) => {\n      const descriptionString = prop.schema.description\n        ? `/** ${prop.schema.description} */\\n`\n        : \"\";\n      const punctuationString = `${prop.required ? \"\" : \"?\"}: `;\n      const propertyString: string = `${descriptionString}${\n        prop.name\n      }${punctuationString}${simplifiedSchemaToTypeDefinitionString(\n        prop.schema\n      )};`;\n\n      return propertyString;\n    });\n\n    const objectString = `{\\n${objectParts.join(\"\\n\")}\\n};\\n`;\n\n    return objectString;\n  }\n\n  // NB: Should never be the case, we have handled all types\n  return \"\";\n};","parameters":{},"types":[],"firstLine":3,"lastLine":7}]