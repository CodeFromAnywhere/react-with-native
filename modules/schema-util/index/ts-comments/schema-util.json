[{"id":"guRRScDLFIeptXiH","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/tools/typescript/schema-util/src/schema-util.ts","srcFileId":"/schema-util","operationFolderName":"schema-util","relativeFilePathFromSrc":"/schema-util.ts","relativeOperationBasePathFromProjectRoot":"/tools/typescript/schema-util","operationName":"schema-util","comment":"schema type interface we use in TsInterface\n\nNB: don't export because this would make this type exist twice.","rawStatement":"type Schema = TsInterface[\"type\"][\"typeDefinition\"];","parameters":{},"types":["nb"],"firstLine":6,"lastLine":10},{"id":"guRRScDLFIeptXiH","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/tools/typescript/schema-util/src/schema-util.ts","srcFileId":"/schema-util","operationFolderName":"schema-util","relativeFilePathFromSrc":"/schema-util.ts","relativeOperationBasePathFromProjectRoot":"/tools/typescript/schema-util","operationName":"schema-util","comment":"makes a word singular (only english)\n\ne.g.:\n- indexes becomes index\n- words becomes word\n\nNB: not well tested","rawStatement":"export const makeSingular = (word: string) => {\n  if (word.slice(-2) === \"es\") {\n    return word.slice(0, word.length - 2);\n  }\n\n  if (word.slice(-1) === \"s\") {\n    return word.slice(0, word.length - 1);\n  }\n\n  // assuming it's already singular here\n  return word;\n};","parameters":{},"types":["nb"],"firstLine":13,"lastLine":21},{"id":"guRRScDLFIeptXiH","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/tools/typescript/schema-util/src/schema-util.ts","srcFileId":"/schema-util","operationFolderName":"schema-util","relativeFilePathFromSrc":"/schema-util.ts","relativeOperationBasePathFromProjectRoot":"/tools/typescript/schema-util","operationName":"schema-util","comment":"==========","rawStatement":"export const getSchemaItems = (schema: Schema | undefined) => {\n  const schemas = makeArray(schema?.items).map(getSchema).filter(notEmpty);\n  return schemas;\n};","parameters":{},"types":[],"firstLine":49,"lastLine":49},{"id":"guRRScDLFIeptXiH","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/tools/typescript/schema-util/src/schema-util.ts","srcFileId":"/schema-util","operationFolderName":"schema-util","relativeFilePathFromSrc":"/schema-util.ts","relativeOperationBasePathFromProjectRoot":"/tools/typescript/schema-util","operationName":"schema-util","comment":"parses a JSONSchema7Definition to JSONSchema7|undefined so we can use it","rawStatement":"export const getSchema = (\n  maybeSchema: JSONSchema7Definition | undefined\n): Schema | undefined =>\n  typeof maybeSchema !== \"object\" ? undefined : maybeSchema;","parameters":{},"types":[],"firstLine":56,"lastLine":58},{"id":"guRRScDLFIeptXiH","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/tools/typescript/schema-util/src/schema-util.ts","srcFileId":"/schema-util","operationFolderName":"schema-util","relativeFilePathFromSrc":"/schema-util.ts","relativeOperationBasePathFromProjectRoot":"/tools/typescript/schema-util","operationName":"schema-util","comment":"gets the $ref from a schema and parses the interface name from it","rawStatement":"export const getRefLink = (ref?: string) => {\n  return ref?.split(\"/\").pop();\n};","parameters":{},"types":[],"firstLine":64,"lastLine":66},{"id":"guRRScDLFIeptXiH","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/tools/typescript/schema-util/src/schema-util.ts","srcFileId":"/schema-util","operationFolderName":"schema-util","relativeFilePathFromSrc":"/schema-util.ts","relativeOperationBasePathFromProjectRoot":"/tools/typescript/schema-util","operationName":"schema-util","comment":"Gets all the properties of a schema","rawStatement":"export const getProperties = (schema: Schema | undefined): SchemaProperty[] => {\n  if (!schema) return [];\n  const propertyKeys = schema.properties ? Object.keys(schema.properties) : [];\n  const properties = propertyKeys\n    .map((key) => {\n      const propertySchema = getSchema(schema.properties?.[key]);\n      return propertySchema\n        ? {\n            name: key,\n            schema: propertySchema,\n            required: schema.required?.includes(key) || false,\n          }\n        : null;\n    })\n    .filter(notEmpty);\n\n  return properties;\n};","parameters":{},"types":[],"firstLine":71,"lastLine":73}]