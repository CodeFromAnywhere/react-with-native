[{"id":"AocxASlCaUioDWYd","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/tools/control-fs/get-path/src/getOperationPathParse.ts","srcFileId":"/getOperationPathParse","operationFolderName":"get-path","relativeFilePathFromSrc":"/getOperationPathParse.ts","relativeOperationBasePathFromProjectRoot":"/tools/control-fs/get-path","operationName":"get-path","comment":"get all operation-related path information that can be inferred from the path\n\nNB: currently it also looks up the operation name from its packagejson","rawStatement":"export const getOperationPathParse = (\n  absolutePath: string\n): OperationPathParse | undefined => {\n  if (!absolutePath) return;\n  const pathParse = getPathParse(absolutePath);\n  if (!pathParse) return;\n  const projectRoot = getProjectRoot(absolutePath);\n  if (!projectRoot) return;\n  const operationBasePath = findOperationBasePath(absolutePath);\n  if (!operationBasePath) return;\n  const operationSrcPath = path.join(operationBasePath, \"src\");\n\n  const operationFolderName = getLastFolder(operationBasePath);\n  const operationName = readJsonFileSync<PackageJSON>(\n    path.join(operationBasePath, \"package.json\")\n  )?.name;\n\n  //something like xxx/xxx/x.ts\n  const relativeFilePathFromSrc = absolutePath.slice(operationSrcPath.length);\n  const parsedPath = path.parse(absolutePath);\n  const srcFileId = path\n    .join(parsedPath.dir, parsedPath.name)\n    .slice(operationSrcPath.length);\n\n  const relativeOperationBasePathFromProjectRoot = operationBasePath.slice(\n    projectRoot.length\n  );\n\n  return {\n    relativePathFromProjectRoot: pathParse.relativePathFromProjectRoot,\n    srcFileId,\n    operationFolderName,\n    relativeFilePathFromSrc,\n    relativeOperationBasePathFromProjectRoot,\n    operationName,\n  };\n};","parameters":{},"types":["nb"],"firstLine":9,"lastLine":13}]