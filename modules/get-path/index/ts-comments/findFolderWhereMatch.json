[{"id":"moWiLEwYXMVsBNWm","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/tools/control-fs/get-path/src/findFolderWhereMatch.ts","srcFileId":"/findFolderWhereMatch","operationFolderName":"get-path","relativeFilePathFromSrc":"/findFolderWhereMatch.ts","relativeOperationBasePathFromProjectRoot":"/tools/control-fs/get-path","operationName":"get-path","comment":"recursive. goes up a folder until it finds a package.json","rawStatement":"export const findFolderWhereMatch = <T>(\n  fullSourcePath: string,\n  /**\n   * match must be truthy in order to match, and falsy if it's not a match\n   *\n   * the result of the matchFunction will be returned at the end of the recursion\n   */\n  matchFunction: (folderPath: string) => T\n): undefined | { folderPath: string; matchResult: T } => {\n  // Basecase to make sure that the provided sourcepath is valid\n  if (!fs.existsSync(fullSourcePath)) {\n    log(`full source path invalid ${fullSourcePath}`, { type: \"error\" });\n    return;\n  }\n\n  // Basecase to make sure that it doesn't go on infinitely, even if package.json doesn't exist anywhere\n  if (fullSourcePath === \"/\") {\n    log(`operationBasePath not working`, { type: \"error\" });\n    return;\n  }\n\n  const matchResult = matchFunction(fullSourcePath);\n\n  if (matchResult) return { folderPath: fullSourcePath, matchResult };\n\n  return findFolderWhereMatch(path.join(fullSourcePath, \"..\"), matchFunction);\n};","parameters":{},"types":[],"firstLine":4,"lastLine":6}]