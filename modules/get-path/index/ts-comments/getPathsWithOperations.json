[{"id":"KtxMCkEXudKxygXj","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/tools/control-fs/get-path/src/getPathsWithOperations.ts","srcFileId":"/getPathsWithOperations","operationFolderName":"get-path","relativeFilePathFromSrc":"/getPathsWithOperations.ts","relativeOperationBasePathFromProjectRoot":"/tools/control-fs/get-path","operationName":"get-path","comment":"returns an array of all paths containing operations\n\nfor a sensible project, that means /apps and /packages\n\nfor the OS project, that means /tools and /bundles","rawStatement":"export const getPathsWithOperations = (config?: {\n  /**\n   * if given, this will be taken as the project root instead of the one that can be found automatically (useful for bundling or working with multiple projects that alter each other)\n   */\n  manualProjectRoot?: string;\n}): string[] => {\n  const rootPath = config?.manualProjectRoot || getProjectRoot();\n\n  if (!rootPath) {\n    log(`no rootpath found!`, { type: \"error\" });\n    process.exit(1);\n  }\n\n  if (isSensibleProject(rootPath)) {\n    const pathsWithOperations = [\"apps\", \"packages\", \"modules\"]\n      .map((folderName) => path.join(rootPath, folderName))\n      .filter((fullPath) => fs.existsSync(fullPath));\n\n    if (pathsWithOperations.length === 0) {\n      log(`Couldn't find any operations in ${rootPath}`);\n      process.exit(1);\n    }\n\n    return pathsWithOperations;\n  }\n  const toolsPath = path.join(rootPath, \"tools\");\n  const bundlesPath = path.join(rootPath, \"bundles\");\n  if (!fs.existsSync(toolsPath) || !fs.existsSync(bundlesPath)) {\n    log(`Couldn't find tools or bundles folder in ${rootPath}`);\n    process.exit(1);\n  }\n\n  return [toolsPath, bundlesPath];\n};","parameters":{},"types":[],"firstLine":7,"lastLine":13}]