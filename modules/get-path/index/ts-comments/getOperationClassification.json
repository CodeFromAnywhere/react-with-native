[{"id":"XQZKpnUtrvtJBRdq","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/tools/control-fs/get-path/src/getOperationClassification.ts","srcFileId":"/getOperationClassification","operationFolderName":"get-path","relativeFilePathFromSrc":"/getOperationClassification.ts","relativeOperationBasePathFromProjectRoot":"/tools/control-fs/get-path","operationName":"get-path","comment":"returns OperationClassification if it's an operation, or undefined if it's not\n\nNB: don't confuse this with ProjectType or ImportClassification","rawStatement":"export const getOperationClassification = (\n  folderPath: string\n): OperationClassification | undefined => {\n  const packageJsonPath = path.join(folderPath, \"package.json\");\n  const tsConfigPath = path.join(folderPath, \"tsconfig.json\");\n  const nextConfigPath = path.join(folderPath, \"next.config.js\");\n  const appJsonPath = path.join(folderPath, \"app.json\");\n\n  const existsPackageJson = fs.existsSync(packageJsonPath);\n  const existsTsConfig = fs.existsSync(tsConfigPath);\n  const existsNextConfig = fs.existsSync(nextConfigPath);\n  const existsAppJson = fs.existsSync(appJsonPath);\n  if (!existsPackageJson || !existsTsConfig) return;\n\n  const packageJson = tryParseJson<PackageJSON>(\n    fs.readFileSync(packageJsonPath, \"utf8\")\n  );\n\n  if (!packageJson || packageJson.workspaces) {\n    return;\n  }\n\n  const isNextApp = existsNextConfig;\n  const isReactNativeApp = existsAppJson;\n  const isReactPackage =\n    hasDependency(packageJson, \"react\") ||\n    hasDependency(packageJson, \"react-native\") ||\n    hasDependency(packageJson, \"next\") ||\n    hasDependency(packageJson, \"expo\");\n\n  const mainEntryTypescriptSource =\n    !!packageJson.main &&\n    packageJson.main.startsWith(\"src/\") &&\n    (packageJson.main.endsWith(\".ts\") || packageJson.main.endsWith(\".tsx\"));\n\n  const hasExpress = hasDependency(packageJson, \"express\");\n  const hasServer = hasDependency(packageJson, \"server\");\n  const hasTypesNode = hasDependency(packageJson, \"@types/node\");\n\n  const classification: OperationClassification = isNextApp\n    ? \"web\"\n    : isReactNativeApp\n    ? \"app\"\n    : isReactPackage && mainEntryTypescriptSource\n    ? \"ui-es6\"\n    : isReactPackage && !mainEntryTypescriptSource\n    ? \"ui-es5\"\n    : hasExpress || hasServer\n    ? \"server\"\n    : hasTypesNode\n    ? \"node\"\n    : \"js\";\n\n  return classification;\n};","parameters":{},"types":["nb"],"firstLine":21,"lastLine":25}]