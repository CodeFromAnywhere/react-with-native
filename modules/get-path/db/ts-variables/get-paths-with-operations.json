{
  "createdAt": 1667634407326,
  "updatedAt": 1667634407326,
  "deletedAt": 0,
  "createdFirstAt": 1667634407326,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "getPathsWithOperations",
  "slug": "get-paths-with-operations",
  "operationRelativeTypescriptFilePath": "src/getPathsWithOperations.ts",
  "type": {
    "rawType": "(config?: { manualProjectRoot?: string | undefined; } | undefined) => string[]",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "(config?: {\n  /**\n   * if given, this will be taken as the project root instead of the one that can be found automatically (useful for bundling or working with multiple projects that alter each other)\n   */\n  manualProjectRoot?: string;\n}): string[] => {\n  const rootPath = config?.manualProjectRoot || getProjectRoot();\n\n  if (!rootPath) {\n    log(`no rootpath found!`, { type: \"error\" });\n    process.exit(1);\n  }\n\n  if (isSensibleProject(rootPath)) {\n    const pathsWithOperations = [\"apps\", \"packages\", \"modules\"]\n      .map((folderName) => path.join(rootPath, folderName))\n      .filter((fullPath) => fs.existsSync(fullPath));\n\n    if (pathsWithOperations.length === 0) {\n      log(`Couldn't find any operations in ${rootPath}`);\n      process.exit(1);\n    }\n\n    return pathsWithOperations;\n  }\n  const toolsPath = path.join(rootPath, \"operations/tools\");\n  const bundlesPath = path.join(rootPath, \"operations/niches\");\n  if (!fs.existsSync(toolsPath) || !fs.existsSync(bundlesPath)) {\n    log(`Couldn't find tools or bundles folder in ${rootPath}`);\n    process.exit(1);\n  }\n\n  return [toolsPath, bundlesPath];\n}",
  "description": "returns an array of all (absolute) paths containing operations\n\nfor a sensible project, that means /apps and /packages\n\nfor the OS project, that means /operations/tools and /operations/niches",
  "id": "mqvyhtuvinfcyihsluveqlma"
}