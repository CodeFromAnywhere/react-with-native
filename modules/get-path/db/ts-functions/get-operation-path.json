{
  "createdAt": 1667634402817,
  "updatedAt": 1667634402817,
  "deletedAt": 0,
  "createdFirstAt": 1667634402817,
  "publicAuthorization": [
    "read-docs",
    "search"
  ],
  "isApiExposed": false,
  "isPostApi": false,
  "isGetApi": false,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/getOperationPath.ts",
  "commentsInside": [],
  "rawText": " async (\n  /**\n   * specify the operation folder name\n   */\n  operationName: string,\n  config?: {\n    manualProjectRoot?: string;\n    /**\n     * if true, will not use sdk (defaults to using it first...)\n     */\n    notUseSdk?: boolean;\n  }\n): Promise<string | undefined> => {\n  // NB: In case of manualProjectRoot, we should not use the SDK! The sdk is from our own project root.\n  if (!config?.notUseSdk && !config?.manualProjectRoot) {\n    const projectRelativeOperationPath =\n      operations[operationName as keyof typeof operations];\n    const projectRoot = getProjectRoot();\n    if (projectRelativeOperationPath && projectRoot) {\n      return path.join(projectRoot, projectRelativeOperationPath);\n    }\n  }\n  // if that didn't work, let's find it in realtime\n\n  const basePath = getPathsWithOperations({\n    manualProjectRoot: config?.manualProjectRoot,\n  });\n\n  const operationPaths: string[] = await exploreOperationFolders({ basePath });\n\n  if (operationPaths.length === 0) {\n    log(\"No operations available\", { type: \"error\" });\n    return;\n  }\n  const operationPathsWithTheirFolder = await Promise.all(\n    operationPaths.map(async (p) => ({\n      path: p,\n      folderName: getLastFolder(p),\n    }))\n  );\n\n  const foundPath = operationPathsWithTheirFolder.find(\n    (f) => f.folderName === operationName\n  )?.path;\n\n  return foundPath;\n}",
  "name": "getOperationPath",
  "slug": "get-operation-path",
  "parameters": [
    {
      "name": "operationName",
      "schema": {
        "type": "string",
        "description": "specify the operation folder name"
      },
      "simplifiedSchema": {
        "fullComment": "specify the operation folder name",
        "type": "string"
      },
      "required": true
    },
    {
      "name": "config",
      "schema": {
        "type": "object",
        "properties": {
          "manualProjectRoot": {
            "type": "string"
          },
          "notUseSdk": {
            "type": "boolean",
            "description": "if true, will not use sdk (defaults to using it first...)"
          }
        },
        "additionalProperties": false
      },
      "simplifiedSchema": {
        "properties": [
          {
            "name": "manualProjectRoot",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "notUseSdk",
            "required": false,
            "schema": {
              "fullComment": "if true, will not use sdk (defaults to using it first...)",
              "type": "boolean"
            }
          }
        ],
        "type": "object"
      },
      "required": false
    }
  ],
  "description": "Gets a path of any operation in the project\n\nTODO: IDEA: maybe auto-generate key-value JSON where keys are the package-names of all operations and values are paths of their locations in the file system. we can easily generate this ourselves, but maybe it's also easy to use the npm yarn workspace for this, although it may not be available in all circumstances, so better not rely on it. The advantage of this would be that this function becomes sync and is much more efficient. The disadvantage is that every time you move something or add something new, this indexation has to happen, otherwise it fails.",
  "returnType": {
    "rawType": "Promise<string | undefined>",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 3,
  "size": {
    "characters": 1956,
    "lines": 49,
    "bytes": 1956,
    "bytesPerCharacter": 1,
    "charactersPerLine": 40,
    "linesPerFile": 49,
    "numberOfFiles": 1
  },
  "id": "ipcmlkonevceageuetapxfhs"
}