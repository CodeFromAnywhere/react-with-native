[{"id":"MpnogWRksknUsGee","commentsInside":[],"rawText":" <T extends CsvItemType>(\n  csvModelData: T[]\n): string => {\n  if (csvModelData.length === 0) return \"\";\n\n  // let propertyNames = simplifiedSchema?.properties?.map((x) => x.name);\n\n  const longestItem = csvModelData.reduce(\n    (previous, current) => {\n      const keysAmount = Object.keys(current).length;\n      if (keysAmount > previous.keysAmount) {\n        return { keysAmount, item: current };\n      }\n      return previous;\n    },\n    { keysAmount: 0, item: undefined } as {\n      keysAmount: number;\n      item: T | undefined;\n    }\n  ).item!;\n\n  const propertyNames = Object.keys(longestItem);\n\n  const headerString = propertyNames.join(\",\");\n\n  const rowStrings = csvModelData.map((row) => {\n    return propertyNames!\n      .map((propertyName) => String(row[propertyName]))\n      .join(\",\");\n  });\n\n  return `${headerString}\\n${rowStrings.join(\"\\n\")}`;\n}","name":"csvItemToString","slug":"csv-item-to-string","parameters":[],"description":"make csv string from a csv model type","returnType":{"rawType":"String","typeDefinition":{"optional":false,"type":"string","allOf":[{"transform":["trim"]},{"minLength":1}]},"typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":true,"isEnumLiteral":false,"simplifiedSchema":{"type":"string"}},"maxIndentationDepth":4,"relativePathFromProjectRoot":"/tools/parsing/file-conversion/csv/csv-util/src/csvItemToString.ts","srcFileId":"/csvItemToString","operationFolderName":"csv-util","relativeFilePathFromSrc":"/csvItemToString.ts","relativeOperationBasePathFromProjectRoot":"/tools/parsing/file-conversion/csv/csv-util","operationName":"csv-util","size":{"characters":901,"lines":33,"bytes":901,"bytesPerCharacter":1,"charactersPerfLine":27.303030303030305,"linesPerFile":33,"numberOfFiles":1}}]