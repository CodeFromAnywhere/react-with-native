{
  "createdAt": 1667379667611,
  "updatedAt": 1667379667611,
  "deletedAt": 0,
  "createdFirstAt": 1667379667611,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "parseFrontmatterMarkdownString",
  "slug": "parse-frontmatter-markdown-string",
  "operationRelativeTypescriptFilePath": "src/parseFrontmatterMarkdownString.ts",
  "type": {
    "rawType": "(markdownWithFrontmatter: string, config?: import(\"/Users/king/King/operations/tools/parsing/file-conversion/md/markdown-parse-js/src/types\").MarkdownParseConfig | undefined) => import(\"/Users/king/King/operations/tools/types/code-types/build/MarkdownParse\").MarkdownParse",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "(\n  markdownWithFrontmatter: string,\n  config?: MarkdownParseConfig\n): MarkdownParse => {\n  const lines = markdownWithFrontmatter.split(\"\\n\");\n\n  const frontmatterStartIndex = lines.findIndex((x) => x === \"---\");\n\n  //console.log({ frontmatterStartIndex });\n  if (frontmatterStartIndex === -1) {\n    return { raw: markdownWithFrontmatter, parameters: {}, content: [] };\n  }\n\n  const linesAfterStart = lines.slice(frontmatterStartIndex + 1);\n  const frontmatterEndIndex =\n    linesAfterStart.findIndex((x) => x === \"---\") + frontmatterStartIndex + 1;\n\n  //console.log({ frontmatterEndIndex });\n  const frontmatterLines = lines.slice(\n    frontmatterStartIndex + 1,\n    frontmatterEndIndex\n  );\n\n  //   console.log({ frontmatterLines });\n  const parameters: Frontmatter = mergeObjectsArray(\n    frontmatterLines.map((line) => {\n      const needTrim = !config?.noFinal;\n      const key = line.split(\":\")[0]?.trim();\n      const value = line.split(\":\")[1];\n      const finalValue = needTrim ? value?.trim() : value;\n\n      const typeFromSchema = config?.frontmatterSchema?.properties?.find(\n        (x) => x.name === key\n      )?.schema;\n\n      // console.dir(\n      //   {\n      //     frontmatterSchema: config?.frontmatterSchema,\n      //     key,\n      //     typeFromSchema,\n      //   },\n      //   { depth: 999 }\n      // );\n\n      return { [key]: parsePrimitive(finalValue, typeFromSchema) };\n    })\n  );\n\n  const raw = lines.slice(frontmatterEndIndex + 1).join(\"\\n\");\n\n  return { parameters, raw, content: [] };\n}",
  "description": "splits a markdown string into its frontmatter object and the raw content (without frontmatter)",
  "id": "nwmwxivnofdtcamedsdxogci"
}