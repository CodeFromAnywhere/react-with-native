{
  "createdAt": 1669467047998,
  "updatedAt": 1669467047998,
  "deletedAt": 0,
  "createdFirstAt": 1669467047998,
  "isApiExposed": true,
  "isExported": true,
  "groupAuthorization": {},
  "operationRelativeTypescriptFilePath": "src/markdownParseToMarkdownStringFromContent.ts",
  "commentsInside": [],
  "rawText": " (chunk: MarkdownChunk): string => {\n  return `${\"#\".repeat(chunk.level)} ${chunk.title || \"\"}\\n\\n${\n    chunk.content || \"\"\n  }\\n\\n${chunk.children?.map(chunkToStringRecursively)}\\n\\n`;\n}",
  "name": "chunkToStringRecursively",
  "slug": "chunk-to-string-recursively",
  "parameters": [
    {
      "name": "chunk",
      "schema": {
        "$ref": "#/definitions/MarkdownChunk"
      },
      "simplifiedSchema": {
        "fullComment": "",
        "properties": [
          {
            "name": "level",
            "required": true,
            "schema": {
              "fullComment": "0 is a paragraph 1-6 is h1 until h6",
              "type": "number"
            }
          },
          {
            "name": "content",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "markdownEmbed",
            "required": false,
            "schema": {
              "fullComment": "Anything in the format `![alt](src)`\n\nNB: I need to be very clear how this one works",
              "nb": "I need to be very clear how this one works",
              "properties": [
                {
                  "name": "alt",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "src",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "type",
                  "required": true,
                  "schema": {
                    "enum": [
                      "video",
                      "audio",
                      "image",
                      "text",
                      "other"
                    ],
                    "fullComment": "Possible Asset Types\n\nLater, maybe also support: \"markdown\",\"json\",\"typescript\"",
                    "type": "string"
                  }
                }
              ],
              "type": "object"
            }
          },
          {
            "name": "markdownLink",
            "required": false,
            "schema": {
              "fullComment": "Anything in the format `[alt](href)`\n\nIt needs to be clear how this works. There is a convention for this, and I should implement that as good as possible, and document it here",
              "properties": [
                {
                  "name": "alt",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "href",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "type",
                  "required": true,
                  "schema": {
                    "enum": [
                      "video",
                      "audio",
                      "image",
                      "text",
                      "other"
                    ],
                    "fullComment": "Can be inferred from href\n\nPossible Asset Types\n\nLater, maybe also support: \"markdown\",\"json\",\"typescript\"",
                    "type": "string"
                  }
                }
              ],
              "type": "object"
            }
          },
          {
            "name": "title",
            "required": false,
            "schema": {
              "fullComment": "NB: title can also be an empty string (\"\")",
              "nb": "title can also be an empty string (\"\")",
              "type": "string"
            }
          },
          {
            "name": "children",
            "required": false,
            "schema": {
              "fullComment": "all content until the next title. it's either a content array if there's any titles found, or a string[] if it's paragraphs",
              "items": [
                {
                  "schema": {
                    "circularRefName": "MarkdownChunk",
                    "properties": [],
                    "type": "object"
                  },
                  "name": "MarkdownChunk"
                }
              ],
              "type": "array"
            }
          }
        ],
        "type": "object"
      },
      "required": true
    }
  ],
  "description": "",
  "returnType": {
    "rawType": "String",
    "typeDefinition": {
      "optional": false,
      "$ref": "#/definitions/String"
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 2,
  "size": {
    "characters": 188,
    "lines": 5,
    "bytes": 188,
    "bytesPerCharacter": 1,
    "charactersPerLine": 38,
    "linesPerFile": 5,
    "numberOfFiles": 1
  },
  "id": "swvrdjvpuovymqhlibbdbmgz"
}