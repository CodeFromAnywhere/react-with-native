{
  "createdAt": 1667379663464,
  "updatedAt": 1667379663464,
  "deletedAt": 0,
  "createdFirstAt": 1667379663464,
  "publicAuthorization": [
    "read-docs",
    "search"
  ],
  "isApiExposed": false,
  "isPostApi": false,
  "isGetApi": false,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/mdContentParseRecursively.ts",
  "commentsInside": [],
  "rawText": " (\n  markdownString: string,\n  level: number\n): MarkdownChunk[] => {\n  const chunks = parseMdToChunks(markdownString, level);\n\n  const chunksWithChildren = chunks.map(\n    (chunk: MarkdownChunk): MarkdownChunk[] => {\n      // NB: chunk is a paragraph\n      if (chunk.level === 0 && !chunk.title && chunk.content) {\n        // const lines = chunk.content.split(\"\\n\");\n\n        // // For every line, copy the chunk...\n        // const chunks = lines?.map((line) => ({\n        //   ...chunk,\n        //   content: line,\n        // }));\n\n        // return chunks;\n        return [chunk];\n      }\n\n      // NB: h6 is highest level\n      const children =\n        chunk.content && [1, 2, 3, 4, 5, 6].includes(chunk.level)\n          ? mdContentParseRecursively(chunk.content, chunk.level + 1)\n          : undefined;\n\n      const content = children ? undefined : chunk.content;\n\n      // NB: here we are splitting content with multiple lines into lines only for level 0 chunks\n      return content\n        ? [{ ...chunk, content }]\n        : [{ ...chunk, children, content: undefined }];\n    }\n  );\n\n  return chunksWithChildren.flat();\n}",
  "name": "mdContentParseRecursively",
  "slug": "md-content-parse-recursively",
  "parameters": [
    {
      "name": "markdownString",
      "schema": {
        "type": "string"
      },
      "simplifiedSchema": {
        "type": "string"
      },
      "required": true
    },
    {
      "name": "level",
      "schema": {
        "type": "number"
      },
      "simplifiedSchema": {
        "type": "number"
      },
      "required": true
    }
  ],
  "description": "recursively parses a string containing markdown (without frontmatter) into a MarkdownChunk[]\n\nImprove:\n- include the comment-type (TODO/NB/etc), both on a chunk level and on root level\n- parse paragraphs further around the assets",
  "returnType": {
    "rawType": "import(\"/Users/king/King/operations/tools/types/code-types/build/MarkdownParse\").MarkdownChunk[]",
    "typeCoverage": 0,
    "isArray": true,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 5,
  "size": {
    "characters": 1357,
    "lines": 43,
    "bytes": 1357,
    "bytesPerCharacter": 1,
    "charactersPerLine": 32,
    "linesPerFile": 43,
    "numberOfFiles": 1
  },
  "id": "evqwwmcjoxmfixvtnegotbzk"
}