[{"id":"gcndLREApSQLHkMf","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/tools/parsing/file-conversion/md/markdown-parse-js/src/parseFrontmatterMarkdownString.ts","srcFileId":"/parseFrontmatterMarkdownString","operationFolderName":"markdown-parse-js","relativeFilePathFromSrc":"/parseFrontmatterMarkdownString.ts","relativeOperationBasePathFromProjectRoot":"/tools/parsing/file-conversion/md/markdown-parse-js","operationName":"markdown-parse-js","comment":"splits a markdown string into its frontmatter object and the raw content (without frontmatter)","rawStatement":"export const parseFrontmatterMarkdownString = (\n  markdownWithFrontmatter: string\n): MarkdownParse => {\n  const lines = markdownWithFrontmatter.split(\"\\n\");\n\n  const frontmatterStartIndex = lines.findIndex((x) => x === \"---\");\n\n  //console.log({ frontmatterStartIndex });\n  if (frontmatterStartIndex === -1) {\n    return { raw: markdownWithFrontmatter, parameters: {}, content: [] };\n  }\n\n  const linesAfterStart = lines.slice(frontmatterStartIndex + 1);\n  const frontmatterEndIndex =\n    linesAfterStart.findIndex((x) => x === \"---\") + frontmatterStartIndex + 1;\n\n  //console.log({ frontmatterEndIndex });\n  const frontmatterLines = lines.slice(\n    frontmatterStartIndex + 1,\n    frontmatterEndIndex\n  );\n\n  //   console.log({ frontmatterLines });\n  const parameters: FrontMatter = mergeObjectsArray(\n    frontmatterLines.map((line) => {\n      const [key, value] = line.split(\":\").map((x) => x.trim());\n      return { [key]: parsePrimitive(value) };\n    })\n  );\n\n  const raw = lines.slice(frontmatterEndIndex + 1).join(\"\\n\");\n\n  return { parameters, raw, content: [] };\n};","parameters":{},"types":[],"firstLine":7,"lastLine":9}]