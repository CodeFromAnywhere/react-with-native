[{"id":"jrsLsRJgptRZRnJm","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/tools/parsing/file-conversion/md/markdown-parse-js/src/mdContentParseRecursively.ts","srcFileId":"/mdContentParseRecursively","operationFolderName":"markdown-parse-js","relativeFilePathFromSrc":"/mdContentParseRecursively.ts","relativeOperationBasePathFromProjectRoot":"/tools/parsing/file-conversion/md/markdown-parse-js","operationName":"markdown-parse-js","comment":"recursively parses a string containing markdown (without frontmatter) into a MarkdownChunk[]\n\nImprove:\n- include the comment-type (TODO/NB/etc), both on a chunk level and on root level\n- parse paragraphs further around the assets","rawStatement":"export const mdContentParseRecursively = (\n  markdownString: string,\n  level: number\n): MarkdownChunk[] => {\n  const chunks = parseMdToChunks(markdownString, level);\n\n  const chunksWithChildren = chunks.map(\n    (chunk: MarkdownChunk): MarkdownChunk[] => {\n      // NB: chunk is a paragraph\n      if (chunk.level === 0 && !chunk.title && chunk.content) {\n        // const lines = chunk.content.split(\"\\n\");\n\n        // // For every line, copy the chunk...\n        // const chunks = lines?.map((line) => ({\n        //   ...chunk,\n        //   content: line,\n        // }));\n\n        // return chunks;\n        return [chunk];\n      }\n\n      // NB: h6 is highest level\n      const children =\n        chunk.content && [1, 2, 3, 4, 5, 6].includes(chunk.level)\n          ? mdContentParseRecursively(chunk.content, chunk.level + 1)\n          : undefined;\n\n      const content = children ? undefined : chunk.content;\n\n      // NB: here we are splitting content with multiple lines into lines only for level 0 chunks\n      return content\n        ? [{ ...chunk, content }]\n        : [{ ...chunk, children, content: undefined }];\n    }\n  );\n\n  return chunksWithChildren.flat();\n};","parameters":{},"types":[],"firstLine":7,"lastLine":13}]