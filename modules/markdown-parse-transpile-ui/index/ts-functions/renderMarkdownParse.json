[{"id":"oUSKnvdACJCoKOEt","commentsInside":[],"rawText":" (\n  content: string,\n  config?: { big?: boolean }\n) => {\n  console.log(\"Need to render:\", content);\n  return (\n    <ReactMarkdown\n      className={config?.big ? \"max-w-lg\" : undefined}\n      rehypePlugins={[rehypeHighlight, remarkGfm]}\n      components={{\n        td: ({ node, ...props }) => (\n          // @ts-ignore\n          <td\n            className=\"border border-gray-900 dark:border-gray-100\"\n            {...props}\n          />\n        ),\n        th: ({ node, ...props }) => (\n          // @ts-ignore\n          <th\n            className=\"border border-gray-900 dark:border-gray-100\"\n            {...props}\n          />\n        ),\n\n        ol: ({ node, ...props }) => <ol className=\"list-decimal\" {...props} />,\n        ul: ({ node, ...props }) => (\n          <ul\n            style={{ listStyleType: \"circle\" }}\n            className=\"mx-3 p-2\"\n            {...props}\n          />\n        ),\n        p: ({ node, ...props }) => (\n          <p style={{ marginTop: 15, marginBottom: 15 }} {...props} />\n        ),\n        li: ({ node, ...props }) => <li className=\"\" {...props} />,\n        code: ({ node, ...props }) => (\n          <code\n            className=\"dark:bg-gray-700\"\n            style={{ color: \"darkcyan\" }}\n            {...props}\n          />\n        ),\n      }}\n    >\n      {content}\n    </ReactMarkdown>\n  );\n}","name":"renderMarkdownContent","slug":"render-markdown-content","parameters":[{"name":"content","schema":{"type":"string"},"simplifiedSchema":{"type":"string"},"required":true},{"name":"config","schema":{"type":"object","properties":{"big":{"type":"boolean"}},"additionalProperties":false},"simplifiedSchema":{"properties":[{"name":"big","required":false,"schema":{"type":"boolean"}}],"type":"object"},"required":false}],"description":"renders a markdown striing (without frontmatter)","returnType":{"rawType":"JSX.Element","typeDefinition":{"optional":false,"$ref":"#/definitions/JSX.Element"},"typeCoverage":0,"isArray":false,"isEnum":false,"isObject":true,"isPrimitive":false,"isEnumLiteral":false},"maxIndentationDepth":6,"relativePathFromProjectRoot":"/tools/ui/react-with-native/recipes/markdown-parse-transpile-ui/src/renderMarkdownParse.tsx","srcFileId":"/renderMarkdownParse","operationFolderName":"markdown-parse-transpile-ui","relativeFilePathFromSrc":"/renderMarkdownParse.tsx","relativeOperationBasePathFromProjectRoot":"/tools/ui/react-with-native/recipes/markdown-parse-transpile-ui","operationName":"markdown-parse-transpile-ui","size":{"characters":1379,"lines":50,"bytes":1379,"bytesPerCharacter":1,"charactersPerfLine":27.58,"linesPerFile":50,"numberOfFiles":1}},{"id":"cimwpbJwDPbrbxwP","commentsInside":[],"rawText":" (title: string, level: number) => {\n  const levelSize =\n    level === 1\n      ? \"text-3xl\"\n      : level === 2\n      ? \"text-2xl\"\n      : level === 3\n      ? \"text-xl\"\n      : level === 4\n      ? \"text-lg\"\n      : level === 5\n      ? \"text-md\"\n      : level === 6\n      ? \"text-sm\"\n      : \"text-xs\";\n\n  return (\n    <P id={title} className={levelSize}>\n      {title}\n    </P>\n  );\n}","name":"renderMarkdownTitle","slug":"render-markdown-title","parameters":[{"name":"title","schema":{"type":"string"},"simplifiedSchema":{"type":"string"},"required":true},{"name":"level","schema":{"type":"number"},"simplifiedSchema":{"type":"number"},"required":true}],"description":"renders a markdown title (level should be 1 for h1 and 6 for h6)","returnType":{"rawType":"JSX.Element","typeDefinition":{"optional":false,"$ref":"#/definitions/JSX.Element"},"typeCoverage":0,"isArray":false,"isEnum":false,"isObject":true,"isPrimitive":false,"isEnumLiteral":false},"maxIndentationDepth":3,"relativePathFromProjectRoot":"/tools/ui/react-with-native/recipes/markdown-parse-transpile-ui/src/renderMarkdownParse.tsx","srcFileId":"/renderMarkdownParse","operationFolderName":"markdown-parse-transpile-ui","relativeFilePathFromSrc":"/renderMarkdownParse.tsx","relativeOperationBasePathFromProjectRoot":"/tools/ui/react-with-native/recipes/markdown-parse-transpile-ui","operationName":"markdown-parse-transpile-ui","size":{"characters":448,"lines":22,"bytes":448,"bytesPerCharacter":1,"charactersPerfLine":20.363636363636363,"linesPerFile":22,"numberOfFiles":1}},{"id":"yAHRcEsFPnIAotTU","commentsInside":[],"rawText":" (chunk: MarkdownChunk) => {\n  const title = chunk.title\n    ? renderMarkdownTitle(chunk.title, chunk.level)\n    : null;\n  return (\n    <Div>\n      {title}\n      {chunk.content ? renderMarkdownContent(chunk.content) : null}\n      {chunk.children?.map(renderMarkdownChunk)}\n    </Div>\n  );\n}","name":"renderMarkdownChunk","slug":"render-markdown-chunk","parameters":[{"name":"chunk","schema":{"$ref":"#/definitions/MarkdownChunk"},"simplifiedSchema":{"properties":[{"name":"level","required":true,"schema":{"description":"0 is a paragraph 1-6 is h1 until h6","type":"number"}},{"name":"content","required":false,"schema":{"type":"string"}},{"name":"title","required":false,"schema":{"description":"NB: title can also be an empty string (\"\")","type":"string"}},{"name":"children","required":false,"schema":{"description":"all content until the next title. it's either a content array if there's any titles found, or a string[] if it's paragraphs","items":[{"schema":{"circularRefName":"MarkdownChunk","properties":[],"type":"object"},"name":"MarkdownChunk"}],"type":"array"}}],"type":"object"},"required":true}],"description":"renders a MarkdownChunk interface","returnType":{"rawType":"JSX.Element","typeDefinition":{"optional":false,"$ref":"#/definitions/JSX.Element"},"typeCoverage":0,"isArray":false,"isEnum":false,"isObject":true,"isPrimitive":false,"isEnumLiteral":false},"maxIndentationDepth":3,"relativePathFromProjectRoot":"/tools/ui/react-with-native/recipes/markdown-parse-transpile-ui/src/renderMarkdownParse.tsx","srcFileId":"/renderMarkdownParse","operationFolderName":"markdown-parse-transpile-ui","relativeFilePathFromSrc":"/renderMarkdownParse.tsx","relativeOperationBasePathFromProjectRoot":"/tools/ui/react-with-native/recipes/markdown-parse-transpile-ui","operationName":"markdown-parse-transpile-ui","size":{"characters":323,"lines":12,"bytes":323,"bytesPerCharacter":1,"charactersPerfLine":26.916666666666668,"linesPerFile":12,"numberOfFiles":1}},{"id":"iKQicckuiSTNDllA","commentsInside":[],"rawText":" (markdownParse: MarkdownParse) => {\n  return (\n    <Div>\n      {renderFrontMatter(markdownParse.parameters, { renderSpacer: true })}\n      {markdownParse.content?.map(renderMarkdownChunk)}\n    </Div>\n  );\n}","name":"renderMarkdownParse","slug":"render-markdown-parse","parameters":[{"name":"markdownParse","schema":{"$ref":"#/definitions/MarkdownParse"},"simplifiedSchema":{"properties":[{"name":"fileName","required":false,"schema":{"description":"if available, this can be the filename of the markdown in this markdownparse. Can be used for things like merging","type":"string"}},{"name":"parameters","required":true,"schema":{"description":"TODO: either make a special category crud for the category model would be nice maybe (especially a backend that makes sure all references stay updated would be epic)","properties":[],"type":"object"}},{"name":"content","required":false,"schema":{"description":"structured content based on h1, h2, h3, etc (paragraphs, recursive)","items":[{"schema":{"properties":[{"name":"level","required":true,"schema":{"description":"0 is a paragraph 1-6 is h1 until h6","type":"number"}},{"name":"content","required":false,"schema":{"type":"string"}},{"name":"title","required":false,"schema":{"description":"NB: title can also be an empty string (\"\")","type":"string"}},{"name":"children","required":false,"schema":{"description":"all content until the next title. it's either a content array if there's any titles found, or a string[] if it's paragraphs","items":[{"schema":{"circularRefName":"MarkdownChunk","properties":[],"type":"object"},"name":"MarkdownChunk"}],"type":"array"}}],"type":"object"},"name":"MarkdownChunk"}],"type":"array"}},{"name":"raw","required":true,"schema":{"description":"raw markdown without frontmatter","type":"string"}}],"type":"object"},"required":true}],"description":"renders the MardkownParse interface (including frontmatter)","returnType":{"rawType":"JSX.Element","typeDefinition":{"optional":false,"$ref":"#/definitions/JSX.Element"},"typeCoverage":0,"isArray":false,"isEnum":false,"isObject":true,"isPrimitive":false,"isEnumLiteral":false},"maxIndentationDepth":3,"relativePathFromProjectRoot":"/tools/ui/react-with-native/recipes/markdown-parse-transpile-ui/src/renderMarkdownParse.tsx","srcFileId":"/renderMarkdownParse","operationFolderName":"markdown-parse-transpile-ui","relativeFilePathFromSrc":"/renderMarkdownParse.tsx","relativeOperationBasePathFromProjectRoot":"/tools/ui/react-with-native/recipes/markdown-parse-transpile-ui","operationName":"markdown-parse-transpile-ui","size":{"characters":266,"lines":8,"bytes":266,"bytesPerCharacter":1,"charactersPerfLine":33.25,"linesPerFile":8,"numberOfFiles":1}},{"id":"KfpRoVbsTYwNsBDq","commentsInside":[],"rawText":" (\n  parameters: FrontMatter,\n  config?: { renderSpacer?: boolean }\n) => {\n  const frontMatterKeys = Object.keys(parameters);\n\n  return frontMatterKeys.length > 0 ? (\n    <Div>\n      <Div>\n        {frontMatterKeys.map((key) => (\n          <P>\n            {key}: {parameters[key]}\n          </P>\n        ))}\n      </Div>\n\n      {config?.renderSpacer ? <P>------------</P> : null}\n    </Div>\n  ) : null;\n}","name":"renderFrontMatter","slug":"render-front-matter","parameters":[{"name":"parameters","schema":{"$ref":"#/definitions/FrontMatter"},"simplifiedSchema":{"description":"TODO: either make a special category crud for the category model would be nice maybe (especially a backend that makes sure all references stay updated would be epic)","properties":[],"type":"object"},"required":true},{"name":"config","schema":{"type":"object","properties":{"renderSpacer":{"type":"boolean"}},"additionalProperties":false},"simplifiedSchema":{"properties":[{"name":"renderSpacer","required":false,"schema":{"type":"boolean"}}],"type":"object"},"required":false}],"description":"Renders markdown frontmatter parameters (and optionally a spacer)","returnType":{"rawType":"JSX.Element | null","typeDefinition":{"optional":true,"$ref":"#/definitions/JSX.Element"},"typeCoverage":0,"isArray":false,"isEnum":false,"isObject":false,"isPrimitive":false,"isEnumLiteral":false},"maxIndentationDepth":6,"relativePathFromProjectRoot":"/tools/ui/react-with-native/recipes/markdown-parse-transpile-ui/src/renderMarkdownParse.tsx","srcFileId":"/renderMarkdownParse","operationFolderName":"markdown-parse-transpile-ui","relativeFilePathFromSrc":"/renderMarkdownParse.tsx","relativeOperationBasePathFromProjectRoot":"/tools/ui/react-with-native/recipes/markdown-parse-transpile-ui","operationName":"markdown-parse-transpile-ui","size":{"characters":468,"lines":20,"bytes":468,"bytesPerCharacter":1,"charactersPerfLine":23.4,"linesPerFile":20,"numberOfFiles":1}}]