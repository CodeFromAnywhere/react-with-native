{
  "createdAt": 1670526896988,
  "updatedAt": 1670526896988,
  "deletedAt": 0,
  "createdFirstAt": 1670526896988,
  "isApiExposed": true,
  "isExported": true,
  "groupAuthorization": {},
  "operationRelativeTypescriptFilePath": "src/useAsset.ts",
  "commentsInside": [],
  "rawText": " (\n  asset: Asset | undefined,\n  projectRelativeReferencingFilePath?: string | null,\n  isNextStaticProductionBuild?: boolean\n) => {\n  if (!asset || !projectRelativeReferencingFilePath) return;\n\n  const { src, downloadUrl } = getSrc(\n    asset,\n    projectRelativeReferencingFilePath,\n    isNextStaticProductionBuild\n  );\n\n  const extension = getExtensionFromAsset(asset);\n\n  const assetInfo = useAssetInfo(src, asset.originalFilename);\n\n  const rawText = assetInfo?.rawText || null;\n  const type = asset.type || assetInfo?.type;\n\n  return { rawText, type, downloadUrl, src, extension };\n}",
  "name": "useAsset",
  "slug": "use-asset",
  "parameters": [
    {
      "name": "asset",
      "schema": {
        "$ref": "#/definitions/Asset"
      },
      "simplifiedSchema": {
        "fullComment": "Asset you can upload\n\nThis is not a database model, it can exist in properties of any db model or type interface.\n\nOnly `alt` and `relativePath` are stored, the other parameters are optionally required for uploading and user interfaces, and are not always there\n\nNB: don't use this in your model, use `StoredAsset` instead.",
        "nb": "don't use this in your model, use `StoredAsset` instead.",
        "properties": [
          {
            "name": "alt",
            "required": false,
            "schema": {
              "fullComment": "Stored value\n\nAlt text for the asset",
              "type": "string"
            }
          },
          {
            "name": "relativePath",
            "required": false,
            "schema": {
              "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": false,
            "schema": {
              "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
              "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
              "type": "string"
            }
          },
          {
            "name": "temporaryDestination",
            "required": false,
            "schema": {
              "fullComment": "Not stored\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
              "type": "string"
            }
          },
          {
            "name": "projectRelativeReferencingFilePath",
            "required": false,
            "schema": {
              "fullComment": "Not stored\n\nNeeds to be there before calling `processAsset`. Should be augmented to the backendAsset in the frontend, before sending it to the backend.\n\nLocation of the place where the asset is referenced\n\n- markdown file (or folder where it is located)\n- typescript file (or folder where it is located)\n- database file (or folder where it is located)",
              "type": "string"
            }
          },
          {
            "name": "modelName",
            "required": false,
            "schema": {
              "fullComment": "Not stored\n\nNeeds to be there before calling `processAsset`. Should be augmented to the backendAsset in the frontend, before sending it to the backend.\n\nModel that the asset is related to",
              "type": "string"
            }
          },
          {
            "name": "absoluteUrl",
            "required": false,
            "schema": {
              "fullComment": "NOT STORED\n\nCan be available in case it's an asset from an external source URL for example within md.\n\nAlso can be set in case it's a static asset from a next project",
              "type": "string"
            }
          },
          {
            "name": "blobPath",
            "required": false,
            "schema": {
              "fullComment": "path to the local blob if uploading",
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": false,
            "schema": {
              "enum": [
                "video",
                "audio",
                "image",
                "text",
                "other"
              ],
              "fullComment": "can be calculated from the path, or come directly from the blob\n\nPossible Asset Types\n\nLater, maybe also support: \"markdown\",\"json\",\"typescript\"",
              "type": "string"
            }
          },
          {
            "name": "originalFilename",
            "required": false,
            "schema": {
              "fullComment": "if the file was selected from the system, this should be the original filename, including extension",
              "type": "string"
            }
          },
          {
            "name": "sizeBytes",
            "required": false,
            "schema": {
              "fullComment": "can be calculated from the file stats.",
              "type": "number"
            }
          },
          {
            "name": "blob",
            "required": false,
            "schema": {
              "fullComment": "Blob that is available after selecting from the local file system",
              "properties": [
                {
                  "name": "size",
                  "required": true,
                  "schema": {
                    "type": "number"
                  }
                },
                {
                  "name": "type",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "type": "object"
            }
          },
          {
            "name": "uploadProgress",
            "required": false,
            "schema": {
              "fullComment": "number between 0 and 1 indicating uploadProgress",
              "type": "number"
            }
          }
        ],
        "type": "object"
      },
      "required": false
    },
    {
      "name": "projectRelativeReferencingFilePath",
      "schema": {
        "type": [
          "string",
          "null"
        ]
      },
      "simplifiedSchema": {
        "type": "string"
      },
      "required": false
    },
    {
      "name": "isNextStaticProductionBuild",
      "schema": {
        "type": "boolean"
      },
      "simplifiedSchema": {
        "type": "boolean"
      },
      "required": false
    }
  ],
  "description": "",
  "returnType": {
    "rawType": "{ rawText: string | null; type: import(\"/Users/king/King/operations/tools/asset/asset-type/build/Asset\").AssetType | undefined; downloadUrl: string | undefined; src: string | undefined; extension: string | undefined; } | undefined",
    "typeDefinition": {
      "type": "object",
      "properties": {
        "rawText": {
          "type": "string | null"
        },
        "type": {
          "enum": [
            "video",
            "audio",
            "image",
            "text",
            "other"
          ],
          "x-enumNames": [
            "video",
            "audio",
            "image",
            "text",
            "other"
          ],
          "type": "string"
        },
        "downloadUrl": {
          "type": "string",
          "allOf": [
            {
              "transform": [
                "trim"
              ]
            },
            {
              "minLength": 1
            }
          ]
        },
        "src": {
          "type": "string",
          "allOf": [
            {
              "transform": [
                "trim"
              ]
            },
            {
              "minLength": 1
            }
          ]
        },
        "extension": {
          "type": "string",
          "allOf": [
            {
              "transform": [
                "trim"
              ]
            },
            {
              "minLength": 1
            }
          ]
        }
      },
      "optional": true
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [
        {
          "name": "rawText",
          "required": false,
          "schema": {
            "properties": [],
            "type": "object"
          }
        },
        {
          "name": "type",
          "required": false,
          "schema": {
            "enum": [
              "video",
              "audio",
              "image",
              "text",
              "other"
            ],
            "type": "string"
          }
        },
        {
          "name": "downloadUrl",
          "required": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "src",
          "required": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "extension",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "type": "object"
    }
  },
  "maxIndentationDepth": 2,
  "size": {
    "characters": 588,
    "lines": 22,
    "bytes": 588,
    "bytesPerCharacter": 1,
    "charactersPerLine": 27,
    "linesPerFile": 22,
    "numberOfFiles": 1
  },
  "id": "kvtybauwkhuybtnvwoodgtpu"
}