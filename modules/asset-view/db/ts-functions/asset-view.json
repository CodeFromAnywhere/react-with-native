{
  "createdAt": 1667634354331,
  "updatedAt": 1667634354331,
  "deletedAt": 0,
  "createdFirstAt": 1667634354331,
  "publicAuthorization": [
    "read-docs",
    "search"
  ],
  "isApiExposed": false,
  "isPostApi": false,
  "isGetApi": false,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/AssetView.tsx",
  "commentsInside": [],
  "rawText": " (props: {\n  asset: Asset;\n  className?: string;\n  projectRelativeReferencingFilePath: string;\n  hideDownloadLink?: boolean;\n}) => {\n  const {\n    asset,\n    className,\n    projectRelativeReferencingFilePath,\n    hideDownloadLink,\n  } = props;\n\n  const isRemote = !asset.blobPath;\n\n  /**\n   * NB: `relativePath` is required\n   */\n  const getRemoteUrl = (isDownload: boolean) =>\n    getReferencedAssetApiUrl(\n      apiUrl,\n      projectRelativeReferencingFilePath,\n      asset.relativePath!,\n      isDownload\n    );\n  /**\n   * NB: `asset.temporaryDestination` is not a URL that can be used to retreive the image as \"src\"\n   */\n  const src = isRemote\n    ? asset.relativePath\n      ? getRemoteUrl(false)\n      : undefined\n    : asset.blobPath;\n\n  const downloadRemotely = isRemote && !!asset.relativePath;\n\n  const downloadHref = downloadRemotely\n    ? getRemoteUrl(true)\n    : // NB: other type is ugly when downloading. Also doesn't make sense much to want to download an asset after uploading\n    asset.type !== \"other\"\n    ? asset.blobPath\n    : undefined;\n\n  const sizeText =\n    asset.sizeBytes !== undefined\n      ? `(${readableSize(asset.sizeBytes)})`\n      : undefined;\n\n  const downloadText = \" ⬇️ Download\";\n\n  const extension = getExtensionFromAsset(asset);\n\n  const filename =\n    isRemote && asset.relativePath\n      ? asset.relativePath.split(\"/\").pop()!\n      : extension\n      ? `untitled.${extension}`\n      : undefined;\n\n  const isTextFile = filename && isText(filename) === true ? true : false;\n\n  const type =\n    isRemote && asset.relativePath\n      ? getTypeFromRelativePath(asset.relativePath)\n      : asset.type;\n\n  const [rawText, setRawText] = useState(\"\");\n  useEffect(() => {\n    if (!!src && isTextFile) {\n      fetch(src).then((result) => {\n        result.text().then((text) => setRawText(text));\n      });\n    }\n  }, [src, isTextFile]);\n\n  return (\n    <Span style={{ position: \"relative\" }}>\n      {downloadHref && !hideDownloadLink ? (\n        <Div\n          style={{\n            padding: \"5px\",\n          }}\n        >\n          <A target=\"_blank\" href={downloadHref}>\n            {downloadText} {sizeText}\n          </A>\n        </Div>\n      ) : null}\n\n      {type === \"image\" && src && (\n        <img src={src} style={{ aspectRatio: \"auto\", width: 150 }} />\n      )}\n      {type === \"audio\" && src && <audio controls src={src} />}\n      {type === \"video\" && src && (\n        <video style={{ aspectRatio: \"auto\", width: 150 }} controls src={src} />\n      )}\n\n      {type === \"other\" && isTextFile ? (\n        <MarkdownCodeblock text={rawText} extension={extension} />\n      ) : null}\n\n      {/* LATER: render PDF renderer here */}\n      {type === \"other\" && extension === \"pdf\" ? null : null}\n\n      {src === undefined ? <P>Asset src not found</P> : null}\n    </Span>\n  );\n}",
  "name": "AssetView",
  "slug": "asset-view",
  "parameters": [
    {
      "name": "props",
      "schema": {
        "type": "object",
        "properties": {
          "asset": {
            "$ref": "#/definitions/Asset"
          },
          "className": {
            "type": "string"
          },
          "projectRelativeReferencingFilePath": {
            "type": "string"
          },
          "hideDownloadLink": {
            "type": "boolean"
          }
        },
        "required": [
          "asset",
          "projectRelativeReferencingFilePath"
        ],
        "additionalProperties": false
      },
      "simplifiedSchema": {
        "properties": [
          {
            "name": "asset",
            "required": true,
            "schema": {
              "fullComment": "Asset you can upload\n\nThis is not a database model, it can exist in properties of any db model or type interface.\n\nOnly `alt` and `relativePath` are stored, the other parameters are optionally required for uploading and user interfaces, and are not always there\n\nNB: don't use this in your model, use `StoredAsset` instead.",
              "nb": "don't use this in your model, use `StoredAsset` instead.",
              "properties": [
                {
                  "name": "alt",
                  "required": false,
                  "schema": {
                    "fullComment": "Stored value\n\nAlt text for the asset",
                    "type": "string"
                  }
                },
                {
                  "name": "relativePath",
                  "required": false,
                  "schema": {
                    "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                    "type": "string"
                  }
                },
                {
                  "name": "name",
                  "required": false,
                  "schema": {
                    "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                    "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                    "type": "string"
                  }
                },
                {
                  "name": "temporaryDestination",
                  "required": false,
                  "schema": {
                    "fullComment": "Not stored\n\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                    "type": "string"
                  }
                },
                {
                  "name": "blobPath",
                  "required": false,
                  "schema": {
                    "fullComment": "path to the local blob if uploading",
                    "type": "string"
                  }
                },
                {
                  "name": "originalFilename",
                  "required": false,
                  "schema": {
                    "fullComment": "if the file was selected from the system, this should be the original filename, including extension",
                    "type": "string"
                  }
                },
                {
                  "name": "sizeBytes",
                  "required": false,
                  "schema": {
                    "fullComment": "can be calculated from the file stats.",
                    "type": "number"
                  }
                },
                {
                  "name": "blob",
                  "required": false,
                  "schema": {
                    "fullComment": "Blob that is available after selecting from the local file system",
                    "properties": [
                      {
                        "name": "size",
                        "required": true,
                        "schema": {
                          "type": "number"
                        }
                      },
                      {
                        "name": "type",
                        "required": true,
                        "schema": {
                          "type": "string"
                        }
                      }
                    ],
                    "type": "object"
                  }
                },
                {
                  "name": "uploadProgress",
                  "required": false,
                  "schema": {
                    "fullComment": "number between 0 and 1 indicating uploadProgress",
                    "type": "number"
                  }
                }
              ],
              "type": "object"
            }
          },
          {
            "name": "className",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectRelativeReferencingFilePath",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hideDownloadLink",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "type": "object"
      },
      "required": true
    }
  ],
  "description": "",
  "returnType": {
    "rawType": "JSX.Element",
    "typeDefinition": {
      "optional": false,
      "$ref": "#/definitions/JSX.Element"
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 6,
  "size": {
    "characters": 2807,
    "lines": 108,
    "bytes": 2811,
    "bytesPerCharacter": 1.0014250089063057,
    "charactersPerLine": 26,
    "linesPerFile": 108,
    "numberOfFiles": 1
  },
  "id": "zjdevgygwjuhwlzbppxopyiw"
}