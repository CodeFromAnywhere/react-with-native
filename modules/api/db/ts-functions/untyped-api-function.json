{
  "createdAt": 1666260569202,
  "updatedAt": 1666260569202,
  "deletedAt": 0,
  "createdFirstAt": 1666260569202,
  "publicAuthorization": [
    "read-docs",
    "search"
  ],
  "isApiExposed": false,
  "isPostApi": false,
  "isGetApi": false,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/api.ts",
  "commentsInside": [],
  "rawText": " async (\n  fnName: string,\n  config: ApiConfig,\n  ...parameters: any\n): Promise<RealApiReturnType<any>> => {\n  // TODO: document this convention\n  const storageAuthToken: string = await getItem(AUTH_TOKEN_STORAGE_KEY);\n\n  const authToken = config.authToken || storageAuthToken;\n  const realApiUrl = config.apiUrl || apiUrl;\n  const fullUrl = `${realApiUrl}/function/${fnName}`;\n\n  try {\n    const abortController = new AbortController();\n    const id = setTimeout(\n      () => abortController.abort(),\n      config.timeout || 10000\n    );\n\n    const response = await fetch(fullUrl, {\n      method: \"POST\",\n      signal: config.timeout ? abortController.signal : undefined,\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ config: { authToken }, parameters }),\n    })\n      .then((response) => response.json())\n      .then((response) => {\n        return response;\n      })\n      .catch((error) => {\n        if (!config.timeout) {\n          console.warn(error);\n        }\n        return {\n          isSuccessful: false,\n          isNotConnected: true,\n          message: \"The API didn't resolve: \" + error, //error + error.status +\n        };\n      });\n\n    clearTimeout(id);\n    return response;\n  } catch (e) {\n    return {\n      isSuccessful: false,\n      isNotConnected: true,\n      message: \"The API didn't resolve: \" + e,\n    };\n  }\n}",
  "name": "untypedApiFunction",
  "slug": "untyped-api-function",
  "parameters": [
    {
      "name": "fnName",
      "schema": {
        "type": "string"
      },
      "simplifiedSchema": {
        "type": "string"
      },
      "required": true
    },
    {
      "name": "config",
      "schema": {
        "$ref": "#/definitions/ApiConfig"
      },
      "simplifiedSchema": {
        "fullComment": "",
        "properties": [
          {
            "name": "apiUrl",
            "required": false,
            "schema": {
              "fullComment": "optionally provide an api URL (uses sdk-env-public key if not provded)",
              "type": "string"
            }
          },
          {
            "name": "authToken",
            "required": false,
            "schema": {
              "fullComment": "optionally provide an authtoken (uses storage key if not provided)",
              "type": "string"
            }
          },
          {
            "name": "timeout",
            "required": false,
            "schema": {
              "fullComment": "optionally provide a max ms to execute the api fetch",
              "type": "number"
            }
          }
        ],
        "type": "object"
      },
      "required": true
    },
    {
      "name": "parameters",
      "schema": {},
      "simplifiedSchema": {
        "properties": [],
        "type": "object"
      },
      "required": true
    }
  ],
  "description": "Used for calling the actual api for a function with some config\n\nNB: this is not a typed function as we are just overwriting it so we don't need any inference on this",
  "returnType": {
    "rawType": "Promise<import(\"/Users/king/King/operations/tools/interfaces/api/api-types/build/api-types\").RealApiReturnType<any>>",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 5,
  "size": {
    "characters": 1590,
    "lines": 55,
    "bytes": 1590,
    "bytesPerCharacter": 1,
    "charactersPerLine": 29,
    "linesPerFile": 55,
    "numberOfFiles": 1
  },
  "id": "sgmnaxrdhmnsfcdhbmhmgitq"
}