{
  "createdAt": 1666260569375,
  "updatedAt": 1666260569375,
  "deletedAt": 0,
  "createdFirstAt": 1666260569375,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "queries",
  "slug": "queries",
  "operationRelativeTypescriptFilePath": "src/api.ts",
  "type": {
    "rawType": "import(\"/Users/king/King/operations/tools/interfaces/api/api-types/build/api-types\").QueryType",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "mergeObjectsArray(\n  functionApiKeys\n    .map((fnName) => fnName as keyof typeof api)\n    .map((fnName) => {\n      const apiFn = api[fnName];\n      const useQueryFunction = (...parameters: any[]) => {\n        const queryResult = useQuery(\n          [fnName, ...parameters],\n          // @ts-ignore\n          () => apiFn(...parameters),\n          { enabled: true, refetchOnWindowFocus: \"always\" }\n        );\n        return queryResult;\n      };\n\n      const hookName = camelCase(`use-${fnName}`);\n      const objectPart = { [hookName]: useQueryFunction };\n\n      return objectPart;\n    })\n) as unknown as QueryType",
  "description": "This object contains a react-query `useQuery` hook for every api function",
  "id": "lpqqmxzkbegafsqawvqeoqgz"
}