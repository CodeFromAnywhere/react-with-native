[
  {
    "createdAt": 1670589811574,
    "updatedAt": 1670589811574,
    "deletedAt": 0,
    "createdFirstAt": 1670589811574,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/getContextualPrompts.ts",
    "comment": "Function to centralise the convention of the db file location of a scoped prompt",
    "rawStatement": "export const getFolderRelativeScopeDbFilePath = (filename?: string) => {\n  return filename\n    ? `.index/${filename}/contextual-prompts.json`\n    : `.index/contextual-prompts.json`;\n};",
    "parameters": {},
    "types": [],
    "firstLine": 9,
    "lastLine": 11,
    "id": "xketfrszrobtnxdrijfbvabn"
  },
  {
    "createdAt": 1670589811574,
    "updatedAt": 1670589811574,
    "deletedAt": 0,
    "createdFirstAt": 1670589811574,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/getContextualPrompts.ts",
    "comment": "Wrapper around the database to support the usecase of storing a file in a custom location for contextualPrompts.",
    "rawStatement": "export const getContextualPromptsArray = async (\n  /**\n   * If available, will also get the scoped context\n   */\n  scopeProjectRelativePath?: string\n): Promise<{\n  databaseResult: ContextualPrompt[];\n  scopeResult?: ContextualPrompt[];\n}> => {\n  const databaseResult = await db.get(\"ContextualPrompt\");\n  if (!scopeProjectRelativePath) {\n    return { databaseResult };\n  }\n\n  // if we need the scoped contextual prompt, it should be saved in the index of the file itself.\n  const projectRoot = getProjectRoot();\n  if (!projectRoot) return { databaseResult };\n\n  // it can be a file or a folder\n\n  const scopeAbsolutePath = path.join(projectRoot, scopeProjectRelativePath);\n\n  if (!fs.existsSync(scopeAbsolutePath)) {\n    return { databaseResult };\n  }\n\n  const stats = await fs.stat(scopeAbsolutePath);\n\n  const parsedScopePath = path.parse(scopeAbsolutePath);\n  const filename = stats.isFile() ? parsedScopePath.base : undefined;\n  const scopeFolderPath = stats.isDirectory()\n    ? scopeAbsolutePath\n    : parsedScopePath.dir;\n  const scopeAbsoluteDbPath = path.join(\n    scopeFolderPath,\n    getFolderRelativeScopeDbFilePath(filename)\n  );\n\n  if (!fs.existsSync(scopeAbsoluteDbPath)) return { databaseResult };\n\n  // if it exists, add it to the result\n  const jsonString = await fs.readFile(scopeAbsoluteDbPath, \"utf8\");\n  const scopeResult = tryParseJson<ContextualPrompt[]>(jsonString);\n  if (!scopeResult) return { databaseResult };\n\n  const finalScopeResult: ContextualPrompt[] = scopeResult.map((x) => ({\n    ...x,\n    scopeProjectRelativePath,\n  }));\n\n  // add the scopeProjectRelativePath so we don't need to store it in the db\n  return {\n    databaseResult,\n    scopeResult: finalScopeResult,\n  };\n};",
    "parameters": {},
    "types": [],
    "firstLine": 18,
    "lastLine": 20,
    "id": "ebtnbccmbgsgdqsgcopmmixe"
  },
  {
    "createdAt": 1670589811574,
    "updatedAt": 1670589811574,
    "deletedAt": 0,
    "createdFirstAt": 1670589811574,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/getContextualPrompts.ts",
    "comment": "Returns all contextual prompts for the selection and for the page with the right context type",
    "rawStatement": "export const getContextualPrompts = async (\n  /**\n   * If not given, will return all\n   */\n  contextType?: FileType,\n  scopeProjectRelativePath?: string\n): Promise<ContextualPromptsObject> => {\n  const contextualPromptsObject = await getContextualPromptsArray(\n    scopeProjectRelativePath\n  );\n\n  const databaseContextualPromptSlugs =\n    contextualPromptsObject.databaseResult.map((x) => x.slug);\n  const contextualPrompts = Object.values(contextualPromptsObject).flat();\n\n  const rightType = contextualPrompts\n    .filter((x) => (contextType ? x.contextType === contextType : true))\n    .map(omitUndefinedValues);\n\n  const selectionContextualPrompts = rightType.filter(\n    (x) => x.usesSelection || x.usesAnyContext\n  );\n\n  const pageContextualPrompts = rightType.filter(\n    (x) => (!x.usesSelection && x.usesContext) || x.usesAnyContext\n  );\n\n  const folderContextualPrompts = rightType.filter(\n    (x) =>\n      (!x.usesSelection && !x.usesContext && x.folderContentContext) ||\n      x.usesAnyContext\n  );\n  return {\n    selectionContextualPrompts,\n    pageContextualPrompts,\n    folderContextualPrompts,\n    databaseContextualPromptSlugs,\n  };\n};",
    "parameters": {},
    "types": [],
    "firstLine": 79,
    "lastLine": 81,
    "id": "jxyqhsowblhbyqiuqqzwzspy"
  }
]