{
  "createdAt": 1667588127740,
  "updatedAt": 1667588127740,
  "deletedAt": 0,
  "createdFirstAt": 1667588127740,
  "publicAuthorization": [
    "read-docs",
    "search"
  ],
  "isApiExposed": false,
  "isPostApi": false,
  "isGetApi": false,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/editors/autocomplete-components.tsx",
  "commentsInside": [],
  "rawText": " (props: {\n  augmentedWord: AugmentedWord;\n  augmentedWordObject?: MappedObject<AugmentedWord>;\n}) => {\n  const { augmentedWord, augmentedWordObject } = props;\n\n  const projectRelativeMarkdownFilePath =\n    augmentedWord.projectRelativeMarkdownSourcePath;\n  const projectRelativeBaseFolderPath = getFolderJs(\n    projectRelativeMarkdownFilePath\n  )!;\n  return (\n    <Div>\n      <Div className=\"flex flex-row justify-between\">\n        <P>{augmentedWord.word}</P>\n        <Div>(?)</Div>\n      </Div>\n      <P>\n        {augmentedWord.spoiler\n          ? renderMarkdownContent(augmentedWord.spoiler, {\n              projectRelativeMarkdownFilePath,\n              projectRelativeBaseFolderPath,\n              augmentedWordObject,\n              isDev,\n              isStatic: false,\n            })\n          : null}\n      </P>\n    </Div>\n  );\n}",
  "name": "Completion",
  "slug": "completion",
  "parameters": [
    {
      "name": "props",
      "schema": {
        "type": "object",
        "properties": {
          "augmentedWord": {
            "$ref": "#/definitions/AugmentedWord"
          },
          "augmentedWordObject": {
            "$ref": "#/definitions/MappedObject%3CAugmentedWord%3E"
          }
        },
        "required": [
          "augmentedWord"
        ],
        "additionalProperties": false
      },
      "simplifiedSchema": {
        "properties": [
          {
            "name": "augmentedWord",
            "required": true,
            "schema": {
              "fullComment": "AugmentedWords should have a small footprint since there can be many of them\n\nWords with a specific affix (backticks, bolded, italic) will match against these.\n\nUsed to link automatically to functionNames, InterfaceNames, operation-names, words, and more..",
              "properties": [
                {
                  "name": "word",
                  "required": true,
                  "schema": {
                    "fullComment": "Word without affixes. The affixes will be decided in the frontend parser based on the type",
                    "type": "string"
                  }
                },
                {
                  "name": "queryPath",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "projectRelativeMarkdownSourcePath",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "spoiler",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "isCaseInsensitive",
                  "required": false,
                  "schema": {
                    "fullComment": "If true, will match on lowercase variant of the word",
                    "type": "boolean"
                  }
                }
              ],
              "type": "object"
            }
          }
        ],
        "type": "object"
      },
      "required": true
    }
  ],
  "description": "",
  "returnType": {
    "rawType": "JSX.Element",
    "typeDefinition": {
      "optional": false,
      "$ref": "#/definitions/JSX.Element"
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 7,
  "size": {
    "characters": 838,
    "lines": 31,
    "bytes": 838,
    "bytesPerCharacter": 1,
    "charactersPerLine": 27,
    "linesPerFile": 31,
    "numberOfFiles": 1
  },
  "id": "bbsfljjwmpigvxurpkvrsyni"
}