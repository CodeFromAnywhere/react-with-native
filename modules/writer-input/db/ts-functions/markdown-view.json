{
  "createdAt": 1670527738191,
  "updatedAt": 1670527738191,
  "deletedAt": 0,
  "createdFirstAt": 1670527738191,
  "isApiExposed": true,
  "isExported": true,
  "groupAuthorization": {},
  "operationRelativeTypescriptFilePath": "src/MarkdownView.tsx",
  "commentsInside": [],
  "rawText": " (props: {\n  view: \"view\" | \"presentation\";\n  markdownParse: MarkdownParse;\n  markdownParseRenderConfig: MarkdownParseRenderConfig;\n}) => {\n  const { markdownParse, markdownParseRenderConfig, view } = props;\n\n  const {\n    projectRelativeBaseFolderPath,\n    projectRelativeMarkdownFilePath,\n    augmentedWordObject,\n  } = markdownParseRenderConfig;\n  return (\n    <>\n      {view === \"view\" ? (\n        <Div className=\"mx-2\">\n          {renderMarkdownParse(markdownParse, markdownParseRenderConfig)}\n        </Div>\n      ) : null}\n\n      {view === \"presentation\" ? (\n        <Div className=\"mx-2 flex flex-1 min-h-[80vh]\">\n          {markdownParse.content ? (\n            <MarkdownParsePresentation\n              markdownParse={markdownParse}\n              augmentedWordObject={augmentedWordObject}\n              projectRelativeBaseFolderPath={projectRelativeBaseFolderPath}\n              projectRelativeMarkdownFilePath={projectRelativeMarkdownFilePath}\n            />\n          ) : (\n            \"Couldn't find any content\"\n          )}\n        </Div>\n      ) : null}\n    </>\n  );\n}",
  "name": "MarkdownView",
  "slug": "markdown-view",
  "parameters": [
    {
      "name": "props",
      "schema": {
        "type": "object",
        "properties": {
          "view": {
            "type": "string",
            "enum": [
              "view",
              "presentation"
            ]
          },
          "markdownParse": {
            "$ref": "#/definitions/MarkdownParse"
          },
          "markdownParseRenderConfig": {
            "$ref": "#/definitions/MarkdownParseRenderConfig"
          }
        },
        "required": [
          "view",
          "markdownParse",
          "markdownParseRenderConfig"
        ],
        "additionalProperties": false
      },
      "simplifiedSchema": {
        "properties": [
          {
            "name": "view",
            "required": true,
            "schema": {
              "enum": [
                "view",
                "presentation"
              ],
              "type": "string"
            }
          },
          {
            "name": "markdownParse",
            "required": true,
            "schema": {
              "fullComment": "",
              "properties": [
                {
                  "name": "fileName",
                  "required": false,
                  "schema": {
                    "fullComment": "if available, this can be the filename of the markdown in this markdown-parse. Can be used for things like merging",
                    "type": "string"
                  }
                },
                {
                  "name": "createdAt",
                  "required": false,
                  "schema": {
                    "type": "number"
                  }
                },
                {
                  "name": "openedAt",
                  "required": false,
                  "schema": {
                    "type": "number"
                  }
                },
                {
                  "name": "updatedAt",
                  "required": false,
                  "schema": {
                    "type": "number"
                  }
                },
                {
                  "name": "deletedAt",
                  "required": false,
                  "schema": {
                    "type": "number"
                  }
                },
                {
                  "name": "createdFirstAt",
                  "required": false,
                  "schema": {
                    "type": "number"
                  }
                },
                {
                  "name": "parameters",
                  "required": true,
                  "schema": {
                    "fullComment": "parameters found in frontmatter\n\nOur version of frontmatter is a bit simpler than regular frontmatter\n\nNot sure if this is a good idea, but it keeps it simple for our OS\n\nall values parse in a similar way to csv\n\nmake sure that you use quotes if you want to store a string with commas, because commas in a parameter indicate that it is a string array\n\nNB: string arrays are comma separated values, where you can put values with special characters in between quotes",
                    "nb": "string arrays are comma separated values, where you can put values with special characters in between quotes",
                    "properties": [],
                    "type": "object"
                  }
                },
                {
                  "name": "content",
                  "required": false,
                  "schema": {
                    "fullComment": "structured content based on h1, h2, h3, etc (paragraphs, recursive)",
                    "items": [
                      {
                        "schema": {
                          "fullComment": "",
                          "properties": [
                            {
                              "name": "level",
                              "required": true,
                              "schema": {
                                "fullComment": "0 is a paragraph 1-6 is h1 until h6",
                                "type": "number"
                              }
                            },
                            {
                              "name": "content",
                              "required": false,
                              "schema": {
                                "type": "string"
                              }
                            },
                            {
                              "name": "markdownEmbed",
                              "required": false,
                              "schema": {
                                "fullComment": "Anything in the format `![alt](src)`\n\nNB: I need to be very clear how this one works",
                                "nb": "I need to be very clear how this one works",
                                "properties": [
                                  {
                                    "name": "alt",
                                    "required": true,
                                    "schema": {
                                      "type": "string"
                                    }
                                  },
                                  {
                                    "name": "src",
                                    "required": true,
                                    "schema": {
                                      "type": "string"
                                    }
                                  },
                                  {
                                    "name": "type",
                                    "required": true,
                                    "schema": {
                                      "enum": [
                                        "video",
                                        "audio",
                                        "image",
                                        "text",
                                        "other"
                                      ],
                                      "fullComment": "Possible Asset Types\n\nLater, maybe also support: \"markdown\",\"json\",\"typescript\"",
                                      "type": "string"
                                    }
                                  }
                                ],
                                "type": "object"
                              }
                            },
                            {
                              "name": "markdownLink",
                              "required": false,
                              "schema": {
                                "fullComment": "Anything in the format `[alt](href)`\n\nIt needs to be clear how this works. There is a convention for this, and I should implement that as good as possible, and document it here",
                                "properties": [
                                  {
                                    "name": "alt",
                                    "required": true,
                                    "schema": {
                                      "type": "string"
                                    }
                                  },
                                  {
                                    "name": "href",
                                    "required": true,
                                    "schema": {
                                      "type": "string"
                                    }
                                  },
                                  {
                                    "name": "type",
                                    "required": true,
                                    "schema": {
                                      "enum": [
                                        "video",
                                        "audio",
                                        "image",
                                        "text",
                                        "other"
                                      ],
                                      "fullComment": "Can be inferred from href\n\nPossible Asset Types\n\nLater, maybe also support: \"markdown\",\"json\",\"typescript\"",
                                      "type": "string"
                                    }
                                  }
                                ],
                                "type": "object"
                              }
                            },
                            {
                              "name": "title",
                              "required": false,
                              "schema": {
                                "fullComment": "NB: title can also be an empty string (\"\")",
                                "nb": "title can also be an empty string (\"\")",
                                "type": "string"
                              }
                            },
                            {
                              "name": "children",
                              "required": false,
                              "schema": {
                                "fullComment": "all content until the next title. it's either a content array if there's any titles found, or a string[] if it's paragraphs",
                                "items": [
                                  {
                                    "schema": {
                                      "circularRefName": "MarkdownChunk",
                                      "properties": [],
                                      "type": "object"
                                    },
                                    "name": "MarkdownChunk"
                                  }
                                ],
                                "type": "array"
                              }
                            }
                          ],
                          "type": "object"
                        },
                        "name": "MarkdownChunk"
                      }
                    ],
                    "type": "array"
                  }
                },
                {
                  "name": "raw",
                  "required": true,
                  "schema": {
                    "fullComment": "raw markdown without frontmatter",
                    "type": "string"
                  }
                }
              ],
              "type": "object"
            }
          },
          {
            "name": "markdownParseRenderConfig",
            "required": true,
            "schema": {
              "fullComment": "",
              "properties": [
                {
                  "name": "disableSelectionContextMenu",
                  "required": false,
                  "schema": {
                    "type": "boolean"
                  }
                },
                {
                  "name": "projectRelativeBaseFolderPath",
                  "required": false,
                  "schema": {
                    "fullComment": "Folder path where the markdown is supposed to be located.\n\nThis is used for knowing where relative links or assets can be found\n\nIf you don't provide this, assets can't be shown, because we wouldn't know where to get them from.",
                    "type": "string"
                  }
                },
                {
                  "name": "projectRelativeMarkdownFilePath",
                  "required": false,
                  "schema": {
                    "fullComment": "project relative path of the markdown file.\n\nThis is used for knowing where relative links or assets can be found\n\nIf you don't provide this, assets can't be shown, because we wouldn't know where to get them from.",
                    "type": "string"
                  }
                },
                {
                  "name": "selectionPrompts",
                  "required": false,
                  "schema": {
                    "fullComment": "Used to render a context menu",
                    "items": [
                      {
                        "schema": {
                          "fullComment": "--- dbStorageMethod: jsonSingle\n---\n\nModel for prompting information from third party sources",
                          "properties": [
                            {
                              "name": "slug",
                              "required": true,
                              "schema": {
                                "fullComment": "kebab-case of the name, should be unique\n\nuse this for any identifier that's not an Id-type. Usually this is a kebab-case version of a written text, but it can also be a file path, for example.",
                                "type": "string"
                              }
                            },
                            {
                              "name": "name",
                              "required": true,
                              "schema": {
                                "fullComment": "descriptive name of the prompt",
                                "type": "string"
                              }
                            },
                            {
                              "name": "language",
                              "required": true,
                              "schema": {
                                "enum": [
                                  "english",
                                  "dutch",
                                  "nepali",
                                  "portuguese",
                                  "brazilian",
                                  "german",
                                  "french",
                                  "spanish",
                                  "italian",
                                  "norwegian",
                                  "swedish",
                                  "danish",
                                  "vietnamese",
                                  "indonesian",
                                  "southAfrican",
                                  "tokiPona",
                                  "hindi",
                                  "mandarin",
                                  "arabic",
                                  "bengali",
                                  "urdu",
                                  "japanese",
                                  "swahili"
                                ],
                                "fullComment": "all currently supported languages",
                                "type": "string"
                              }
                            },
                            {
                              "name": "createdAt",
                              "required": true,
                              "schema": {
                                "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                                "type": "number"
                              }
                            },
                            {
                              "name": "updatedAt",
                              "required": true,
                              "schema": {
                                "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                                "type": "number"
                              }
                            },
                            {
                              "name": "deletedAt",
                              "required": true,
                              "schema": {
                                "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                                "type": "number"
                              }
                            },
                            {
                              "name": "createdFirstAt",
                              "required": true,
                              "schema": {
                                "fullComment": "in some cases, data can be created before it was created in our system. In this case, use CreatedFirstAt if this information is important.\n\nTime\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                                "type": "number"
                              }
                            },
                            {
                              "name": "operationName",
                              "required": true,
                              "schema": {
                                "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
                                "type": "null"
                              }
                            },
                            {
                              "name": "projectRelativePath",
                              "required": true,
                              "schema": {
                                "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
                                "type": "string"
                              }
                            },
                            {
                              "name": "operationRelativePath",
                              "required": false,
                              "schema": {
                                "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
                                "type": "string"
                              }
                            },
                            {
                              "name": "id",
                              "required": true,
                              "schema": {
                                "fullComment": "Should be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
                                "type": "string"
                              }
                            },
                            {
                              "name": "categoryStackCalculated",
                              "required": false,
                              "schema": {
                                "fullComment": "In case of jsonSingle storageMethod, the categoryStack is generated by the location of the file in the db model folder in the db folder.\n\nNB: Changing this value when updating/upserting, changes where the item is located!",
                                "nb": "Changing this value when updating/upserting, changes where the item is located!",
                                "items": [
                                  {
                                    "schema": {
                                      "type": "string"
                                    },
                                    "name": null
                                  }
                                ],
                                "type": "array"
                              }
                            },
                            {
                              "name": "title",
                              "required": false,
                              "schema": {
                                "fullComment": "What the question is that this prompt is answering, short version (without context)",
                                "type": "string"
                              }
                            },
                            {
                              "name": "scopeProjectRelativePath",
                              "required": false,
                              "schema": {
                                "fullComment": "if given, should be a path to a file or folder, so the prompt will never be shown outside of this scope\n\nNever stored! Is found based on the location of the file in your file system",
                                "type": "string"
                              }
                            },
                            {
                              "name": "promptContent",
                              "required": true,
                              "schema": {
                                "fullComment": "Only prompt is stored (string)",
                                "type": "string"
                              }
                            },
                            {
                              "name": "folderContentContext",
                              "required": false,
                              "schema": {
                                "enum": [
                                  "flat",
                                  "recursive"
                                ],
                                "fullComment": "Variable: ${folder}\n\nIf set to `flat`, all folder content will be added as context, without sub-folders\n\nIf set to `recursive`, all folder content will be added as context, including sub-folders",
                                "type": "string"
                              }
                            },
                            {
                              "name": "usesContext",
                              "required": false,
                              "schema": {
                                "fullComment": "Variable: ${context}\n\nWhether or not the prompt requires the context\n\nCan be a file contents, but can also be the contents of an HTML page",
                                "type": "boolean"
                              }
                            },
                            {
                              "name": "usesSelection",
                              "required": false,
                              "schema": {
                                "fullComment": "Variable: ${selection}\n\nWhether or not the prompt requires the selection",
                                "type": "boolean"
                              }
                            },
                            {
                              "name": "usesAnyContext",
                              "required": false,
                              "schema": {
                                "fullComment": "Variable: ${any}\n\nIf true, will return this prompt in any context prompt, as selection results because it can use any of them as its variable. It will use the smallest one available.",
                                "type": "boolean"
                              }
                            },
                            {
                              "name": "contextType",
                              "required": false,
                              "schema": {
                                "enum": [
                                  "code",
                                  "data",
                                  "text"
                                ],
                                "fullComment": "If given, will be used to filter the selection of prompts to match the context type\n\n",
                                "type": "string"
                              }
                            },
                            {
                              "name": "instantExecution",
                              "required": false,
                              "schema": {
                                "type": "boolean"
                              }
                            },
                            {
                              "name": "isFavorite",
                              "required": false,
                              "schema": {
                                "type": "boolean"
                              }
                            }
                          ],
                          "type": "object"
                        },
                        "name": "ContextualPrompt"
                      }
                    ],
                    "type": "array"
                  }
                },
                {
                  "name": "selectionContextualPromptResults",
                  "required": false,
                  "schema": {
                    "fullComment": "Used to render in between the lines in different ways",
                    "items": [
                      {
                        "schema": {
                          "fullComment": "A result from a contextual prompt. Doesn't include the full context, for that you can find all results for a certain thread",
                          "properties": [
                            {
                              "name": "createdAt",
                              "required": true,
                              "schema": {
                                "fullComment": "When was the result created",
                                "type": "number"
                              }
                            },
                            {
                              "name": "updatedAt",
                              "required": true,
                              "schema": {
                                "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                                "type": "number"
                              }
                            },
                            {
                              "name": "deletedAt",
                              "required": true,
                              "schema": {
                                "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                                "type": "number"
                              }
                            },
                            {
                              "name": "createdFirstAt",
                              "required": true,
                              "schema": {
                                "fullComment": "in some cases, data can be created before it was created in our system. In this case, use CreatedFirstAt if this information is important.\n\nTime\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                                "type": "number"
                              }
                            },
                            {
                              "name": "operationName",
                              "required": true,
                              "schema": {
                                "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
                                "type": "null"
                              }
                            },
                            {
                              "name": "projectRelativePath",
                              "required": true,
                              "schema": {
                                "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
                                "type": "string"
                              }
                            },
                            {
                              "name": "operationRelativePath",
                              "required": false,
                              "schema": {
                                "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
                                "type": "string"
                              }
                            },
                            {
                              "name": "id",
                              "required": true,
                              "schema": {
                                "fullComment": "Should be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
                                "type": "string"
                              }
                            },
                            {
                              "name": "categoryStackCalculated",
                              "required": false,
                              "schema": {
                                "fullComment": "In case of jsonSingle storageMethod, the categoryStack is generated by the location of the file in the db model folder in the db folder.\n\nNB: Changing this value when updating/upserting, changes where the item is located!\n\nTaken from the location in the folder of the db-model.\n\nNB: Changing this value when updating/upserting, changes where the item is located!",
                                "nb": "Changing this value when updating/upserting, changes where the item is located!",
                                "items": [
                                  {
                                    "schema": {
                                      "type": "string"
                                    },
                                    "name": null
                                  }
                                ],
                                "type": "array"
                              }
                            },
                            {
                              "name": "isValidCalculated",
                              "required": false,
                              "schema": {
                                "fullComment": "It's a crucial question whether prompt results are still valid once the actual file has been altered. If we have prompts in a chain, it may be so that all of them become invalid\n\nFor example, if a very fundamental belief changes, I need to alter all generated inferences for that belief.\n\nI think it might be better to add indexation on the validity maybe, if beliefs change, and mark the file as \"old\" if I want to write a new version. The frontmatter may change, but we should probably keep the content immutable because it has too many implications if we don't\n\nIt is the same as the O in the SOLID principle!",
                                "type": "boolean"
                              }
                            },
                            {
                              "name": "contextualPromptSlug",
                              "required": true,
                              "schema": {
                                "fullComment": "Contextual prompt this prompt was based on. We don't have the acutal prompt here since we use an extended convention from `fs-orm`",
                                "type": "string"
                              }
                            },
                            {
                              "name": "prompt_projectRelativePath",
                              "required": false,
                              "schema": {
                                "fullComment": "Path the result is about, if any. Can also be a folder!",
                                "type": "string"
                              }
                            },
                            {
                              "name": "prompt",
                              "required": false,
                              "schema": {
                                "fullComment": "Prompt string of the prompt, but only of this very question, not all previous things if this is a later item in a thread, that can be stored in another result.",
                                "type": "string"
                              }
                            },
                            {
                              "name": "selectionString",
                              "required": false,
                              "schema": {
                                "fullComment": "In case the prompt had `.useSelection: true`, this should be the selected string, so the location can be found in the markdown, so the markdown can be augmented with a link to the result.",
                                "type": "string"
                              }
                            },
                            {
                              "name": "isFavorite",
                              "required": false,
                              "schema": {
                                "fullComment": "If true, will get priority in where it's shown",
                                "type": "boolean"
                              }
                            },
                            {
                              "name": "resultText",
                              "required": false,
                              "schema": {
                                "type": "string"
                              }
                            },
                            {
                              "name": "resultAssets",
                              "required": true,
                              "schema": {
                                "items": [
                                  {
                                    "schema": {
                                      "fullComment": "Part of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
                                      "properties": [
                                        {
                                          "name": "alt",
                                          "required": false,
                                          "schema": {
                                            "fullComment": "Stored value\n\nAlt text for the asset",
                                            "type": "string"
                                          }
                                        },
                                        {
                                          "name": "relativePath",
                                          "required": false,
                                          "schema": {
                                            "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                                            "type": "string"
                                          }
                                        },
                                        {
                                          "name": "name",
                                          "required": false,
                                          "schema": {
                                            "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                                            "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                                            "type": "string"
                                          }
                                        },
                                        {
                                          "name": "temporaryDestination",
                                          "required": false,
                                          "schema": {
                                            "fullComment": "Not stored\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                                            "type": "string"
                                          }
                                        },
                                        {
                                          "name": "projectRelativeReferencingFilePath",
                                          "required": false,
                                          "schema": {
                                            "fullComment": "Not stored\n\nNeeds to be there before calling `processAsset`. Should be augmented to the backendAsset in the frontend, before sending it to the backend.\n\nLocation of the place where the asset is referenced\n\n- markdown file (or folder where it is located)\n- typescript file (or folder where it is located)\n- database file (or folder where it is located)",
                                            "type": "string"
                                          }
                                        },
                                        {
                                          "name": "modelName",
                                          "required": false,
                                          "schema": {
                                            "fullComment": "Not stored\n\nNeeds to be there before calling `processAsset`. Should be augmented to the backendAsset in the frontend, before sending it to the backend.\n\nModel that the asset is related to",
                                            "type": "string"
                                          }
                                        },
                                        {
                                          "name": "absoluteUrl",
                                          "required": false,
                                          "schema": {
                                            "fullComment": "NOT STORED\n\nCan be available in case it's an asset from an external source URL for example within md.\n\nAlso can be set in case it's a static asset from a next project",
                                            "type": "string"
                                          }
                                        }
                                      ],
                                      "type": "object"
                                    },
                                    "name": "BackendAsset"
                                  }
                                ],
                                "type": "array"
                              }
                            },
                            {
                              "name": "thread",
                              "required": false,
                              "schema": {
                                "fullComment": "Unique ID for this thread, generated if not given to the prompt",
                                "type": "string"
                              }
                            }
                          ],
                          "type": "object"
                        },
                        "name": "ContextualPromptResult"
                      }
                    ],
                    "type": "array"
                  }
                },
                {
                  "name": "fileContextualPromptResults",
                  "required": false,
                  "schema": {
                    "fullComment": "Used to render on the file in different ways",
                    "items": [
                      {
                        "schema": {
                          "fullComment": "A result from a contextual prompt. Doesn't include the full context, for that you can find all results for a certain thread",
                          "properties": [
                            {
                              "name": "createdAt",
                              "required": true,
                              "schema": {
                                "fullComment": "When was the result created",
                                "type": "number"
                              }
                            },
                            {
                              "name": "updatedAt",
                              "required": true,
                              "schema": {
                                "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                                "type": "number"
                              }
                            },
                            {
                              "name": "deletedAt",
                              "required": true,
                              "schema": {
                                "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                                "type": "number"
                              }
                            },
                            {
                              "name": "createdFirstAt",
                              "required": true,
                              "schema": {
                                "fullComment": "in some cases, data can be created before it was created in our system. In this case, use CreatedFirstAt if this information is important.\n\nTime\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                                "type": "number"
                              }
                            },
                            {
                              "name": "operationName",
                              "required": true,
                              "schema": {
                                "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
                                "type": "null"
                              }
                            },
                            {
                              "name": "projectRelativePath",
                              "required": true,
                              "schema": {
                                "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
                                "type": "string"
                              }
                            },
                            {
                              "name": "operationRelativePath",
                              "required": false,
                              "schema": {
                                "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
                                "type": "string"
                              }
                            },
                            {
                              "name": "id",
                              "required": true,
                              "schema": {
                                "fullComment": "Should be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
                                "type": "string"
                              }
                            },
                            {
                              "name": "categoryStackCalculated",
                              "required": false,
                              "schema": {
                                "fullComment": "In case of jsonSingle storageMethod, the categoryStack is generated by the location of the file in the db model folder in the db folder.\n\nNB: Changing this value when updating/upserting, changes where the item is located!\n\nTaken from the location in the folder of the db-model.\n\nNB: Changing this value when updating/upserting, changes where the item is located!",
                                "nb": "Changing this value when updating/upserting, changes where the item is located!",
                                "items": [
                                  {
                                    "schema": {
                                      "type": "string"
                                    },
                                    "name": null
                                  }
                                ],
                                "type": "array"
                              }
                            },
                            {
                              "name": "isValidCalculated",
                              "required": false,
                              "schema": {
                                "fullComment": "It's a crucial question whether prompt results are still valid once the actual file has been altered. If we have prompts in a chain, it may be so that all of them become invalid\n\nFor example, if a very fundamental belief changes, I need to alter all generated inferences for that belief.\n\nI think it might be better to add indexation on the validity maybe, if beliefs change, and mark the file as \"old\" if I want to write a new version. The frontmatter may change, but we should probably keep the content immutable because it has too many implications if we don't\n\nIt is the same as the O in the SOLID principle!",
                                "type": "boolean"
                              }
                            },
                            {
                              "name": "contextualPromptSlug",
                              "required": true,
                              "schema": {
                                "fullComment": "Contextual prompt this prompt was based on. We don't have the acutal prompt here since we use an extended convention from `fs-orm`",
                                "type": "string"
                              }
                            },
                            {
                              "name": "prompt_projectRelativePath",
                              "required": false,
                              "schema": {
                                "fullComment": "Path the result is about, if any. Can also be a folder!",
                                "type": "string"
                              }
                            },
                            {
                              "name": "prompt",
                              "required": false,
                              "schema": {
                                "fullComment": "Prompt string of the prompt, but only of this very question, not all previous things if this is a later item in a thread, that can be stored in another result.",
                                "type": "string"
                              }
                            },
                            {
                              "name": "selectionString",
                              "required": false,
                              "schema": {
                                "fullComment": "In case the prompt had `.useSelection: true`, this should be the selected string, so the location can be found in the markdown, so the markdown can be augmented with a link to the result.",
                                "type": "string"
                              }
                            },
                            {
                              "name": "isFavorite",
                              "required": false,
                              "schema": {
                                "fullComment": "If true, will get priority in where it's shown",
                                "type": "boolean"
                              }
                            },
                            {
                              "name": "resultText",
                              "required": false,
                              "schema": {
                                "type": "string"
                              }
                            },
                            {
                              "name": "resultAssets",
                              "required": true,
                              "schema": {
                                "items": [
                                  {
                                    "schema": {
                                      "fullComment": "Part of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
                                      "properties": [
                                        {
                                          "name": "alt",
                                          "required": false,
                                          "schema": {
                                            "fullComment": "Stored value\n\nAlt text for the asset",
                                            "type": "string"
                                          }
                                        },
                                        {
                                          "name": "relativePath",
                                          "required": false,
                                          "schema": {
                                            "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                                            "type": "string"
                                          }
                                        },
                                        {
                                          "name": "name",
                                          "required": false,
                                          "schema": {
                                            "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                                            "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                                            "type": "string"
                                          }
                                        },
                                        {
                                          "name": "temporaryDestination",
                                          "required": false,
                                          "schema": {
                                            "fullComment": "Not stored\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                                            "type": "string"
                                          }
                                        },
                                        {
                                          "name": "projectRelativeReferencingFilePath",
                                          "required": false,
                                          "schema": {
                                            "fullComment": "Not stored\n\nNeeds to be there before calling `processAsset`. Should be augmented to the backendAsset in the frontend, before sending it to the backend.\n\nLocation of the place where the asset is referenced\n\n- markdown file (or folder where it is located)\n- typescript file (or folder where it is located)\n- database file (or folder where it is located)",
                                            "type": "string"
                                          }
                                        },
                                        {
                                          "name": "modelName",
                                          "required": false,
                                          "schema": {
                                            "fullComment": "Not stored\n\nNeeds to be there before calling `processAsset`. Should be augmented to the backendAsset in the frontend, before sending it to the backend.\n\nModel that the asset is related to",
                                            "type": "string"
                                          }
                                        },
                                        {
                                          "name": "absoluteUrl",
                                          "required": false,
                                          "schema": {
                                            "fullComment": "NOT STORED\n\nCan be available in case it's an asset from an external source URL for example within md.\n\nAlso can be set in case it's a static asset from a next project",
                                            "type": "string"
                                          }
                                        }
                                      ],
                                      "type": "object"
                                    },
                                    "name": "BackendAsset"
                                  }
                                ],
                                "type": "array"
                              }
                            },
                            {
                              "name": "thread",
                              "required": false,
                              "schema": {
                                "fullComment": "Unique ID for this thread, generated if not given to the prompt",
                                "type": "string"
                              }
                            }
                          ],
                          "type": "object"
                        },
                        "name": "ContextualPromptResult"
                      }
                    ],
                    "type": "array"
                  }
                },
                {
                  "name": "isStatic",
                  "required": false,
                  "schema": {
                    "fullComment": "If true, the files should come from a static folder. This means the relative references should now become projectRelative. Also see `copyAllRelativeFiles`.\n\nIf not true, we will use the api.",
                    "type": "boolean"
                  }
                },
                {
                  "name": "isDev",
                  "required": false,
                  "schema": {
                    "fullComment": "If true, we assume not all files are present in the static folder yet. This means we need to use the api.",
                    "type": "boolean"
                  }
                },
                {
                  "name": "big",
                  "required": false,
                  "schema": {
                    "type": "boolean"
                  }
                }
              ],
              "type": "object"
            }
          }
        ],
        "type": "object"
      },
      "required": true
    }
  ],
  "description": "",
  "returnType": {
    "rawType": "JSX.Element",
    "typeDefinition": {
      "optional": false,
      "$ref": "#/definitions/JSX.Element"
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 7,
  "size": {
    "characters": 1083,
    "lines": 37,
    "bytes": 1083,
    "bytesPerCharacter": 1,
    "charactersPerLine": 29,
    "linesPerFile": 37,
    "numberOfFiles": 1
  },
  "id": "spcpxwfazapghgvlxlubuqjo"
}