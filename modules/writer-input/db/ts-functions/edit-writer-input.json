{
  "createdAt": 1669385104089,
  "updatedAt": 1669385104089,
  "deletedAt": 0,
  "createdFirstAt": 1669385104089,
  "isApiExposed": true,
  "isExported": true,
  "groupAuthorization": {},
  "operationRelativeTypescriptFilePath": "src/EditWriterInput.tsx",
  "commentsInside": [],
  "rawText": " (props: {\n  onChange: (value: string) => void;\n  value: string;\n  projectRelativeFilePath: string;\n  markdownModelName?: keyof DbModels;\n}) => {\n  const { onChange, value, projectRelativeFilePath, markdownModelName } = props;\n  const [lastIndex, setLastIndex] = useState(value.length);\n  const [showAssetUpload, setShowAssetUpload] = useState(false);\n  const toggleAssetUpload = () => setShowAssetUpload(!showAssetUpload);\n\n  return (\n    <Div className=\"w-full h-full flex flex-1 flex-col\">\n      <Div className=\"flex flex-row\">\n        <ClickableIcon\n          emoji={showAssetUpload ? \"❌\" : \"📂\"}\n          onClick={() => toggleAssetUpload()}\n        />\n        {showAssetUpload ? (\n          <Div>\n            <AssetInput\n              config={{}}\n              fieldName=\"upload\"\n              uniqueFieldId=\"upload\"\n              onChange={async (newBackendAssets) => {\n                if (newBackendAssets.length === 0) return;\n\n                // 1) upload to backend and process\n                const apiResult = await api.processAssetUpload(\n                  newBackendAssets\n                );\n                // 2) receive back the actual relativePath\n\n                if (!apiResult.result) {\n                  errorToast(\"Couldn't upload your assets\");\n                  return;\n                }\n\n                const assetsMarkdownString = apiResult.result\n                  .map((backendAsset) => {\n                    return `![${backendAsset.alt || \"\"}](${\n                      backendAsset.relativePath\n                    })`;\n                  })\n                  .join(\"\\n\");\n                // 3) insert those as a snippet in the markdown\n                // console.log({ assetsMarkdownString });\n\n                const before = value.substring(0, lastIndex);\n                const after = value.substring(lastIndex);\n                const newText = `${before}${assetsMarkdownString}${after}`;\n                onChange(newText);\n                toggleAssetUpload();\n              }}\n              extra={{\n                projectRelativeReferencingFilePath: projectRelativeFilePath,\n                defaultAssetName: getFileOrFolderName(projectRelativeFilePath),\n                allowMultiple: true,\n                modelName: markdownModelName,\n                size: \"md\",\n                theme: \"Outlined\",\n              }}\n              value={[]}\n            />\n          </Div>\n        ) : null}\n      </Div>\n      <ContextTextArea\n        withContext={(context) => {\n          setLastIndex(context.positionIndex);\n          // console.log(`Context`, context);\n        }}\n        className=\"w-full bg-transparent flex flex-1\"\n        onChange={onChange}\n        value={value}\n      />\n    </Div>\n  );\n}",
  "name": "EditWriterInput",
  "slug": "edit-writer-input",
  "parameters": [],
  "description": "the newer one, eventually to replace `ContextTextArea`\n<SmartContentEditableDivInput\nwriterType={writerType}\nvalue={value}\nonChange={onChange}\nmarkdownParseRenderConfig={markdownParseRenderConfig}\n/>",
  "returnType": {
    "rawType": "JSX.Element",
    "typeDefinition": {
      "optional": false,
      "$ref": "#/definitions/JSX.Element"
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 11,
  "size": {
    "characters": 2935,
    "lines": 85,
    "bytes": 2939,
    "bytesPerCharacter": 1.0013628620102215,
    "charactersPerLine": 35,
    "linesPerFile": 85,
    "numberOfFiles": 1
  },
  "id": "mschearcpcqvlinguccsdybq"
}