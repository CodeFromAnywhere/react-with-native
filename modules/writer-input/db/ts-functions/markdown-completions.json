{
  "createdAt": 1667588127740,
  "updatedAt": 1667588127740,
  "deletedAt": 0,
  "createdFirstAt": 1667588127740,
  "publicAuthorization": [
    "read-docs",
    "search"
  ],
  "isApiExposed": false,
  "isPostApi": false,
  "isGetApi": false,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/editors/autocomplete-components.tsx",
  "commentsInside": [],
  "rawText": " (props: {\n  context: TextEditingContext | null;\n  augmentedWords?: AugmentedWord[];\n  augmentedWordObject?: MappedObject<AugmentedWord>;\n}) => {\n  const { augmentedWords, context, augmentedWordObject } = props;\n\n  /*\n    For `markdown` + `other`:\n  \n    - `@` = people select tooltip\n    - backtick = AugmentedWord from Ts Statements\n    - `![` = AssetInput tooltip\n    - `_`, `*` or `**` is `AugmentedWord` from Word db\n    - `#` should get a list of `Interest`s\n  */\n\n  // const isAsset = context?.wordAtPosition.startsWith(\"![\");\n  const isTypescriptWord = context?.wordAtPosition.startsWith(\"`\");\n  const isPersonWord = context?.wordAtPosition.startsWith(\"@\");\n  const isSpecialWord = specialCharacters.find((startSignal) =>\n    context?.wordAtPosition.startsWith(startSignal)\n  );\n\n  const filteredAugmentedWords = augmentedWords\n    ? isTypescriptWord\n      ? augmentedWords.filter((x) =>\n          [\"operation\", \"bundle\", \"type\", \"function\", \"variable\"].includes(\n            x.type\n          )\n        )\n      : isPersonWord\n      ? augmentedWords.filter((x) => [\"person\"].includes(x.type))\n      : isSpecialWord\n      ? augmentedWords.filter((x) => [\"word\"].includes(x.type))\n      : []\n    : [];\n\n  const completableWord =\n    isTypescriptWord || isPersonWord\n      ? context?.wordAtPosition.slice(1)\n      : isSpecialWord\n      ? omitSpecialCharactersFromStart(context?.wordAtPosition)\n      : undefined;\n\n  const completions = completableWord\n    ? filteredAugmentedWords\n        .filter((augmentedWord) => {\n          const isMatch = isAugmentedWordMatch(augmentedWord, completableWord);\n\n          return isMatch;\n        })\n        .slice(0, MAX_COMPLETIONS_AMOUNT)\n    : [];\n\n  return (\n    <Div>\n      {completions.map((completion, index) => {\n        return (\n          <Completion\n            augmentedWordObject={augmentedWordObject}\n            augmentedWord={completion}\n            key={`completion${index}`}\n          />\n        );\n      })}\n    </Div>\n  );\n}",
  "name": "MarkdownCompletions",
  "slug": "markdown-completions",
  "parameters": [
    {
      "name": "props",
      "schema": {
        "type": "object",
        "properties": {
          "context": {
            "anyOf": [
              {
                "$ref": "#/definitions/TextEditingContext"
              },
              {
                "type": "null"
              }
            ]
          },
          "augmentedWords": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/AugmentedWord"
            }
          },
          "augmentedWordObject": {
            "$ref": "#/definitions/MappedObject%3CAugmentedWord%3E"
          }
        },
        "required": [
          "context"
        ],
        "additionalProperties": false
      },
      "simplifiedSchema": {
        "properties": [
          {
            "name": "context",
            "required": true,
            "schema": {
              "properties": [],
              "type": "object"
            }
          },
          {
            "name": "augmentedWords",
            "required": false,
            "schema": {
              "items": [
                {
                  "schema": {
                    "fullComment": "AugmentedWords should have a small footprint since there can be many of them\n\nWords with a specific affix (backticks, bolded, italic) will match against these.\n\nUsed to link automatically to functionNames, InterfaceNames, operation-names, words, and more..",
                    "properties": [
                      {
                        "name": "word",
                        "required": true,
                        "schema": {
                          "fullComment": "Word without affixes. The affixes will be decided in the frontend parser based on the type",
                          "type": "string"
                        }
                      },
                      {
                        "name": "queryPath",
                        "required": false,
                        "schema": {
                          "type": "string"
                        }
                      },
                      {
                        "name": "projectRelativeMarkdownSourcePath",
                        "required": true,
                        "schema": {
                          "type": "string"
                        }
                      },
                      {
                        "name": "spoiler",
                        "required": false,
                        "schema": {
                          "type": "string"
                        }
                      },
                      {
                        "name": "isCaseInsensitive",
                        "required": false,
                        "schema": {
                          "fullComment": "If true, will match on lowercase variant of the word",
                          "type": "boolean"
                        }
                      }
                    ],
                    "type": "object"
                  },
                  "name": "AugmentedWord"
                }
              ],
              "type": "array"
            }
          }
        ],
        "type": "object"
      },
      "required": true
    }
  ],
  "description": "",
  "returnType": {
    "rawType": "JSX.Element",
    "typeDefinition": {
      "optional": false,
      "$ref": "#/definitions/JSX.Element"
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 6,
  "size": {
    "characters": 1984,
    "lines": 69,
    "bytes": 1984,
    "bytesPerCharacter": 1,
    "charactersPerLine": 29,
    "linesPerFile": 69,
    "numberOfFiles": 1
  },
  "id": "aelupwwrgziumhlgkupmrggg"
}