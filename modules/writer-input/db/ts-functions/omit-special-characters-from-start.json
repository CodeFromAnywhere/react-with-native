{
  "createdAt": 1667588127740,
  "updatedAt": 1667588127740,
  "deletedAt": 0,
  "createdFirstAt": 1667588127740,
  "publicAuthorization": [
    "read-docs",
    "search"
  ],
  "isApiExposed": false,
  "isPostApi": false,
  "isGetApi": false,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/editors/autocomplete-components.tsx",
  "commentsInside": [],
  "rawText": " (word?: string) => {\n  if (word === undefined) return;\n\n  const finalWord = specialCharacters.reduce(\n    (word, character) => {\n      // NB: if a word was already trimmed from a special character, the other special characters don't need to be trimmed\n      if (word.hasChanged) return word;\n      const newWord = trimLeft(word.word, character);\n      return { word: newWord, hasChanged: word.word !== newWord };\n    },\n    { word, hasChanged: false }\n  );\n\n  return finalWord.word;\n}",
  "name": "omitSpecialCharactersFromStart",
  "slug": "omit-special-characters-from-start",
  "parameters": [
    {
      "name": "word",
      "schema": {
        "type": "string"
      },
      "simplifiedSchema": {
        "type": "string"
      },
      "required": false
    }
  ],
  "description": "Omits all special characters from the start of a word for the first special character it finds. The other special characters found after that won't be trimmed.",
  "returnType": {
    "rawType": "any",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 3,
  "size": {
    "characters": 644,
    "lines": 15,
    "bytes": 644,
    "bytesPerCharacter": 1,
    "charactersPerLine": 43,
    "linesPerFile": 15,
    "numberOfFiles": 1
  },
  "id": "gqzlueepasbslnbguujfunpv"
}