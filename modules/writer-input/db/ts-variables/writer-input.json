{
  "createdAt": 1667588112441,
  "updatedAt": 1667588112441,
  "deletedAt": 0,
  "createdFirstAt": 1667588112441,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "WriterInput",
  "slug": "writer-input",
  "operationRelativeTypescriptFilePath": "src/WriterInput.tsx",
  "type": {
    "rawType": "(props: { isSaved?: boolean | undefined; save?: (() => void) | undefined; augmentedWordObject?: import(\"/Users/king/King/operations/tools/util/js-util/build/createMappedObject\").MappedObject<import(\"/Users/king/King/operations/tools/markdown-reader/markdown-reader-types/build/AugmentedWord\").AugmentedWord> | undefined; value: string; markdownModelName?: keyof import(\"/Users/king/King/operations/tools/generated/sdk-db/build/sdk-db\").DbModels | undefined; onChange: (value: string) => void; type?: import(\"/Users/king/King/operations/tools/conventions/filename-conventions/build/extensions\").WriterType | undefined; projectRelativeFilePath?: string | undefined; reload?: (() => void) | undefined; isLoading?: boolean | undefined; hideButtons?: boolean | undefined; className?: string | undefined; initialWriterView?: import(\"/Users/king/King/operations/tools/writer/writer-types/build/types\").WriterViewEnum | undefined; }) => JSX.Element",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "(props: {\n  /**\n   * boolean indicating whether or not the file has already been saved\n   *\n   * If false, save button will be shown\n   */\n  isSaved?: boolean;\n  /**\n   * function to save the file\n   *\n   * If given, will render a button to save the file\n   */\n  save?: () => void;\n  /**\n   * Provide a MappedObject of `AugmentedWord`s here to allow for autocomplete intellisense type stuff\n   */\n  augmentedWordObject?: MappedObject<AugmentedWord>;\n  /**\n   * The text to edit\n   */\n  value: string;\n\n  /**\n   * can refer to a modelname in case you have frontmatter in that model that needs to be formified\n   */\n  markdownModelName?: keyof DbModels;\n  /**\n   * Callback called when text changes\n   */\n  onChange: (value: string) => void;\n  /**\n   * Force the type of content\n   */\n  type?: WriterType;\n  /**\n   * If you provide the path to the edited file here, it will infer the type of data in the file (typescript, markdown, etc) from it\n   *\n   * Besides this, it is required to show assets, as we need to know where the file is stored so we can know where the relative assets should be resolved.\n   */\n  projectRelativeFilePath?: string;\n  /**\n   * A function to reload the content\n   *\n   * If given, will show this button to reload the text manually\n   */\n  reload?: () => void;\n  /**\n   * Boolean indicating whether or not this thing is loading (content is still not there)\n   */\n  isLoading?: boolean;\n\n  /**\n   * if true, hides buttons\n   */\n  hideButtons?: boolean;\n  /**\n   * classname for the container\n   */\n  className?: string;\n\n  /**\n   * If given, forces the writerview to this value instead of using the current writerViewStore value\n   */\n  initialWriterView?: WriterViewEnum;\n}) => {\n  const [writerView, setWriterView] = useStore(\"writerView\");\n\n  const {\n    type,\n    projectRelativeFilePath,\n    reload,\n    value,\n    onChange,\n    markdownModelName,\n    initialWriterView,\n    augmentedWordObject,\n    isLoading,\n    save,\n    isSaved,\n    hideButtons,\n    className,\n  } = props;\n\n  const projectRelativeBaseFolderPath = getFolderJs(projectRelativeFilePath);\n  const projectRelativeMarkdownFilePath = projectRelativeFilePath;\n\n  useEffect(() => {\n    if (initialWriterView) {\n      setWriterView?.(initialWriterView);\n    }\n  }, []);\n\n  const filename = projectRelativeFilePath?.split(\"/\").pop();\n  const extension = filename?.split(\".\").pop();\n\n  // Detect type either based on forced type, filename or on content (in descending order)\n  const writerType: WriterType = type\n    ? type\n    : extension\n    ? getWriterType(extension)\n    : getWriterTypeFromContent(value);\n\n  const icon =\n    writerType === \"markdown\" ? \"✍️\" : writerType === \"typescript\" ? \"⌘\" : \"📃\";\n\n  const canRenderWriterInput =\n    projectRelativeBaseFolderPath !== undefined &&\n    projectRelativeMarkdownFilePath !== undefined;\n\n  const renderWriter = () => {\n    if (!projectRelativeBaseFolderPath || !projectRelativeMarkdownFilePath) {\n      return;\n    }\n\n    const frontmatterSchemaQuery =\n      queries.useGetFrontmatterSchema(markdownModelName);\n\n    const markdownParse = mdToJsonParse(value, filename, {\n      frontmatterSchema: frontmatterSchemaQuery.data?.result,\n      noFinal: true,\n    });\n\n    const markdownParseRenderConfig: MarkdownParseRenderConfig = {\n      augmentedWordObject,\n      projectRelativeBaseFolderPath,\n      projectRelativeMarkdownFilePath,\n      isDev,\n      isStatic: false,\n    };\n\n    return (\n      <Div className=\"flex flex-col flex-1\">\n        {writerView === \"config\" ? <WriterConfigForm /> : null}\n\n        {writerView === \"frontmatter\" &&\n        !frontmatterSchemaQuery.isLoading &&\n        frontmatterSchemaQuery.data?.result &&\n        projectRelativeMarkdownFilePath ? (\n          <FrontmatterForm\n            key={projectRelativeMarkdownFilePath}\n            markdownParse={markdownParse}\n            projectRelativeMarkdownFilePath={projectRelativeMarkdownFilePath}\n            frontmatterSchema={frontmatterSchemaQuery.data?.result}\n            onChange={onChange}\n          />\n        ) : null}\n\n        {writerView === \"edit\" || writerView === undefined ? (\n          <SmartContentEditableDivInput\n            writerType={writerType}\n            value={value}\n            onChange={onChange}\n            markdownParseRenderConfig={markdownParseRenderConfig}\n          />\n        ) : null}\n\n        {writerView === \"view\" || writerView === \"presentation\" ? (\n          <MarkdownView\n            view={writerView}\n            markdownParse={markdownParse}\n            markdownParseRenderConfig={markdownParseRenderConfig}\n          />\n        ) : null}\n      </Div>\n    );\n  };\n\n  return (\n    <Div className={`flex flex-col flex-1 ${className}`}>\n      {hideButtons || !setWriterView ? null : (\n        <TitleContainer\n          buttons={[\n            {\n              onClick: () => save?.(),\n              emoji: \"💾\",\n              title: \"Save\",\n              isEnabled: isSaved === false && !!save,\n            },\n\n            {\n              onClick: () => setWriterView(\"edit\"),\n              emoji: \"✏️\",\n              title: \"Edit\",\n              isActive: writerView === \"edit\",\n              isEnabled: true,\n            },\n\n            {\n              onClick: () => setWriterView(\"view\"),\n              emoji: \"👁\",\n              title: \"View\",\n              isActive: writerView === \"view\",\n            },\n\n            {\n              onClick: () => {\n                // TODO; ALSO MAKE FULLSCREEN HERE\n                setWriterView(\"presentation\");\n              },\n              emoji: \"📽\",\n              title: \"Present\",\n              isActive: writerView === \"presentation\",\n              isEnabled: writerType === \"markdown\",\n            },\n\n            {\n              onClick: () => {\n                setWriterView(\"frontmatter\");\n              },\n              emoji: \"🧩\",\n              title: \"About\",\n              isActive: writerView === \"frontmatter\",\n              isEnabled: writerType === \"markdown\" && !!markdownModelName,\n            },\n\n            {\n              onClick: () => {\n                setWriterView(\"config\");\n              },\n              emoji: \"⚙️\",\n              title: \"Configuration\",\n              isActive: writerView === \"config\",\n            },\n\n            {\n              onClick: () => {\n                vscodeOpen({\n                  files: [{ projectRelativePath: projectRelativeFilePath }],\n                });\n              },\n              emoji: \"💻\",\n              title: \"Code\",\n              isEnabled: projectRelativeFilePath !== undefined,\n            },\n\n            {\n              isEnabled: !!reload,\n              onClick: reload || (() => null),\n              component: isLoading ? () => <FancyLoader /> : undefined,\n              emoji: isLoading ? undefined : \"↻\",\n              title: isLoading ? \"Loading\" : \"Reload\",\n            },\n          ]}\n          title={filename ? `${icon} ${filename}` : undefined}\n        >\n          <Div />\n        </TitleContainer>\n      )}\n\n      {canRenderWriterInput\n        ? renderWriter()\n        : \"Can't render.... need `projectRelativeFilePath`\"}\n    </Div>\n  );\n}",
  "description": "Writer input for any utf8 based text, file or no file",
  "id": "ckbzqeqpesflxrqmolitbsjx"
}