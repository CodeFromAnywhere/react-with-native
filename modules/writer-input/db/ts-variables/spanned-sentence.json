{
  "createdAt": 1667588123756,
  "updatedAt": 1667588123756,
  "deletedAt": 0,
  "createdFirstAt": 1667588123756,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "SpannedSentence",
  "slug": "spanned-sentence",
  "operationRelativeTypescriptFilePath": "src/editors/SpannedSentence.tsx",
  "type": {
    "rawType": "(props: any) => JSX.Element",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "(\n  props: Omit<ContentEditableRenderProps<any>, \"markedToken\"> & {\n    sentence: string;\n  }\n) => {\n  const { sentence, subwordConfig } = props;\n  if (!subwordConfig.isEnabled) {\n    // NB: if subwords are disabled, we can just return the sentence using a span (not word by word)\n    return <span>{sentence}</span>;\n  }\n\n  const wordSpans = sentence.split(\" \").map((word) => {\n    return <Subword subwordConfig={subwordConfig} word={word} />;\n  });\n\n  return <>{wordSpans}</>;\n}",
  "description": "Needs to be done for every text that can have potential interactions",
  "id": "eskwgmxykkjzczzajlgbfdik"
}