{
  "createdAt": 1666261455880,
  "updatedAt": 1666261455880,
  "deletedAt": 0,
  "createdFirstAt": 1666261455880,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "MapInput",
  "slug": "map-input",
  "operationRelativeTypescriptFilePath": "src/map/MapInput.tsx",
  "type": {
    "rawType": "import(\"/Users/king/King/operations/tools/interfaces/vui/react-with-native/react-with-native-form/build/general\").PluginComponent<import(\"/Users/king/King/operations/tools/interfaces/vui/react-with-native/react-with-native-form-inputs/src/map/types\").MapInputType>",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "value": "({\n  value,\n  onChange,\n  extra,\n  config,\n}) => {\n  //amsterdam\n  const mapRef = useRef<MapRef>(null);\n  const [search, setSearch] = useState(\"\");\n  const [suggestions, setSuggestions] = useState<Suggestion[]>([]);\n  const [viewport, setViewport] = useState({\n    width: \"100%\",\n    height: 300,\n    latitude: value?.latitude,\n    longitude: value?.longitude,\n    zoom: value?.zoom,\n  });\n\n  // Teach Autosuggest how to calculate suggestions for any given input value.\n  const getSuggestions = async (value: string): Promise<Suggestion[]> => {\n    const inputValue = value.trim().toLowerCase();\n\n    if (inputValue?.length === 0) {\n      return [];\n    }\n\n    const url = `https://api.mapbox.com/geocoding/v5/mapbox.places/${inputValue}.json?access_token=${config?.mapboxKey}&limit=4`;\n\n    const suggestions = await fetch(url, {\n      method: \"GET\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        // \"User-Agent\": \"*\",\n      },\n    })\n      .then((response) => response.json())\n      .then((response) => {\n        return response;\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n\n    return inputValue?.length === 0 ? [] : suggestions?.features || [];\n  };\n\n  // const debouncedGetSuggestions = useMemo(\n  //   () => debounce(getSuggestions, 2000, { trailing: true }),\n  //   []\n  // );\n\n  // When suggestion is clicked, Autosuggest needs to populate the input\n  // based on the clicked suggestion. Teach Autosuggest how to calculate the\n  // input value for every given suggestion.\n  const getSuggestionValue = (suggestion: Suggestion) => suggestion.place_name;\n\n  // Use your imagination to render suggestions.\n  const renderSuggestion = (suggestion: Suggestion) => {\n    const text = suggestion.place_name;\n\n    return (\n      <div className={`bg-white hover:bg-gray-200 p-4`}>\n        {text?.length > 30 ? text.slice(0, 28) + \"..\" : text}\n      </div>\n    );\n  };\n  const inputProps = {\n    placeholder: \"Find your place\",\n    value: search,\n    onChange: (e: any, { newValue }: { newValue: string }) =>\n      setSearch(newValue),\n  };\n\n  // Autosuggest will call this function every time you need to update suggestions.\n  // You already implemented this logic above, so just use it.\n  const onSuggestionsFetchRequested = async ({ value }: { value: string }) => {\n    const newSuggestions = await getSuggestions(value);\n    if (newSuggestions) {\n      setSuggestions(newSuggestions);\n    }\n  };\n\n  // Autosuggest will call this function every time you need to clear suggestions.\n  const onSuggestionsClearRequested = () => {\n    setSuggestions([]);\n  };\n\n  const selectSuggestion = (_: any, suggestion: { suggestion: Suggestion }) => {\n    const latitude = suggestion.suggestion.center[1];\n    const longitude = suggestion.suggestion.center[0];\n\n    console.log(\"sugg\", suggestion.suggestion);\n    let zoom = 14;\n    if (suggestion.suggestion.bbox) {\n      const latDiff =\n        suggestion.suggestion.bbox[3] - suggestion.suggestion.bbox[1];\n      const lngDiff =\n        suggestion.suggestion.bbox[2] - suggestion.suggestion.bbox[0];\n\n      const avgDiff = (latDiff + lngDiff) / 2;\n\n      zoom = Math.round(Math.log(2500 / avgDiff));\n    }\n\n    const nextViewport: ViewPort = {\n      width: \"100%\",\n      height: 300,\n      latitude,\n      longitude,\n      zoom: zoom,\n    };\n    //@ts-ignore\n    setViewport(nextViewport);\n\n    onChange({\n      latitude: nextViewport.latitude as number,\n      longitude: nextViewport.longitude,\n      zoom: nextViewport?.zoom,\n    });\n  };\n\n  return (\n    <div className={`w-full bg-white border rounded-lg`}>\n      <div className={`w-full bg-white`}>\n        {/* <ReactMapGL\n          doubleClickZoom={false}\n          ref={mapRef}\n          mapStyle=\"mapbox://styles/picozzimichele/ckty78kzo0q4t17qubs9yi8ok\"\n          // className={`w-full h-40`}\n          mapboxAccessToken=\"\"={config?.mapboxKey}\n          {...viewport}\n          // TODO: Fix this, doesn't seem to exist anymore\n          // onViewportChange={(nextViewport: ViewPort | undefined) => {\n          //   //@ts-ignore\n          //   setViewport(nextViewport);\n          //   onChange({\n          //     latitude: nextViewport?.latitude as number,\n          //     longitude: nextViewport?.longitude as number,\n          //     zoom: nextViewport?.zoom as number,\n          //   });\n          // }}\n        ><div>\n          <div\n            onClick={() => {\n              setViewport({ ...viewport, zoom: viewport.zoom + 1 });\n              onChange({\n                latitude: value?.latitude as number,\n                longitude: value?.longitude,\n                zoom: viewport?.zoom + 1,\n              });\n            }}\n            className={`z-10 cursor-pointer absolute top-4 right-4 w-10 h-10 bg-white rounded flex justify-center items-center`}\n          >\n            +\n          </div>\n\n          <div\n            onClick={() => {\n              setViewport({ ...viewport, zoom: viewport.zoom - 1 });\n              onChange({\n                latitude: value?.latitude as number,\n                longitude: value?.longitude,\n                zoom: viewport?.zoom - 1,\n              });\n            }}\n            className={`z-10 cursor-pointer absolute top-16 right-4 w-10 h-10 bg-white rounded flex justify-center items-center`}\n          >\n            -\n          </div>\n\n          <div className={`z-10 absolute top-4 left-0 bg-white mx-10`}>\n            <Autosuggest\n              suggestions={suggestions}\n              onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n              onSuggestionsClearRequested={onSuggestionsClearRequested}\n              getSuggestionValue={getSuggestionValue}\n              renderSuggestion={renderSuggestion}\n              onSuggestionSelected={selectSuggestion}\n              // renderSuggestionsContainer={({ children }) => {\n              //   return <div className={`h-60 overflow-scroll`}>{children}</div>;\n              // }}\n              inputProps={inputProps}\n            />\n          </div>\n          {value && value.latitude && value.longitude && extra?.showMarker && (\n            <Marker\n              latitude={value.latitude}\n              longitude={value.longitude}\n              offsetLeft={0}\n              offsetTop={0}\n            >\n              <p className=\"text-2xl cursor-pointer animate-bounce\">\n                <Svg\n                  src={HiOutlineLocationMarker}\n                  className=\"h-6 text-blue-500\"\n                />\n              </p>\n            </Marker>\n          )}\n          </div>\n        </ReactMapGL> */}\n      </div>\n      <div className={`m-3`}>\n        <p>\n          <strong>Latitude:</strong> {value?.latitude?.toFixed(4)}\n        </p>\n        <p>\n          <strong>Longitude:</strong> {value?.longitude?.toFixed(4)}\n        </p>\n        {extra?.showZoom && (\n          <p>\n            <strong>Zoom:</strong> {value?.zoom?.toFixed(1)}\n          </p>\n        )}\n      </div>\n    </div>\n  );\n}",
  "description": "",
  "id": "pyhgwendjrcgfkyurxdlhqwx"
}