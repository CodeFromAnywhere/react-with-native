{
  "createdAt": 1666261588042,
  "updatedAt": 1666261588042,
  "deletedAt": 0,
  "createdFirstAt": 1666261588042,
  "publicAuthorization": [
    "read-docs",
    "search"
  ],
  "isApiExposed": false,
  "isPostApi": false,
  "isGetApi": false,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/Select.tsx",
  "commentsInside": [],
  "rawText": " <T extends unknown>({\n  options,\n  onChange,\n\n  value,\n  title,\n  containerClassName,\n  selectFirstOption,\n  autoSuggest,\n  //unused atm\n  children,\n  className,\n  noPlaceholder,\n  placeholder,\n  ios,\n}: SelectProps<T>) => {\n  const [temporaryValue, setTemporaryValue] = useState(\"\");\n  const [id] = useState(`list${String(Math.round(Math.random() * 100000))}`);\n\n  const realValue = getRealValue({ value, selectFirstOption, options, title });\n\n  // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist\n\n  const onChangeSelect = (event: ChangeEvent<HTMLSelectElement>) => {\n    const value = event.target.value;\n    const newValue = options.find((x) => x.value === value) || null;\n\n    console.log(\"select change\", { value, newValue });\n    onChange?.(newValue);\n  };\n\n  const renderOptions = () => {\n    return (\n      <>\n        {options.map((option, index) => {\n          return (\n            <option value={String(option.value)} key={index}>\n              {option.label}\n            </option>\n          );\n        })}\n      </>\n    );\n  };\n\n  return (\n    <div className={containerClassName}>\n      {autoSuggest ? (\n        <span>\n          <input\n            list={id}\n            placeholder={\n              !noPlaceholder ? placeholder || \"Type or select one\" : undefined\n            }\n            onChange={(event) => {\n              const value = event.target.value;\n\n              const foundOption = options.find((x) => x.value === value);\n              if (foundOption) {\n                onChange?.(foundOption);\n                setTemporaryValue(\"\");\n              } else {\n                setTemporaryValue(value);\n              }\n            }}\n            className={className}\n            value={\n              temporaryValue && temporaryValue.length > 0\n                ? temporaryValue\n                : value?.value\n                ? String(value?.value)\n                : \"\"\n            }\n          />\n\n          <datalist placeholder={title} id={id}>\n            {renderOptions()}\n          </datalist>\n        </span>\n      ) : (\n        <select\n          onChange={onChangeSelect}\n          className={className}\n          value={String(value?.value)}\n        >\n          {renderOptions()}\n        </select>\n      )}\n    </div>\n  );\n}",
  "name": "Select",
  "slug": "select",
  "parameters": [],
  "description": "renders either a SelectDropdown or SelectDrawer, based on screensize",
  "returnType": {
    "rawType": "JSX.Element",
    "typeDefinition": {
      "optional": false,
      "$ref": "#/definitions/JSX.Element"
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 8,
  "size": {
    "characters": 2341,
    "lines": 91,
    "bytes": 2341,
    "bytesPerCharacter": 1,
    "charactersPerLine": 26,
    "linesPerFile": 91,
    "numberOfFiles": 1
  },
  "id": "qbkmiyzbznequtxpvlskoayz"
}