[{"id":"gZuNxkjqwcFgakhX","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/bundles/markdown-reader/markdown-reader-ui/src/pages.ts","srcFileId":"/pages","operationFolderName":"markdown-reader-ui","relativeFilePathFromSrc":"/pages.ts","relativeOperationBasePathFromProjectRoot":"/bundles/markdown-reader/markdown-reader-ui","operationName":"markdown-reader-ui","comment":"based on this, a type is created for all page keys","rawStatement":"type PageKey = keyof typeof pagesObject;","parameters":{},"types":[],"firstLine":7,"lastLine":7},{"id":"gZuNxkjqwcFgakhX","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/bundles/markdown-reader/markdown-reader-ui/src/pages.ts","srcFileId":"/pages","operationFolderName":"markdown-reader-ui","relativeFilePathFromSrc":"/pages.ts","relativeOperationBasePathFromProjectRoot":"/bundles/markdown-reader/markdown-reader-ui","operationName":"markdown-reader-ui","comment":"these keys are put in an array","rawStatement":"const pageKeys = Object.keys(pagesObject) as PageKey[];","parameters":{},"types":[],"firstLine":9,"lastLine":9},{"id":"gZuNxkjqwcFgakhX","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/bundles/markdown-reader/markdown-reader-ui/src/pages.ts","srcFileId":"/pages","operationFolderName":"markdown-reader-ui","relativeFilePathFromSrc":"/pages.ts","relativeOperationBasePathFromProjectRoot":"/bundles/markdown-reader/markdown-reader-ui","operationName":"markdown-reader-ui","comment":"then we generate an PageType object for every page,","rawStatement":"// based on the pagesObject and the pageKey, and put the result in an array","parameters":{},"types":[],"firstLine":11,"lastLine":11},{"id":"gZuNxkjqwcFgakhX","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/bundles/markdown-reader/markdown-reader-ui/src/pages.ts","srcFileId":"/pages","operationFolderName":"markdown-reader-ui","relativeFilePathFromSrc":"/pages.ts","relativeOperationBasePathFromProjectRoot":"/bundles/markdown-reader/markdown-reader-ui","operationName":"markdown-reader-ui","comment":"then we generate an PageType object for every page,","rawStatement":"export const pages: PageType[] = pageKeys.map((pageKey) => ({\n  ...pagesObject[pageKey].options,\n  component: pagesObject[pageKey],\n  key: pageKey,\n}));","parameters":{},"types":[],"firstLine":11,"lastLine":11},{"id":"gZuNxkjqwcFgakhX","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/bundles/markdown-reader/markdown-reader-ui/src/pages.ts","srcFileId":"/pages","operationFolderName":"markdown-reader-ui","relativeFilePathFromSrc":"/pages.ts","relativeOperationBasePathFromProjectRoot":"/bundles/markdown-reader/markdown-reader-ui","operationName":"markdown-reader-ui","comment":"based on the pagesObject and the pageKey, and put the result in an array","rawStatement":"export const pages: PageType[] = pageKeys.map((pageKey) => ({\n  ...pagesObject[pageKey].options,\n  component: pagesObject[pageKey],\n  key: pageKey,\n}));","parameters":{},"types":[],"firstLine":12,"lastLine":12},{"id":"gZuNxkjqwcFgakhX","name":"Comment","slug":"comment","relativePathFromProjectRoot":"/bundles/markdown-reader/markdown-reader-ui/src/pages.ts","srcFileId":"/pages","operationFolderName":"markdown-reader-ui","relativeFilePathFromSrc":"/pages.ts","relativeOperationBasePathFromProjectRoot":"/bundles/markdown-reader/markdown-reader-ui","operationName":"markdown-reader-ui","comment":"utility function to get a title from a page","rawStatement":"export const getPageTitle = (page: PageType) =>\n  page.title || page.key.charAt(0).toUpperCase().concat(page.key.slice(1));","parameters":{},"types":[],"firstLine":18,"lastLine":20}]