{
  "createdAt": 1667635253174,
  "updatedAt": 1667635253174,
  "deletedAt": 0,
  "createdFirstAt": 1667635253174,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "Dictionary",
  "slug": "dictionary",
  "operationRelativeTypescriptFilePath": "src/components/Dictionary.tsx",
  "type": {
    "rawType": "(props: { augmentedWordObject: import(\"/Users/king/King/operations/tools/util/js-util/build/createMappedObject\").MappedObject<import(\"/Users/king/King/operations/tools/markdown-reader/markdown-reader-types/build/AugmentedWord\").AugmentedWord>; word?: string | undefined; }) => JSX.Element",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "(props: {\n  augmentedWordObject: MappedObject<AugmentedWord>;\n  word?: string;\n}) => {\n  const [isMobileMenuEnabled, setIsMobileMenuEnabled] = useStore(\n    \"menu.isMobileMenuEnabled\"\n  );\n\n  const { augmentedWordObject, word } = props;\n\n  const augmentedWord = word ? augmentedWordObject[word] : undefined;\n\n  return (\n    <>\n      <Div className=\"lg:hidden\">\n        <Div className=\"flex flex-row justify-between px-4\">\n          <Div />\n          <ClickableIcon\n            emoji=\"âƒ›\"\n            onClick={() => {\n              setIsMobileMenuEnabled(true);\n            }}\n          />\n        </Div>\n      </Div>\n\n      <Div className=\"p-4\">\n        {augmentedWord ? (\n          <Div className=\"bg-blue-200 p-4 border border-blue-800 rounded-xl mb-20\">\n            <AugmentedWordComponent\n              augmentedWordObject={augmentedWordObject}\n              augmentedWord={augmentedWord}\n            />\n          </Div>\n        ) : null}\n\n        <P className=\"text-3xl\">Dictionary</P>\n        {Object.keys(augmentedWordObject).map((word, index) => {\n          const augmentedWord = augmentedWordObject[word];\n\n          if (!augmentedWord) return null;\n          return (\n            <AugmentedWordComponent\n              key={`aug${index}`}\n              augmentedWordObject={augmentedWordObject}\n              augmentedWord={augmentedWord}\n            />\n          );\n        })}\n      </Div>\n    </>\n  );\n}",
  "description": "",
  "id": "jgwjbrkjpzjspljsfvgpkluc"
}