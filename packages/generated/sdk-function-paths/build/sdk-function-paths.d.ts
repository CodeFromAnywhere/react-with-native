export declare const sdkFunctionPaths: {
    MyApp: string;
    AugmentedWordComponent: string;
    Dictionary: string;
    getPageTitle: string;
    Header: string;
    Layout: string;
    MenuWrapper: string;
    Search: string;
    A: string;
    ActivityIndicator: string;
    Aside: string;
    Button: string;
    Form: string;
    getTailwindModules: string;
    H2: string;
    I: string;
    Image: string;
    Input: string;
    joinClassNames: string;
    Label: string;
    Li: string;
    Nav: string;
    Ol: string;
    P: string;
    Pressable: string;
    PureAside: string;
    PureDiv: string;
    PureNav: string;
    Select: string;
    Span: string;
    Strong: string;
    Svg: string;
    TextArea: string;
    Text: string;
    Toggle: string;
    TouchableOpacity: string;
    trimClassName: string;
    Ul: string;
    wrapInTextIfNeeded: string;
    AlertProvider: string;
    useAlert: string;
    DataForm: string;
    DefaultInputContainer: string;
    DefaultTitle: string;
    errorOnField: string;
    getPlugin: string;
    isObject: string;
    makeInputField: string;
    notEmpty: string;
    sameFieldArray: string;
    setConfig: string;
    castToNumber: string;
    DateInput: string;
    DatetimeInput: string;
    FileInput: string;
    isNumber: string;
    LabelsInput: string;
    MapInput: string;
    NumberInput: string;
    PasswordInput: string;
    PhoneInput: string;
    SelectInput: string;
    SelectMultipleInput: string;
    StarsInput: string;
    TextAreaInput: string;
    TextInput: string;
    TimeInput: string;
    ToggleInput: string;
    ModalProvider: string;
    Modal: string;
    useModalState: string;
    useModal: string;
    ToastContainer: string;
    toast: string;
    useNavigation: string;
    useRouter: string;
    getRealValue: string;
    contextKey: string;
    createStoreProvider: string;
    createStore: string;
    createUseStore: string;
    getContext: string;
    getItem: string;
    getKey: string;
    setItem: string;
    StoreContextProvider: string;
    getColumns: string;
    renderColumn: string;
    Skeleton: string;
    TableHeadItem: string;
    TableRow: string;
    Table: string;
    useIsInViewport: string;
    useCustomUrlStore: string;
    fn1: string;
    fn2: string;
    fn3: string;
    getGetApiUrl: string;
    untypedApiFunction: string;
    addToken: string;
    ensureToken: string;
    getAssetDirectlyApiUrl: string;
    getExtensionFromAsset: string;
    getNameFromRelativePath: string;
    getNameWithTokenFromRelativePath: string;
    getPreferredExtensionFromType: string;
    getReferencedAssetApiUrl: string;
    getTypeFromRelativePath: string;
    readableSize: string;
    removeTokenIfPresent: string;
    AssetInput: string;
    Audio: string;
    base64UrltoBlob: string;
    getTypeFromFileBlob: string;
    makeBackendAsset: string;
    MediaRecorderComponent: string;
    MediaRecorder: string;
    ReactMediaRecorder: string;
    SelectMedia: string;
    useReactMediaRecorder: string;
    VideoPreview: string;
    Video: string;
    WebcamCapture: string;
    AssetView: string;
    InteractiveAsset: string;
    getAugmentedWordObject: string;
    getAugmentedWords: string;
    getBundleAugmentedWords: string;
    BigButton: string;
    BreadCrumbs: string;
    renderBreadCrumbs: string;
    ClickableIcon: string;
    getExamples: string;
    getFunctionExersize: string;
    markdownParseToMarkdownModelType: string;
    parseMarkdownModelTimestamp: string;
    tryParseDate: string;
    camelCase: string;
    capitalCase: string;
    capitaliseFirstLetter: string;
    convertCase: string;
    convertToTargetCasing: string;
    getDelimiter: string;
    humanCase: string;
    kebabCase: string;
    lowerCaseArray: string;
    pascalCase: string;
    slugify: string;
    snakeCase: string;
    splitCasingDelimiters: string;
    csvItemArrayToCsvString: string;
    tryParseCsv: string;
    generateCsvInstance: string;
    generateJsonSingleInstance: string;
    generateKvmdInstance: string;
    generateMarkdownInstance: string;
    generateSlugTestModel: string;
    getCli: string;
    getMergedQueryConfig: string;
    getRanomAge: string;
    get: string;
    main: string;
    migration: string;
    randomName: string;
    removeCli: string;
    runModelEndToEndTest: string;
    set: string;
    testOperationModels: string;
    test: string;
    updateCli: string;
    upsertCli: string;
    upsert: string;
    FancyLoader: string;
    getWriterType: string;
    hasSubExtension: string;
    isGeneratedOperationName: string;
    isGeneratedOperation: string;
    isIndexableFileId: string;
    addDefaultValues: string;
    alterAny: string;
    alterCsv: string;
    alterJsonMultiple: string;
    alterJsonSingle: string;
    alterKeyValueMarkdown: string;
    alterMarkdown: string;
    augmentItemWithReferencedDataRecursively: string;
    calculateOperationsObject: string;
    createDb: string;
    findParent: string;
    getAugmentedData: string;
    getDatabaseFiles: string;
    getDatabaseRootFolder: string;
    getDbFileLocation: string;
    getDbStorageMethodExtension: string;
    getDefaultLocationPattern: string;
    getItemModelLocation: string;
    getLength: string;
    getLocationPattern: string;
    getMergedConfigOperationPath: string;
    getParentSlug: string;
    getRootFolders: string;
    getWildcardDbFileLocations__OLD: string;
    getWildcardDbFileLocations: string;
    groupByFile: string;
    makeStoringItem: string;
    mergeConfigs: string;
    removeKeyValueMarkdown: string;
    removeMultiple: string;
    upsertItems: string;
    upsertKeyValueMarkdown: string;
    canAccessSync: string;
    canAccess: string;
    canExecuteSync: string;
    canExecute: string;
    canReadSync: string;
    canRead: string;
    canSeeSync: string;
    canSee: string;
    canWriteSync: string;
    canWrite: string;
    copyAllRelativeFiles: string;
    findAllMd: string;
    findFileNameCaseInsensitive: string;
    findFilesRecursively: string;
    findSensibleFiles: string;
    getAllFoldersUntilFolder: string;
    getFileName: string;
    getFirstAvailableFilename: string;
    getFolder: string;
    getLastFolder: string;
    getOneFolderUpPath: string;
    getPathCombinations: string;
    importFromFiles: string;
    isArrayGuard: string;
    oneUp: string;
    parseMd: string;
    removeAllExcept: string;
    renameAndCreate: string;
    writeJsonToFile: string;
    writeStringToFile: string;
    writeToFiles: string;
    getExtension: string;
    getFolderJs: string;
    getSubExtension: string;
    isPathRelative: string;
    join: string;
    removeTrailingSlash: string;
    withoutExtension: string;
    findFolderWhereMatch: string;
    findOperationBasePathWithClassification: string;
    findOperationBasePath: string;
    getAllPackageJsonDependencies: string;
    getCommonAncestor: string;
    getOperationClassification: string;
    getOperationPathParse: string;
    getOperationPath: string;
    getOperationRelativePath: string;
    getPathParse: string;
    getPathsWithOperations: string;
    getProjectRoot: string;
    getRelativeLinkPath: string;
    getRelativePath: string;
    getRootPath: string;
    getSrcRelativeFileId: string;
    hasDependency: string;
    hasProjectRootFile: string;
    isOperation: string;
    isSensibleProject: string;
    isWorkspaceRoot: string;
    makeRelative: string;
    isAltB: string;
    isAltN: string;
    isAltO: string;
    isAltW: string;
    isCtrlBacktick: string;
    isCtrlP: string;
    isCtrlS: string;
    isCtrlSpace: string;
    useHotkey: string;
    useHotkeys: string;
    apply: string;
    arrayGenerator: string;
    concatenate: string;
    createEnum: string;
    createMappedObject: string;
    findLastIndex: string;
    getObjectFromParamsString: string;
    getObjectKeysArray: string;
    getParameterAtLocation: string;
    getSubsetFromObject: string;
    groupByKey: string;
    insertAt: string;
    isAllTrue: string;
    makeArray: string;
    mapAsync: string;
    mapItem: string;
    mapKeys: string;
    mapMany: string;
    mapValuesSync: string;
    mergeObjectParameters: string;
    mergeObjectsArray: string;
    mergeObjects: string;
    noEmptyString: string;
    objectMapAsync: string;
    objectMapSync: string;
    objectValuesMap: string;
    omitUndefinedValues: string;
    onlyUnique2: string;
    onlyUnique: string;
    putIndexAtIndex: string;
    removeIndexFromArray: string;
    replaceLastOccurence: string;
    reverseString: string;
    sumAllKeys: string;
    sumObjectParameters: string;
    sum: string;
    takeFirst: string;
    trimSlashes: string;
    worker: string;
    benchmark: string;
    determineFileType: string;
    exploreGitRepoFolders: string;
    exploreMultiple: string;
    exploreOperationFolders: string;
    explorePreset: string;
    explore: string;
    findAllDocsFolderPaths: string;
    findAllDotGitFolders: string;
    findAllFoldersWithName: string;
    findAllPackages: string;
    findAllTodoFolderPaths: string;
    getArgument: string;
    getContents: string;
    getOutline: string;
    isMatch: string;
    isSearchContentExtension: string;
    pathArrayIsOperation: string;
    flattenMarkdownChunks: string;
    getKvmdItemsRecursively: string;
    getParagraphsRecursively: string;
    kvmdDataMap: string;
    kvmdDataToString: string;
    kvmdParseToMarkdownString: string;
    markdownStringToKvmdParse: string;
    parseKvmdLine: string;
    LabeledButton: string;
    getCallerFileName: string;
    log: string;
    parseTitle: string;
    isResultOfInterface: string;
    makeTest: string;
    getRealSrc: string;
    getUrlFromRelativeUrl: string;
    getYoutubeId: string;
    header: string;
    MarkdownCodeblock: string;
    renderFrontmatter: string;
    renderMarkdownChunk: string;
    renderMarkdownContent: string;
    renderMarkdownParse: string;
    renderMarkdownTitle: string;
    useOpenHashDetails: string;
    getChunkParagraphsRecursively: string;
    getImplicitId: string;
    getMarkdownIntro: string;
    getMarkdownParseParagraphs: string;
    getMarkdownReferencePaths: string;
    getMarkdownReferencesFromParagraph: string;
    markdownParseToMarkdownString: string;
    mdContentParseRecursively: string;
    mdToJsonParse: string;
    parseFrontmatterMarkdownString: string;
    parseMarkdownParagraph: string;
    parseMdToChunks: string;
    removeHeaderPrefix: string;
    copyStaticAssetsCli: string;
    copyStaticAssets: string;
    getAllMarkdownReaderPages: string;
    getFolderExplorationInfo: string;
    getMarkdownModelPages: string;
    getMarkdownPageInfo: string;
    getMarkdownReaderPages: string;
    getMarkdownReaderQueryPaths: string;
    getOperationPages: string;
    getPublicMarkdownFilePaths: string;
    getTodoPages: string;
    markdownReaderGetStaticPaths: string;
    markdownReaderGetStaticProps: string;
    putReadmeOnTop: string;
    removeExtensionsFromPath: string;
    removeNumberPrefix: string;
    shouldExposeMarkdownFile: string;
    stripReadmeFromFolder: string;
    getQueryPath: string;
    frontmatterParseToString: string;
    getFrontmatterValueString: string;
    quotedOrNot: string;
    stringifyNewlines: string;
    generateId: string;
    generatePassword: string;
    generateRandomString: string;
    generateTime: string;
    isEmail: string;
    markdownModelTypeToMarkdownString: string;
    getAssetInputType: string;
    getParameterContentType: string;
    isCalculatedParameter: string;
    isGeneratedParameterName: string;
    getKeysAtPathFromNestedObject: string;
    NestedMenuItem: string;
    NestedMenu: string;
    nestedPathObjectToNestedMenuRecursive: string;
    queryPathsArrayToNestedPathObject: string;
    reduceQueryPathsRecursively: string;
    useExpanded: string;
    ALink: string;
    parsePrimitiveArray: string;
    parsePrimitiveBoolean: string;
    parsePrimitiveString: string;
    parsePrimitive: string;
    isPlural: string;
    isSingular: string;
    pluralize: string;
    singularize: string;
    readCsvFileSync: string;
    readCsvFile: string;
    readJsonFileSync: string;
    readJsonFile: string;
    readKvmdFile: string;
    test2: string;
    readMarkdownFileToModel: string;
    readMarkdownFile: string;
    bodyFromQueryString: string;
    getFirstQueryStrings: string;
    getQueryPart: string;
    isValidEntry: string;
    toQueryString: string;
    findFirstCommentTypes: string;
    getPossibleReferenceParameterNames: string;
    getProperties: string;
    getRefLink: string;
    getReferencableModels: string;
    getReferenceParameterInfo: string;
    getSchemaItems: string;
    getSchema: string;
    simplifiedSchemaToTypeDefinitionString: string;
    simplifySchema: string;
    ArrayForm: string;
    FormContainer: string;
    getReferencedModelDataItem: string;
    ObjectForm: string;
    ReferenceInput: string;
    renderParameterTitle: string;
    SimplifiedSchemaForm: string;
    useReferencableModelData: string;
    objectStringToJson: string;
    parseIfJson: string;
    parsePrimitiveJson: string;
    stringToJson: string;
    getChunkBegin: string;
    getChunkEnd: string;
    getEncoding: string;
    isBinary: string;
    isFirstByteOf2ByteChar: string;
    isFirstByteOf3ByteChar: string;
    isFirstByteOf4ByteChar: string;
    isLaterByteOfUtf8: string;
    isText: string;
    tryParseJson: string;
    createCodeblockMarkdown: string;
    writeToAssets: string;
    Completion: string;
    ContentEditableDivInput: string;
    ContextTextArea: string;
    DivContentEditable: string;
    editSubtextSubwordConfig: string;
    FrontmatterForm: string;
    getSubtext: string;
    getTextSegments: string;
    getWriterTypeFromContent: string;
    isAugmentedWordMatch: string;
    isTypescript: string;
    MarkdownCompletions: string;
    MarkdownParsePresentation: string;
    MarkdownView: string;
    MarkedParagraph: string;
    MarkedText: string;
    MarkedToken: string;
    omitSpecialCharactersFromStart: string;
    parseTextContentToHtmlString: string;
    SmartContentEditableDivInput: string;
    SpannedSentence: string;
    SubtextContainer: string;
    Subword: string;
    testAllContentEditableRenderComponents: string;
    testContentEditableRenderComponent: string;
    TitleContainer: string;
    trimAround: string;
    trimLeft: string;
    TypescriptCompletions: string;
    WriterConfigForm: string;
    WriterInput: string;
};
//# sourceMappingURL=sdk-function-paths.d.ts.map