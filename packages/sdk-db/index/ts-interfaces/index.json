[{"id":"JYZgrJLqZIROhTax","name":"SdkDbTypes","slug":"sdk-db-types","relativePathFromProjectRoot":"/packages/sdk-db/src/index.ts","srcFileId":"/index","operationFolderName":"sdk-db","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/packages/sdk-db","operationName":"sdk-db","rawText":"\n\n\nexport type SdkDbTypes = { DbModels: DbModels,DbModelEnum: DbModelEnum };","extensions":[],"description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"DbModels":{"$ref":"#/definitions/DbModels"},"DbModelEnum":{"$ref":"#/definitions/DbModelEnum"}},"required":["DbModels","DbModelEnum"],"additionalProperties":false},"simplifiedSchema":{"properties":[{"name":"DbModels","required":true,"schema":{"properties":[{"name":"BundleConfig","required":true,"schema":{"properties":[{"name":"createdAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}},{"name":"updatedAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}},{"name":"deletedAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}},{"name":"createdFirstAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}},{"name":"id","required":true,"schema":{"description":"unique id used for compatibility purposes","type":"string"}},{"name":"slug","required":true,"schema":{"description":"use this for any identifier that's not an Id-type. Usually this is a kebab-case version of a written text, but it can also be a file path, for example.","type":"string"}},{"name":"name","required":true,"schema":{"description":"Human readable name of the monorepo (A kebab-case version of this will be used as root foldername)","type":"string"}},{"name":"language","required":true,"schema":{"description":"all currently supported languages","enum":["en","nl","np","pt","de","fr","es","it","no","sw","da","vn","in","vl","af"],"type":"string"}},{"name":"bundles","required":true,"schema":{"items":[{"schema":{"description":"This type can specify a frontend and backend that belong to each other. it doesn't include all operations that the ui or server are dependent on, they are calculated separately","properties":[{"name":"operations","required":false,"schema":{"description":"any operation names that are not necesarily dependencies of the named front-back bundle but still need to be available.","items":[{"schema":{"properties":[{"name":"operationName","required":true,"schema":{"type":"string"}},{"name":"privacy","required":true,"schema":{"description":"if public, everything will be kept\n\nif private, src and todo will be removed from bundle, unless it's a ui-es6 operation, because src is needed then. In that case, only \"todo\" will be deleted.","enum":["public","private"],"type":"string"}}],"type":"object"},"name":"OperationPrivacy"}],"type":"array"}},{"name":"uiOperationName","required":false,"schema":{"description":"(optional) main shared ui package of the frontend","type":"string"}},{"name":"appShellOperationNames","required":false,"schema":{"description":"which app shell(s) or app operations are there for the frontend?","items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"serverOperationName","required":false,"schema":{"description":"operation name for server, if this UI is connected to one","type":"string"}},{"name":"productionWebUrl","required":false,"schema":{"description":"if there is a ui and it has a web-shell, and it is deployed somewhere into production, add the deployed domain here.","type":"string"}},{"name":"envOperationName","required":false,"schema":{"description":"if the server is to be deployed, specify the server-env package that exposes the server environment variables (JSON) to the ui\n\nBy default, uses \"server-env\" operation, which simply exposes a configuration env.json file. the generation of the bundle will set the \"remoteServer\" key in this env.json to the \"productionApiUrl\" so the deployed version can reach the api","type":"string"}},{"name":"productionApiUrl","required":false,"schema":{"description":"if there is one, it should be specified here (without trailing slash)","type":"string"}},{"name":"endpointsAuthToken","required":false,"schema":{"description":"if this is provided, all endpoints require this auth token to be provided, or the endpoints do not work\n\nif you wish to have a more extensive authentication method for your endpoints, make sure to create your own auth layer","type":"string"}}],"type":"object"},"name":"FrontBackBundle"}],"type":"array"}},{"name":"dependencies","required":true,"schema":{"description":"Generated, private by default. If they're already here, uses private/public setting as given.\n\nWhen generating, removes the ones that are not dependencies (of dependencies) of your standalone apps","items":[{"schema":{"properties":[{"name":"operationName","required":true,"schema":{"type":"string"}},{"name":"privacy","required":true,"schema":{"description":"if public, everything will be kept\n\nif private, src and todo will be removed from bundle, unless it's a ui-es6 operation, because src is needed then. In that case, only \"todo\" will be deleted.","enum":["public","private"],"type":"string"}}],"type":"object"},"name":"OperationPrivacy"}],"type":"array"}},{"name":"docsRelativeFolderPath","required":false,"schema":{"description":"later this could be known by the frontend so it will render a ui to select a folder\n\nWe need to figure out how we can know all type types in between when getting the type definition schema, not only the final type. If I'm lucky there is a way to find it as a #ref in a consistent way.","type":"string"}},{"name":"readmeRelativeFilePath","required":false,"schema":{"type":"string"}},{"name":"foldersFromRepo","required":false,"schema":{"description":"if given, it will fetch these folders from the repo and paste them in the bundle whenever the bundle is generated\n\ncan be handy if you're working with someone else...","items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"informationStrategy","required":false,"schema":{"description":"push (default): take needed information from project and push to bundle (removing the existing info)\n\npullReplace: pull bundle and keep its information intact, not taking anything new from the OS, replacing all the information we had from these models in the OS\n\npullMerge: pull bundle and use its information in conjunction with the information we had in the OS. This option will merge both information sources, removing duplicate IDs\n\nNB: Later we may want to define this setting on a per-model basis!","enum":["push","pullReplace","pullMerge"],"type":"string"}},{"name":"gitRepoUrl","required":false,"schema":{"type":"string"}},{"name":"branchName","required":false,"schema":{"description":"specify the branch to use of your git repo (defaults to \"main\")","type":"string"}}],"type":"object"}},{"name":"OperationIndex","required":true,"schema":{"description":"--- defaultDbStorageMethod: jsonSingle\n---\n\ncontains all calculated info about an operation that needs to be retreived often: some package-only things, but also a collection of all indexes of all files","properties":[{"name":"updatedAt","required":true,"schema":{"type":"number"}},{"name":"packageName","required":true,"schema":{"description":"name of the package in package.json","type":"string"}},{"name":"folderName","required":true,"schema":{"description":"name of the operation folder","type":"string"}},{"name":"relativeOperationLocationPath","required":true,"schema":{"description":"relative path to the operation (does not include operation folder itself)\n\nrelative from project root","type":"string"}},{"name":"classification","required":true,"schema":{"description":"# Classification\n\nTODO: think about what the differences are and how we need to change processes to make it all work good\n\n### Possible values\n\njs: only js (no node) (well, ts of course)\n\nnode: includes other node packages, operations, core-imports, or globals.\n\nserver: exposes something on some port when it is ran and uses node code\n\nweb: uses react and exposes something on some port when it is ran\n\napp: uses react-native and exposes something on some port when it is ran\n\nui-es6: uses react (with (native)), which main entry points to typescript es6 files (this ui package cannot be built, should be transpiled)\n\nui-es5: ui which main entry points to javascript es5 files (this ui package can be built)","enum":["js","node","server","web","app","ui-es6","ui-es5"],"type":"string"}},{"name":"packageDependencies","required":true,"schema":{"description":"package dependency names (non-operation)","items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"operationDependencies","required":true,"schema":{"description":"operation dependency names","items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"coreDependencies","required":true,"schema":{"description":"core dependencies (e.g. `path` and `fs`)","items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"id","required":false,"schema":{"description":"here for compatibility, should implement...","type":"string"}},{"name":"createdAt","required":true,"schema":{"type":"number"}},{"name":"buildSucceeded","required":true,"schema":{"type":"boolean"}},{"name":"dependenciesBuildsFailed","required":true,"schema":{"type":"boolean"}},{"name":"indexImportExportError","required":true,"schema":{"type":"string"}},{"name":"lintProblems","required":true,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"indexInteracesErrors","required":true,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"indexErrors","required":true,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"size","required":true,"schema":{"description":"objective size measurements of all files in a folder\n\nsummary for a folder should contain file-summaries for different filetypes and an overal file summary","properties":[{"name":"size","required":true,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"textSize","required":true,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"dataSize","required":true,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"codeSize","required":true,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}}],"type":"object"}}],"type":"object"}},{"name":"PackageJSON","required":true,"schema":{"description":"--- defaultDbStorageMethod: jsonSingle\n---","properties":[{"name":"id","required":false,"schema":{"type":"string"}},{"name":"path","required":true,"schema":{"type":"string"}},{"name":"name","required":false,"schema":{"type":"string"}},{"name":"main","required":false,"schema":{"type":"string"}},{"name":"source","required":false,"schema":{"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"version","required":false,"schema":{"type":"string"}},{"name":"private","required":false,"schema":{"type":"boolean"}},{"name":"author","required":false,"schema":{"properties":[],"type":"object"}},{"name":"repository","required":true,"schema":{"properties":[],"type":"object"}},{"name":"homepage","required":false,"schema":{"type":"string"}},{"name":"dependencies","required":false,"schema":{"properties":[],"type":"object"}},{"name":"devDependencies","required":false,"schema":{"properties":[],"type":"object"}},{"name":"peerDependencies","required":false,"schema":{"properties":[],"type":"object"}},{"name":"bin","required":false,"schema":{"properties":[],"type":"object"}},{"name":"workspaces","required":false,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"type","required":false,"schema":{"description":"# Classification\n\nTODO: think about what the differences are and how we need to change processes to make it all work good\n\n### Possible values\n\njs: only js (no node) (well, ts of course)\n\nnode: includes other node packages, operations, core-imports, or globals.\n\nserver: exposes something on some port when it is ran and uses node code\n\nweb: uses react and exposes something on some port when it is ran\n\napp: uses react-native and exposes something on some port when it is ran\n\nui-es6: uses react (with (native)), which main entry points to typescript es6 files (this ui package cannot be built, should be transpiled)\n\nui-es5: ui which main entry points to javascript es5 files (this ui package can be built)","enum":["js","node","server","web","app","ui-es6","ui-es5"],"type":"string"}},{"name":"sensible","required":false,"schema":{"description":"Sensible-global configurations","properties":[{"name":"isSensibleProject","required":true,"schema":{"type":"boolean"}}],"type":"object"}},{"name":"operation","required":false,"schema":{"description":"anything configurable about the operation.\n\nThis can live in operation.json or as a prop in package.json.","properties":[{"name":"indirectDependencies","required":false,"schema":{"description":"Sometimes you are using function in a UI, which cannot be inferred with imports because they are used indirectly via an api. Here you can specify which operations on the backend are needed for an operation (ui mostly)\n\nThis array is simply a list of operation names needed for this operation that are not imported.\n\nNB: no need to specify things here that you also import in this operation, because these are already automatically detected.","items":[{"schema":{"type":"string"},"name":null}],"type":"array"}}],"type":"object"}}],"type":"object"}},{"name":"TsComment","required":true,"schema":{"description":"comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\nspecial line prefixes:\n- TODO:\n- DISCUSSION:\n- IDEA:\n- LATER:\n- NB:\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!","properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"comment","required":true,"schema":{"description":"a string that is known to contain markdown.","type":"string"}},{"name":"parameters","required":true,"schema":{"description":"TODO: either make a special category crud for the category model would be nice maybe (especially a backend that makes sure all references stay updated would be epic)","properties":[],"type":"object"}},{"name":"types","required":true,"schema":{"description":"These are the type indicators that were found in this single or multiline comment. Can be multiple.","items":[{"schema":{"enum":["todo","discussion","idea","later","nb"],"type":"string"},"name":"CommentType"}],"type":"array"}},{"name":"firstLine","required":true,"schema":{"description":"first line of the comment","type":"number"}},{"name":"lastLine","required":true,"schema":{"description":"last line of the comment","type":"number"}},{"name":"statementName","required":false,"schema":{"description":"statement name the comment belongs to","type":"string"}},{"name":"rawStatement","required":false,"schema":{"description":"raw statement text the comment belongs to","type":"string"}}],"type":"object"}},{"name":"TsFunction","required":true,"schema":{"description":"Interface for arrow functions and normal functions","properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"description","required":false,"schema":{"description":"a string that is known to contain markdown.","type":"string"}},{"name":"rawText","required":false,"schema":{"description":"raw text of the function","type":"string"}},{"name":"commentsInside","required":true,"schema":{"description":"all comments found in a function and the node that they belong to","items":[{"schema":{"description":"comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\nspecial line prefixes:\n- TODO:\n- DISCUSSION:\n- IDEA:\n- LATER:\n- NB:\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!","properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"comment","required":true,"schema":{"description":"a string that is known to contain markdown.","type":"string"}},{"name":"parameters","required":true,"schema":{"description":"TODO: either make a special category crud for the category model would be nice maybe (especially a backend that makes sure all references stay updated would be epic)","properties":[],"type":"object"}},{"name":"types","required":true,"schema":{"description":"These are the type indicators that were found in this single or multiline comment. Can be multiple.","items":[{"schema":{"enum":["todo","discussion","idea","later","nb"],"type":"string"},"name":"CommentType"}],"type":"array"}},{"name":"firstLine","required":true,"schema":{"description":"first line of the comment","type":"number"}},{"name":"lastLine","required":true,"schema":{"description":"last line of the comment","type":"number"}},{"name":"statementName","required":false,"schema":{"description":"statement name the comment belongs to","type":"string"}},{"name":"rawStatement","required":false,"schema":{"description":"raw statement text the comment belongs to","type":"string"}}],"type":"object"},"name":"TsComment"}],"type":"array"}},{"name":"returnType","required":true,"schema":{"description":"all info that should always be collected when indexing any type interface","properties":[{"name":"typeDefinition","required":false,"schema":{"properties":[{"name":"$id","required":false,"schema":{"type":"string"}},{"name":"$ref","required":false,"schema":{"type":"string"}},{"name":"$schema","required":false,"schema":{"description":"Meta schema\n\nRecommended values:\n- 'http://json-schema.org/schema#'\n- 'http://json-schema.org/hyper-schema#'\n- 'http://json-schema.org/draft-07/schema#'\n- 'http://json-schema.org/draft-07/hyper-schema#'","type":"string"}},{"name":"$comment","required":false,"schema":{"type":"string"}},{"name":"$defs","required":false,"schema":{"properties":[],"type":"object"}},{"name":"type","required":false,"schema":{"properties":[],"type":"object"}},{"name":"enum","required":false,"schema":{"items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"const","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"multipleOf","required":false,"schema":{"type":"number"}},{"name":"maximum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMaximum","required":false,"schema":{"type":"number"}},{"name":"minimum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMinimum","required":false,"schema":{"type":"number"}},{"name":"maxLength","required":false,"schema":{"type":"number"}},{"name":"minLength","required":false,"schema":{"type":"number"}},{"name":"pattern","required":false,"schema":{"type":"string"}},{"name":"items","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalItems","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"maxItems","required":false,"schema":{"type":"number"}},{"name":"minItems","required":false,"schema":{"type":"number"}},{"name":"uniqueItems","required":false,"schema":{"type":"boolean"}},{"name":"contains","required":false,"schema":{"circularRefName":"JSONSchema7","properties":[],"type":"object"}},{"name":"maxProperties","required":false,"schema":{"type":"number"}},{"name":"minProperties","required":false,"schema":{"type":"number"}},{"name":"required","required":false,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"properties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"patternProperties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalProperties","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"dependencies","required":false,"schema":{"properties":[],"type":"object"}},{"name":"propertyNames","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"if","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"then","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"else","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"allOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"anyOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"oneOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"not","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"format","required":false,"schema":{"type":"string"}},{"name":"contentMediaType","required":false,"schema":{"type":"string"}},{"name":"contentEncoding","required":false,"schema":{"type":"string"}},{"name":"definitions","required":false,"schema":{"properties":[],"type":"object"}},{"name":"title","required":false,"schema":{"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"default","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"readOnly","required":false,"schema":{"type":"boolean"}},{"name":"writeOnly","required":false,"schema":{"type":"boolean"}},{"name":"examples","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}}],"type":"object"}},{"name":"simplifiedSchema","required":false,"schema":{"description":"JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form","properties":[{"name":"type","required":true,"schema":{"enum":["string","number","boolean","object","array","null"],"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"circularRefName","required":false,"schema":{"description":"sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here","type":"string"}},{"name":"enum","required":false,"schema":{"description":"in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think","items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"properties","required":false,"schema":{"description":"in case of object, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}},{"name":"required","required":true,"schema":{"description":"NB: can't we put this in the SimplifiedSchema itself?","type":"boolean"}}],"type":"object"},"name":"SimplifiedSchemaProperty"}],"type":"array"}},{"name":"items","required":false,"schema":{"description":"in case of arrays, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"description":"name in case of it being a reference, otherwise null","type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}}],"type":"object"},"name":"SimplifiedSchemaItem"}],"type":"array"}}],"type":"object"}},{"name":"isObject","required":true,"schema":{"description":"if the type is an object, this is true. false if it's an array","type":"boolean"}},{"name":"isArray","required":true,"schema":{"description":"if the type is an array, this is true","type":"boolean"}},{"name":"isPrimitive","required":true,"schema":{"description":"if it's a primitive type like \"string\", \"number\", \"boolean\", \"null\" | \"undefined\"","type":"boolean"}},{"name":"isEnum","required":true,"schema":{"description":"will be true for any primitive conjunction types","type":"boolean"}},{"name":"isEnumLiteral","required":true,"schema":{"description":"will be true for string conjunction types","type":"boolean"}},{"name":"typeCoverage","required":true,"schema":{"description":"quantification of coverage of the specified type or subtypes in our database.","type":"number"}},{"name":"rawType","required":true,"schema":{"description":"raw type string","type":"string"}}],"type":"object"}},{"name":"parameters","required":false,"schema":{"description":"parameters the function takes as its arguments, if any","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"type":"string"}},{"name":"schema","required":false,"schema":{"properties":[{"name":"$id","required":false,"schema":{"type":"string"}},{"name":"$ref","required":false,"schema":{"type":"string"}},{"name":"$schema","required":false,"schema":{"description":"Meta schema\n\nRecommended values:\n- 'http://json-schema.org/schema#'\n- 'http://json-schema.org/hyper-schema#'\n- 'http://json-schema.org/draft-07/schema#'\n- 'http://json-schema.org/draft-07/hyper-schema#'","type":"string"}},{"name":"$comment","required":false,"schema":{"type":"string"}},{"name":"$defs","required":false,"schema":{"properties":[],"type":"object"}},{"name":"type","required":false,"schema":{"properties":[],"type":"object"}},{"name":"enum","required":false,"schema":{"items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"const","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"multipleOf","required":false,"schema":{"type":"number"}},{"name":"maximum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMaximum","required":false,"schema":{"type":"number"}},{"name":"minimum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMinimum","required":false,"schema":{"type":"number"}},{"name":"maxLength","required":false,"schema":{"type":"number"}},{"name":"minLength","required":false,"schema":{"type":"number"}},{"name":"pattern","required":false,"schema":{"type":"string"}},{"name":"items","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalItems","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"maxItems","required":false,"schema":{"type":"number"}},{"name":"minItems","required":false,"schema":{"type":"number"}},{"name":"uniqueItems","required":false,"schema":{"type":"boolean"}},{"name":"contains","required":false,"schema":{"circularRefName":"JSONSchema7","properties":[],"type":"object"}},{"name":"maxProperties","required":false,"schema":{"type":"number"}},{"name":"minProperties","required":false,"schema":{"type":"number"}},{"name":"required","required":false,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"properties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"patternProperties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalProperties","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"dependencies","required":false,"schema":{"properties":[],"type":"object"}},{"name":"propertyNames","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"if","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"then","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"else","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"allOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"anyOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"oneOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"not","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"format","required":false,"schema":{"type":"string"}},{"name":"contentMediaType","required":false,"schema":{"type":"string"}},{"name":"contentEncoding","required":false,"schema":{"type":"string"}},{"name":"definitions","required":false,"schema":{"properties":[],"type":"object"}},{"name":"title","required":false,"schema":{"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"default","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"readOnly","required":false,"schema":{"type":"boolean"}},{"name":"writeOnly","required":false,"schema":{"type":"boolean"}},{"name":"examples","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}}],"type":"object"}},{"name":"simplifiedSchema","required":false,"schema":{"description":"JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form","properties":[{"name":"type","required":true,"schema":{"enum":["string","number","boolean","object","array","null"],"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"circularRefName","required":false,"schema":{"description":"sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here","type":"string"}},{"name":"enum","required":false,"schema":{"description":"in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think","items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"properties","required":false,"schema":{"description":"in case of object, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}},{"name":"required","required":true,"schema":{"description":"NB: can't we put this in the SimplifiedSchema itself?","type":"boolean"}}],"type":"object"},"name":"SimplifiedSchemaProperty"}],"type":"array"}},{"name":"items","required":false,"schema":{"description":"in case of arrays, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"description":"name in case of it being a reference, otherwise null","type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}}],"type":"object"},"name":"SimplifiedSchemaItem"}],"type":"array"}}],"type":"object"}},{"name":"required","required":true,"schema":{"type":"boolean"}}],"type":"object"},"name":"FunctionParameter"}],"type":"array"}},{"name":"size","required":true,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"commentSize","required":false,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"codeSize","required":false,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"cumulativeSize","required":false,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"cumulativeCommentSize","required":false,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"cumulativeCodeSize","required":false,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"maxIndentationDepth","required":true,"schema":{"description":"maximum amount of times indedented in this function\n\ngood for determining the complexity and finding code that can be simplified/destructured into smaller pieces","type":"number"}},{"name":"dependantFiles","required":false,"schema":{"description":"finds all files that import this function\n\nNB: this is not indexed because this information has nothing to do with the operation itself, but the exposure to the broader monorepo. This is calculated on the fly.","items":[{"schema":{"type":"string"},"name":null}],"type":"array"}}],"type":"object"}},{"name":"TsInterface","required":true,"schema":{"description":"TODO: Just like parameters, this should be linted for. If you define an interface that's not declared here, that should ring a bell.","properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"type","required":true,"schema":{"description":"all info that should always be collected when indexing any type interface","properties":[{"name":"typeDefinition","required":false,"schema":{"properties":[{"name":"$id","required":false,"schema":{"type":"string"}},{"name":"$ref","required":false,"schema":{"type":"string"}},{"name":"$schema","required":false,"schema":{"description":"Meta schema\n\nRecommended values:\n- 'http://json-schema.org/schema#'\n- 'http://json-schema.org/hyper-schema#'\n- 'http://json-schema.org/draft-07/schema#'\n- 'http://json-schema.org/draft-07/hyper-schema#'","type":"string"}},{"name":"$comment","required":false,"schema":{"type":"string"}},{"name":"$defs","required":false,"schema":{"properties":[],"type":"object"}},{"name":"type","required":false,"schema":{"properties":[],"type":"object"}},{"name":"enum","required":false,"schema":{"items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"const","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"multipleOf","required":false,"schema":{"type":"number"}},{"name":"maximum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMaximum","required":false,"schema":{"type":"number"}},{"name":"minimum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMinimum","required":false,"schema":{"type":"number"}},{"name":"maxLength","required":false,"schema":{"type":"number"}},{"name":"minLength","required":false,"schema":{"type":"number"}},{"name":"pattern","required":false,"schema":{"type":"string"}},{"name":"items","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalItems","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"maxItems","required":false,"schema":{"type":"number"}},{"name":"minItems","required":false,"schema":{"type":"number"}},{"name":"uniqueItems","required":false,"schema":{"type":"boolean"}},{"name":"contains","required":false,"schema":{"circularRefName":"JSONSchema7","properties":[],"type":"object"}},{"name":"maxProperties","required":false,"schema":{"type":"number"}},{"name":"minProperties","required":false,"schema":{"type":"number"}},{"name":"required","required":false,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"properties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"patternProperties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalProperties","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"dependencies","required":false,"schema":{"properties":[],"type":"object"}},{"name":"propertyNames","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"if","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"then","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"else","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"allOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"anyOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"oneOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"not","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"format","required":false,"schema":{"type":"string"}},{"name":"contentMediaType","required":false,"schema":{"type":"string"}},{"name":"contentEncoding","required":false,"schema":{"type":"string"}},{"name":"definitions","required":false,"schema":{"properties":[],"type":"object"}},{"name":"title","required":false,"schema":{"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"default","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"readOnly","required":false,"schema":{"type":"boolean"}},{"name":"writeOnly","required":false,"schema":{"type":"boolean"}},{"name":"examples","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}}],"type":"object"}},{"name":"simplifiedSchema","required":false,"schema":{"description":"JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form","properties":[{"name":"type","required":true,"schema":{"enum":["string","number","boolean","object","array","null"],"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"circularRefName","required":false,"schema":{"description":"sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here","type":"string"}},{"name":"enum","required":false,"schema":{"description":"in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think","items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"properties","required":false,"schema":{"description":"in case of object, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}},{"name":"required","required":true,"schema":{"description":"NB: can't we put this in the SimplifiedSchema itself?","type":"boolean"}}],"type":"object"},"name":"SimplifiedSchemaProperty"}],"type":"array"}},{"name":"items","required":false,"schema":{"description":"in case of arrays, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"description":"name in case of it being a reference, otherwise null","type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}}],"type":"object"},"name":"SimplifiedSchemaItem"}],"type":"array"}}],"type":"object"}},{"name":"isObject","required":true,"schema":{"description":"if the type is an object, this is true. false if it's an array","type":"boolean"}},{"name":"isArray","required":true,"schema":{"description":"if the type is an array, this is true","type":"boolean"}},{"name":"isPrimitive","required":true,"schema":{"description":"if it's a primitive type like \"string\", \"number\", \"boolean\", \"null\" | \"undefined\"","type":"boolean"}},{"name":"isEnum","required":true,"schema":{"description":"will be true for any primitive conjunction types","type":"boolean"}},{"name":"isEnumLiteral","required":true,"schema":{"description":"will be true for string conjunction types","type":"boolean"}},{"name":"typeCoverage","required":true,"schema":{"description":"quantification of coverage of the specified type or subtypes in our database.","type":"number"}},{"name":"rawType","required":true,"schema":{"description":"raw type string","type":"string"}}],"type":"object"}},{"name":"description","required":false,"schema":{"description":"a string that is known to contain markdown.","type":"string"}},{"name":"commentsInside","required":true,"schema":{"items":[{"schema":{"description":"comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\nspecial line prefixes:\n- TODO:\n- DISCUSSION:\n- IDEA:\n- LATER:\n- NB:\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!","properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"comment","required":true,"schema":{"description":"a string that is known to contain markdown.","type":"string"}},{"name":"parameters","required":true,"schema":{"description":"TODO: either make a special category crud for the category model would be nice maybe (especially a backend that makes sure all references stay updated would be epic)","properties":[],"type":"object"}},{"name":"types","required":true,"schema":{"description":"These are the type indicators that were found in this single or multiline comment. Can be multiple.","items":[{"schema":{"enum":["todo","discussion","idea","later","nb"],"type":"string"},"name":"CommentType"}],"type":"array"}},{"name":"firstLine","required":true,"schema":{"description":"first line of the comment","type":"number"}},{"name":"lastLine","required":true,"schema":{"description":"last line of the comment","type":"number"}},{"name":"statementName","required":false,"schema":{"description":"statement name the comment belongs to","type":"string"}},{"name":"rawStatement","required":false,"schema":{"description":"raw statement text the comment belongs to","type":"string"}}],"type":"object"},"name":"TsComment"}],"type":"array"}},{"name":"rawText","required":false,"schema":{"description":"raw interface text, coming from ts-morph","type":"string"}},{"name":"extensions","required":false,"schema":{"description":"if the interface extends anything, names will be specified here","items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"isDbModel","required":true,"schema":{"description":"if true, this interface is marked as a db model, which means it will be included in the db function autocompletion so it's easy to store and fetch data in this format.\n\nis automatically set to true when indexing and when one of the following statements holds true\n- if the doc-comment contains frontmatter with `isDbModel` or `defaultDbStorageMethod` specified\n- if the interface last word is \"db\" or \"model\" and if there are minimum 2 words\n- if the interface extends some other special interface","type":"boolean"}},{"name":"defaultDbStorageMethod","required":false,"schema":{"enum":["jsonMultiple","jsonSingle","markdown","keyValueMarkdown","csv"],"type":"string"}}],"type":"object"}},{"name":"TsBuildError","required":true,"schema":{"properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"line","required":false,"schema":{"type":"number"}},{"name":"character","required":false,"schema":{"type":"number"}},{"name":"message","required":true,"schema":{"type":"string"}}],"type":"object"}},{"name":"TsLintWarning","required":true,"schema":{"properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"line","required":true,"schema":{"type":"number"}},{"name":"character","required":true,"schema":{"type":"number"}},{"name":"message","required":true,"schema":{"type":"string"}}],"type":"object"}},{"name":"TsExport","required":true,"schema":{"properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"comments","required":true,"schema":{"description":"surrounding comments and comments inside of the import","items":[{"schema":{"description":"comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\nspecial line prefixes:\n- TODO:\n- DISCUSSION:\n- IDEA:\n- LATER:\n- NB:\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!","properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"comment","required":true,"schema":{"description":"a string that is known to contain markdown.","type":"string"}},{"name":"parameters","required":true,"schema":{"description":"TODO: either make a special category crud for the category model would be nice maybe (especially a backend that makes sure all references stay updated would be epic)","properties":[],"type":"object"}},{"name":"types","required":true,"schema":{"description":"These are the type indicators that were found in this single or multiline comment. Can be multiple.","items":[{"schema":{"enum":["todo","discussion","idea","later","nb"],"type":"string"},"name":"CommentType"}],"type":"array"}},{"name":"firstLine","required":true,"schema":{"description":"first line of the comment","type":"number"}},{"name":"lastLine","required":true,"schema":{"description":"last line of the comment","type":"number"}},{"name":"statementName","required":false,"schema":{"description":"statement name the comment belongs to","type":"string"}},{"name":"rawStatement","required":false,"schema":{"description":"raw statement text the comment belongs to","type":"string"}}],"type":"object"},"name":"TsComment"}],"type":"array"}},{"name":"type","required":false,"schema":{"enum":["value","type"],"type":"string"}},{"name":"alias","required":false,"schema":{"description":"used for duplicate export names","type":"string"}},{"name":"hasGeneric","required":false,"schema":{"description":"only for type exports. tells you whether or not the type has one or more generic parameter(s)","type":"boolean"}}],"type":"object"}},{"name":"TsImport","required":true,"schema":{"properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"comments","required":true,"schema":{"description":"surrounding comments and comments inside of the import","items":[{"schema":{"description":"comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\nspecial line prefixes:\n- TODO:\n- DISCUSSION:\n- IDEA:\n- LATER:\n- NB:\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!","properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"comment","required":true,"schema":{"description":"a string that is known to contain markdown.","type":"string"}},{"name":"parameters","required":true,"schema":{"description":"TODO: either make a special category crud for the category model would be nice maybe (especially a backend that makes sure all references stay updated would be epic)","properties":[],"type":"object"}},{"name":"types","required":true,"schema":{"description":"These are the type indicators that were found in this single or multiline comment. Can be multiple.","items":[{"schema":{"enum":["todo","discussion","idea","later","nb"],"type":"string"},"name":"CommentType"}],"type":"array"}},{"name":"firstLine","required":true,"schema":{"description":"first line of the comment","type":"number"}},{"name":"lastLine","required":true,"schema":{"description":"last line of the comment","type":"number"}},{"name":"statementName","required":false,"schema":{"description":"statement name the comment belongs to","type":"string"}},{"name":"rawStatement","required":false,"schema":{"description":"raw statement text the comment belongs to","type":"string"}}],"type":"object"},"name":"TsComment"}],"type":"array"}},{"name":"module","required":true,"schema":{"type":"string"}},{"name":"alias","required":false,"schema":{"description":"TODO: not sure, but I believe alias should be defined at the import, not at the export, right?","type":"string"}},{"name":"classification","required":true,"schema":{"description":"node: node core packages like fs and path\n\nreact: react standard packages like react, react-native, expo, react-dom, etc.\n\npackage: packages from npm that are not classified as operations\n\noperation: operations from our monorepo\n\ninternal: imports from other places in the same operation\n\nNB: don't confuse this with OperationClassification","enum":["node","react","package","operation","internal"],"type":"string"}},{"name":"type","required":false,"schema":{"description":"sometimes the import statement module referenced cannot be found, in that case it cannot be known whether the import should contain a type or value, so it will be undefined.","enum":["value","type"],"type":"string"}},{"name":"hasGeneric","required":false,"schema":{"description":"only for type exports. tells you whether or not the type has one or more generic parameter(s)","type":"boolean"}},{"name":"isAbsolute","required":true,"schema":{"type":"boolean"}},{"name":"isModuleResolved","required":true,"schema":{"type":"boolean"}},{"name":"isModuleFromMonorepo","required":true,"schema":{"type":"boolean"}}],"type":"object"}},{"name":"TsVariable","required":true,"schema":{"properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"value","required":true,"schema":{"type":"string"}},{"name":"classification","required":true,"schema":{"enum":["const","var","let"],"type":"string"}},{"name":"type","required":true,"schema":{"description":"all info that should always be collected when indexing any type interface","properties":[{"name":"typeDefinition","required":false,"schema":{"properties":[{"name":"$id","required":false,"schema":{"type":"string"}},{"name":"$ref","required":false,"schema":{"type":"string"}},{"name":"$schema","required":false,"schema":{"description":"Meta schema\n\nRecommended values:\n- 'http://json-schema.org/schema#'\n- 'http://json-schema.org/hyper-schema#'\n- 'http://json-schema.org/draft-07/schema#'\n- 'http://json-schema.org/draft-07/hyper-schema#'","type":"string"}},{"name":"$comment","required":false,"schema":{"type":"string"}},{"name":"$defs","required":false,"schema":{"properties":[],"type":"object"}},{"name":"type","required":false,"schema":{"properties":[],"type":"object"}},{"name":"enum","required":false,"schema":{"items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"const","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"multipleOf","required":false,"schema":{"type":"number"}},{"name":"maximum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMaximum","required":false,"schema":{"type":"number"}},{"name":"minimum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMinimum","required":false,"schema":{"type":"number"}},{"name":"maxLength","required":false,"schema":{"type":"number"}},{"name":"minLength","required":false,"schema":{"type":"number"}},{"name":"pattern","required":false,"schema":{"type":"string"}},{"name":"items","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalItems","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"maxItems","required":false,"schema":{"type":"number"}},{"name":"minItems","required":false,"schema":{"type":"number"}},{"name":"uniqueItems","required":false,"schema":{"type":"boolean"}},{"name":"contains","required":false,"schema":{"circularRefName":"JSONSchema7","properties":[],"type":"object"}},{"name":"maxProperties","required":false,"schema":{"type":"number"}},{"name":"minProperties","required":false,"schema":{"type":"number"}},{"name":"required","required":false,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"properties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"patternProperties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalProperties","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"dependencies","required":false,"schema":{"properties":[],"type":"object"}},{"name":"propertyNames","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"if","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"then","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"else","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"allOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"anyOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"oneOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"not","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"format","required":false,"schema":{"type":"string"}},{"name":"contentMediaType","required":false,"schema":{"type":"string"}},{"name":"contentEncoding","required":false,"schema":{"type":"string"}},{"name":"definitions","required":false,"schema":{"properties":[],"type":"object"}},{"name":"title","required":false,"schema":{"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"default","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"readOnly","required":false,"schema":{"type":"boolean"}},{"name":"writeOnly","required":false,"schema":{"type":"boolean"}},{"name":"examples","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}}],"type":"object"}},{"name":"simplifiedSchema","required":false,"schema":{"description":"JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form","properties":[{"name":"type","required":true,"schema":{"enum":["string","number","boolean","object","array","null"],"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"circularRefName","required":false,"schema":{"description":"sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here","type":"string"}},{"name":"enum","required":false,"schema":{"description":"in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think","items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"properties","required":false,"schema":{"description":"in case of object, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}},{"name":"required","required":true,"schema":{"description":"NB: can't we put this in the SimplifiedSchema itself?","type":"boolean"}}],"type":"object"},"name":"SimplifiedSchemaProperty"}],"type":"array"}},{"name":"items","required":false,"schema":{"description":"in case of arrays, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"description":"name in case of it being a reference, otherwise null","type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}}],"type":"object"},"name":"SimplifiedSchemaItem"}],"type":"array"}}],"type":"object"}},{"name":"isObject","required":true,"schema":{"description":"if the type is an object, this is true. false if it's an array","type":"boolean"}},{"name":"isArray","required":true,"schema":{"description":"if the type is an array, this is true","type":"boolean"}},{"name":"isPrimitive","required":true,"schema":{"description":"if it's a primitive type like \"string\", \"number\", \"boolean\", \"null\" | \"undefined\"","type":"boolean"}},{"name":"isEnum","required":true,"schema":{"description":"will be true for any primitive conjunction types","type":"boolean"}},{"name":"isEnumLiteral","required":true,"schema":{"description":"will be true for string conjunction types","type":"boolean"}},{"name":"typeCoverage","required":true,"schema":{"description":"quantification of coverage of the specified type or subtypes in our database.","type":"number"}},{"name":"rawType","required":true,"schema":{"description":"raw type string","type":"string"}}],"type":"object"}},{"name":"comments","required":true,"schema":{"description":"surrounding comments and comments inside of the variable","items":[{"schema":{"description":"comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\nspecial line prefixes:\n- TODO:\n- DISCUSSION:\n- IDEA:\n- LATER:\n- NB:\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!","properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"comment","required":true,"schema":{"description":"a string that is known to contain markdown.","type":"string"}},{"name":"parameters","required":true,"schema":{"description":"TODO: either make a special category crud for the category model would be nice maybe (especially a backend that makes sure all references stay updated would be epic)","properties":[],"type":"object"}},{"name":"types","required":true,"schema":{"description":"These are the type indicators that were found in this single or multiline comment. Can be multiple.","items":[{"schema":{"enum":["todo","discussion","idea","later","nb"],"type":"string"},"name":"CommentType"}],"type":"array"}},{"name":"firstLine","required":true,"schema":{"description":"first line of the comment","type":"number"}},{"name":"lastLine","required":true,"schema":{"description":"last line of the comment","type":"number"}},{"name":"statementName","required":false,"schema":{"description":"statement name the comment belongs to","type":"string"}},{"name":"rawStatement","required":false,"schema":{"description":"raw statement text the comment belongs to","type":"string"}}],"type":"object"},"name":"TsComment"}],"type":"array"}}],"type":"object"}}],"type":"object"}},{"name":"DbModelEnum","required":true,"schema":{"enum":["BundleConfig","OperationIndex","PackageJSON","TsComment","TsFunction","TsInterface","TsBuildError","TsLintWarning","TsExport","TsImport","TsVariable"],"type":"string"}}],"type":"object"},"typeCoverage":0,"rawType":"SdkDbTypes","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"OKjDrxOwwSRGZuOJ","name":"DbModels","slug":"db-models","relativePathFromProjectRoot":"/packages/sdk-db/src/index.ts","srcFileId":"/index","operationFolderName":"sdk-db","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/packages/sdk-db","operationName":"sdk-db","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"BundleConfig":{"$ref":"#/definitions/BundleConfig"},"OperationIndex":{"$ref":"#/definitions/OperationIndex"},"PackageJSON":{"$ref":"#/definitions/PackageJSON"},"TsComment":{"$ref":"#/definitions/TsComment"},"TsFunction":{"$ref":"#/definitions/TsFunction"},"TsInterface":{"$ref":"#/definitions/TsInterface"},"TsBuildError":{"$ref":"#/definitions/TsBuildError"},"TsLintWarning":{"$ref":"#/definitions/TsLintWarning"},"TsExport":{"$ref":"#/definitions/TsExport"},"TsImport":{"$ref":"#/definitions/TsImport"},"TsVariable":{"$ref":"#/definitions/TsVariable"}},"required":["BundleConfig","OperationIndex","PackageJSON","TsComment","TsFunction","TsInterface","TsBuildError","TsLintWarning","TsExport","TsImport","TsVariable"],"additionalProperties":false},"simplifiedSchema":{"properties":[{"name":"BundleConfig","required":true,"schema":{"properties":[{"name":"createdAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}},{"name":"updatedAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}},{"name":"deletedAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}},{"name":"createdFirstAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}},{"name":"id","required":true,"schema":{"description":"unique id used for compatibility purposes","type":"string"}},{"name":"slug","required":true,"schema":{"description":"use this for any identifier that's not an Id-type. Usually this is a kebab-case version of a written text, but it can also be a file path, for example.","type":"string"}},{"name":"name","required":true,"schema":{"description":"Human readable name of the monorepo (A kebab-case version of this will be used as root foldername)","type":"string"}},{"name":"language","required":true,"schema":{"description":"all currently supported languages","enum":["en","nl","np","pt","de","fr","es","it","no","sw","da","vn","in","vl","af"],"type":"string"}},{"name":"bundles","required":true,"schema":{"items":[{"schema":{"description":"This type can specify a frontend and backend that belong to each other. it doesn't include all operations that the ui or server are dependent on, they are calculated separately","properties":[{"name":"operations","required":false,"schema":{"description":"any operation names that are not necesarily dependencies of the named front-back bundle but still need to be available.","items":[{"schema":{"properties":[{"name":"operationName","required":true,"schema":{"type":"string"}},{"name":"privacy","required":true,"schema":{"description":"if public, everything will be kept\n\nif private, src and todo will be removed from bundle, unless it's a ui-es6 operation, because src is needed then. In that case, only \"todo\" will be deleted.","enum":["public","private"],"type":"string"}}],"type":"object"},"name":"OperationPrivacy"}],"type":"array"}},{"name":"uiOperationName","required":false,"schema":{"description":"(optional) main shared ui package of the frontend","type":"string"}},{"name":"appShellOperationNames","required":false,"schema":{"description":"which app shell(s) or app operations are there for the frontend?","items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"serverOperationName","required":false,"schema":{"description":"operation name for server, if this UI is connected to one","type":"string"}},{"name":"productionWebUrl","required":false,"schema":{"description":"if there is a ui and it has a web-shell, and it is deployed somewhere into production, add the deployed domain here.","type":"string"}},{"name":"envOperationName","required":false,"schema":{"description":"if the server is to be deployed, specify the server-env package that exposes the server environment variables (JSON) to the ui\n\nBy default, uses \"server-env\" operation, which simply exposes a configuration env.json file. the generation of the bundle will set the \"remoteServer\" key in this env.json to the \"productionApiUrl\" so the deployed version can reach the api","type":"string"}},{"name":"productionApiUrl","required":false,"schema":{"description":"if there is one, it should be specified here (without trailing slash)","type":"string"}},{"name":"endpointsAuthToken","required":false,"schema":{"description":"if this is provided, all endpoints require this auth token to be provided, or the endpoints do not work\n\nif you wish to have a more extensive authentication method for your endpoints, make sure to create your own auth layer","type":"string"}}],"type":"object"},"name":"FrontBackBundle"}],"type":"array"}},{"name":"dependencies","required":true,"schema":{"description":"Generated, private by default. If they're already here, uses private/public setting as given.\n\nWhen generating, removes the ones that are not dependencies (of dependencies) of your standalone apps","items":[{"schema":{"properties":[{"name":"operationName","required":true,"schema":{"type":"string"}},{"name":"privacy","required":true,"schema":{"description":"if public, everything will be kept\n\nif private, src and todo will be removed from bundle, unless it's a ui-es6 operation, because src is needed then. In that case, only \"todo\" will be deleted.","enum":["public","private"],"type":"string"}}],"type":"object"},"name":"OperationPrivacy"}],"type":"array"}},{"name":"docsRelativeFolderPath","required":false,"schema":{"description":"later this could be known by the frontend so it will render a ui to select a folder\n\nWe need to figure out how we can know all type types in between when getting the type definition schema, not only the final type. If I'm lucky there is a way to find it as a #ref in a consistent way.","type":"string"}},{"name":"readmeRelativeFilePath","required":false,"schema":{"type":"string"}},{"name":"foldersFromRepo","required":false,"schema":{"description":"if given, it will fetch these folders from the repo and paste them in the bundle whenever the bundle is generated\n\ncan be handy if you're working with someone else...","items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"informationStrategy","required":false,"schema":{"description":"push (default): take needed information from project and push to bundle (removing the existing info)\n\npullReplace: pull bundle and keep its information intact, not taking anything new from the OS, replacing all the information we had from these models in the OS\n\npullMerge: pull bundle and use its information in conjunction with the information we had in the OS. This option will merge both information sources, removing duplicate IDs\n\nNB: Later we may want to define this setting on a per-model basis!","enum":["push","pullReplace","pullMerge"],"type":"string"}},{"name":"gitRepoUrl","required":false,"schema":{"type":"string"}},{"name":"branchName","required":false,"schema":{"description":"specify the branch to use of your git repo (defaults to \"main\")","type":"string"}}],"type":"object"}},{"name":"OperationIndex","required":true,"schema":{"description":"--- defaultDbStorageMethod: jsonSingle\n---\n\ncontains all calculated info about an operation that needs to be retreived often: some package-only things, but also a collection of all indexes of all files","properties":[{"name":"updatedAt","required":true,"schema":{"type":"number"}},{"name":"packageName","required":true,"schema":{"description":"name of the package in package.json","type":"string"}},{"name":"folderName","required":true,"schema":{"description":"name of the operation folder","type":"string"}},{"name":"relativeOperationLocationPath","required":true,"schema":{"description":"relative path to the operation (does not include operation folder itself)\n\nrelative from project root","type":"string"}},{"name":"classification","required":true,"schema":{"description":"# Classification\n\nTODO: think about what the differences are and how we need to change processes to make it all work good\n\n### Possible values\n\njs: only js (no node) (well, ts of course)\n\nnode: includes other node packages, operations, core-imports, or globals.\n\nserver: exposes something on some port when it is ran and uses node code\n\nweb: uses react and exposes something on some port when it is ran\n\napp: uses react-native and exposes something on some port when it is ran\n\nui-es6: uses react (with (native)), which main entry points to typescript es6 files (this ui package cannot be built, should be transpiled)\n\nui-es5: ui which main entry points to javascript es5 files (this ui package can be built)","enum":["js","node","server","web","app","ui-es6","ui-es5"],"type":"string"}},{"name":"packageDependencies","required":true,"schema":{"description":"package dependency names (non-operation)","items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"operationDependencies","required":true,"schema":{"description":"operation dependency names","items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"coreDependencies","required":true,"schema":{"description":"core dependencies (e.g. `path` and `fs`)","items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"id","required":false,"schema":{"description":"here for compatibility, should implement...","type":"string"}},{"name":"createdAt","required":true,"schema":{"type":"number"}},{"name":"buildSucceeded","required":true,"schema":{"type":"boolean"}},{"name":"dependenciesBuildsFailed","required":true,"schema":{"type":"boolean"}},{"name":"indexImportExportError","required":true,"schema":{"type":"string"}},{"name":"lintProblems","required":true,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"indexInteracesErrors","required":true,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"indexErrors","required":true,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"size","required":true,"schema":{"description":"objective size measurements of all files in a folder\n\nsummary for a folder should contain file-summaries for different filetypes and an overal file summary","properties":[{"name":"size","required":true,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"textSize","required":true,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"dataSize","required":true,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"codeSize","required":true,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}}],"type":"object"}}],"type":"object"}},{"name":"PackageJSON","required":true,"schema":{"description":"--- defaultDbStorageMethod: jsonSingle\n---","properties":[{"name":"id","required":false,"schema":{"type":"string"}},{"name":"path","required":true,"schema":{"type":"string"}},{"name":"name","required":false,"schema":{"type":"string"}},{"name":"main","required":false,"schema":{"type":"string"}},{"name":"source","required":false,"schema":{"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"version","required":false,"schema":{"type":"string"}},{"name":"private","required":false,"schema":{"type":"boolean"}},{"name":"author","required":false,"schema":{"properties":[],"type":"object"}},{"name":"repository","required":true,"schema":{"properties":[],"type":"object"}},{"name":"homepage","required":false,"schema":{"type":"string"}},{"name":"dependencies","required":false,"schema":{"properties":[],"type":"object"}},{"name":"devDependencies","required":false,"schema":{"properties":[],"type":"object"}},{"name":"peerDependencies","required":false,"schema":{"properties":[],"type":"object"}},{"name":"bin","required":false,"schema":{"properties":[],"type":"object"}},{"name":"workspaces","required":false,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"type","required":false,"schema":{"description":"# Classification\n\nTODO: think about what the differences are and how we need to change processes to make it all work good\n\n### Possible values\n\njs: only js (no node) (well, ts of course)\n\nnode: includes other node packages, operations, core-imports, or globals.\n\nserver: exposes something on some port when it is ran and uses node code\n\nweb: uses react and exposes something on some port when it is ran\n\napp: uses react-native and exposes something on some port when it is ran\n\nui-es6: uses react (with (native)), which main entry points to typescript es6 files (this ui package cannot be built, should be transpiled)\n\nui-es5: ui which main entry points to javascript es5 files (this ui package can be built)","enum":["js","node","server","web","app","ui-es6","ui-es5"],"type":"string"}},{"name":"sensible","required":false,"schema":{"description":"Sensible-global configurations","properties":[{"name":"isSensibleProject","required":true,"schema":{"type":"boolean"}}],"type":"object"}},{"name":"operation","required":false,"schema":{"description":"anything configurable about the operation.\n\nThis can live in operation.json or as a prop in package.json.","properties":[{"name":"indirectDependencies","required":false,"schema":{"description":"Sometimes you are using function in a UI, which cannot be inferred with imports because they are used indirectly via an api. Here you can specify which operations on the backend are needed for an operation (ui mostly)\n\nThis array is simply a list of operation names needed for this operation that are not imported.\n\nNB: no need to specify things here that you also import in this operation, because these are already automatically detected.","items":[{"schema":{"type":"string"},"name":null}],"type":"array"}}],"type":"object"}}],"type":"object"}},{"name":"TsComment","required":true,"schema":{"description":"comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\nspecial line prefixes:\n- TODO:\n- DISCUSSION:\n- IDEA:\n- LATER:\n- NB:\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!","properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"comment","required":true,"schema":{"description":"a string that is known to contain markdown.","type":"string"}},{"name":"parameters","required":true,"schema":{"description":"TODO: either make a special category crud for the category model would be nice maybe (especially a backend that makes sure all references stay updated would be epic)","properties":[],"type":"object"}},{"name":"types","required":true,"schema":{"description":"These are the type indicators that were found in this single or multiline comment. Can be multiple.","items":[{"schema":{"enum":["todo","discussion","idea","later","nb"],"type":"string"},"name":"CommentType"}],"type":"array"}},{"name":"firstLine","required":true,"schema":{"description":"first line of the comment","type":"number"}},{"name":"lastLine","required":true,"schema":{"description":"last line of the comment","type":"number"}},{"name":"statementName","required":false,"schema":{"description":"statement name the comment belongs to","type":"string"}},{"name":"rawStatement","required":false,"schema":{"description":"raw statement text the comment belongs to","type":"string"}}],"type":"object"}},{"name":"TsFunction","required":true,"schema":{"description":"Interface for arrow functions and normal functions","properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"description","required":false,"schema":{"description":"a string that is known to contain markdown.","type":"string"}},{"name":"rawText","required":false,"schema":{"description":"raw text of the function","type":"string"}},{"name":"commentsInside","required":true,"schema":{"description":"all comments found in a function and the node that they belong to","items":[{"schema":{"description":"comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\nspecial line prefixes:\n- TODO:\n- DISCUSSION:\n- IDEA:\n- LATER:\n- NB:\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!","properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"comment","required":true,"schema":{"description":"a string that is known to contain markdown.","type":"string"}},{"name":"parameters","required":true,"schema":{"description":"TODO: either make a special category crud for the category model would be nice maybe (especially a backend that makes sure all references stay updated would be epic)","properties":[],"type":"object"}},{"name":"types","required":true,"schema":{"description":"These are the type indicators that were found in this single or multiline comment. Can be multiple.","items":[{"schema":{"enum":["todo","discussion","idea","later","nb"],"type":"string"},"name":"CommentType"}],"type":"array"}},{"name":"firstLine","required":true,"schema":{"description":"first line of the comment","type":"number"}},{"name":"lastLine","required":true,"schema":{"description":"last line of the comment","type":"number"}},{"name":"statementName","required":false,"schema":{"description":"statement name the comment belongs to","type":"string"}},{"name":"rawStatement","required":false,"schema":{"description":"raw statement text the comment belongs to","type":"string"}}],"type":"object"},"name":"TsComment"}],"type":"array"}},{"name":"returnType","required":true,"schema":{"description":"all info that should always be collected when indexing any type interface","properties":[{"name":"typeDefinition","required":false,"schema":{"properties":[{"name":"$id","required":false,"schema":{"type":"string"}},{"name":"$ref","required":false,"schema":{"type":"string"}},{"name":"$schema","required":false,"schema":{"description":"Meta schema\n\nRecommended values:\n- 'http://json-schema.org/schema#'\n- 'http://json-schema.org/hyper-schema#'\n- 'http://json-schema.org/draft-07/schema#'\n- 'http://json-schema.org/draft-07/hyper-schema#'","type":"string"}},{"name":"$comment","required":false,"schema":{"type":"string"}},{"name":"$defs","required":false,"schema":{"properties":[],"type":"object"}},{"name":"type","required":false,"schema":{"properties":[],"type":"object"}},{"name":"enum","required":false,"schema":{"items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"const","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"multipleOf","required":false,"schema":{"type":"number"}},{"name":"maximum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMaximum","required":false,"schema":{"type":"number"}},{"name":"minimum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMinimum","required":false,"schema":{"type":"number"}},{"name":"maxLength","required":false,"schema":{"type":"number"}},{"name":"minLength","required":false,"schema":{"type":"number"}},{"name":"pattern","required":false,"schema":{"type":"string"}},{"name":"items","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalItems","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"maxItems","required":false,"schema":{"type":"number"}},{"name":"minItems","required":false,"schema":{"type":"number"}},{"name":"uniqueItems","required":false,"schema":{"type":"boolean"}},{"name":"contains","required":false,"schema":{"circularRefName":"JSONSchema7","properties":[],"type":"object"}},{"name":"maxProperties","required":false,"schema":{"type":"number"}},{"name":"minProperties","required":false,"schema":{"type":"number"}},{"name":"required","required":false,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"properties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"patternProperties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalProperties","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"dependencies","required":false,"schema":{"properties":[],"type":"object"}},{"name":"propertyNames","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"if","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"then","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"else","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"allOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"anyOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"oneOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"not","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"format","required":false,"schema":{"type":"string"}},{"name":"contentMediaType","required":false,"schema":{"type":"string"}},{"name":"contentEncoding","required":false,"schema":{"type":"string"}},{"name":"definitions","required":false,"schema":{"properties":[],"type":"object"}},{"name":"title","required":false,"schema":{"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"default","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"readOnly","required":false,"schema":{"type":"boolean"}},{"name":"writeOnly","required":false,"schema":{"type":"boolean"}},{"name":"examples","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}}],"type":"object"}},{"name":"simplifiedSchema","required":false,"schema":{"description":"JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form","properties":[{"name":"type","required":true,"schema":{"enum":["string","number","boolean","object","array","null"],"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"circularRefName","required":false,"schema":{"description":"sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here","type":"string"}},{"name":"enum","required":false,"schema":{"description":"in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think","items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"properties","required":false,"schema":{"description":"in case of object, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}},{"name":"required","required":true,"schema":{"description":"NB: can't we put this in the SimplifiedSchema itself?","type":"boolean"}}],"type":"object"},"name":"SimplifiedSchemaProperty"}],"type":"array"}},{"name":"items","required":false,"schema":{"description":"in case of arrays, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"description":"name in case of it being a reference, otherwise null","type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}}],"type":"object"},"name":"SimplifiedSchemaItem"}],"type":"array"}}],"type":"object"}},{"name":"isObject","required":true,"schema":{"description":"if the type is an object, this is true. false if it's an array","type":"boolean"}},{"name":"isArray","required":true,"schema":{"description":"if the type is an array, this is true","type":"boolean"}},{"name":"isPrimitive","required":true,"schema":{"description":"if it's a primitive type like \"string\", \"number\", \"boolean\", \"null\" | \"undefined\"","type":"boolean"}},{"name":"isEnum","required":true,"schema":{"description":"will be true for any primitive conjunction types","type":"boolean"}},{"name":"isEnumLiteral","required":true,"schema":{"description":"will be true for string conjunction types","type":"boolean"}},{"name":"typeCoverage","required":true,"schema":{"description":"quantification of coverage of the specified type or subtypes in our database.","type":"number"}},{"name":"rawType","required":true,"schema":{"description":"raw type string","type":"string"}}],"type":"object"}},{"name":"parameters","required":false,"schema":{"description":"parameters the function takes as its arguments, if any","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"type":"string"}},{"name":"schema","required":false,"schema":{"properties":[{"name":"$id","required":false,"schema":{"type":"string"}},{"name":"$ref","required":false,"schema":{"type":"string"}},{"name":"$schema","required":false,"schema":{"description":"Meta schema\n\nRecommended values:\n- 'http://json-schema.org/schema#'\n- 'http://json-schema.org/hyper-schema#'\n- 'http://json-schema.org/draft-07/schema#'\n- 'http://json-schema.org/draft-07/hyper-schema#'","type":"string"}},{"name":"$comment","required":false,"schema":{"type":"string"}},{"name":"$defs","required":false,"schema":{"properties":[],"type":"object"}},{"name":"type","required":false,"schema":{"properties":[],"type":"object"}},{"name":"enum","required":false,"schema":{"items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"const","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"multipleOf","required":false,"schema":{"type":"number"}},{"name":"maximum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMaximum","required":false,"schema":{"type":"number"}},{"name":"minimum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMinimum","required":false,"schema":{"type":"number"}},{"name":"maxLength","required":false,"schema":{"type":"number"}},{"name":"minLength","required":false,"schema":{"type":"number"}},{"name":"pattern","required":false,"schema":{"type":"string"}},{"name":"items","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalItems","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"maxItems","required":false,"schema":{"type":"number"}},{"name":"minItems","required":false,"schema":{"type":"number"}},{"name":"uniqueItems","required":false,"schema":{"type":"boolean"}},{"name":"contains","required":false,"schema":{"circularRefName":"JSONSchema7","properties":[],"type":"object"}},{"name":"maxProperties","required":false,"schema":{"type":"number"}},{"name":"minProperties","required":false,"schema":{"type":"number"}},{"name":"required","required":false,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"properties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"patternProperties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalProperties","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"dependencies","required":false,"schema":{"properties":[],"type":"object"}},{"name":"propertyNames","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"if","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"then","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"else","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"allOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"anyOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"oneOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"not","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"format","required":false,"schema":{"type":"string"}},{"name":"contentMediaType","required":false,"schema":{"type":"string"}},{"name":"contentEncoding","required":false,"schema":{"type":"string"}},{"name":"definitions","required":false,"schema":{"properties":[],"type":"object"}},{"name":"title","required":false,"schema":{"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"default","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"readOnly","required":false,"schema":{"type":"boolean"}},{"name":"writeOnly","required":false,"schema":{"type":"boolean"}},{"name":"examples","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}}],"type":"object"}},{"name":"simplifiedSchema","required":false,"schema":{"description":"JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form","properties":[{"name":"type","required":true,"schema":{"enum":["string","number","boolean","object","array","null"],"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"circularRefName","required":false,"schema":{"description":"sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here","type":"string"}},{"name":"enum","required":false,"schema":{"description":"in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think","items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"properties","required":false,"schema":{"description":"in case of object, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}},{"name":"required","required":true,"schema":{"description":"NB: can't we put this in the SimplifiedSchema itself?","type":"boolean"}}],"type":"object"},"name":"SimplifiedSchemaProperty"}],"type":"array"}},{"name":"items","required":false,"schema":{"description":"in case of arrays, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"description":"name in case of it being a reference, otherwise null","type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}}],"type":"object"},"name":"SimplifiedSchemaItem"}],"type":"array"}}],"type":"object"}},{"name":"required","required":true,"schema":{"type":"boolean"}}],"type":"object"},"name":"FunctionParameter"}],"type":"array"}},{"name":"size","required":true,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"commentSize","required":false,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"codeSize","required":false,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"cumulativeSize","required":false,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"cumulativeCommentSize","required":false,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"cumulativeCodeSize","required":false,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"maxIndentationDepth","required":true,"schema":{"description":"maximum amount of times indedented in this function\n\ngood for determining the complexity and finding code that can be simplified/destructured into smaller pieces","type":"number"}},{"name":"dependantFiles","required":false,"schema":{"description":"finds all files that import this function\n\nNB: this is not indexed because this information has nothing to do with the operation itself, but the exposure to the broader monorepo. This is calculated on the fly.","items":[{"schema":{"type":"string"},"name":null}],"type":"array"}}],"type":"object"}},{"name":"TsInterface","required":true,"schema":{"description":"TODO: Just like parameters, this should be linted for. If you define an interface that's not declared here, that should ring a bell.","properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"type","required":true,"schema":{"description":"all info that should always be collected when indexing any type interface","properties":[{"name":"typeDefinition","required":false,"schema":{"properties":[{"name":"$id","required":false,"schema":{"type":"string"}},{"name":"$ref","required":false,"schema":{"type":"string"}},{"name":"$schema","required":false,"schema":{"description":"Meta schema\n\nRecommended values:\n- 'http://json-schema.org/schema#'\n- 'http://json-schema.org/hyper-schema#'\n- 'http://json-schema.org/draft-07/schema#'\n- 'http://json-schema.org/draft-07/hyper-schema#'","type":"string"}},{"name":"$comment","required":false,"schema":{"type":"string"}},{"name":"$defs","required":false,"schema":{"properties":[],"type":"object"}},{"name":"type","required":false,"schema":{"properties":[],"type":"object"}},{"name":"enum","required":false,"schema":{"items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"const","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"multipleOf","required":false,"schema":{"type":"number"}},{"name":"maximum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMaximum","required":false,"schema":{"type":"number"}},{"name":"minimum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMinimum","required":false,"schema":{"type":"number"}},{"name":"maxLength","required":false,"schema":{"type":"number"}},{"name":"minLength","required":false,"schema":{"type":"number"}},{"name":"pattern","required":false,"schema":{"type":"string"}},{"name":"items","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalItems","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"maxItems","required":false,"schema":{"type":"number"}},{"name":"minItems","required":false,"schema":{"type":"number"}},{"name":"uniqueItems","required":false,"schema":{"type":"boolean"}},{"name":"contains","required":false,"schema":{"circularRefName":"JSONSchema7","properties":[],"type":"object"}},{"name":"maxProperties","required":false,"schema":{"type":"number"}},{"name":"minProperties","required":false,"schema":{"type":"number"}},{"name":"required","required":false,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"properties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"patternProperties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalProperties","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"dependencies","required":false,"schema":{"properties":[],"type":"object"}},{"name":"propertyNames","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"if","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"then","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"else","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"allOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"anyOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"oneOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"not","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"format","required":false,"schema":{"type":"string"}},{"name":"contentMediaType","required":false,"schema":{"type":"string"}},{"name":"contentEncoding","required":false,"schema":{"type":"string"}},{"name":"definitions","required":false,"schema":{"properties":[],"type":"object"}},{"name":"title","required":false,"schema":{"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"default","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"readOnly","required":false,"schema":{"type":"boolean"}},{"name":"writeOnly","required":false,"schema":{"type":"boolean"}},{"name":"examples","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}}],"type":"object"}},{"name":"simplifiedSchema","required":false,"schema":{"description":"JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form","properties":[{"name":"type","required":true,"schema":{"enum":["string","number","boolean","object","array","null"],"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"circularRefName","required":false,"schema":{"description":"sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here","type":"string"}},{"name":"enum","required":false,"schema":{"description":"in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think","items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"properties","required":false,"schema":{"description":"in case of object, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}},{"name":"required","required":true,"schema":{"description":"NB: can't we put this in the SimplifiedSchema itself?","type":"boolean"}}],"type":"object"},"name":"SimplifiedSchemaProperty"}],"type":"array"}},{"name":"items","required":false,"schema":{"description":"in case of arrays, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"description":"name in case of it being a reference, otherwise null","type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}}],"type":"object"},"name":"SimplifiedSchemaItem"}],"type":"array"}}],"type":"object"}},{"name":"isObject","required":true,"schema":{"description":"if the type is an object, this is true. false if it's an array","type":"boolean"}},{"name":"isArray","required":true,"schema":{"description":"if the type is an array, this is true","type":"boolean"}},{"name":"isPrimitive","required":true,"schema":{"description":"if it's a primitive type like \"string\", \"number\", \"boolean\", \"null\" | \"undefined\"","type":"boolean"}},{"name":"isEnum","required":true,"schema":{"description":"will be true for any primitive conjunction types","type":"boolean"}},{"name":"isEnumLiteral","required":true,"schema":{"description":"will be true for string conjunction types","type":"boolean"}},{"name":"typeCoverage","required":true,"schema":{"description":"quantification of coverage of the specified type or subtypes in our database.","type":"number"}},{"name":"rawType","required":true,"schema":{"description":"raw type string","type":"string"}}],"type":"object"}},{"name":"description","required":false,"schema":{"description":"a string that is known to contain markdown.","type":"string"}},{"name":"commentsInside","required":true,"schema":{"items":[{"schema":{"description":"comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\nspecial line prefixes:\n- TODO:\n- DISCUSSION:\n- IDEA:\n- LATER:\n- NB:\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!","properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"comment","required":true,"schema":{"description":"a string that is known to contain markdown.","type":"string"}},{"name":"parameters","required":true,"schema":{"description":"TODO: either make a special category crud for the category model would be nice maybe (especially a backend that makes sure all references stay updated would be epic)","properties":[],"type":"object"}},{"name":"types","required":true,"schema":{"description":"These are the type indicators that were found in this single or multiline comment. Can be multiple.","items":[{"schema":{"enum":["todo","discussion","idea","later","nb"],"type":"string"},"name":"CommentType"}],"type":"array"}},{"name":"firstLine","required":true,"schema":{"description":"first line of the comment","type":"number"}},{"name":"lastLine","required":true,"schema":{"description":"last line of the comment","type":"number"}},{"name":"statementName","required":false,"schema":{"description":"statement name the comment belongs to","type":"string"}},{"name":"rawStatement","required":false,"schema":{"description":"raw statement text the comment belongs to","type":"string"}}],"type":"object"},"name":"TsComment"}],"type":"array"}},{"name":"rawText","required":false,"schema":{"description":"raw interface text, coming from ts-morph","type":"string"}},{"name":"extensions","required":false,"schema":{"description":"if the interface extends anything, names will be specified here","items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"isDbModel","required":true,"schema":{"description":"if true, this interface is marked as a db model, which means it will be included in the db function autocompletion so it's easy to store and fetch data in this format.\n\nis automatically set to true when indexing and when one of the following statements holds true\n- if the doc-comment contains frontmatter with `isDbModel` or `defaultDbStorageMethod` specified\n- if the interface last word is \"db\" or \"model\" and if there are minimum 2 words\n- if the interface extends some other special interface","type":"boolean"}},{"name":"defaultDbStorageMethod","required":false,"schema":{"enum":["jsonMultiple","jsonSingle","markdown","keyValueMarkdown","csv"],"type":"string"}}],"type":"object"}},{"name":"TsBuildError","required":true,"schema":{"properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"line","required":false,"schema":{"type":"number"}},{"name":"character","required":false,"schema":{"type":"number"}},{"name":"message","required":true,"schema":{"type":"string"}}],"type":"object"}},{"name":"TsLintWarning","required":true,"schema":{"properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"line","required":true,"schema":{"type":"number"}},{"name":"character","required":true,"schema":{"type":"number"}},{"name":"message","required":true,"schema":{"type":"string"}}],"type":"object"}},{"name":"TsExport","required":true,"schema":{"properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"comments","required":true,"schema":{"description":"surrounding comments and comments inside of the import","items":[{"schema":{"description":"comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\nspecial line prefixes:\n- TODO:\n- DISCUSSION:\n- IDEA:\n- LATER:\n- NB:\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!","properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"comment","required":true,"schema":{"description":"a string that is known to contain markdown.","type":"string"}},{"name":"parameters","required":true,"schema":{"description":"TODO: either make a special category crud for the category model would be nice maybe (especially a backend that makes sure all references stay updated would be epic)","properties":[],"type":"object"}},{"name":"types","required":true,"schema":{"description":"These are the type indicators that were found in this single or multiline comment. Can be multiple.","items":[{"schema":{"enum":["todo","discussion","idea","later","nb"],"type":"string"},"name":"CommentType"}],"type":"array"}},{"name":"firstLine","required":true,"schema":{"description":"first line of the comment","type":"number"}},{"name":"lastLine","required":true,"schema":{"description":"last line of the comment","type":"number"}},{"name":"statementName","required":false,"schema":{"description":"statement name the comment belongs to","type":"string"}},{"name":"rawStatement","required":false,"schema":{"description":"raw statement text the comment belongs to","type":"string"}}],"type":"object"},"name":"TsComment"}],"type":"array"}},{"name":"type","required":false,"schema":{"enum":["value","type"],"type":"string"}},{"name":"alias","required":false,"schema":{"description":"used for duplicate export names","type":"string"}},{"name":"hasGeneric","required":false,"schema":{"description":"only for type exports. tells you whether or not the type has one or more generic parameter(s)","type":"boolean"}}],"type":"object"}},{"name":"TsImport","required":true,"schema":{"properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"comments","required":true,"schema":{"description":"surrounding comments and comments inside of the import","items":[{"schema":{"description":"comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\nspecial line prefixes:\n- TODO:\n- DISCUSSION:\n- IDEA:\n- LATER:\n- NB:\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!","properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"comment","required":true,"schema":{"description":"a string that is known to contain markdown.","type":"string"}},{"name":"parameters","required":true,"schema":{"description":"TODO: either make a special category crud for the category model would be nice maybe (especially a backend that makes sure all references stay updated would be epic)","properties":[],"type":"object"}},{"name":"types","required":true,"schema":{"description":"These are the type indicators that were found in this single or multiline comment. Can be multiple.","items":[{"schema":{"enum":["todo","discussion","idea","later","nb"],"type":"string"},"name":"CommentType"}],"type":"array"}},{"name":"firstLine","required":true,"schema":{"description":"first line of the comment","type":"number"}},{"name":"lastLine","required":true,"schema":{"description":"last line of the comment","type":"number"}},{"name":"statementName","required":false,"schema":{"description":"statement name the comment belongs to","type":"string"}},{"name":"rawStatement","required":false,"schema":{"description":"raw statement text the comment belongs to","type":"string"}}],"type":"object"},"name":"TsComment"}],"type":"array"}},{"name":"module","required":true,"schema":{"type":"string"}},{"name":"alias","required":false,"schema":{"description":"TODO: not sure, but I believe alias should be defined at the import, not at the export, right?","type":"string"}},{"name":"classification","required":true,"schema":{"description":"node: node core packages like fs and path\n\nreact: react standard packages like react, react-native, expo, react-dom, etc.\n\npackage: packages from npm that are not classified as operations\n\noperation: operations from our monorepo\n\ninternal: imports from other places in the same operation\n\nNB: don't confuse this with OperationClassification","enum":["node","react","package","operation","internal"],"type":"string"}},{"name":"type","required":false,"schema":{"description":"sometimes the import statement module referenced cannot be found, in that case it cannot be known whether the import should contain a type or value, so it will be undefined.","enum":["value","type"],"type":"string"}},{"name":"hasGeneric","required":false,"schema":{"description":"only for type exports. tells you whether or not the type has one or more generic parameter(s)","type":"boolean"}},{"name":"isAbsolute","required":true,"schema":{"type":"boolean"}},{"name":"isModuleResolved","required":true,"schema":{"type":"boolean"}},{"name":"isModuleFromMonorepo","required":true,"schema":{"type":"boolean"}}],"type":"object"}},{"name":"TsVariable","required":true,"schema":{"properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"value","required":true,"schema":{"type":"string"}},{"name":"classification","required":true,"schema":{"enum":["const","var","let"],"type":"string"}},{"name":"type","required":true,"schema":{"description":"all info that should always be collected when indexing any type interface","properties":[{"name":"typeDefinition","required":false,"schema":{"properties":[{"name":"$id","required":false,"schema":{"type":"string"}},{"name":"$ref","required":false,"schema":{"type":"string"}},{"name":"$schema","required":false,"schema":{"description":"Meta schema\n\nRecommended values:\n- 'http://json-schema.org/schema#'\n- 'http://json-schema.org/hyper-schema#'\n- 'http://json-schema.org/draft-07/schema#'\n- 'http://json-schema.org/draft-07/hyper-schema#'","type":"string"}},{"name":"$comment","required":false,"schema":{"type":"string"}},{"name":"$defs","required":false,"schema":{"properties":[],"type":"object"}},{"name":"type","required":false,"schema":{"properties":[],"type":"object"}},{"name":"enum","required":false,"schema":{"items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"const","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"multipleOf","required":false,"schema":{"type":"number"}},{"name":"maximum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMaximum","required":false,"schema":{"type":"number"}},{"name":"minimum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMinimum","required":false,"schema":{"type":"number"}},{"name":"maxLength","required":false,"schema":{"type":"number"}},{"name":"minLength","required":false,"schema":{"type":"number"}},{"name":"pattern","required":false,"schema":{"type":"string"}},{"name":"items","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalItems","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"maxItems","required":false,"schema":{"type":"number"}},{"name":"minItems","required":false,"schema":{"type":"number"}},{"name":"uniqueItems","required":false,"schema":{"type":"boolean"}},{"name":"contains","required":false,"schema":{"circularRefName":"JSONSchema7","properties":[],"type":"object"}},{"name":"maxProperties","required":false,"schema":{"type":"number"}},{"name":"minProperties","required":false,"schema":{"type":"number"}},{"name":"required","required":false,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"properties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"patternProperties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalProperties","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"dependencies","required":false,"schema":{"properties":[],"type":"object"}},{"name":"propertyNames","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"if","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"then","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"else","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"allOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"anyOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"oneOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"not","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"format","required":false,"schema":{"type":"string"}},{"name":"contentMediaType","required":false,"schema":{"type":"string"}},{"name":"contentEncoding","required":false,"schema":{"type":"string"}},{"name":"definitions","required":false,"schema":{"properties":[],"type":"object"}},{"name":"title","required":false,"schema":{"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"default","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"readOnly","required":false,"schema":{"type":"boolean"}},{"name":"writeOnly","required":false,"schema":{"type":"boolean"}},{"name":"examples","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}}],"type":"object"}},{"name":"simplifiedSchema","required":false,"schema":{"description":"JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form","properties":[{"name":"type","required":true,"schema":{"enum":["string","number","boolean","object","array","null"],"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"circularRefName","required":false,"schema":{"description":"sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here","type":"string"}},{"name":"enum","required":false,"schema":{"description":"in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think","items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"properties","required":false,"schema":{"description":"in case of object, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}},{"name":"required","required":true,"schema":{"description":"NB: can't we put this in the SimplifiedSchema itself?","type":"boolean"}}],"type":"object"},"name":"SimplifiedSchemaProperty"}],"type":"array"}},{"name":"items","required":false,"schema":{"description":"in case of arrays, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"description":"name in case of it being a reference, otherwise null","type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}}],"type":"object"},"name":"SimplifiedSchemaItem"}],"type":"array"}}],"type":"object"}},{"name":"isObject","required":true,"schema":{"description":"if the type is an object, this is true. false if it's an array","type":"boolean"}},{"name":"isArray","required":true,"schema":{"description":"if the type is an array, this is true","type":"boolean"}},{"name":"isPrimitive","required":true,"schema":{"description":"if it's a primitive type like \"string\", \"number\", \"boolean\", \"null\" | \"undefined\"","type":"boolean"}},{"name":"isEnum","required":true,"schema":{"description":"will be true for any primitive conjunction types","type":"boolean"}},{"name":"isEnumLiteral","required":true,"schema":{"description":"will be true for string conjunction types","type":"boolean"}},{"name":"typeCoverage","required":true,"schema":{"description":"quantification of coverage of the specified type or subtypes in our database.","type":"number"}},{"name":"rawType","required":true,"schema":{"description":"raw type string","type":"string"}}],"type":"object"}},{"name":"comments","required":true,"schema":{"description":"surrounding comments and comments inside of the variable","items":[{"schema":{"description":"comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\nspecial line prefixes:\n- TODO:\n- DISCUSSION:\n- IDEA:\n- LATER:\n- NB:\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!","properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"comment","required":true,"schema":{"description":"a string that is known to contain markdown.","type":"string"}},{"name":"parameters","required":true,"schema":{"description":"TODO: either make a special category crud for the category model would be nice maybe (especially a backend that makes sure all references stay updated would be epic)","properties":[],"type":"object"}},{"name":"types","required":true,"schema":{"description":"These are the type indicators that were found in this single or multiline comment. Can be multiple.","items":[{"schema":{"enum":["todo","discussion","idea","later","nb"],"type":"string"},"name":"CommentType"}],"type":"array"}},{"name":"firstLine","required":true,"schema":{"description":"first line of the comment","type":"number"}},{"name":"lastLine","required":true,"schema":{"description":"last line of the comment","type":"number"}},{"name":"statementName","required":false,"schema":{"description":"statement name the comment belongs to","type":"string"}},{"name":"rawStatement","required":false,"schema":{"description":"raw statement text the comment belongs to","type":"string"}}],"type":"object"},"name":"TsComment"}],"type":"array"}}],"type":"object"}}],"type":"object"},"typeCoverage":0,"rawType":"DbModels","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"jXRQNLGmwqYFzHtu","name":"BundleConfig","slug":"bundle-config","relativePathFromProjectRoot":"/packages/sdk-db/src/index.ts","srcFileId":"/index","operationFolderName":"sdk-db","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/packages/sdk-db","operationName":"sdk-db","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"createdAt":{"$ref":"#/definitions/CreatedAt"},"updatedAt":{"$ref":"#/definitions/UpdatedAt"},"deletedAt":{"$ref":"#/definitions/DeletedAt"},"createdFirstAt":{"$ref":"#/definitions/CreatedFirstAt"},"id":{"type":"string","description":"unique id used for compatibility purposes"},"slug":{"$ref":"#/definitions/Slug","description":"kebab-case of the name, should be unique"},"name":{"type":"string","description":"Human readable name of the monorepo (A kebab-case version of this will be used as root foldername)"},"language":{"$ref":"#/definitions/Language","default":"en"},"bundles":{"type":"array","items":{"$ref":"#/definitions/FrontBackBundle"}},"dependencies":{"type":"array","items":{"$ref":"#/definitions/OperationPrivacy"},"description":"Generated, private by default. If they're already here, uses private/public setting as given.\n\nWhen generating, removes the ones that are not dependencies (of dependencies) of your standalone apps"},"docsRelativeFolderPath":{"$ref":"#/definitions/ProjectRelativeFolderPath","description":"optional. Could also find the main file from here and use that as README.md\n\nMust be a relative path from project root"},"readmeRelativeFilePath":{"$ref":"#/definitions/ProjectRelativeFilePath","description":"optional. path to a readme file for the monorepo root.\n\nIf not given, and if you did provide a path for docs, the main docs intro file will be taken\n\nMust be a relative path from project  root"},"foldersFromRepo":{"type":"array","items":{"type":"string"},"description":"if given, it will fetch these folders from the repo and paste them in the bundle whenever the bundle is generated\n\ncan be handy if you're working with someone else..."},"informationStrategy":{"$ref":"#/definitions/InformationStrategy"},"gitRepoUrl":{"type":"string"},"branchName":{"type":"string","description":"specify the branch to use of your git repo (defaults to \"main\")"}},"required":["bundles","createdAt","createdFirstAt","deletedAt","dependencies","id","language","name","slug","updatedAt"],"additionalProperties":{"anyOf":[{"$ref":"#/definitions/Id"},{"not":{}}]}},"simplifiedSchema":{"properties":[{"name":"createdAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}},{"name":"updatedAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}},{"name":"deletedAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}},{"name":"createdFirstAt","required":true,"schema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"}},{"name":"id","required":true,"schema":{"description":"unique id used for compatibility purposes","type":"string"}},{"name":"slug","required":true,"schema":{"description":"use this for any identifier that's not an Id-type. Usually this is a kebab-case version of a written text, but it can also be a file path, for example.","type":"string"}},{"name":"name","required":true,"schema":{"description":"Human readable name of the monorepo (A kebab-case version of this will be used as root foldername)","type":"string"}},{"name":"language","required":true,"schema":{"description":"all currently supported languages","enum":["en","nl","np","pt","de","fr","es","it","no","sw","da","vn","in","vl","af"],"type":"string"}},{"name":"bundles","required":true,"schema":{"items":[{"schema":{"description":"This type can specify a frontend and backend that belong to each other. it doesn't include all operations that the ui or server are dependent on, they are calculated separately","properties":[{"name":"operations","required":false,"schema":{"description":"any operation names that are not necesarily dependencies of the named front-back bundle but still need to be available.","items":[{"schema":{"properties":[{"name":"operationName","required":true,"schema":{"type":"string"}},{"name":"privacy","required":true,"schema":{"description":"if public, everything will be kept\n\nif private, src and todo will be removed from bundle, unless it's a ui-es6 operation, because src is needed then. In that case, only \"todo\" will be deleted.","enum":["public","private"],"type":"string"}}],"type":"object"},"name":"OperationPrivacy"}],"type":"array"}},{"name":"uiOperationName","required":false,"schema":{"description":"(optional) main shared ui package of the frontend","type":"string"}},{"name":"appShellOperationNames","required":false,"schema":{"description":"which app shell(s) or app operations are there for the frontend?","items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"serverOperationName","required":false,"schema":{"description":"operation name for server, if this UI is connected to one","type":"string"}},{"name":"productionWebUrl","required":false,"schema":{"description":"if there is a ui and it has a web-shell, and it is deployed somewhere into production, add the deployed domain here.","type":"string"}},{"name":"envOperationName","required":false,"schema":{"description":"if the server is to be deployed, specify the server-env package that exposes the server environment variables (JSON) to the ui\n\nBy default, uses \"server-env\" operation, which simply exposes a configuration env.json file. the generation of the bundle will set the \"remoteServer\" key in this env.json to the \"productionApiUrl\" so the deployed version can reach the api","type":"string"}},{"name":"productionApiUrl","required":false,"schema":{"description":"if there is one, it should be specified here (without trailing slash)","type":"string"}},{"name":"endpointsAuthToken","required":false,"schema":{"description":"if this is provided, all endpoints require this auth token to be provided, or the endpoints do not work\n\nif you wish to have a more extensive authentication method for your endpoints, make sure to create your own auth layer","type":"string"}}],"type":"object"},"name":"FrontBackBundle"}],"type":"array"}},{"name":"dependencies","required":true,"schema":{"description":"Generated, private by default. If they're already here, uses private/public setting as given.\n\nWhen generating, removes the ones that are not dependencies (of dependencies) of your standalone apps","items":[{"schema":{"properties":[{"name":"operationName","required":true,"schema":{"type":"string"}},{"name":"privacy","required":true,"schema":{"description":"if public, everything will be kept\n\nif private, src and todo will be removed from bundle, unless it's a ui-es6 operation, because src is needed then. In that case, only \"todo\" will be deleted.","enum":["public","private"],"type":"string"}}],"type":"object"},"name":"OperationPrivacy"}],"type":"array"}},{"name":"docsRelativeFolderPath","required":false,"schema":{"description":"later this could be known by the frontend so it will render a ui to select a folder\n\nWe need to figure out how we can know all type types in between when getting the type definition schema, not only the final type. If I'm lucky there is a way to find it as a #ref in a consistent way.","type":"string"}},{"name":"readmeRelativeFilePath","required":false,"schema":{"type":"string"}},{"name":"foldersFromRepo","required":false,"schema":{"description":"if given, it will fetch these folders from the repo and paste them in the bundle whenever the bundle is generated\n\ncan be handy if you're working with someone else...","items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"informationStrategy","required":false,"schema":{"description":"push (default): take needed information from project and push to bundle (removing the existing info)\n\npullReplace: pull bundle and keep its information intact, not taking anything new from the OS, replacing all the information we had from these models in the OS\n\npullMerge: pull bundle and use its information in conjunction with the information we had in the OS. This option will merge both information sources, removing duplicate IDs\n\nNB: Later we may want to define this setting on a per-model basis!","enum":["push","pullReplace","pullMerge"],"type":"string"}},{"name":"gitRepoUrl","required":false,"schema":{"type":"string"}},{"name":"branchName","required":false,"schema":{"description":"specify the branch to use of your git repo (defaults to \"main\")","type":"string"}}],"type":"object"},"typeCoverage":0,"rawType":"BundleConfig","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"wYSDtSkHIRhswaRs","name":"CreatedAt","slug":"created-at","relativePathFromProjectRoot":"/packages/sdk-db/src/index.ts","srcFileId":"/index","operationFolderName":"sdk-db","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/packages/sdk-db","operationName":"sdk-db","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"$ref":"#/definitions/Time"},"simplifiedSchema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"},"typeCoverage":0,"rawType":"CreatedAt","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"IKAfNnACFzgCQcUK","name":"Time","slug":"time","relativePathFromProjectRoot":"/packages/sdk-db/src/index.ts","srcFileId":"/index","operationFolderName":"sdk-db","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/packages/sdk-db","operationName":"sdk-db","description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"number","description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()"},"simplifiedSchema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"},"typeCoverage":0,"rawType":"Time","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"jMsRvWNkTSlVvmCv","name":"UpdatedAt","slug":"updated-at","relativePathFromProjectRoot":"/packages/sdk-db/src/index.ts","srcFileId":"/index","operationFolderName":"sdk-db","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/packages/sdk-db","operationName":"sdk-db","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"$ref":"#/definitions/Time"},"simplifiedSchema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"},"typeCoverage":0,"rawType":"UpdatedAt","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"eXKehxZGHHWKUCcr","name":"DeletedAt","slug":"deleted-at","relativePathFromProjectRoot":"/packages/sdk-db/src/index.ts","srcFileId":"/index","operationFolderName":"sdk-db","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/packages/sdk-db","operationName":"sdk-db","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"$ref":"#/definitions/Time"},"simplifiedSchema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"},"typeCoverage":0,"rawType":"DeletedAt","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"TDbLiqNgwRPtTiOm","name":"CreatedFirstAt","slug":"created-first-at","relativePathFromProjectRoot":"/packages/sdk-db/src/index.ts","srcFileId":"/index","operationFolderName":"sdk-db","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/packages/sdk-db","operationName":"sdk-db","description":"in some cases, data can be created before it was created in our system. In this case, use CreatedFirstAt if this information is important.","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"$ref":"#/definitions/Time","description":"in some cases, data can be created before it was created in our system. In this case, use CreatedFirstAt if this information is important."},"simplifiedSchema":{"description":"Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()","type":"number"},"typeCoverage":0,"rawType":"CreatedFirstAt","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"tncHpDNNdvXDxXES","name":"Slug","slug":"slug","relativePathFromProjectRoot":"/packages/sdk-db/src/index.ts","srcFileId":"/index","operationFolderName":"sdk-db","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/packages/sdk-db","operationName":"sdk-db","description":"use this for any identifier that's not an Id-type. Usually this is a kebab-case version of a written text, but it can also be a file path, for example.","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"string","description":"use this for any identifier that's not an Id-type. Usually this is a kebab-case version of a written text, but it can also be a file path, for example."},"simplifiedSchema":{"description":"use this for any identifier that's not an Id-type. Usually this is a kebab-case version of a written text, but it can also be a file path, for example.","type":"string"},"typeCoverage":0,"rawType":"Slug","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"BHQscnSSILyjkNEV","name":"Language","slug":"language","relativePathFromProjectRoot":"/packages/sdk-db/src/index.ts","srcFileId":"/index","operationFolderName":"sdk-db","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/packages/sdk-db","operationName":"sdk-db","description":"all currently supported languages","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"string","enum":["en","nl","np","pt","de","fr","es","it","no","sw","da","vn","in","vl","af"],"description":"all currently supported languages"},"simplifiedSchema":{"description":"all currently supported languages","enum":["en","nl","np","pt","de","fr","es","it","no","sw","da","vn","in","vl","af"],"type":"string"},"typeCoverage":0,"rawType":"Language","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"IfuqkwKEkOpALSxE","name":"FrontBackBundle","slug":"front-back-bundle","relativePathFromProjectRoot":"/packages/sdk-db/src/index.ts","srcFileId":"/index","operationFolderName":"sdk-db","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/packages/sdk-db","operationName":"sdk-db","description":"This type can specify a frontend and backend that belong to each other. it doesn't include all operations that the ui or server are dependent on, they are calculated separately","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"operations":{"type":"array","items":{"$ref":"#/definitions/OperationPrivacy"},"description":"any operation names that are not necesarily dependencies of the named front-back bundle but still need to be available."},"uiOperationName":{"type":"string","description":"(optional) main shared ui package of the frontend"},"appShellOperationNames":{"type":"array","items":{"type":"string"},"description":"which app shell(s) or app operations are there for the frontend?"},"serverOperationName":{"type":"string","description":"operation name for server, if this UI is connected to one"},"productionWebUrl":{"type":"string","description":"if there is a ui and it has a web-shell, and it is deployed somewhere into production, add the deployed domain here."},"envOperationName":{"type":"string","description":"if the server is to be deployed, specify the server-env package that exposes the server environment variables (JSON) to the ui\n\nBy default, uses \"server-env\" operation, which simply exposes a configuration env.json file. the generation of the bundle will set the \"remoteServer\" key in this env.json to the \"productionApiUrl\" so the deployed version can reach the api"},"productionApiUrl":{"type":"string","description":"if there is one, it should be specified here (without trailing slash)"},"endpointsAuthToken":{"type":"string","description":"if this is provided, all endpoints require this auth token to be provided, or the endpoints do not work\n\nif you wish to have a more extensive authentication method for your endpoints, make sure to create your own auth layer"}},"additionalProperties":false,"description":"This type can specify a frontend and backend that belong to each other. it doesn't include all operations that the ui or server are dependent on, they are calculated separately"},"simplifiedSchema":{"description":"This type can specify a frontend and backend that belong to each other. it doesn't include all operations that the ui or server are dependent on, they are calculated separately","properties":[{"name":"operations","required":false,"schema":{"description":"any operation names that are not necesarily dependencies of the named front-back bundle but still need to be available.","items":[{"schema":{"properties":[{"name":"operationName","required":true,"schema":{"type":"string"}},{"name":"privacy","required":true,"schema":{"description":"if public, everything will be kept\n\nif private, src and todo will be removed from bundle, unless it's a ui-es6 operation, because src is needed then. In that case, only \"todo\" will be deleted.","enum":["public","private"],"type":"string"}}],"type":"object"},"name":"OperationPrivacy"}],"type":"array"}},{"name":"uiOperationName","required":false,"schema":{"description":"(optional) main shared ui package of the frontend","type":"string"}},{"name":"appShellOperationNames","required":false,"schema":{"description":"which app shell(s) or app operations are there for the frontend?","items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"serverOperationName","required":false,"schema":{"description":"operation name for server, if this UI is connected to one","type":"string"}},{"name":"productionWebUrl","required":false,"schema":{"description":"if there is a ui and it has a web-shell, and it is deployed somewhere into production, add the deployed domain here.","type":"string"}},{"name":"envOperationName","required":false,"schema":{"description":"if the server is to be deployed, specify the server-env package that exposes the server environment variables (JSON) to the ui\n\nBy default, uses \"server-env\" operation, which simply exposes a configuration env.json file. the generation of the bundle will set the \"remoteServer\" key in this env.json to the \"productionApiUrl\" so the deployed version can reach the api","type":"string"}},{"name":"productionApiUrl","required":false,"schema":{"description":"if there is one, it should be specified here (without trailing slash)","type":"string"}},{"name":"endpointsAuthToken","required":false,"schema":{"description":"if this is provided, all endpoints require this auth token to be provided, or the endpoints do not work\n\nif you wish to have a more extensive authentication method for your endpoints, make sure to create your own auth layer","type":"string"}}],"type":"object"},"typeCoverage":0,"rawType":"FrontBackBundle","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"WhmNkfYWVrMOqrpq","name":"OperationPrivacy","slug":"operation-privacy","relativePathFromProjectRoot":"/packages/sdk-db/src/index.ts","srcFileId":"/index","operationFolderName":"sdk-db","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/packages/sdk-db","operationName":"sdk-db","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"operationName":{"type":"string"},"privacy":{"type":"string","enum":["public","private"],"description":"if public, everything will be kept\n\nif private, src and todo will be removed from bundle, unless it's a ui-es6 operation, because src is needed then. In that case, only \"todo\" will be deleted."}},"required":["operationName","privacy"],"additionalProperties":false},"simplifiedSchema":{"properties":[{"name":"operationName","required":true,"schema":{"type":"string"}},{"name":"privacy","required":true,"schema":{"description":"if public, everything will be kept\n\nif private, src and todo will be removed from bundle, unless it's a ui-es6 operation, because src is needed then. In that case, only \"todo\" will be deleted.","enum":["public","private"],"type":"string"}}],"type":"object"},"typeCoverage":0,"rawType":"OperationPrivacy","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"atKUkZByVsQCoqdN","name":"ProjectRelativeFolderPath","slug":"project-relative-folder-path","relativePathFromProjectRoot":"/packages/sdk-db/src/index.ts","srcFileId":"/index","operationFolderName":"sdk-db","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/packages/sdk-db","operationName":"sdk-db","description":"later this could be known by the frontend so it will render a ui to select a folder\n\nWe need to figure out how we can know all type types in between when getting the type definition schema, not only the final type. If I'm lucky there is a way to find it as a #ref in a consistent way.","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"string","description":"later this could be known by the frontend so it will render a ui to select a folder\n\nWe need to figure out how we can know all type types in between when getting the type definition schema, not only the final type. If I'm lucky there is a way to find it as a #ref in a consistent way."},"simplifiedSchema":{"description":"later this could be known by the frontend so it will render a ui to select a folder\n\nWe need to figure out how we can know all type types in between when getting the type definition schema, not only the final type. If I'm lucky there is a way to find it as a #ref in a consistent way.","type":"string"},"typeCoverage":0,"rawType":"ProjectRelativeFolderPath","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"kmDiEIrlpvHRkFpx","name":"ProjectRelativeFilePath","slug":"project-relative-file-path","relativePathFromProjectRoot":"/packages/sdk-db/src/index.ts","srcFileId":"/index","operationFolderName":"sdk-db","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/packages/sdk-db","operationName":"sdk-db","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"string"},"simplifiedSchema":{"type":"string"},"typeCoverage":0,"rawType":"ProjectRelativeFilePath","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"HoAqTiELSfxOiXhp","name":"InformationStrategy","slug":"information-strategy","relativePathFromProjectRoot":"/packages/sdk-db/src/index.ts","srcFileId":"/index","operationFolderName":"sdk-db","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/packages/sdk-db","operationName":"sdk-db","description":"push (default): take needed information from project and push to bundle (removing the existing info)\n\npullReplace: pull bundle and keep its information intact, not taking anything new from the OS, replacing all the information we had from these models in the OS\n\npullMerge: pull bundle and use its information in conjunction with the information we had in the OS. This option will merge both information sources, removing duplicate IDs\n\nNB: Later we may want to define this setting on a per-model basis!","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"string","enum":["push","pullReplace","pullMerge"],"description":"push (default): take needed information from project and push to bundle (removing the existing info)\n\npullReplace: pull bundle and keep its information intact, not taking anything new from the OS, replacing all the information we had from these models in the OS\n\npullMerge: pull bundle and use its information in conjunction with the information we had in the OS. This option will merge both information sources, removing duplicate IDs\n\nNB: Later we may want to define this setting on a per-model basis!"},"simplifiedSchema":{"description":"push (default): take needed information from project and push to bundle (removing the existing info)\n\npullReplace: pull bundle and keep its information intact, not taking anything new from the OS, replacing all the information we had from these models in the OS\n\npullMerge: pull bundle and use its information in conjunction with the information we had in the OS. This option will merge both information sources, removing duplicate IDs\n\nNB: Later we may want to define this setting on a per-model basis!","enum":["push","pullReplace","pullMerge"],"type":"string"},"typeCoverage":0,"rawType":"InformationStrategy","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"YMUxPJPEQTKfKtOE","name":"Id","slug":"id","relativePathFromProjectRoot":"/packages/sdk-db/src/index.ts","srcFileId":"/index","operationFolderName":"sdk-db","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/packages/sdk-db","operationName":"sdk-db","description":"azAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` {  \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"string","description":"azAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` {  \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this."},"simplifiedSchema":{"description":"azAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` {  \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.","type":"string"},"typeCoverage":0,"rawType":"Id","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"ILcVgiaOChCWHjDP","name":"OperationIndex","slug":"operation-index","relativePathFromProjectRoot":"/packages/sdk-db/src/index.ts","srcFileId":"/index","operationFolderName":"sdk-db","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/packages/sdk-db","operationName":"sdk-db","description":"\ncontains all calculated info about an operation that needs to be retreived often: some package-only things, but also a collection of all indexes of all files","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","additionalProperties":false,"properties":{"updatedAt":{"type":"number"},"packageName":{"type":"string","description":"name of the package in package.json"},"folderName":{"type":"string","description":"name of the operation folder"},"relativeOperationLocationPath":{"type":"string","description":"relative path to the operation (does not include operation folder itself)\n\nrelative from project root"},"classification":{"$ref":"#/definitions/OperationClassification"},"packageDependencies":{"type":"array","items":{"type":"string"},"description":"package dependency names (non-operation)"},"operationDependencies":{"type":"array","items":{"type":"string"},"description":"operation dependency names"},"coreDependencies":{"type":"array","items":{"type":"string"},"description":"core dependencies (e.g. `path` and `fs`)"},"id":{"type":"string","description":"here for compatibility, should implement..."},"createdAt":{"type":"number"},"buildSucceeded":{"type":"boolean"},"dependenciesBuildsFailed":{"type":"boolean"},"indexImportExportError":{"type":"string"},"lintProblems":{"type":"array","items":{"type":"string"}},"indexInteracesErrors":{"type":"array","items":{"type":"string"}},"indexErrors":{"type":"array","items":{"type":"string"}},"size":{"$ref":"#/definitions/FolderSummary"}},"required":["buildSucceeded","classification","coreDependencies","createdAt","dependenciesBuildsFailed","folderName","indexErrors","indexImportExportError","indexInteracesErrors","lintProblems","operationDependencies","packageDependencies","packageName","relativeOperationLocationPath","size","updatedAt"],"description":"--- defaultDbStorageMethod: jsonSingle\n---\n\ncontains all calculated info about an operation that needs to be retreived often: some package-only things, but also a collection of all indexes of all files"},"simplifiedSchema":{"description":"--- defaultDbStorageMethod: jsonSingle\n---\n\ncontains all calculated info about an operation that needs to be retreived often: some package-only things, but also a collection of all indexes of all files","properties":[{"name":"updatedAt","required":true,"schema":{"type":"number"}},{"name":"packageName","required":true,"schema":{"description":"name of the package in package.json","type":"string"}},{"name":"folderName","required":true,"schema":{"description":"name of the operation folder","type":"string"}},{"name":"relativeOperationLocationPath","required":true,"schema":{"description":"relative path to the operation (does not include operation folder itself)\n\nrelative from project root","type":"string"}},{"name":"classification","required":true,"schema":{"description":"# Classification\n\nTODO: think about what the differences are and how we need to change processes to make it all work good\n\n### Possible values\n\njs: only js (no node) (well, ts of course)\n\nnode: includes other node packages, operations, core-imports, or globals.\n\nserver: exposes something on some port when it is ran and uses node code\n\nweb: uses react and exposes something on some port when it is ran\n\napp: uses react-native and exposes something on some port when it is ran\n\nui-es6: uses react (with (native)), which main entry points to typescript es6 files (this ui package cannot be built, should be transpiled)\n\nui-es5: ui which main entry points to javascript es5 files (this ui package can be built)","enum":["js","node","server","web","app","ui-es6","ui-es5"],"type":"string"}},{"name":"packageDependencies","required":true,"schema":{"description":"package dependency names (non-operation)","items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"operationDependencies","required":true,"schema":{"description":"operation dependency names","items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"coreDependencies","required":true,"schema":{"description":"core dependencies (e.g. `path` and `fs`)","items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"id","required":false,"schema":{"description":"here for compatibility, should implement...","type":"string"}},{"name":"createdAt","required":true,"schema":{"type":"number"}},{"name":"buildSucceeded","required":true,"schema":{"type":"boolean"}},{"name":"dependenciesBuildsFailed","required":true,"schema":{"type":"boolean"}},{"name":"indexImportExportError","required":true,"schema":{"type":"string"}},{"name":"lintProblems","required":true,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"indexInteracesErrors","required":true,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"indexErrors","required":true,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"size","required":true,"schema":{"description":"objective size measurements of all files in a folder\n\nsummary for a folder should contain file-summaries for different filetypes and an overal file summary","properties":[{"name":"size","required":true,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"textSize","required":true,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"dataSize","required":true,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"codeSize","required":true,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}}],"type":"object"}}],"type":"object"},"typeCoverage":0,"rawType":"OperationIndex","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"duROVBnEiueMvUkW","name":"OperationClassification","slug":"operation-classification","relativePathFromProjectRoot":"/packages/sdk-db/src/index.ts","srcFileId":"/index","operationFolderName":"sdk-db","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/packages/sdk-db","operationName":"sdk-db","description":"# Classification\n\nTODO: think about what the differences are and how we need to change processes to make it all work good\n\n### Possible values\n\njs: only js (no node) (well, ts of course)\n\nnode: includes other node packages, operations, core-imports, or globals.\n\nserver: exposes something on some port when it is ran and uses node code\n\nweb: uses react and exposes something on some port when it is ran\n\napp: uses react-native and exposes something on some port when it is ran\n\nui-es6: uses react (with (native)), which main entry points to typescript es6 files (this ui package cannot be built, should be transpiled)\n\nui-es5: ui which main entry points to javascript es5 files (this ui package can be built)","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"string","enum":["js","node","server","web","app","ui-es6","ui-es5"],"description":"# Classification\n\nTODO: think about what the differences are and how we need to change processes to make it all work good\n\n### Possible values\n\njs: only js (no node) (well, ts of course)\n\nnode: includes other node packages, operations, core-imports, or globals.\n\nserver: exposes something on some port when it is ran and uses node code\n\nweb: uses react and exposes something on some port when it is ran\n\napp: uses react-native and exposes something on some port when it is ran\n\nui-es6: uses react (with (native)), which main entry points to typescript es6 files (this ui package cannot be built, should be transpiled)\n\nui-es5: ui which main entry points to javascript es5 files (this ui package can be built)"},"simplifiedSchema":{"description":"# Classification\n\nTODO: think about what the differences are and how we need to change processes to make it all work good\n\n### Possible values\n\njs: only js (no node) (well, ts of course)\n\nnode: includes other node packages, operations, core-imports, or globals.\n\nserver: exposes something on some port when it is ran and uses node code\n\nweb: uses react and exposes something on some port when it is ran\n\napp: uses react-native and exposes something on some port when it is ran\n\nui-es6: uses react (with (native)), which main entry points to typescript es6 files (this ui package cannot be built, should be transpiled)\n\nui-es5: ui which main entry points to javascript es5 files (this ui package can be built)","enum":["js","node","server","web","app","ui-es6","ui-es5"],"type":"string"},"typeCoverage":0,"rawType":"OperationClassification","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"EauCeoxfjrXdeEdW","name":"FolderSummary","slug":"folder-summary","relativePathFromProjectRoot":"/packages/sdk-db/src/index.ts","srcFileId":"/index","operationFolderName":"sdk-db","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/packages/sdk-db","operationName":"sdk-db","description":"objective size measurements of all files in a folder\n\nsummary for a folder should contain file-summaries for different filetypes and an overal file summary","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"size":{"$ref":"#/definitions/SizeSummary"},"textSize":{"$ref":"#/definitions/SizeSummary"},"dataSize":{"$ref":"#/definitions/SizeSummary"},"codeSize":{"$ref":"#/definitions/SizeSummary"}},"required":["size","textSize","dataSize","codeSize"],"additionalProperties":false,"description":"objective size measurements of all files in a folder\n\nsummary for a folder should contain file-summaries for different filetypes and an overal file summary"},"simplifiedSchema":{"description":"objective size measurements of all files in a folder\n\nsummary for a folder should contain file-summaries for different filetypes and an overal file summary","properties":[{"name":"size","required":true,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"textSize","required":true,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"dataSize","required":true,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"codeSize","required":true,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}}],"type":"object"},"typeCoverage":0,"rawType":"FolderSummary","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"ehxIxeVXDjTkkvGH","name":"SizeSummary","slug":"size-summary","relativePathFromProjectRoot":"/packages/sdk-db/src/index.ts","srcFileId":"/index","operationFolderName":"sdk-db","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/packages/sdk-db","operationName":"sdk-db","description":"type interface that can be used to summarize multiple files","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"numberOfFiles":{"type":"number","description":"if this is about multiple files, the number of files is specified here"},"characters":{"type":"number","description":"amount of characters"},"lines":{"type":"number","description":"amount of lines"},"bytes":{"type":"number","description":"amount of bytes"},"linesPerFile":{"type":"number","description":"rounded, amount of lines per file (averaged)"},"charactersPerfLine":{"type":"number","description":"rounded, amount of characters per line (averaged)"},"bytesPerCharacter":{"type":"number","description":"rounded, amount of bytes per character"}},"required":["characters","lines","bytes","linesPerFile","charactersPerfLine","bytesPerCharacter"],"additionalProperties":false,"description":"type interface that can be used to summarize multiple files"},"simplifiedSchema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"},"typeCoverage":0,"rawType":"SizeSummary","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"epiPBbMHafPFLMYG","name":"PackageJSON","slug":"package-json","relativePathFromProjectRoot":"/packages/sdk-db/src/index.ts","srcFileId":"/index","operationFolderName":"sdk-db","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/packages/sdk-db","operationName":"sdk-db","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"id":{"type":"string"},"path":{"type":"string"},"name":{"type":"string"},"main":{"type":"string"},"source":{"type":"string"},"description":{"type":"string"},"version":{"type":"string"},"private":{"type":"boolean"},"author":{"anyOf":[{"type":"string"},{"type":"object","additionalProperties":{"type":"string"}}]},"repository":{"anyOf":[{"type":"string"},{"type":"object","additionalProperties":{"type":"string"}}]},"homepage":{"type":"string"},"dependencies":{"$ref":"#/definitions/PackageInfoObject"},"devDependencies":{"$ref":"#/definitions/PackageInfoObject"},"peerDependencies":{"$ref":"#/definitions/PackageInfoObject"},"bin":{"type":"object","additionalProperties":{"type":"string"}},"workspaces":{"type":"array","items":{"type":"string"}},"type":{"$ref":"#/definitions/OperationClassification"},"sensible":{"$ref":"#/definitions/SensibleConfig"},"operation":{"$ref":"#/definitions/OperationConfig"}},"required":["path","repository"],"additionalProperties":false,"description":"--- defaultDbStorageMethod: jsonSingle\n---"},"simplifiedSchema":{"description":"--- defaultDbStorageMethod: jsonSingle\n---","properties":[{"name":"id","required":false,"schema":{"type":"string"}},{"name":"path","required":true,"schema":{"type":"string"}},{"name":"name","required":false,"schema":{"type":"string"}},{"name":"main","required":false,"schema":{"type":"string"}},{"name":"source","required":false,"schema":{"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"version","required":false,"schema":{"type":"string"}},{"name":"private","required":false,"schema":{"type":"boolean"}},{"name":"author","required":false,"schema":{"properties":[],"type":"object"}},{"name":"repository","required":true,"schema":{"properties":[],"type":"object"}},{"name":"homepage","required":false,"schema":{"type":"string"}},{"name":"dependencies","required":false,"schema":{"properties":[],"type":"object"}},{"name":"devDependencies","required":false,"schema":{"properties":[],"type":"object"}},{"name":"peerDependencies","required":false,"schema":{"properties":[],"type":"object"}},{"name":"bin","required":false,"schema":{"properties":[],"type":"object"}},{"name":"workspaces","required":false,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"type","required":false,"schema":{"description":"# Classification\n\nTODO: think about what the differences are and how we need to change processes to make it all work good\n\n### Possible values\n\njs: only js (no node) (well, ts of course)\n\nnode: includes other node packages, operations, core-imports, or globals.\n\nserver: exposes something on some port when it is ran and uses node code\n\nweb: uses react and exposes something on some port when it is ran\n\napp: uses react-native and exposes something on some port when it is ran\n\nui-es6: uses react (with (native)), which main entry points to typescript es6 files (this ui package cannot be built, should be transpiled)\n\nui-es5: ui which main entry points to javascript es5 files (this ui package can be built)","enum":["js","node","server","web","app","ui-es6","ui-es5"],"type":"string"}},{"name":"sensible","required":false,"schema":{"description":"Sensible-global configurations","properties":[{"name":"isSensibleProject","required":true,"schema":{"type":"boolean"}}],"type":"object"}},{"name":"operation","required":false,"schema":{"description":"anything configurable about the operation.\n\nThis can live in operation.json or as a prop in package.json.","properties":[{"name":"indirectDependencies","required":false,"schema":{"description":"Sometimes you are using function in a UI, which cannot be inferred with imports because they are used indirectly via an api. Here you can specify which operations on the backend are needed for an operation (ui mostly)\n\nThis array is simply a list of operation names needed for this operation that are not imported.\n\nNB: no need to specify things here that you also import in this operation, because these are already automatically detected.","items":[{"schema":{"type":"string"},"name":null}],"type":"array"}}],"type":"object"}}],"type":"object"},"typeCoverage":0,"rawType":"PackageJSON","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"khyOqnOOmaoqxNLD","name":"PackageInfoObject","slug":"package-info-object","relativePathFromProjectRoot":"/packages/sdk-db/src/index.ts","srcFileId":"/index","operationFolderName":"sdk-db","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/packages/sdk-db","operationName":"sdk-db","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","additionalProperties":{"type":"string"}},"simplifiedSchema":{"properties":[],"type":"object"},"typeCoverage":0,"rawType":"PackageInfoObject","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"QRfaEjdKJCgQATTi","name":"SensibleConfig","slug":"sensible-config","relativePathFromProjectRoot":"/packages/sdk-db/src/index.ts","srcFileId":"/index","operationFolderName":"sdk-db","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/packages/sdk-db","operationName":"sdk-db","description":"Sensible-global configurations","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"isSensibleProject":{"type":"boolean"}},"required":["isSensibleProject"],"additionalProperties":false,"description":"Sensible-global configurations"},"simplifiedSchema":{"description":"Sensible-global configurations","properties":[{"name":"isSensibleProject","required":true,"schema":{"type":"boolean"}}],"type":"object"},"typeCoverage":0,"rawType":"SensibleConfig","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"RYjDwHNlQnNUbhKj","name":"OperationConfig","slug":"operation-config","relativePathFromProjectRoot":"/packages/sdk-db/src/index.ts","srcFileId":"/index","operationFolderName":"sdk-db","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/packages/sdk-db","operationName":"sdk-db","description":"anything configurable about the operation.\n\nThis can live in operation.json or as a prop in package.json.","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"indirectDependencies":{"type":"array","items":{"type":"string"},"description":"Sometimes you are using function in a UI, which cannot be inferred with imports because they are used indirectly via an api. Here you can specify which operations on the backend are needed for an operation (ui mostly)\n\nThis array is simply a list of operation names needed for this operation that are not imported.\n\nNB: no need to specify things here that you also import in this operation, because these are already automatically detected."}},"additionalProperties":false,"description":"anything configurable about the operation.\n\nThis can live in operation.json or as a prop in package.json."},"simplifiedSchema":{"description":"anything configurable about the operation.\n\nThis can live in operation.json or as a prop in package.json.","properties":[{"name":"indirectDependencies","required":false,"schema":{"description":"Sometimes you are using function in a UI, which cannot be inferred with imports because they are used indirectly via an api. Here you can specify which operations on the backend are needed for an operation (ui mostly)\n\nThis array is simply a list of operation names needed for this operation that are not imported.\n\nNB: no need to specify things here that you also import in this operation, because these are already automatically detected.","items":[{"schema":{"type":"string"},"name":null}],"type":"array"}}],"type":"object"},"typeCoverage":0,"rawType":"OperationConfig","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"QoOYyjjoGOFrNMHy","name":"TsComment","slug":"ts-comment","relativePathFromProjectRoot":"/packages/sdk-db/src/index.ts","srcFileId":"/index","operationFolderName":"sdk-db","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/packages/sdk-db","operationName":"sdk-db","description":"comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\nspecial line prefixes:\n- TODO:\n- DISCUSSION:\n- IDEA:\n- LATER:\n- NB:\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"relativeOperationBasePathFromProjectRoot":{"type":"string","description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript"},"relativeFilePathFromSrc":{"type":"string","description":"relative file path from the operation src\n\ne.g. general.ts"},"srcFileId":{"type":"string","description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\""},"operationName":{"type":"string","description":"operation package.json name"},"operationFolderName":{"type":"string","description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)"},"relativePathFromProjectRoot":{"type":"string","description":"relative file or folder path from the project root"},"id":{"type":"string","description":"unique id of the model"},"name":{"type":"string","description":"name (identifier) of the model"},"slug":{"type":"string","description":"kebab-case variant of the name"},"comment":{"$ref":"#/definitions/Markdown","description":"the content of the comment in markdown, without frontmatter"},"parameters":{"$ref":"#/definitions/FrontMatter","description":"parameters destructured from the frontmatter of the parsed markdown (if comment is not a oneliner, otherwise it'll be empty)"},"types":{"type":"array","items":{"$ref":"#/definitions/CommentType"},"description":"These are the type indicators that were found in this single or multiline comment. Can be multiple."},"firstLine":{"type":"number","description":"first line of the comment"},"lastLine":{"type":"number","description":"last line of the comment"},"statementName":{"type":"string","description":"statement name the comment belongs to"},"rawStatement":{"type":"string","description":"raw statement text the comment belongs to"}},"required":["comment","firstLine","id","lastLine","name","operationFolderName","parameters","relativeFilePathFromSrc","relativeOperationBasePathFromProjectRoot","relativePathFromProjectRoot","slug","srcFileId","types"],"additionalProperties":false,"description":"comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\nspecial line prefixes:\n- TODO:\n- DISCUSSION:\n- IDEA:\n- LATER:\n- NB:\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!"},"simplifiedSchema":{"description":"comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\nspecial line prefixes:\n- TODO:\n- DISCUSSION:\n- IDEA:\n- LATER:\n- NB:\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!","properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"comment","required":true,"schema":{"description":"a string that is known to contain markdown.","type":"string"}},{"name":"parameters","required":true,"schema":{"description":"TODO: either make a special category crud for the category model would be nice maybe (especially a backend that makes sure all references stay updated would be epic)","properties":[],"type":"object"}},{"name":"types","required":true,"schema":{"description":"These are the type indicators that were found in this single or multiline comment. Can be multiple.","items":[{"schema":{"enum":["todo","discussion","idea","later","nb"],"type":"string"},"name":"CommentType"}],"type":"array"}},{"name":"firstLine","required":true,"schema":{"description":"first line of the comment","type":"number"}},{"name":"lastLine","required":true,"schema":{"description":"last line of the comment","type":"number"}},{"name":"statementName","required":false,"schema":{"description":"statement name the comment belongs to","type":"string"}},{"name":"rawStatement","required":false,"schema":{"description":"raw statement text the comment belongs to","type":"string"}}],"type":"object"},"typeCoverage":0,"rawType":"TsComment","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"lvVNqgQvhiQVibNK","name":"Markdown","slug":"markdown","relativePathFromProjectRoot":"/packages/sdk-db/src/index.ts","srcFileId":"/index","operationFolderName":"sdk-db","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/packages/sdk-db","operationName":"sdk-db","description":"a string that is known to contain markdown.","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"string","description":"a string that is known to contain markdown."},"simplifiedSchema":{"description":"a string that is known to contain markdown.","type":"string"},"typeCoverage":0,"rawType":"Markdown","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"tDNbNQmyOmAaaQOs","name":"FrontMatter","slug":"front-matter","relativePathFromProjectRoot":"/packages/sdk-db/src/index.ts","srcFileId":"/index","operationFolderName":"sdk-db","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/packages/sdk-db","operationName":"sdk-db","description":"TODO: either make a special category crud for the category model would be nice maybe (especially a backend that makes sure all references stay updated would be epic)","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","additionalProperties":{"anyOf":[{"type":"string"},{"type":"number"},{"type":"null"},{"type":"boolean"},{"not":{}}]},"description":"TODO: either make a special category crud for the category model would be nice maybe (especially a backend that makes sure all references stay updated would be epic)"},"simplifiedSchema":{"description":"TODO: either make a special category crud for the category model would be nice maybe (especially a backend that makes sure all references stay updated would be epic)","properties":[],"type":"object"},"typeCoverage":0,"rawType":"FrontMatter","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"szGpyppBnEXqjopk","name":"CommentType","slug":"comment-type","relativePathFromProjectRoot":"/packages/sdk-db/src/index.ts","srcFileId":"/index","operationFolderName":"sdk-db","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/packages/sdk-db","operationName":"sdk-db","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"string","enum":["todo","discussion","idea","later","nb"]},"simplifiedSchema":{"enum":["todo","discussion","idea","later","nb"],"type":"string"},"typeCoverage":0,"rawType":"CommentType","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"SfYDiLAFrWYqvFpW","name":"TsFunction","slug":"ts-function","relativePathFromProjectRoot":"/packages/sdk-db/src/index.ts","srcFileId":"/index","operationFolderName":"sdk-db","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/packages/sdk-db","operationName":"sdk-db","description":"Interface for arrow functions and normal functions","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"relativeOperationBasePathFromProjectRoot":{"type":"string","description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript"},"relativeFilePathFromSrc":{"type":"string","description":"relative file path from the operation src\n\ne.g. general.ts"},"srcFileId":{"type":"string","description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\""},"operationName":{"type":"string","description":"operation package.json name"},"operationFolderName":{"type":"string","description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)"},"relativePathFromProjectRoot":{"type":"string","description":"relative file or folder path from the project root"},"id":{"type":"string","description":"unique id of the model"},"name":{"type":"string","description":"name (identifier) of the model"},"slug":{"type":"string","description":"kebab-case variant of the name"},"description":{"$ref":"#/definitions/Markdown","description":"parsed comment from doc-comment"},"rawText":{"type":"string","description":"raw text of the function"},"commentsInside":{"type":"array","items":{"$ref":"#/definitions/TsComment"},"description":"all comments found in a function and the node that they belong to"},"returnType":{"$ref":"#/definitions/TypeInfo","description":"return type JSON Schema definition"},"parameters":{"type":"array","items":{"$ref":"#/definitions/FunctionParameter"},"description":"parameters the function takes as its arguments, if any"},"size":{"$ref":"#/definitions/SizeSummary","description":"size of this function (comments + code)"},"commentSize":{"$ref":"#/definitions/SizeSummary","description":"size of the comments of this function (including surrounding comments)"},"codeSize":{"$ref":"#/definitions/SizeSummary","description":"size of the code inside the function (without comments)"},"cumulativeSize":{"$ref":"#/definitions/SizeSummary","description":"tells you the size of itself and all its dependencies that are used that are also part of an operation, recursively"},"cumulativeCommentSize":{"$ref":"#/definitions/SizeSummary"},"cumulativeCodeSize":{"$ref":"#/definitions/SizeSummary"},"maxIndentationDepth":{"type":"number","description":"maximum amount of times indedented in this function\n\ngood for determining the complexity and finding code that can be simplified/destructured into smaller pieces"},"dependantFiles":{"type":"array","items":{"type":"string"},"description":"finds all files that import this function\n\nNB: this is not indexed because this information has nothing to do with the operation itself, but the exposure to the broader monorepo. This is calculated on the fly."}},"required":["commentsInside","id","maxIndentationDepth","name","operationFolderName","relativeFilePathFromSrc","relativeOperationBasePathFromProjectRoot","relativePathFromProjectRoot","returnType","size","slug","srcFileId"],"additionalProperties":false,"description":"Interface for arrow functions and normal functions"},"simplifiedSchema":{"description":"Interface for arrow functions and normal functions","properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"description","required":false,"schema":{"description":"a string that is known to contain markdown.","type":"string"}},{"name":"rawText","required":false,"schema":{"description":"raw text of the function","type":"string"}},{"name":"commentsInside","required":true,"schema":{"description":"all comments found in a function and the node that they belong to","items":[{"schema":{"description":"comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\nspecial line prefixes:\n- TODO:\n- DISCUSSION:\n- IDEA:\n- LATER:\n- NB:\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!","properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"comment","required":true,"schema":{"description":"a string that is known to contain markdown.","type":"string"}},{"name":"parameters","required":true,"schema":{"description":"TODO: either make a special category crud for the category model would be nice maybe (especially a backend that makes sure all references stay updated would be epic)","properties":[],"type":"object"}},{"name":"types","required":true,"schema":{"description":"These are the type indicators that were found in this single or multiline comment. Can be multiple.","items":[{"schema":{"enum":["todo","discussion","idea","later","nb"],"type":"string"},"name":"CommentType"}],"type":"array"}},{"name":"firstLine","required":true,"schema":{"description":"first line of the comment","type":"number"}},{"name":"lastLine","required":true,"schema":{"description":"last line of the comment","type":"number"}},{"name":"statementName","required":false,"schema":{"description":"statement name the comment belongs to","type":"string"}},{"name":"rawStatement","required":false,"schema":{"description":"raw statement text the comment belongs to","type":"string"}}],"type":"object"},"name":"TsComment"}],"type":"array"}},{"name":"returnType","required":true,"schema":{"description":"all info that should always be collected when indexing any type interface","properties":[{"name":"typeDefinition","required":false,"schema":{"properties":[{"name":"$id","required":false,"schema":{"type":"string"}},{"name":"$ref","required":false,"schema":{"type":"string"}},{"name":"$schema","required":false,"schema":{"description":"Meta schema\n\nRecommended values:\n- 'http://json-schema.org/schema#'\n- 'http://json-schema.org/hyper-schema#'\n- 'http://json-schema.org/draft-07/schema#'\n- 'http://json-schema.org/draft-07/hyper-schema#'","type":"string"}},{"name":"$comment","required":false,"schema":{"type":"string"}},{"name":"$defs","required":false,"schema":{"properties":[],"type":"object"}},{"name":"type","required":false,"schema":{"properties":[],"type":"object"}},{"name":"enum","required":false,"schema":{"items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"const","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"multipleOf","required":false,"schema":{"type":"number"}},{"name":"maximum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMaximum","required":false,"schema":{"type":"number"}},{"name":"minimum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMinimum","required":false,"schema":{"type":"number"}},{"name":"maxLength","required":false,"schema":{"type":"number"}},{"name":"minLength","required":false,"schema":{"type":"number"}},{"name":"pattern","required":false,"schema":{"type":"string"}},{"name":"items","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalItems","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"maxItems","required":false,"schema":{"type":"number"}},{"name":"minItems","required":false,"schema":{"type":"number"}},{"name":"uniqueItems","required":false,"schema":{"type":"boolean"}},{"name":"contains","required":false,"schema":{"circularRefName":"JSONSchema7","properties":[],"type":"object"}},{"name":"maxProperties","required":false,"schema":{"type":"number"}},{"name":"minProperties","required":false,"schema":{"type":"number"}},{"name":"required","required":false,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"properties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"patternProperties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalProperties","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"dependencies","required":false,"schema":{"properties":[],"type":"object"}},{"name":"propertyNames","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"if","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"then","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"else","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"allOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"anyOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"oneOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"not","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"format","required":false,"schema":{"type":"string"}},{"name":"contentMediaType","required":false,"schema":{"type":"string"}},{"name":"contentEncoding","required":false,"schema":{"type":"string"}},{"name":"definitions","required":false,"schema":{"properties":[],"type":"object"}},{"name":"title","required":false,"schema":{"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"default","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"readOnly","required":false,"schema":{"type":"boolean"}},{"name":"writeOnly","required":false,"schema":{"type":"boolean"}},{"name":"examples","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}}],"type":"object"}},{"name":"simplifiedSchema","required":false,"schema":{"description":"JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form","properties":[{"name":"type","required":true,"schema":{"enum":["string","number","boolean","object","array","null"],"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"circularRefName","required":false,"schema":{"description":"sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here","type":"string"}},{"name":"enum","required":false,"schema":{"description":"in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think","items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"properties","required":false,"schema":{"description":"in case of object, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}},{"name":"required","required":true,"schema":{"description":"NB: can't we put this in the SimplifiedSchema itself?","type":"boolean"}}],"type":"object"},"name":"SimplifiedSchemaProperty"}],"type":"array"}},{"name":"items","required":false,"schema":{"description":"in case of arrays, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"description":"name in case of it being a reference, otherwise null","type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}}],"type":"object"},"name":"SimplifiedSchemaItem"}],"type":"array"}}],"type":"object"}},{"name":"isObject","required":true,"schema":{"description":"if the type is an object, this is true. false if it's an array","type":"boolean"}},{"name":"isArray","required":true,"schema":{"description":"if the type is an array, this is true","type":"boolean"}},{"name":"isPrimitive","required":true,"schema":{"description":"if it's a primitive type like \"string\", \"number\", \"boolean\", \"null\" | \"undefined\"","type":"boolean"}},{"name":"isEnum","required":true,"schema":{"description":"will be true for any primitive conjunction types","type":"boolean"}},{"name":"isEnumLiteral","required":true,"schema":{"description":"will be true for string conjunction types","type":"boolean"}},{"name":"typeCoverage","required":true,"schema":{"description":"quantification of coverage of the specified type or subtypes in our database.","type":"number"}},{"name":"rawType","required":true,"schema":{"description":"raw type string","type":"string"}}],"type":"object"}},{"name":"parameters","required":false,"schema":{"description":"parameters the function takes as its arguments, if any","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"type":"string"}},{"name":"schema","required":false,"schema":{"properties":[{"name":"$id","required":false,"schema":{"type":"string"}},{"name":"$ref","required":false,"schema":{"type":"string"}},{"name":"$schema","required":false,"schema":{"description":"Meta schema\n\nRecommended values:\n- 'http://json-schema.org/schema#'\n- 'http://json-schema.org/hyper-schema#'\n- 'http://json-schema.org/draft-07/schema#'\n- 'http://json-schema.org/draft-07/hyper-schema#'","type":"string"}},{"name":"$comment","required":false,"schema":{"type":"string"}},{"name":"$defs","required":false,"schema":{"properties":[],"type":"object"}},{"name":"type","required":false,"schema":{"properties":[],"type":"object"}},{"name":"enum","required":false,"schema":{"items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"const","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"multipleOf","required":false,"schema":{"type":"number"}},{"name":"maximum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMaximum","required":false,"schema":{"type":"number"}},{"name":"minimum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMinimum","required":false,"schema":{"type":"number"}},{"name":"maxLength","required":false,"schema":{"type":"number"}},{"name":"minLength","required":false,"schema":{"type":"number"}},{"name":"pattern","required":false,"schema":{"type":"string"}},{"name":"items","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalItems","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"maxItems","required":false,"schema":{"type":"number"}},{"name":"minItems","required":false,"schema":{"type":"number"}},{"name":"uniqueItems","required":false,"schema":{"type":"boolean"}},{"name":"contains","required":false,"schema":{"circularRefName":"JSONSchema7","properties":[],"type":"object"}},{"name":"maxProperties","required":false,"schema":{"type":"number"}},{"name":"minProperties","required":false,"schema":{"type":"number"}},{"name":"required","required":false,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"properties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"patternProperties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalProperties","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"dependencies","required":false,"schema":{"properties":[],"type":"object"}},{"name":"propertyNames","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"if","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"then","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"else","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"allOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"anyOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"oneOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"not","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"format","required":false,"schema":{"type":"string"}},{"name":"contentMediaType","required":false,"schema":{"type":"string"}},{"name":"contentEncoding","required":false,"schema":{"type":"string"}},{"name":"definitions","required":false,"schema":{"properties":[],"type":"object"}},{"name":"title","required":false,"schema":{"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"default","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"readOnly","required":false,"schema":{"type":"boolean"}},{"name":"writeOnly","required":false,"schema":{"type":"boolean"}},{"name":"examples","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}}],"type":"object"}},{"name":"simplifiedSchema","required":false,"schema":{"description":"JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form","properties":[{"name":"type","required":true,"schema":{"enum":["string","number","boolean","object","array","null"],"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"circularRefName","required":false,"schema":{"description":"sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here","type":"string"}},{"name":"enum","required":false,"schema":{"description":"in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think","items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"properties","required":false,"schema":{"description":"in case of object, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}},{"name":"required","required":true,"schema":{"description":"NB: can't we put this in the SimplifiedSchema itself?","type":"boolean"}}],"type":"object"},"name":"SimplifiedSchemaProperty"}],"type":"array"}},{"name":"items","required":false,"schema":{"description":"in case of arrays, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"description":"name in case of it being a reference, otherwise null","type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}}],"type":"object"},"name":"SimplifiedSchemaItem"}],"type":"array"}}],"type":"object"}},{"name":"required","required":true,"schema":{"type":"boolean"}}],"type":"object"},"name":"FunctionParameter"}],"type":"array"}},{"name":"size","required":true,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"commentSize","required":false,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"codeSize","required":false,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"cumulativeSize","required":false,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"cumulativeCommentSize","required":false,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"cumulativeCodeSize","required":false,"schema":{"description":"type interface that can be used to summarize multiple files","properties":[{"name":"numberOfFiles","required":false,"schema":{"description":"if this is about multiple files, the number of files is specified here","type":"number"}},{"name":"characters","required":true,"schema":{"description":"amount of characters","type":"number"}},{"name":"lines","required":true,"schema":{"description":"amount of lines","type":"number"}},{"name":"bytes","required":true,"schema":{"description":"amount of bytes","type":"number"}},{"name":"linesPerFile","required":true,"schema":{"description":"rounded, amount of lines per file (averaged)","type":"number"}},{"name":"charactersPerfLine","required":true,"schema":{"description":"rounded, amount of characters per line (averaged)","type":"number"}},{"name":"bytesPerCharacter","required":true,"schema":{"description":"rounded, amount of bytes per character","type":"number"}}],"type":"object"}},{"name":"maxIndentationDepth","required":true,"schema":{"description":"maximum amount of times indedented in this function\n\ngood for determining the complexity and finding code that can be simplified/destructured into smaller pieces","type":"number"}},{"name":"dependantFiles","required":false,"schema":{"description":"finds all files that import this function\n\nNB: this is not indexed because this information has nothing to do with the operation itself, but the exposure to the broader monorepo. This is calculated on the fly.","items":[{"schema":{"type":"string"},"name":null}],"type":"array"}}],"type":"object"},"typeCoverage":0,"rawType":"TsFunction","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"mZnrZVBkDQpQkgpw","name":"TypeInfo","slug":"type-info","relativePathFromProjectRoot":"/packages/sdk-db/src/index.ts","srcFileId":"/index","operationFolderName":"sdk-db","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/packages/sdk-db","operationName":"sdk-db","description":"all info that should always be collected when indexing any type interface","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"typeDefinition":{"$ref":"#/definitions/Schema","description":"JSON schema definition of a type interface\n\n\nSome info about the Schema:\n\n- if the type is an object, there should be properties\n- if the type is an array, there should be items"},"simplifiedSchema":{"$ref":"#/definitions/SimplifiedSchema"},"isObject":{"type":"boolean","description":"if the type is an object, this is true. false if it's an array"},"isArray":{"type":"boolean","description":"if the type is an array, this is true"},"isPrimitive":{"type":"boolean","description":"if it's a primitive type like \"string\", \"number\", \"boolean\", \"null\" | \"undefined\""},"isEnum":{"type":"boolean","description":"will be true for any primitive conjunction types"},"isEnumLiteral":{"type":"boolean","description":"will be true for string conjunction types"},"typeCoverage":{"$ref":"#/definitions/TypeCoverage"},"rawType":{"type":"string","description":"raw type string"}},"required":["isObject","isArray","isPrimitive","isEnum","isEnumLiteral","typeCoverage","rawType"],"additionalProperties":false,"description":"all info that should always be collected when indexing any type interface"},"simplifiedSchema":{"description":"all info that should always be collected when indexing any type interface","properties":[{"name":"typeDefinition","required":false,"schema":{"properties":[{"name":"$id","required":false,"schema":{"type":"string"}},{"name":"$ref","required":false,"schema":{"type":"string"}},{"name":"$schema","required":false,"schema":{"description":"Meta schema\n\nRecommended values:\n- 'http://json-schema.org/schema#'\n- 'http://json-schema.org/hyper-schema#'\n- 'http://json-schema.org/draft-07/schema#'\n- 'http://json-schema.org/draft-07/hyper-schema#'","type":"string"}},{"name":"$comment","required":false,"schema":{"type":"string"}},{"name":"$defs","required":false,"schema":{"properties":[],"type":"object"}},{"name":"type","required":false,"schema":{"properties":[],"type":"object"}},{"name":"enum","required":false,"schema":{"items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"const","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"multipleOf","required":false,"schema":{"type":"number"}},{"name":"maximum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMaximum","required":false,"schema":{"type":"number"}},{"name":"minimum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMinimum","required":false,"schema":{"type":"number"}},{"name":"maxLength","required":false,"schema":{"type":"number"}},{"name":"minLength","required":false,"schema":{"type":"number"}},{"name":"pattern","required":false,"schema":{"type":"string"}},{"name":"items","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalItems","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"maxItems","required":false,"schema":{"type":"number"}},{"name":"minItems","required":false,"schema":{"type":"number"}},{"name":"uniqueItems","required":false,"schema":{"type":"boolean"}},{"name":"contains","required":false,"schema":{"circularRefName":"JSONSchema7","properties":[],"type":"object"}},{"name":"maxProperties","required":false,"schema":{"type":"number"}},{"name":"minProperties","required":false,"schema":{"type":"number"}},{"name":"required","required":false,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"properties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"patternProperties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalProperties","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"dependencies","required":false,"schema":{"properties":[],"type":"object"}},{"name":"propertyNames","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"if","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"then","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"else","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"allOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"anyOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"oneOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"not","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"format","required":false,"schema":{"type":"string"}},{"name":"contentMediaType","required":false,"schema":{"type":"string"}},{"name":"contentEncoding","required":false,"schema":{"type":"string"}},{"name":"definitions","required":false,"schema":{"properties":[],"type":"object"}},{"name":"title","required":false,"schema":{"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"default","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"readOnly","required":false,"schema":{"type":"boolean"}},{"name":"writeOnly","required":false,"schema":{"type":"boolean"}},{"name":"examples","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}}],"type":"object"}},{"name":"simplifiedSchema","required":false,"schema":{"description":"JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form","properties":[{"name":"type","required":true,"schema":{"enum":["string","number","boolean","object","array","null"],"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"circularRefName","required":false,"schema":{"description":"sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here","type":"string"}},{"name":"enum","required":false,"schema":{"description":"in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think","items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"properties","required":false,"schema":{"description":"in case of object, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}},{"name":"required","required":true,"schema":{"description":"NB: can't we put this in the SimplifiedSchema itself?","type":"boolean"}}],"type":"object"},"name":"SimplifiedSchemaProperty"}],"type":"array"}},{"name":"items","required":false,"schema":{"description":"in case of arrays, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"description":"name in case of it being a reference, otherwise null","type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}}],"type":"object"},"name":"SimplifiedSchemaItem"}],"type":"array"}}],"type":"object"}},{"name":"isObject","required":true,"schema":{"description":"if the type is an object, this is true. false if it's an array","type":"boolean"}},{"name":"isArray","required":true,"schema":{"description":"if the type is an array, this is true","type":"boolean"}},{"name":"isPrimitive","required":true,"schema":{"description":"if it's a primitive type like \"string\", \"number\", \"boolean\", \"null\" | \"undefined\"","type":"boolean"}},{"name":"isEnum","required":true,"schema":{"description":"will be true for any primitive conjunction types","type":"boolean"}},{"name":"isEnumLiteral","required":true,"schema":{"description":"will be true for string conjunction types","type":"boolean"}},{"name":"typeCoverage","required":true,"schema":{"description":"quantification of coverage of the specified type or subtypes in our database.","type":"number"}},{"name":"rawType","required":true,"schema":{"description":"raw type string","type":"string"}}],"type":"object"},"typeCoverage":0,"rawType":"TypeInfo","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"ryfZPWRVWquDNXTG","name":"Schema","slug":"schema","relativePathFromProjectRoot":"/packages/sdk-db/src/index.ts","srcFileId":"/index","operationFolderName":"sdk-db","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/packages/sdk-db","operationName":"sdk-db","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"$ref":"#/definitions/JSONSchema7"},"simplifiedSchema":{"properties":[{"name":"$id","required":false,"schema":{"type":"string"}},{"name":"$ref","required":false,"schema":{"type":"string"}},{"name":"$schema","required":false,"schema":{"description":"Meta schema\n\nRecommended values:\n- 'http://json-schema.org/schema#'\n- 'http://json-schema.org/hyper-schema#'\n- 'http://json-schema.org/draft-07/schema#'\n- 'http://json-schema.org/draft-07/hyper-schema#'","type":"string"}},{"name":"$comment","required":false,"schema":{"type":"string"}},{"name":"$defs","required":false,"schema":{"properties":[],"type":"object"}},{"name":"type","required":false,"schema":{"properties":[],"type":"object"}},{"name":"enum","required":false,"schema":{"items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"const","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"multipleOf","required":false,"schema":{"type":"number"}},{"name":"maximum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMaximum","required":false,"schema":{"type":"number"}},{"name":"minimum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMinimum","required":false,"schema":{"type":"number"}},{"name":"maxLength","required":false,"schema":{"type":"number"}},{"name":"minLength","required":false,"schema":{"type":"number"}},{"name":"pattern","required":false,"schema":{"type":"string"}},{"name":"items","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalItems","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"maxItems","required":false,"schema":{"type":"number"}},{"name":"minItems","required":false,"schema":{"type":"number"}},{"name":"uniqueItems","required":false,"schema":{"type":"boolean"}},{"name":"contains","required":false,"schema":{"circularRefName":"JSONSchema7","properties":[],"type":"object"}},{"name":"maxProperties","required":false,"schema":{"type":"number"}},{"name":"minProperties","required":false,"schema":{"type":"number"}},{"name":"required","required":false,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"properties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"patternProperties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalProperties","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"dependencies","required":false,"schema":{"properties":[],"type":"object"}},{"name":"propertyNames","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"if","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"then","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"else","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"allOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"anyOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"oneOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"not","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"format","required":false,"schema":{"type":"string"}},{"name":"contentMediaType","required":false,"schema":{"type":"string"}},{"name":"contentEncoding","required":false,"schema":{"type":"string"}},{"name":"definitions","required":false,"schema":{"properties":[],"type":"object"}},{"name":"title","required":false,"schema":{"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"default","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"readOnly","required":false,"schema":{"type":"boolean"}},{"name":"writeOnly","required":false,"schema":{"type":"boolean"}},{"name":"examples","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}}],"type":"object"},"typeCoverage":0,"rawType":"Schema","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"nTuTnDKMJOWnBwKh","name":"JSONSchema7","slug":"jsonschema-7","relativePathFromProjectRoot":"/packages/sdk-db/src/index.ts","srcFileId":"/index","operationFolderName":"sdk-db","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/packages/sdk-db","operationName":"sdk-db","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"$id":{"type":"string"},"$ref":{"type":"string"},"$schema":{"$ref":"#/definitions/JSONSchema7Version"},"$comment":{"type":"string"},"$defs":{"type":"object","additionalProperties":{"$ref":"#/definitions/JSONSchema7Definition"}},"type":{"anyOf":[{"$ref":"#/definitions/JSONSchema7TypeName"},{"type":"array","items":{"$ref":"#/definitions/JSONSchema7TypeName"}}]},"enum":{"type":"array","items":{"$ref":"#/definitions/JSONSchema7Type"}},"const":{"$ref":"#/definitions/JSONSchema7Type"},"multipleOf":{"type":"number"},"maximum":{"type":"number"},"exclusiveMaximum":{"type":"number"},"minimum":{"type":"number"},"exclusiveMinimum":{"type":"number"},"maxLength":{"type":"number"},"minLength":{"type":"number"},"pattern":{"type":"string"},"items":{"anyOf":[{"$ref":"#/definitions/JSONSchema7Definition"},{"type":"array","items":{"$ref":"#/definitions/JSONSchema7Definition"}}]},"additionalItems":{"$ref":"#/definitions/JSONSchema7Definition"},"maxItems":{"type":"number"},"minItems":{"type":"number"},"uniqueItems":{"type":"boolean"},"contains":{"$ref":"#/definitions/JSONSchema7"},"maxProperties":{"type":"number"},"minProperties":{"type":"number"},"required":{"type":"array","items":{"type":"string"}},"properties":{"type":"object","additionalProperties":{"$ref":"#/definitions/JSONSchema7Definition"}},"patternProperties":{"type":"object","additionalProperties":{"$ref":"#/definitions/JSONSchema7Definition"}},"additionalProperties":{"$ref":"#/definitions/JSONSchema7Definition"},"dependencies":{"type":"object","additionalProperties":{"anyOf":[{"$ref":"#/definitions/JSONSchema7Definition"},{"type":"array","items":{"type":"string"}}]}},"propertyNames":{"$ref":"#/definitions/JSONSchema7Definition"},"if":{"$ref":"#/definitions/JSONSchema7Definition"},"then":{"$ref":"#/definitions/JSONSchema7Definition"},"else":{"$ref":"#/definitions/JSONSchema7Definition"},"allOf":{"type":"array","items":{"$ref":"#/definitions/JSONSchema7Definition"}},"anyOf":{"type":"array","items":{"$ref":"#/definitions/JSONSchema7Definition"}},"oneOf":{"type":"array","items":{"$ref":"#/definitions/JSONSchema7Definition"}},"not":{"$ref":"#/definitions/JSONSchema7Definition"},"format":{"type":"string"},"contentMediaType":{"type":"string"},"contentEncoding":{"type":"string"},"definitions":{"type":"object","additionalProperties":{"$ref":"#/definitions/JSONSchema7Definition"}},"title":{"type":"string"},"description":{"type":"string"},"default":{"$ref":"#/definitions/JSONSchema7Type"},"readOnly":{"type":"boolean"},"writeOnly":{"type":"boolean"},"examples":{"$ref":"#/definitions/JSONSchema7Type"}},"additionalProperties":false},"simplifiedSchema":{"properties":[{"name":"$id","required":false,"schema":{"type":"string"}},{"name":"$ref","required":false,"schema":{"type":"string"}},{"name":"$schema","required":false,"schema":{"description":"Meta schema\n\nRecommended values:\n- 'http://json-schema.org/schema#'\n- 'http://json-schema.org/hyper-schema#'\n- 'http://json-schema.org/draft-07/schema#'\n- 'http://json-schema.org/draft-07/hyper-schema#'","type":"string"}},{"name":"$comment","required":false,"schema":{"type":"string"}},{"name":"$defs","required":false,"schema":{"properties":[],"type":"object"}},{"name":"type","required":false,"schema":{"properties":[],"type":"object"}},{"name":"enum","required":false,"schema":{"items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"const","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"multipleOf","required":false,"schema":{"type":"number"}},{"name":"maximum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMaximum","required":false,"schema":{"type":"number"}},{"name":"minimum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMinimum","required":false,"schema":{"type":"number"}},{"name":"maxLength","required":false,"schema":{"type":"number"}},{"name":"minLength","required":false,"schema":{"type":"number"}},{"name":"pattern","required":false,"schema":{"type":"string"}},{"name":"items","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalItems","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"maxItems","required":false,"schema":{"type":"number"}},{"name":"minItems","required":false,"schema":{"type":"number"}},{"name":"uniqueItems","required":false,"schema":{"type":"boolean"}},{"name":"contains","required":false,"schema":{"circularRefName":"JSONSchema7","properties":[],"type":"object"}},{"name":"maxProperties","required":false,"schema":{"type":"number"}},{"name":"minProperties","required":false,"schema":{"type":"number"}},{"name":"required","required":false,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"properties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"patternProperties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalProperties","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"dependencies","required":false,"schema":{"properties":[],"type":"object"}},{"name":"propertyNames","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"if","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"then","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"else","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"allOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"anyOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"oneOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"not","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"format","required":false,"schema":{"type":"string"}},{"name":"contentMediaType","required":false,"schema":{"type":"string"}},{"name":"contentEncoding","required":false,"schema":{"type":"string"}},{"name":"definitions","required":false,"schema":{"properties":[],"type":"object"}},{"name":"title","required":false,"schema":{"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"default","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"readOnly","required":false,"schema":{"type":"boolean"}},{"name":"writeOnly","required":false,"schema":{"type":"boolean"}},{"name":"examples","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}}],"type":"object"},"typeCoverage":0,"rawType":"JSONSchema7","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"PYftVigEPTCGTlGS","name":"JSONSchema7Version","slug":"jsonschema-7version","relativePathFromProjectRoot":"/packages/sdk-db/src/index.ts","srcFileId":"/index","operationFolderName":"sdk-db","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/packages/sdk-db","operationName":"sdk-db","description":"Meta schema\n\nRecommended values:\n- 'http://json-schema.org/schema#'\n- 'http://json-schema.org/hyper-schema#'\n- 'http://json-schema.org/draft-07/schema#'\n- 'http://json-schema.org/draft-07/hyper-schema#'","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"string","description":"Meta schema\n\nRecommended values:\n- 'http://json-schema.org/schema#'\n- 'http://json-schema.org/hyper-schema#'\n- 'http://json-schema.org/draft-07/schema#'\n- 'http://json-schema.org/draft-07/hyper-schema#'"},"simplifiedSchema":{"description":"Meta schema\n\nRecommended values:\n- 'http://json-schema.org/schema#'\n- 'http://json-schema.org/hyper-schema#'\n- 'http://json-schema.org/draft-07/schema#'\n- 'http://json-schema.org/draft-07/hyper-schema#'","type":"string"},"typeCoverage":0,"rawType":"JSONSchema7Version","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"nLHHGmGqnnkYnbZB","name":"JSONSchema7Definition","slug":"jsonschema-7definition","relativePathFromProjectRoot":"/packages/sdk-db/src/index.ts","srcFileId":"/index","operationFolderName":"sdk-db","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/packages/sdk-db","operationName":"sdk-db","description":"JSON Schema v7","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"anyOf":[{"$ref":"#/definitions/JSONSchema7"},{"type":"boolean"}],"description":"JSON Schema v7"},"simplifiedSchema":{"description":"JSON Schema v7","properties":[],"type":"object"},"typeCoverage":0,"rawType":"JSONSchema7Definition","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"GpbDyDSjRtwfPgZC","name":"JSONSchema7TypeName","slug":"jsonschema-7type-name","relativePathFromProjectRoot":"/packages/sdk-db/src/index.ts","srcFileId":"/index","operationFolderName":"sdk-db","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/packages/sdk-db","operationName":"sdk-db","description":"Primitive type","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"string","enum":["string","number","integer","boolean","object","array","null"],"description":"Primitive type"},"simplifiedSchema":{"description":"Primitive type","enum":["string","number","integer","boolean","object","array","null"],"type":"string"},"typeCoverage":0,"rawType":"JSONSchema7TypeName","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"jdzAEAopIYrNwVmo","name":"JSONSchema7Type","slug":"jsonschema-7type","relativePathFromProjectRoot":"/packages/sdk-db/src/index.ts","srcFileId":"/index","operationFolderName":"sdk-db","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/packages/sdk-db","operationName":"sdk-db","description":"Primitive type","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"anyOf":[{"type":"string"},{"type":"number"},{"type":"boolean"},{"$ref":"#/definitions/JSONSchema7Object"},{"$ref":"#/definitions/JSONSchema7Array"},{"type":"null"}],"description":"Primitive type"},"simplifiedSchema":{"description":"Primitive type","properties":[],"type":"object"},"typeCoverage":0,"rawType":"JSONSchema7Type","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"LxQSKtfCQbVIdOCj","name":"JSONSchema7Object","slug":"jsonschema-7object","relativePathFromProjectRoot":"/packages/sdk-db/src/index.ts","srcFileId":"/index","operationFolderName":"sdk-db","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/packages/sdk-db","operationName":"sdk-db","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","additionalProperties":{"$ref":"#/definitions/JSONSchema7Type"}},"simplifiedSchema":{"properties":[],"type":"object"},"typeCoverage":0,"rawType":"JSONSchema7Object","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"zDhfQdBQZywyfEPD","name":"JSONSchema7Array","slug":"jsonschema-7array","relativePathFromProjectRoot":"/packages/sdk-db/src/index.ts","srcFileId":"/index","operationFolderName":"sdk-db","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/packages/sdk-db","operationName":"sdk-db","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"array","items":{"$ref":"#/definitions/JSONSchema7Type"}},"simplifiedSchema":{"items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"},"typeCoverage":0,"rawType":"JSONSchema7Array","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"CqkKxhDeDWtfUCul","name":"SimplifiedSchema","slug":"simplified-schema","relativePathFromProjectRoot":"/packages/sdk-db/src/index.ts","srcFileId":"/index","operationFolderName":"sdk-db","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/packages/sdk-db","operationName":"sdk-db","description":"JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"type":{"$ref":"#/definitions/SimplifiedSchemaType","description":"- string\n- number\n- boolean\n- object\n- array\n- null\n\nNB: Omit doesn't work for the indexer! This would be the type: Omit<JSONSchema7TypeName, \"integer\">;"},"description":{"type":"string"},"circularRefName":{"type":"string","description":"sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here"},"enum":{"type":"array","items":{"$ref":"#/definitions/JSONSchema7Type"},"description":"in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think"},"properties":{"type":"array","items":{"$ref":"#/definitions/SimplifiedSchemaProperty"},"description":"in case of object, this will always appear"},"items":{"type":"array","items":{"$ref":"#/definitions/SimplifiedSchemaItem"},"description":"in case of arrays, this will always appear"}},"required":["type"],"additionalProperties":false,"description":"JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form"},"simplifiedSchema":{"description":"JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form","properties":[{"name":"type","required":true,"schema":{"enum":["string","number","boolean","object","array","null"],"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"circularRefName","required":false,"schema":{"description":"sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here","type":"string"}},{"name":"enum","required":false,"schema":{"description":"in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think","items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"properties","required":false,"schema":{"description":"in case of object, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}},{"name":"required","required":true,"schema":{"description":"NB: can't we put this in the SimplifiedSchema itself?","type":"boolean"}}],"type":"object"},"name":"SimplifiedSchemaProperty"}],"type":"array"}},{"name":"items","required":false,"schema":{"description":"in case of arrays, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"description":"name in case of it being a reference, otherwise null","type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}}],"type":"object"},"name":"SimplifiedSchemaItem"}],"type":"array"}}],"type":"object"},"typeCoverage":0,"rawType":"SimplifiedSchema","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"oGlRKVdHZkFiSGjF","name":"SimplifiedSchemaType","slug":"simplified-schema-type","relativePathFromProjectRoot":"/packages/sdk-db/src/index.ts","srcFileId":"/index","operationFolderName":"sdk-db","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/packages/sdk-db","operationName":"sdk-db","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"string","enum":["string","number","boolean","object","array","null"]},"simplifiedSchema":{"enum":["string","number","boolean","object","array","null"],"type":"string"},"typeCoverage":0,"rawType":"SimplifiedSchemaType","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"jfcpyUCkcmXzBUZP","name":"SimplifiedSchemaProperty","slug":"simplified-schema-property","relativePathFromProjectRoot":"/packages/sdk-db/src/index.ts","srcFileId":"/index","operationFolderName":"sdk-db","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/packages/sdk-db","operationName":"sdk-db","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"name":{"type":"string"},"schema":{"$ref":"#/definitions/SimplifiedSchema"},"required":{"type":"boolean","description":"NB: can't we put this in the SimplifiedSchema itself?"}},"required":["name","schema","required"],"additionalProperties":false},"simplifiedSchema":{"properties":[{"name":"name","required":true,"schema":{"type":"string"}},{"name":"schema","required":true,"schema":{"description":"JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form","properties":[{"name":"type","required":true,"schema":{"enum":["string","number","boolean","object","array","null"],"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"circularRefName","required":false,"schema":{"description":"sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here","type":"string"}},{"name":"enum","required":false,"schema":{"description":"in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think","items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"properties","required":false,"schema":{"description":"in case of object, this will always appear","items":[{"schema":{"circularRefName":"SimplifiedSchemaProperty","properties":[],"type":"object"},"name":"SimplifiedSchemaProperty"}],"type":"array"}},{"name":"items","required":false,"schema":{"description":"in case of arrays, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"description":"name in case of it being a reference, otherwise null","type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}}],"type":"object"},"name":"SimplifiedSchemaItem"}],"type":"array"}}],"type":"object"}},{"name":"required","required":true,"schema":{"description":"NB: can't we put this in the SimplifiedSchema itself?","type":"boolean"}}],"type":"object"},"typeCoverage":0,"rawType":"SimplifiedSchemaProperty","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"fPOrQwybQXwBJmTk","name":"SimplifiedSchemaItem","slug":"simplified-schema-item","relativePathFromProjectRoot":"/packages/sdk-db/src/index.ts","srcFileId":"/index","operationFolderName":"sdk-db","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/packages/sdk-db","operationName":"sdk-db","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"name":{"type":["string","null"],"description":"name in case of it being a reference, otherwise null"},"schema":{"$ref":"#/definitions/SimplifiedSchema"}},"required":["name","schema"],"additionalProperties":false},"simplifiedSchema":{"properties":[{"name":"name","required":true,"schema":{"description":"name in case of it being a reference, otherwise null","type":"string"}},{"name":"schema","required":true,"schema":{"description":"JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form","properties":[{"name":"type","required":true,"schema":{"enum":["string","number","boolean","object","array","null"],"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"circularRefName","required":false,"schema":{"description":"sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here","type":"string"}},{"name":"enum","required":false,"schema":{"description":"in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think","items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"properties","required":false,"schema":{"description":"in case of object, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}},{"name":"required","required":true,"schema":{"description":"NB: can't we put this in the SimplifiedSchema itself?","type":"boolean"}}],"type":"object"},"name":"SimplifiedSchemaProperty"}],"type":"array"}},{"name":"items","required":false,"schema":{"description":"in case of arrays, this will always appear","items":[{"schema":{"circularRefName":"SimplifiedSchemaItem","properties":[],"type":"object"},"name":"SimplifiedSchemaItem"}],"type":"array"}}],"type":"object"}}],"type":"object"},"typeCoverage":0,"rawType":"SimplifiedSchemaItem","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"BbavsnFintQTwsDp","name":"TypeCoverage","slug":"type-coverage","relativePathFromProjectRoot":"/packages/sdk-db/src/index.ts","srcFileId":"/index","operationFolderName":"sdk-db","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/packages/sdk-db","operationName":"sdk-db","description":"quantification of coverage of the specified type or subtypes in our database.","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"number","description":"quantification of coverage of the specified type or subtypes in our database."},"simplifiedSchema":{"description":"quantification of coverage of the specified type or subtypes in our database.","type":"number"},"typeCoverage":0,"rawType":"TypeCoverage","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"qVcZLonXqpkgaUnu","name":"FunctionParameter","slug":"function-parameter","relativePathFromProjectRoot":"/packages/sdk-db/src/index.ts","srcFileId":"/index","operationFolderName":"sdk-db","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/packages/sdk-db","operationName":"sdk-db","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"name":{"type":"string"},"schema":{"$ref":"#/definitions/Schema"},"simplifiedSchema":{"$ref":"#/definitions/SimplifiedSchema"},"required":{"type":"boolean"}},"required":["name","required"],"additionalProperties":false},"simplifiedSchema":{"properties":[{"name":"name","required":true,"schema":{"type":"string"}},{"name":"schema","required":false,"schema":{"properties":[{"name":"$id","required":false,"schema":{"type":"string"}},{"name":"$ref","required":false,"schema":{"type":"string"}},{"name":"$schema","required":false,"schema":{"description":"Meta schema\n\nRecommended values:\n- 'http://json-schema.org/schema#'\n- 'http://json-schema.org/hyper-schema#'\n- 'http://json-schema.org/draft-07/schema#'\n- 'http://json-schema.org/draft-07/hyper-schema#'","type":"string"}},{"name":"$comment","required":false,"schema":{"type":"string"}},{"name":"$defs","required":false,"schema":{"properties":[],"type":"object"}},{"name":"type","required":false,"schema":{"properties":[],"type":"object"}},{"name":"enum","required":false,"schema":{"items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"const","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"multipleOf","required":false,"schema":{"type":"number"}},{"name":"maximum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMaximum","required":false,"schema":{"type":"number"}},{"name":"minimum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMinimum","required":false,"schema":{"type":"number"}},{"name":"maxLength","required":false,"schema":{"type":"number"}},{"name":"minLength","required":false,"schema":{"type":"number"}},{"name":"pattern","required":false,"schema":{"type":"string"}},{"name":"items","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalItems","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"maxItems","required":false,"schema":{"type":"number"}},{"name":"minItems","required":false,"schema":{"type":"number"}},{"name":"uniqueItems","required":false,"schema":{"type":"boolean"}},{"name":"contains","required":false,"schema":{"circularRefName":"JSONSchema7","properties":[],"type":"object"}},{"name":"maxProperties","required":false,"schema":{"type":"number"}},{"name":"minProperties","required":false,"schema":{"type":"number"}},{"name":"required","required":false,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"properties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"patternProperties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalProperties","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"dependencies","required":false,"schema":{"properties":[],"type":"object"}},{"name":"propertyNames","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"if","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"then","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"else","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"allOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"anyOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"oneOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"not","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"format","required":false,"schema":{"type":"string"}},{"name":"contentMediaType","required":false,"schema":{"type":"string"}},{"name":"contentEncoding","required":false,"schema":{"type":"string"}},{"name":"definitions","required":false,"schema":{"properties":[],"type":"object"}},{"name":"title","required":false,"schema":{"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"default","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"readOnly","required":false,"schema":{"type":"boolean"}},{"name":"writeOnly","required":false,"schema":{"type":"boolean"}},{"name":"examples","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}}],"type":"object"}},{"name":"simplifiedSchema","required":false,"schema":{"description":"JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form","properties":[{"name":"type","required":true,"schema":{"enum":["string","number","boolean","object","array","null"],"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"circularRefName","required":false,"schema":{"description":"sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here","type":"string"}},{"name":"enum","required":false,"schema":{"description":"in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think","items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"properties","required":false,"schema":{"description":"in case of object, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}},{"name":"required","required":true,"schema":{"description":"NB: can't we put this in the SimplifiedSchema itself?","type":"boolean"}}],"type":"object"},"name":"SimplifiedSchemaProperty"}],"type":"array"}},{"name":"items","required":false,"schema":{"description":"in case of arrays, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"description":"name in case of it being a reference, otherwise null","type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}}],"type":"object"},"name":"SimplifiedSchemaItem"}],"type":"array"}}],"type":"object"}},{"name":"required","required":true,"schema":{"type":"boolean"}}],"type":"object"},"typeCoverage":0,"rawType":"FunctionParameter","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"fsjnnGRApgcsXoQl","name":"TsInterface","slug":"ts-interface","relativePathFromProjectRoot":"/packages/sdk-db/src/index.ts","srcFileId":"/index","operationFolderName":"sdk-db","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/packages/sdk-db","operationName":"sdk-db","description":"TODO: Just like parameters, this should be linted for. If you define an interface that's not declared here, that should ring a bell.","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"relativeOperationBasePathFromProjectRoot":{"type":"string","description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript"},"relativeFilePathFromSrc":{"type":"string","description":"relative file path from the operation src\n\ne.g. general.ts"},"srcFileId":{"type":"string","description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\""},"operationName":{"type":"string","description":"operation package.json name"},"operationFolderName":{"type":"string","description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)"},"relativePathFromProjectRoot":{"type":"string","description":"relative file or folder path from the project root"},"id":{"type":"string","description":"unique id of the model"},"name":{"type":"string","description":"name (identifier) of the model"},"slug":{"type":"string","description":"kebab-case variant of the name"},"type":{"$ref":"#/definitions/TypeInfo"},"description":{"$ref":"#/definitions/Markdown","description":"jsdoc comment above the interface, if any"},"commentsInside":{"type":"array","items":{"$ref":"#/definitions/TsComment"}},"rawText":{"type":"string","description":"raw interface text, coming from ts-morph"},"extensions":{"type":"array","items":{"type":"string"},"description":"if the interface extends anything, names will be specified here"},"isDbModel":{"type":"boolean","description":"if true, this interface is marked as a db model, which means it will be included in the db function autocompletion so it's easy to store and fetch data in this format.\n\nis automatically set to true when indexing and when one of the following statements holds true\n- if the doc-comment contains frontmatter with `isDbModel` or `defaultDbStorageMethod` specified\n- if the interface last word is \"db\" or \"model\" and if there are minimum 2 words\n- if the interface extends some other special interface"},"defaultDbStorageMethod":{"$ref":"#/definitions/DbStorageMethod","description":"if this interface is a db model, you can also specify the default db storage method for it. You can do this by specifying it in the frontmatter of the doccomment of the interface.\n\nWhen storing something into the database, this value can be overwritten in your query configuration. When fetching something from the database, it will always try all methods (unless specified otherwise). The following strategies are available to store the data.\n\njsonMultiple (default): stores the data in a json file which is an array of this data structure\n\nTODO: jsonSingle: stores the data in a json file which is of this data structure (single object)\n\nTODO: markdown: stores the data in a markdown file. Takes \"markdown\" or \"description\" parameter as the main markdown. The other parameters are stored as front-matter\n\nTODO: keyValueMarkdown: stores the data in key value markdown format. Still need to determine how and if this is possible. Probably only for very simple datamodels\n\nTODO: csv: stores the data in a csv file (only possible for flat object datastructures)"}},"required":["commentsInside","id","isDbModel","name","operationFolderName","relativeFilePathFromSrc","relativeOperationBasePathFromProjectRoot","relativePathFromProjectRoot","slug","srcFileId","type"],"additionalProperties":false,"description":"TODO: Just like parameters, this should be linted for. If you define an interface that's not declared here, that should ring a bell."},"simplifiedSchema":{"description":"TODO: Just like parameters, this should be linted for. If you define an interface that's not declared here, that should ring a bell.","properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"type","required":true,"schema":{"description":"all info that should always be collected when indexing any type interface","properties":[{"name":"typeDefinition","required":false,"schema":{"properties":[{"name":"$id","required":false,"schema":{"type":"string"}},{"name":"$ref","required":false,"schema":{"type":"string"}},{"name":"$schema","required":false,"schema":{"description":"Meta schema\n\nRecommended values:\n- 'http://json-schema.org/schema#'\n- 'http://json-schema.org/hyper-schema#'\n- 'http://json-schema.org/draft-07/schema#'\n- 'http://json-schema.org/draft-07/hyper-schema#'","type":"string"}},{"name":"$comment","required":false,"schema":{"type":"string"}},{"name":"$defs","required":false,"schema":{"properties":[],"type":"object"}},{"name":"type","required":false,"schema":{"properties":[],"type":"object"}},{"name":"enum","required":false,"schema":{"items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"const","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"multipleOf","required":false,"schema":{"type":"number"}},{"name":"maximum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMaximum","required":false,"schema":{"type":"number"}},{"name":"minimum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMinimum","required":false,"schema":{"type":"number"}},{"name":"maxLength","required":false,"schema":{"type":"number"}},{"name":"minLength","required":false,"schema":{"type":"number"}},{"name":"pattern","required":false,"schema":{"type":"string"}},{"name":"items","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalItems","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"maxItems","required":false,"schema":{"type":"number"}},{"name":"minItems","required":false,"schema":{"type":"number"}},{"name":"uniqueItems","required":false,"schema":{"type":"boolean"}},{"name":"contains","required":false,"schema":{"circularRefName":"JSONSchema7","properties":[],"type":"object"}},{"name":"maxProperties","required":false,"schema":{"type":"number"}},{"name":"minProperties","required":false,"schema":{"type":"number"}},{"name":"required","required":false,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"properties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"patternProperties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalProperties","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"dependencies","required":false,"schema":{"properties":[],"type":"object"}},{"name":"propertyNames","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"if","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"then","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"else","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"allOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"anyOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"oneOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"not","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"format","required":false,"schema":{"type":"string"}},{"name":"contentMediaType","required":false,"schema":{"type":"string"}},{"name":"contentEncoding","required":false,"schema":{"type":"string"}},{"name":"definitions","required":false,"schema":{"properties":[],"type":"object"}},{"name":"title","required":false,"schema":{"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"default","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"readOnly","required":false,"schema":{"type":"boolean"}},{"name":"writeOnly","required":false,"schema":{"type":"boolean"}},{"name":"examples","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}}],"type":"object"}},{"name":"simplifiedSchema","required":false,"schema":{"description":"JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form","properties":[{"name":"type","required":true,"schema":{"enum":["string","number","boolean","object","array","null"],"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"circularRefName","required":false,"schema":{"description":"sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here","type":"string"}},{"name":"enum","required":false,"schema":{"description":"in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think","items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"properties","required":false,"schema":{"description":"in case of object, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}},{"name":"required","required":true,"schema":{"description":"NB: can't we put this in the SimplifiedSchema itself?","type":"boolean"}}],"type":"object"},"name":"SimplifiedSchemaProperty"}],"type":"array"}},{"name":"items","required":false,"schema":{"description":"in case of arrays, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"description":"name in case of it being a reference, otherwise null","type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}}],"type":"object"},"name":"SimplifiedSchemaItem"}],"type":"array"}}],"type":"object"}},{"name":"isObject","required":true,"schema":{"description":"if the type is an object, this is true. false if it's an array","type":"boolean"}},{"name":"isArray","required":true,"schema":{"description":"if the type is an array, this is true","type":"boolean"}},{"name":"isPrimitive","required":true,"schema":{"description":"if it's a primitive type like \"string\", \"number\", \"boolean\", \"null\" | \"undefined\"","type":"boolean"}},{"name":"isEnum","required":true,"schema":{"description":"will be true for any primitive conjunction types","type":"boolean"}},{"name":"isEnumLiteral","required":true,"schema":{"description":"will be true for string conjunction types","type":"boolean"}},{"name":"typeCoverage","required":true,"schema":{"description":"quantification of coverage of the specified type or subtypes in our database.","type":"number"}},{"name":"rawType","required":true,"schema":{"description":"raw type string","type":"string"}}],"type":"object"}},{"name":"description","required":false,"schema":{"description":"a string that is known to contain markdown.","type":"string"}},{"name":"commentsInside","required":true,"schema":{"items":[{"schema":{"description":"comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\nspecial line prefixes:\n- TODO:\n- DISCUSSION:\n- IDEA:\n- LATER:\n- NB:\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!","properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"comment","required":true,"schema":{"description":"a string that is known to contain markdown.","type":"string"}},{"name":"parameters","required":true,"schema":{"description":"TODO: either make a special category crud for the category model would be nice maybe (especially a backend that makes sure all references stay updated would be epic)","properties":[],"type":"object"}},{"name":"types","required":true,"schema":{"description":"These are the type indicators that were found in this single or multiline comment. Can be multiple.","items":[{"schema":{"enum":["todo","discussion","idea","later","nb"],"type":"string"},"name":"CommentType"}],"type":"array"}},{"name":"firstLine","required":true,"schema":{"description":"first line of the comment","type":"number"}},{"name":"lastLine","required":true,"schema":{"description":"last line of the comment","type":"number"}},{"name":"statementName","required":false,"schema":{"description":"statement name the comment belongs to","type":"string"}},{"name":"rawStatement","required":false,"schema":{"description":"raw statement text the comment belongs to","type":"string"}}],"type":"object"},"name":"TsComment"}],"type":"array"}},{"name":"rawText","required":false,"schema":{"description":"raw interface text, coming from ts-morph","type":"string"}},{"name":"extensions","required":false,"schema":{"description":"if the interface extends anything, names will be specified here","items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"isDbModel","required":true,"schema":{"description":"if true, this interface is marked as a db model, which means it will be included in the db function autocompletion so it's easy to store and fetch data in this format.\n\nis automatically set to true when indexing and when one of the following statements holds true\n- if the doc-comment contains frontmatter with `isDbModel` or `defaultDbStorageMethod` specified\n- if the interface last word is \"db\" or \"model\" and if there are minimum 2 words\n- if the interface extends some other special interface","type":"boolean"}},{"name":"defaultDbStorageMethod","required":false,"schema":{"enum":["jsonMultiple","jsonSingle","markdown","keyValueMarkdown","csv"],"type":"string"}}],"type":"object"},"typeCoverage":0,"rawType":"TsInterface","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"oOdiozDwtgjrGIjq","name":"DbStorageMethod","slug":"db-storage-method","relativePathFromProjectRoot":"/packages/sdk-db/src/index.ts","srcFileId":"/index","operationFolderName":"sdk-db","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/packages/sdk-db","operationName":"sdk-db","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"string","enum":["jsonMultiple","jsonSingle","markdown","keyValueMarkdown","csv"]},"simplifiedSchema":{"enum":["jsonMultiple","jsonSingle","markdown","keyValueMarkdown","csv"],"type":"string"},"typeCoverage":0,"rawType":"DbStorageMethod","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"dMGTQtGFSEdMtwrK","name":"TsBuildError","slug":"ts-build-error","relativePathFromProjectRoot":"/packages/sdk-db/src/index.ts","srcFileId":"/index","operationFolderName":"sdk-db","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/packages/sdk-db","operationName":"sdk-db","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"relativeOperationBasePathFromProjectRoot":{"type":"string","description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript"},"relativeFilePathFromSrc":{"type":"string","description":"relative file path from the operation src\n\ne.g. general.ts"},"srcFileId":{"type":"string","description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\""},"operationName":{"type":"string","description":"operation package.json name"},"operationFolderName":{"type":"string","description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)"},"relativePathFromProjectRoot":{"type":"string","description":"relative file or folder path from the project root"},"id":{"type":"string","description":"unique id of the model"},"name":{"type":"string","description":"name (identifier) of the model"},"slug":{"type":"string","description":"kebab-case variant of the name"},"line":{"type":"number"},"character":{"type":"number"},"message":{"type":"string"}},"required":["id","message","name","operationFolderName","relativeFilePathFromSrc","relativeOperationBasePathFromProjectRoot","relativePathFromProjectRoot","slug","srcFileId"],"additionalProperties":false},"simplifiedSchema":{"properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"line","required":false,"schema":{"type":"number"}},{"name":"character","required":false,"schema":{"type":"number"}},{"name":"message","required":true,"schema":{"type":"string"}}],"type":"object"},"typeCoverage":0,"rawType":"TsBuildError","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"lqkoFRhuadoZbvoX","name":"TsLintWarning","slug":"ts-lint-warning","relativePathFromProjectRoot":"/packages/sdk-db/src/index.ts","srcFileId":"/index","operationFolderName":"sdk-db","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/packages/sdk-db","operationName":"sdk-db","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"relativeOperationBasePathFromProjectRoot":{"type":"string","description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript"},"relativeFilePathFromSrc":{"type":"string","description":"relative file path from the operation src\n\ne.g. general.ts"},"srcFileId":{"type":"string","description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\""},"operationName":{"type":"string","description":"operation package.json name"},"operationFolderName":{"type":"string","description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)"},"relativePathFromProjectRoot":{"type":"string","description":"relative file or folder path from the project root"},"id":{"type":"string","description":"unique id of the model"},"name":{"type":"string","description":"name (identifier) of the model"},"slug":{"type":"string","description":"kebab-case variant of the name"},"line":{"type":"number"},"character":{"type":"number"},"message":{"type":"string"}},"required":["character","id","line","message","name","operationFolderName","relativeFilePathFromSrc","relativeOperationBasePathFromProjectRoot","relativePathFromProjectRoot","slug","srcFileId"],"additionalProperties":false},"simplifiedSchema":{"properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"line","required":true,"schema":{"type":"number"}},{"name":"character","required":true,"schema":{"type":"number"}},{"name":"message","required":true,"schema":{"type":"string"}}],"type":"object"},"typeCoverage":0,"rawType":"TsLintWarning","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"WghmsENADBRUOojv","name":"TsExport","slug":"ts-export","relativePathFromProjectRoot":"/packages/sdk-db/src/index.ts","srcFileId":"/index","operationFolderName":"sdk-db","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/packages/sdk-db","operationName":"sdk-db","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"relativeOperationBasePathFromProjectRoot":{"type":"string","description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript"},"relativeFilePathFromSrc":{"type":"string","description":"relative file path from the operation src\n\ne.g. general.ts"},"srcFileId":{"type":"string","description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\""},"operationName":{"type":"string","description":"operation package.json name"},"operationFolderName":{"type":"string","description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)"},"relativePathFromProjectRoot":{"type":"string","description":"relative file or folder path from the project root"},"id":{"type":"string","description":"unique id of the model"},"name":{"type":"string","description":"name (identifier) of the model"},"slug":{"type":"string","description":"kebab-case variant of the name"},"comments":{"type":"array","items":{"$ref":"#/definitions/TsComment"},"description":"surrounding comments and comments inside of the import"},"type":{"type":"string","enum":["value","type"]},"alias":{"type":"string","description":"used for duplicate export names"},"hasGeneric":{"type":"boolean","description":"only for type exports. tells you whether or not the type has one or more generic parameter(s)"}},"required":["comments","id","name","operationFolderName","relativeFilePathFromSrc","relativeOperationBasePathFromProjectRoot","relativePathFromProjectRoot","slug","srcFileId"],"additionalProperties":false},"simplifiedSchema":{"properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"comments","required":true,"schema":{"description":"surrounding comments and comments inside of the import","items":[{"schema":{"description":"comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\nspecial line prefixes:\n- TODO:\n- DISCUSSION:\n- IDEA:\n- LATER:\n- NB:\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!","properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"comment","required":true,"schema":{"description":"a string that is known to contain markdown.","type":"string"}},{"name":"parameters","required":true,"schema":{"description":"TODO: either make a special category crud for the category model would be nice maybe (especially a backend that makes sure all references stay updated would be epic)","properties":[],"type":"object"}},{"name":"types","required":true,"schema":{"description":"These are the type indicators that were found in this single or multiline comment. Can be multiple.","items":[{"schema":{"enum":["todo","discussion","idea","later","nb"],"type":"string"},"name":"CommentType"}],"type":"array"}},{"name":"firstLine","required":true,"schema":{"description":"first line of the comment","type":"number"}},{"name":"lastLine","required":true,"schema":{"description":"last line of the comment","type":"number"}},{"name":"statementName","required":false,"schema":{"description":"statement name the comment belongs to","type":"string"}},{"name":"rawStatement","required":false,"schema":{"description":"raw statement text the comment belongs to","type":"string"}}],"type":"object"},"name":"TsComment"}],"type":"array"}},{"name":"type","required":false,"schema":{"enum":["value","type"],"type":"string"}},{"name":"alias","required":false,"schema":{"description":"used for duplicate export names","type":"string"}},{"name":"hasGeneric","required":false,"schema":{"description":"only for type exports. tells you whether or not the type has one or more generic parameter(s)","type":"boolean"}}],"type":"object"},"typeCoverage":0,"rawType":"TsExport","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"OKixfmHtsAPnOKNn","name":"TsImport","slug":"ts-import","relativePathFromProjectRoot":"/packages/sdk-db/src/index.ts","srcFileId":"/index","operationFolderName":"sdk-db","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/packages/sdk-db","operationName":"sdk-db","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"relativeOperationBasePathFromProjectRoot":{"type":"string","description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript"},"relativeFilePathFromSrc":{"type":"string","description":"relative file path from the operation src\n\ne.g. general.ts"},"srcFileId":{"type":"string","description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\""},"operationName":{"type":"string","description":"operation package.json name"},"operationFolderName":{"type":"string","description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)"},"relativePathFromProjectRoot":{"type":"string","description":"relative file or folder path from the project root"},"id":{"type":"string","description":"unique id of the model"},"name":{"type":"string","description":"name (identifier) of the model"},"slug":{"type":"string","description":"kebab-case variant of the name"},"comments":{"type":"array","items":{"$ref":"#/definitions/TsComment"},"description":"surrounding comments and comments inside of the import"},"module":{"type":"string"},"alias":{"type":"string","description":"TODO: not sure, but I believe alias should be defined at the import, not at the export, right?"},"classification":{"$ref":"#/definitions/ImportClassification"},"type":{"type":"string","enum":["value","type"],"description":"sometimes the import statement module referenced cannot be found, in that case it cannot be known whether the import should contain a type or value, so it will be undefined."},"hasGeneric":{"type":"boolean","description":"only for type exports. tells you whether or not the type has one or more generic parameter(s)"},"isAbsolute":{"type":"boolean"},"isModuleResolved":{"type":"boolean"},"isModuleFromMonorepo":{"type":"boolean"}},"required":["classification","comments","id","isAbsolute","isModuleFromMonorepo","isModuleResolved","module","name","operationFolderName","relativeFilePathFromSrc","relativeOperationBasePathFromProjectRoot","relativePathFromProjectRoot","slug","srcFileId"],"additionalProperties":false},"simplifiedSchema":{"properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"comments","required":true,"schema":{"description":"surrounding comments and comments inside of the import","items":[{"schema":{"description":"comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\nspecial line prefixes:\n- TODO:\n- DISCUSSION:\n- IDEA:\n- LATER:\n- NB:\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!","properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"comment","required":true,"schema":{"description":"a string that is known to contain markdown.","type":"string"}},{"name":"parameters","required":true,"schema":{"description":"TODO: either make a special category crud for the category model would be nice maybe (especially a backend that makes sure all references stay updated would be epic)","properties":[],"type":"object"}},{"name":"types","required":true,"schema":{"description":"These are the type indicators that were found in this single or multiline comment. Can be multiple.","items":[{"schema":{"enum":["todo","discussion","idea","later","nb"],"type":"string"},"name":"CommentType"}],"type":"array"}},{"name":"firstLine","required":true,"schema":{"description":"first line of the comment","type":"number"}},{"name":"lastLine","required":true,"schema":{"description":"last line of the comment","type":"number"}},{"name":"statementName","required":false,"schema":{"description":"statement name the comment belongs to","type":"string"}},{"name":"rawStatement","required":false,"schema":{"description":"raw statement text the comment belongs to","type":"string"}}],"type":"object"},"name":"TsComment"}],"type":"array"}},{"name":"module","required":true,"schema":{"type":"string"}},{"name":"alias","required":false,"schema":{"description":"TODO: not sure, but I believe alias should be defined at the import, not at the export, right?","type":"string"}},{"name":"classification","required":true,"schema":{"description":"node: node core packages like fs and path\n\nreact: react standard packages like react, react-native, expo, react-dom, etc.\n\npackage: packages from npm that are not classified as operations\n\noperation: operations from our monorepo\n\ninternal: imports from other places in the same operation\n\nNB: don't confuse this with OperationClassification","enum":["node","react","package","operation","internal"],"type":"string"}},{"name":"type","required":false,"schema":{"description":"sometimes the import statement module referenced cannot be found, in that case it cannot be known whether the import should contain a type or value, so it will be undefined.","enum":["value","type"],"type":"string"}},{"name":"hasGeneric","required":false,"schema":{"description":"only for type exports. tells you whether or not the type has one or more generic parameter(s)","type":"boolean"}},{"name":"isAbsolute","required":true,"schema":{"type":"boolean"}},{"name":"isModuleResolved","required":true,"schema":{"type":"boolean"}},{"name":"isModuleFromMonorepo","required":true,"schema":{"type":"boolean"}}],"type":"object"},"typeCoverage":0,"rawType":"TsImport","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"UMcqlpBOLENpUVUS","name":"ImportClassification","slug":"import-classification","relativePathFromProjectRoot":"/packages/sdk-db/src/index.ts","srcFileId":"/index","operationFolderName":"sdk-db","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/packages/sdk-db","operationName":"sdk-db","description":"node: node core packages like fs and path\n\nreact: react standard packages like react, react-native, expo, react-dom, etc.\n\npackage: packages from npm that are not classified as operations\n\noperation: operations from our monorepo\n\ninternal: imports from other places in the same operation\n\nNB: don't confuse this with OperationClassification","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"string","enum":["node","react","package","operation","internal"],"description":"node: node core packages like fs and path\n\nreact: react standard packages like react, react-native, expo, react-dom, etc.\n\npackage: packages from npm that are not classified as operations\n\noperation: operations from our monorepo\n\ninternal: imports from other places in the same operation\n\nNB: don't confuse this with OperationClassification"},"simplifiedSchema":{"description":"node: node core packages like fs and path\n\nreact: react standard packages like react, react-native, expo, react-dom, etc.\n\npackage: packages from npm that are not classified as operations\n\noperation: operations from our monorepo\n\ninternal: imports from other places in the same operation\n\nNB: don't confuse this with OperationClassification","enum":["node","react","package","operation","internal"],"type":"string"},"typeCoverage":0,"rawType":"ImportClassification","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"yiOCMGaChpYAUpfH","name":"TsVariable","slug":"ts-variable","relativePathFromProjectRoot":"/packages/sdk-db/src/index.ts","srcFileId":"/index","operationFolderName":"sdk-db","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/packages/sdk-db","operationName":"sdk-db","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"object","properties":{"relativeOperationBasePathFromProjectRoot":{"type":"string","description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript"},"relativeFilePathFromSrc":{"type":"string","description":"relative file path from the operation src\n\ne.g. general.ts"},"srcFileId":{"type":"string","description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\""},"operationName":{"type":"string","description":"operation package.json name"},"operationFolderName":{"type":"string","description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)"},"relativePathFromProjectRoot":{"type":"string","description":"relative file or folder path from the project root"},"id":{"type":"string","description":"unique id of the model"},"name":{"type":"string","description":"name (identifier) of the model"},"slug":{"type":"string","description":"kebab-case variant of the name"},"value":{"type":"string"},"classification":{"type":"string","enum":["const","var","let"]},"type":{"$ref":"#/definitions/TypeInfo"},"comments":{"type":"array","items":{"$ref":"#/definitions/TsComment"},"description":"surrounding comments and comments inside of the variable"}},"required":["classification","comments","id","name","operationFolderName","relativeFilePathFromSrc","relativeOperationBasePathFromProjectRoot","relativePathFromProjectRoot","slug","srcFileId","type","value"],"additionalProperties":false},"simplifiedSchema":{"properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"value","required":true,"schema":{"type":"string"}},{"name":"classification","required":true,"schema":{"enum":["const","var","let"],"type":"string"}},{"name":"type","required":true,"schema":{"description":"all info that should always be collected when indexing any type interface","properties":[{"name":"typeDefinition","required":false,"schema":{"properties":[{"name":"$id","required":false,"schema":{"type":"string"}},{"name":"$ref","required":false,"schema":{"type":"string"}},{"name":"$schema","required":false,"schema":{"description":"Meta schema\n\nRecommended values:\n- 'http://json-schema.org/schema#'\n- 'http://json-schema.org/hyper-schema#'\n- 'http://json-schema.org/draft-07/schema#'\n- 'http://json-schema.org/draft-07/hyper-schema#'","type":"string"}},{"name":"$comment","required":false,"schema":{"type":"string"}},{"name":"$defs","required":false,"schema":{"properties":[],"type":"object"}},{"name":"type","required":false,"schema":{"properties":[],"type":"object"}},{"name":"enum","required":false,"schema":{"items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"const","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"multipleOf","required":false,"schema":{"type":"number"}},{"name":"maximum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMaximum","required":false,"schema":{"type":"number"}},{"name":"minimum","required":false,"schema":{"type":"number"}},{"name":"exclusiveMinimum","required":false,"schema":{"type":"number"}},{"name":"maxLength","required":false,"schema":{"type":"number"}},{"name":"minLength","required":false,"schema":{"type":"number"}},{"name":"pattern","required":false,"schema":{"type":"string"}},{"name":"items","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalItems","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"maxItems","required":false,"schema":{"type":"number"}},{"name":"minItems","required":false,"schema":{"type":"number"}},{"name":"uniqueItems","required":false,"schema":{"type":"boolean"}},{"name":"contains","required":false,"schema":{"circularRefName":"JSONSchema7","properties":[],"type":"object"}},{"name":"maxProperties","required":false,"schema":{"type":"number"}},{"name":"minProperties","required":false,"schema":{"type":"number"}},{"name":"required","required":false,"schema":{"items":[{"schema":{"type":"string"},"name":null}],"type":"array"}},{"name":"properties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"patternProperties","required":false,"schema":{"properties":[],"type":"object"}},{"name":"additionalProperties","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"dependencies","required":false,"schema":{"properties":[],"type":"object"}},{"name":"propertyNames","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"if","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"then","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"else","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"allOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"anyOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"oneOf","required":false,"schema":{"items":[{"schema":{"description":"JSON Schema v7","properties":[],"type":"object"},"name":"JSONSchema7Definition"}],"type":"array"}},{"name":"not","required":false,"schema":{"description":"JSON Schema v7","properties":[],"type":"object"}},{"name":"format","required":false,"schema":{"type":"string"}},{"name":"contentMediaType","required":false,"schema":{"type":"string"}},{"name":"contentEncoding","required":false,"schema":{"type":"string"}},{"name":"definitions","required":false,"schema":{"properties":[],"type":"object"}},{"name":"title","required":false,"schema":{"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"default","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}},{"name":"readOnly","required":false,"schema":{"type":"boolean"}},{"name":"writeOnly","required":false,"schema":{"type":"boolean"}},{"name":"examples","required":false,"schema":{"description":"Primitive type","properties":[],"type":"object"}}],"type":"object"}},{"name":"simplifiedSchema","required":false,"schema":{"description":"JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form","properties":[{"name":"type","required":true,"schema":{"enum":["string","number","boolean","object","array","null"],"type":"string"}},{"name":"description","required":false,"schema":{"type":"string"}},{"name":"circularRefName","required":false,"schema":{"description":"sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here","type":"string"}},{"name":"enum","required":false,"schema":{"description":"in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think","items":[{"schema":{"description":"Primitive type","properties":[],"type":"object"},"name":"JSONSchema7Type"}],"type":"array"}},{"name":"properties","required":false,"schema":{"description":"in case of object, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}},{"name":"required","required":true,"schema":{"description":"NB: can't we put this in the SimplifiedSchema itself?","type":"boolean"}}],"type":"object"},"name":"SimplifiedSchemaProperty"}],"type":"array"}},{"name":"items","required":false,"schema":{"description":"in case of arrays, this will always appear","items":[{"schema":{"properties":[{"name":"name","required":true,"schema":{"description":"name in case of it being a reference, otherwise null","type":"string"}},{"name":"schema","required":true,"schema":{"circularRefName":"SimplifiedSchema","properties":[],"type":"object"}}],"type":"object"},"name":"SimplifiedSchemaItem"}],"type":"array"}}],"type":"object"}},{"name":"isObject","required":true,"schema":{"description":"if the type is an object, this is true. false if it's an array","type":"boolean"}},{"name":"isArray","required":true,"schema":{"description":"if the type is an array, this is true","type":"boolean"}},{"name":"isPrimitive","required":true,"schema":{"description":"if it's a primitive type like \"string\", \"number\", \"boolean\", \"null\" | \"undefined\"","type":"boolean"}},{"name":"isEnum","required":true,"schema":{"description":"will be true for any primitive conjunction types","type":"boolean"}},{"name":"isEnumLiteral","required":true,"schema":{"description":"will be true for string conjunction types","type":"boolean"}},{"name":"typeCoverage","required":true,"schema":{"description":"quantification of coverage of the specified type or subtypes in our database.","type":"number"}},{"name":"rawType","required":true,"schema":{"description":"raw type string","type":"string"}}],"type":"object"}},{"name":"comments","required":true,"schema":{"description":"surrounding comments and comments inside of the variable","items":[{"schema":{"description":"comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\nspecial line prefixes:\n- TODO:\n- DISCUSSION:\n- IDEA:\n- LATER:\n- NB:\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!","properties":[{"name":"relativeOperationBasePathFromProjectRoot","required":true,"schema":{"description":"relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript","type":"string"}},{"name":"relativeFilePathFromSrc","required":true,"schema":{"description":"relative file path from the operation src\n\ne.g. general.ts","type":"string"}},{"name":"srcFileId","required":true,"schema":{"description":"file id (same as relativeFilePathFromSrc but without extension)\n\ne.g. \"general\"","type":"string"}},{"name":"operationName","required":false,"schema":{"description":"operation package.json name","type":"string"}},{"name":"operationFolderName","required":true,"schema":{"description":"operation folder name (by convention, must be identical to operationName, but it could have some mistakes)","type":"string"}},{"name":"relativePathFromProjectRoot","required":true,"schema":{"description":"relative file or folder path from the project root","type":"string"}},{"name":"id","required":true,"schema":{"description":"unique id of the model","type":"string"}},{"name":"name","required":true,"schema":{"description":"name (identifier) of the model","type":"string"}},{"name":"slug","required":true,"schema":{"description":"kebab-case variant of the name","type":"string"}},{"name":"comment","required":true,"schema":{"description":"a string that is known to contain markdown.","type":"string"}},{"name":"parameters","required":true,"schema":{"description":"TODO: either make a special category crud for the category model would be nice maybe (especially a backend that makes sure all references stay updated would be epic)","properties":[],"type":"object"}},{"name":"types","required":true,"schema":{"description":"These are the type indicators that were found in this single or multiline comment. Can be multiple.","items":[{"schema":{"enum":["todo","discussion","idea","later","nb"],"type":"string"},"name":"CommentType"}],"type":"array"}},{"name":"firstLine","required":true,"schema":{"description":"first line of the comment","type":"number"}},{"name":"lastLine","required":true,"schema":{"description":"last line of the comment","type":"number"}},{"name":"statementName","required":false,"schema":{"description":"statement name the comment belongs to","type":"string"}},{"name":"rawStatement","required":false,"schema":{"description":"raw statement text the comment belongs to","type":"string"}}],"type":"object"},"name":"TsComment"}],"type":"array"}}],"type":"object"},"typeCoverage":0,"rawType":"TsVariable","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}},{"id":"fhAZZZGUALBOLdhn","name":"DbModelEnum","slug":"db-model-enum","relativePathFromProjectRoot":"/packages/sdk-db/src/index.ts","srcFileId":"/index","operationFolderName":"sdk-db","relativeFilePathFromSrc":"/index.ts","relativeOperationBasePathFromProjectRoot":"/packages/sdk-db","operationName":"sdk-db","description":"","isDbModel":false,"commentsInside":[],"type":{"typeDefinition":{"type":"string","enum":["BundleConfig","OperationIndex","PackageJSON","TsComment","TsFunction","TsInterface","TsBuildError","TsLintWarning","TsExport","TsImport","TsVariable"]},"simplifiedSchema":{"enum":["BundleConfig","OperationIndex","PackageJSON","TsComment","TsFunction","TsInterface","TsBuildError","TsLintWarning","TsExport","TsImport","TsVariable"],"type":"string"},"typeCoverage":0,"rawType":"DbModelEnum","isArray":false,"isEnum":false,"isEnumLiteral":false,"isObject":false,"isPrimitive":false}}]