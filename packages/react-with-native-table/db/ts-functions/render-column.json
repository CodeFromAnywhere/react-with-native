{
  "createdAt": 1666261633062,
  "updatedAt": 1666261633062,
  "deletedAt": 0,
  "createdFirstAt": 1666261633062,
  "publicAuthorization": [
    "read-docs",
    "search"
  ],
  "isApiExposed": false,
  "isPostApi": false,
  "isGetApi": false,
  "isExported": false,
  "operationRelativeTypescriptFilePath": "src/Table.tsx",
  "commentsInside": [],
  "rawText": " <TModel extends { [key: string]: any }>(\n  column: ColumnType<TModel>,\n  row: TModel,\n  index: number\n) => {\n  if (column.presentationType === \"text\") {\n    const rawValue = row[column.objectParameterKey];\n\n    const value: string =\n      rawValue === undefined ? \"\" : rawValue === \"\" ? \"''\" : String(rawValue);\n    /**\n     * This is a text item that presents just one string\n     */\n    return <td className={tdClassName}>{value}</td>;\n  } else if (column.presentationType === \"referenceSingle\") {\n    // Any parameter with pattern xxxSlug or xxxId should link to that instance in the referred model (link to `db?model={model}#{id}`)\n    const referenceId: string | undefined = row[column.objectParameterKey];\n\n    const referenceParameterInfo = getReferenceParameterInfo(\n      column.objectParameterKey\n    );\n\n    return (\n      <td className={tdClassName}>\n        <a\n          href={`db?model=${referenceParameterInfo.interfaceName}&${referenceParameterInfo.keyInModel}=${referenceId}`}\n        >\n          {referenceId}\n        </a>\n      </td>\n    );\n  } else if (column.presentationType === \"referenceMultiple\") {\n    // Any parameter with pattern xxxSlugs or xxxIds should link to those instance in the referred model (link to `db?model={model}&xxx={id}`) for every instance\n    // NB: it can also be a string in case markdown storage format is used, if there is just one...\n    const referenceIds: undefined | string[] | string =\n      row[column.objectParameterKey];\n    const referenceIdsArray = referenceIds\n      ? makeArray(referenceIds)\n      : undefined;\n\n    const referenceParameterInfo = getReferenceParameterInfo(\n      column.objectParameterKey\n    );\n\n    return (\n      <td className={tdClassName}>\n        {referenceIdsArray?.map((referenceId) => {\n          return (\n            <a\n              href={`db?model=${referenceParameterInfo.interfaceName}&${referenceParameterInfo.keyInModel}=${referenceId}`}\n            >\n              {referenceId}\n            </a>\n          );\n        })}\n      </td>\n    );\n  } else {\n    return <td className={tdClassName}>Unknown Presentation Type</td>;\n  }\n}",
  "name": "renderColumn",
  "slug": "render-column",
  "parameters": [],
  "description": "",
  "returnType": {
    "rawType": "JSX.Element",
    "typeDefinition": {
      "optional": false,
      "$ref": "#/definitions/JSX.Element"
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 7,
  "size": {
    "characters": 2125,
    "lines": 61,
    "bytes": 2125,
    "bytesPerCharacter": 1,
    "charactersPerLine": 35,
    "linesPerFile": 61,
    "numberOfFiles": 1
  },
  "id": "cwminfzavcldigpkjgenjkra"
}