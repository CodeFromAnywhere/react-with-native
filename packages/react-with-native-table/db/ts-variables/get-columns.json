{
  "createdAt": 1666261633571,
  "updatedAt": 1666261633571,
  "deletedAt": 0,
  "createdFirstAt": 1666261633571,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "getColumns",
  "slug": "get-columns",
  "operationRelativeTypescriptFilePath": "src/Table.tsx",
  "type": {
    "rawType": "(modelName: string, interfaces: import(\"/Users/king/King/operations/tools/types/code-types/build/TsInterface\").TsInterface[] | undefined, data: any[]) => import(\"/Users/king/King/operations/tools/interfaces/vui/react-with-native/react-with-native-table/src/Table\").ColumnType<any>[]",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "(\n  modelName: string,\n  interfaces: TsInterface[] | undefined,\n  data: any[]\n): ColumnType<any>[] => {\n  /**\n   * needed in case something goes wrong with the index\n   */\n  const getDumbColumns = (): ColumnType<any>[] => {\n    return data[0] && typeof data[0] === \"object\"\n      ? Object.keys(data[0])\n          .map((objectParameterKey) => {\n            const value = data[0][objectParameterKey];\n            if (\n              ![\"string\", \"boolean\", \"number\", \"null\"].includes(typeof value)\n            ) {\n              return null;\n            }\n            return {\n              name: humanCase(objectParameterKey),\n              objectParameterKey,\n              presentationType: \"text\" as \"text\",\n            };\n          })\n          .filter(notEmpty)\n      : [];\n  };\n  if (!interfaces) return getDumbColumns();\n\n  const properties = interfaces.find((x) => x.name === modelName)?.type\n    .typeDefinition?.properties;\n\n  if (!properties) return getDumbColumns();\n\n  const columns: ColumnType<any>[] = Object.keys(properties)\n    .map((objectParameterKey) => {\n      const maybeProperty = properties[objectParameterKey];\n      const property =\n        typeof maybeProperty !== \"boolean\" ? maybeProperty : undefined;\n\n      if (!property) return;\n\n      if (\n        makeArray(property.type).find((x) => [\"object\", \"array\"].includes(x))\n      ) {\n        // there are arrays or objects among the type of this property\n        return;\n      }\n\n      const column: ColumnType<any> = {\n        name: humanCase(objectParameterKey),\n        objectParameterKey,\n        presentationType: \"text\",\n      };\n\n      return column;\n    })\n    .filter(notEmpty);\n  return columns;\n}",
  "description": "gets all columns you can present based on a modelname, the interfaces of that model, and the data",
  "id": "ipwbvnzpqewzxwzqjbulytgy"
}