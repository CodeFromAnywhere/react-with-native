{
  "createdAt": 1667635036772,
  "updatedAt": 1667635036772,
  "deletedAt": 0,
  "createdFirstAt": 1667635036772,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "createStore",
  "slug": "create-store",
  "operationRelativeTypescriptFilePath": "src/general.tsx",
  "type": {
    "rawType": "<K extends object>(initialValues: K) => { StoreProvider: ({ children }: { children: any; }) => JSX.Element; useStore: <K>(key: K) => import(\"/Users/king/King/operations/tools/interfaces/vui/vui-elements/react-with-native-store/src/general\").UseStoreResult<K[K]>; }",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "<K extends object>(initialValues: K) => ({\n  StoreProvider: createStoreProvider({ initialValues }),\n  useStore: createUseStore(initialValues),\n})",
  "description": "One function is all you need to make a new store!\n\nExample:\n\n\n```ts\n\nimport { createStore } from \"react-with-native-store\";\nimport { TypeA, TypeB } from \"your-types\";\n\nexport const writerInitialValues: {\nitemA: TypeA;\nitemB: TypeB;\n} = {\nitemA: \"\",\nitemB: {},\n};\nexport const { useStore, StoreProvider } = createStore(writerInitialValues);\n\n\n```\n\nSimple as pie üç∞",
  "id": "pryxlpyfiftheyqlavznsxsl"
}